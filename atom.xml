<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yahya的博客</title>
  
  <subtitle>学习笔记</subtitle>
  <link href="https://blog.yahyav2rayssr.top/atom.xml" rel="self"/>
  
  <link href="https://blog.yahyav2rayssr.top/"/>
  <updated>2023-04-18T15:31:33.478Z</updated>
  <id>https://blog.yahyav2rayssr.top/</id>
  
  <author>
    <name>Yahya</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CentOS7 基础知识</title>
    <link href="https://blog.yahyav2rayssr.top/posts/70711607/"/>
    <id>https://blog.yahyav2rayssr.top/posts/70711607/</id>
    <published>2023-04-18T15:31:33.476Z</published>
    <updated>2023-04-18T15:31:33.478Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux系统的7个运行级别-runlevel"><a href="#Linux系统的7个运行级别-runlevel" class="headerlink" title="Linux系统的7个运行级别(runlevel)"></a>Linux系统的7个运行级别(runlevel)</h1><p><strong>运行级别分为以下6种：</strong></p><p>0：系统停机状态，系统默认运行级别不能设为0，否则不能正常启动</p><p>1：单用户工作状态，root权限，用于系统维护，禁止远程登陆</p><p>2：多用户状态(没有NFS)</p><p>3：完全的多用户状态(有NFS)，登陆后进入控制台命令行模式</p><p>4：系统未使用，保留</p><p>5：X11控制台，登陆后进入图形GUI模式</p><p>6：系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动</p><blockquote><p><strong>运行级别的原理：</strong></p><ol><li>在目录&#x2F;etc&#x2F;rc.d&#x2F;init.d下有许多服务器脚本程序，一般称为服务(service)</li><li>在&#x2F;etc&#x2F;rc.d下有7个名为rcN.d的<strong>目录</strong>，对应系统的7个运行级别</li><li>rcN.d目录下都是一些符号链接文件，这些链接文件都指向init.d目录下的service脚本文件，命名规则为K+nn+服务名或S+nn+服务名，其中nn为两位数字。</li><li>系统会根据指定的运行级别进入对应的rcN.d目录，并按照文件名顺序检索目录下的链接文件<br>   对于以K开头的文件，系统将终止对应的服务<br>   对于以S开头的文件，系统将启动对应的服务</li><li>另外 init 0 为关机，init 6 为重启系统</li></ol></blockquote><h2 id="查看当前运行级别"><a href="#查看当前运行级别" class="headerlink" title="查看当前运行级别"></a>查看当前运行级别</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">runlevel<br></code></pre></td></tr></table></figure><h2 id="进入其它运行级别"><a href="#进入其它运行级别" class="headerlink" title="进入其它运行级别"></a>进入其它运行级别</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">init [级别]<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Linux系统的7个运行级别-runlevel&quot;&gt;&lt;a href=&quot;#Linux系统的7个运行级别-runlevel&quot; class=&quot;headerlink&quot; title=&quot;Linux系统的7个运行级别(runlevel)&quot;&gt;&lt;/a&gt;Linux系统的7个运行级别(r</summary>
      
    
    
    
    <category term="运维" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/"/>
    
    <category term="CentOS7" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/CentOS7/"/>
    
    
    <category term="centos7" scheme="https://blog.yahyav2rayssr.top/tags/centos7/"/>
    
  </entry>
  
  <entry>
    <title>Maven 常用命令</title>
    <link href="https://blog.yahyav2rayssr.top/posts/c718cdb9/"/>
    <id>https://blog.yahyav2rayssr.top/posts/c718cdb9/</id>
    <published>2023-04-18T15:31:33.414Z</published>
    <updated>2023-04-18T15:31:33.415Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="查看依赖树"><a href="#查看依赖树" class="headerlink" title="查看依赖树"></a>查看依赖树</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn dependency:tree<br></code></pre></td></tr></table></figure><p><strong>重定向到文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn dependency:tree &gt; tree.txt<br></code></pre></td></tr></table></figure><p><strong>使用verbose参数可以看冲突和重复的具体情况：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn dependency:tree -Dverbose &gt;tree.txt<br></code></pre></td></tr></table></figure><p>全是全了，但显示出来的东西太多，头晕目眩，有没有好法呢？当然有了，加上 <code>Dincludes</code> 或者 <code>Dexcludes</code> 说出你喜欢或讨厌，<code>dependency:tree</code> 就会帮你过滤出来，例如：</p><p><strong>方式一：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">语法</span><br>mvn dependency:tree -Dverbose -Dincludes=&lt;groudId&gt;:&lt;artifactId&gt;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">示例</span><br>mvn dependency:tree -Dverbose -Dincludes=com.alipay.common:tracer<br></code></pre></td></tr></table></figure><p><strong>方式二：</strong></p><p>也可以用这种方式来输入命令排查，会保留历史记录，下次排查直接使用历史命令即可</p><img src="/posts/c718cdb9/1cfb5b4398b45009351c383cdbca4693.png" alt="image.png" style="zoom:67%;"><h2 id="检测那些声明了但是没被使用的依赖"><a href="#检测那些声明了但是没被使用的依赖" class="headerlink" title="检测那些声明了但是没被使用的依赖"></a>检测那些声明了但是没被使用的依赖</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn dependency:analyze-only<br></code></pre></td></tr></table></figure><h2 id="分析重复定义的依赖"><a href="#分析重复定义的依赖" class="headerlink" title="分析重复定义的依赖"></a>分析重复定义的依赖</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn dependency:analyze-duplicate<br></code></pre></td></tr></table></figure><h2 id="下载指定依赖-jar-包"><a href="#下载指定依赖-jar-包" class="headerlink" title="下载指定依赖 jar 包"></a>下载指定依赖 jar 包</h2><p>命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn dependency:get -Dartifact=groupId:artifactId:version:jar:sources<br></code></pre></td></tr></table></figure><p>示例:</p><ul><li><p>下载jar包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn dependency:get -Dartifact=junit:junit:4.12:jar<br></code></pre></td></tr></table></figure></li><li><p>下载源码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn dependency:get -Dartifact=junit:junit:4.12:jar:sources<br></code></pre></td></tr></table></figure></li></ul><h2 id="指定配置文件"><a href="#指定配置文件" class="headerlink" title="指定配置文件"></a>指定配置文件</h2><p>命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn install --settings &lt;SETTINGS_FILE_LOCATION&gt;<br></code></pre></td></tr></table></figure><p>示例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shelll">mvn install --settings D:\Apache\apache-maven-3.6.3\conf\settings.xml<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;查看依赖树&quot;&gt;&lt;a href=&quot;#查看依赖树&quot; class=&quot;headerlink&quot; title=&quot;查看依赖树&quot;&gt;&lt;/a&gt;查看依赖</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.yahyav2rayssr.top/categories/Java/"/>
    
    <category term="maven" scheme="https://blog.yahyav2rayssr.top/categories/Java/maven/"/>
    
    
    <category term="maven" scheme="https://blog.yahyav2rayssr.top/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>Java 多线程设计模式</title>
    <link href="https://blog.yahyav2rayssr.top/posts/4b405cfc/"/>
    <id>https://blog.yahyav2rayssr.top/posts/4b405cfc/</id>
    <published>2023-04-18T15:31:33.363Z</published>
    <updated>2023-04-18T15:31:33.365Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多线程设计模式"><a href="#多线程设计模式" class="headerlink" title="多线程设计模式"></a>多线程设计模式</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="线程的终止"><a href="#线程的终止" class="headerlink" title="线程的终止"></a>线程的终止</h3><p>Java程序的终止是指除守护进程以外的线程全部终止。</p><h3 id="竞态条件"><a href="#竞态条件" class="headerlink" title="竞态条件"></a>竞态条件</h3><p>线程之间由于相互竞争而引起的与预期相反的情况称为数据竞争（data race）或竞态条件（race condition）。</p><h3 id="监视"><a href="#监视" class="headerlink" title="监视"></a>监视</h3><p>线程的互斥机制称为<strong>监视</strong>（monitor）。另外，获取锁有时也叫做“拥有监视”或“持有锁”。</p><p>当前线程是否已获取某一对象的锁可以通过Thread.holdsLock方法来确认。当前线程已获取对象obj的锁时，可使用assert来像下面表示出来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">assert</span> Thread.holdsLock(obj)<br></code></pre></td></tr></table></figure><h2 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h2><p>HashTable中的所有方法都采用Single Threaded Execution模式，而ConcurrentHashMap则将内部数据结构分成多段，针对各段操作的线程互不相干，因而也就无需针对其他线程执行互斥处理。这样看来，HashTable更容易发生线程冲突。</p><p><strong><code>java.util.concurrent.CocurrentHashMap</code>接口是通过分割内部数据结构防止线程冲突的Map。</strong></p><h2 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h2><p>Semaphore是一种基于计数的信号量。它可以设定一个阈值，基于此，多个线程竞争获取许可信号，做完自己的申请后归还，超过阈值后，线程申请许可信号将会被阻塞。Semaphore可以用来构建一些对象池，资源池之类的，比如数据库连接池，我们也可以创建计数为1的Semaphore，将其作为一种类似互斥锁的机制，这也叫二元信号量，表示两种互斥状态。</p><p>资源的许可个数（permits）将通过Semaphore的构造函数来确定。</p><ul><li>Semaphore的acquire方法用于确保存在可用资源。</li><li>Semephore的release方法用户释放资源。</li></ul><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Log</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printLn</span><span class="hljs-params">(String s)</span> &#123;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;: &quot;</span> + s);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BoundedResource</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Semaphore semaphore;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-keyword">permits</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>(<span class="hljs-number">314159</span>);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BoundedResource</span><span class="hljs-params">(<span class="hljs-type">int</span> <span class="hljs-keyword">permits</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.semaphore = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Semaphore</span>(<span class="hljs-keyword">permits</span>);<br>        <span class="hljs-built_in">this</span>.<span class="hljs-keyword">permits</span> = <span class="hljs-keyword">permits</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">use</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        semaphore.acquire();<br>        <span class="hljs-keyword">try</span> &#123;<br>            doUse();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            semaphore.release();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doUse</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        Log.printLn(<span class="hljs-string">&quot;BEGIN: used = &quot;</span> + (<span class="hljs-keyword">permits</span> - semaphore.availablePermits()));<br>        Thread.sleep(random.nextInt(<span class="hljs-number">500</span>));<br>        Log.printLn(<span class="hljs-string">&quot;END: used = &quot;</span> + (<span class="hljs-keyword">permits</span> - semaphore.availablePermits()));<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>(<span class="hljs-number">26344</span>);<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> BoundedResource resource;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserThread</span><span class="hljs-params">(BoundedResource resource)</span> &#123;<br>        <span class="hljs-built_in">this</span>.resource = resource;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                resource.use();<br>                Thread.sleep(random.nextInt(<span class="hljs-number">3000</span>));<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">BoundedResource</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BoundedResource</span>(<span class="hljs-number">3</span>);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserThread</span>(resource).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Before-x2F-After模式"><a href="#Before-x2F-After模式" class="headerlink" title="Before&#x2F;After模式"></a>Before&#x2F;After模式</h2><p>before&#x2F;After模式主要在于finally的引入。</p><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span> &#123;<br>    lock();<br>    <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">//业务逻辑</span><br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        unlock();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ThreadFactory"><a href="#ThreadFactory" class="headerlink" title="ThreadFactory"></a>ThreadFactory</h2><p>ThreadFactory翻译过来是线程工厂，顾名思义，就是用来创建线程的，它用到了工厂模式的思想。它通常和线程池一起使用，主要用来控制创建新线程时的一些行为，比如设置线程的优先级，名字等等。</p><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ThreadFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> Executors.defaultThreadFactory();<br>        factory.newThread(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Printer</span>(<span class="hljs-string">&quot;Nice!&quot;</span>)).start();<br>        factory.newThread(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Printer</span>(<span class="hljs-string">&quot;Bitch!&quot;</span>)).start();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Good&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>单线程程序中使用synchronized方法并不会破坏程序的安全性。但是，调用synchronized方法要比调用一般方法花费时间，这会稍微降低程序性能。</p></blockquote><blockquote><p>long，double的赋值和引用操作并不是原子的。总结如下：</p><ul><li>基本类型、引用类型的赋值和引用是原子操作。</li><li>long和double的赋值和引用是非原子操作。</li><li>long或double在线程间共享时，需要将其放入synchronized中操作，或者声明为volatile。</li></ul></blockquote><blockquote><p>字符串和实例表达式通过运算符“+”连接时，程序会自动调用实例表达式的toString()方法。</p></blockquote><blockquote><p>Thread.yield并不会释放锁。</p></blockquote><h2 id="Single-Threaded-Execution模式"><a href="#Single-Threaded-Execution模式" class="headerlink" title="Single Threaded Execution模式"></a>Single Threaded Execution模式</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>Single Threaded Execution模式主要是用于确保同一时间内只能让一个线程执行处理，说通俗点就是对synchronized的标准化使用方式，这是比较基础的。</p><h3 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h3><p>Single Threaded Execution 模式的角色如下：</p><p>SharedResource(共享资源)参与者<br> SharedResource就是多线线程会同时访问的资源类，该类通常具有2类方法：<br> ①SafeMethod——从多个线程同时调用也不会发生问题的方法<br> ②UnsafeMethod——从多个线程同时调用会发生问题，这类方法需要加以防护，指定只能由单线程访问区域，即临界区（critical section）。</p><img src="/posts/4b405cfc/37.jpg" style="zoom:67%;"><h2 id="Immutable模式"><a href="#Immutable模式" class="headerlink" title="Immutable模式"></a>Immutable模式</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>Immutable是“永恒的”“不会改变”的意思。在Immutable Patttern中，有着能够保证实例状态绝不会改变的类（immutable 类）。因为访问这个实例时，可以省去使用共享互斥机制所会浪费的时间，提高系统性能。java.lang.String就是一个Immutable的类。</p><p><strong>模式讲解</strong></p><ul><li>Immutable(不变的)参与者<br>Immutable参与者是一个字段值无法更改的类，也没有任何用来更改字段值的方法。当Immutable参与者的实例建立后，状态就完全不再变化。</li></ul><img src="/posts/4b405cfc/38.jpg" style="zoom: 80%;"><blockquote><p>即便字段是final字段，且不存在setter方法，也有可能不是不可变的。因为即使字段的值不会发生变化，字段引用的实例也有可能会发生变化。</p></blockquote><p>Java标准类库中用到immutable模式</p><ul><li>java.lang.String</li><li>java.math.BigInteger 和 java.math.BigDecimal。（BigInterger表示所有精度的整数，BigDecimal表示所有精度的数）</li><li>java.util.regex.Pattern 正则表达式</li><li>java.lang.Integer等基本类型的包装类</li><li>java.awt.Color</li></ul><blockquote><p>java.lang.Void类不同于其他的包装类，它无法创建实例。该类用于保存表示基本类型void的Class类的实例，用在反射和序列化中。</p></blockquote><h2 id="Guarded-Suspension模式"><a href="#Guarded-Suspension模式" class="headerlink" title="Guarded Suspension模式"></a>Guarded Suspension模式</h2><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><p>guarded是“被保护着的”、“被防卫着的”意思，suspension则是“暂停”的意思。当现在并不适合马上执行某个操作时，就要求想要执行该操作的线程等待。</p><h3 id="模式讲解"><a href="#模式讲解" class="headerlink" title="模式讲解"></a>模式讲解</h3><p>角色：<br> Guarded Suspension Pattern 的角色如下：</p><ul><li>GuardedObject  (被防卫的对象)参与者<br> GuardedObject 参与者是一个拥有被防卫的方法（guardedMethod）的类。当线程执行guardedMethod时，只要满足警戒条件，就能继续执行，否则线程会进入wait  set区等待。警戒条件是否成立随着GuardedObject的状态而变化。<br> GuardedObject 参与者除了guardedMethod外，可能还有用来更改实例状态的的方法stateChangingMethod。</li></ul><p>在Java语言中，是使用while语句和wait方法来实现guardedMethod的；使用notify&#x2F;notifyAll方法实现stateChangingMethod。如案例中的RequestQueue 类。</p><img src="/posts/4b405cfc/39.jpg" style="zoom:67%;"><h2 id="Balking模式"><a href="#Balking模式" class="headerlink" title="Balking模式"></a>Balking模式</h2><h3 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h3><ol><li>我正坐在餐馆中，合计着吃点什么。想好之后，我举起手示意服务员点菜。于是，看到我举手的服务员就向我走来点菜。这时，另一位服务员也看到我举手示意了，但他看到已经有一位服务员走向了我，所以就没有再过来。</li><li>如果现在不适合执行这个操作，或者没必要执行这个操作，就停止处理，直接返回——这就是Balking模式。</li><li>所谓Balk，就是 “停止并返回” 的意思。</li><li>Balking 模式与Guarded Suspension模式一样，也存在守护条件。在Balking模式中，如果守护条件不成立，则立即中断处理。这与Guarded Suspension模式有所不同，因为Guarded Suspension模式是一直等待至可以运行。</li></ol><h3 id="模式详解"><a href="#模式详解" class="headerlink" title="模式详解"></a>模式详解</h3><p>角色：</p><p>GuardedObject（被防护的对象）</p><ol><li>GuardedObject角色是一个拥有被防护的方法（guardedMethod）的类。当线程执行guardedMethod方法时，若守护条件成立，则执行实际的处理。而当守护条件不成立时，则不执行实际的处理，直接返回。守护条件的成立与否，会随着GuardedObject角色的状态变化而发生变化。</li><li>除了guardedMethod之外，GuardedObject角色还有可能有其他来改变状态的方法（stateChangingMethod）。</li></ol><p>类图：</p><img src="/posts/4b405cfc/46.png" style="zoom: 67%;"><img src="/posts/4b405cfc/47.jpg" class><blockquote><p>状态仅变化一次的变量，我们通常称为闭锁（latch，门闩）。这个门闩一旦插上，就再也打不开了</p></blockquote><p>在守护条件成立之前等待一段时间，如果到时条件还未成立，则直接balk。我们将这种处理称为guarded timed 或timeout。</p><p>在java中，我们使用if来检查守护条件。balk处理的执行则是使用return从方法中退出，或者使用throw抛出异常。守护条件的检查处理则是使用synchronized放在临界区中。</p><h3 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileWriter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.Writer;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Data</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String filename;<br>    <span class="hljs-keyword">private</span> String content;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> changed;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Data</span><span class="hljs-params">(String filename, String content)</span> &#123;<br>        <span class="hljs-built_in">this</span>.filename = filename;<br>        <span class="hljs-built_in">this</span>.content = content;<br>        <span class="hljs-built_in">this</span>.changed = <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//修改了数据内容</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">change</span><span class="hljs-params">(String newContent)</span> &#123;<br>        content = newContent;<br>        changed = <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//若数据修改过，则保存到文件中</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-keyword">if</span> (!changed) &#123;<br>            <span class="hljs-comment">//如果没有修改，就不保存了</span><br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        doSave();<br>        changed = <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//将数据内容保存到文件中</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSave</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; calls doSave, content =&quot;</span> + content);<br>        <span class="hljs-type">Writer</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(filename);<br>        writer.write(content);<br>        writer.close();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChangerThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Data data;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ChangerThread</span><span class="hljs-params">(String name, Data data)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name);<br>        <span class="hljs-built_in">this</span>.data = data;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-literal">true</span>; i++) &#123;<br>                data.change(<span class="hljs-string">&quot;NO.&quot;</span> + i);<span class="hljs-comment">//修改数据</span><br>                Thread.sleep(random.nextInt(<span class="hljs-number">1000</span>));<span class="hljs-comment">//执行其他操作</span><br>                data.save();<span class="hljs-comment">//显示的保存,用户自己点击保存</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SaverThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Data data;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SaverThread</span><span class="hljs-params">(String name, Data data)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name);<br>        <span class="hljs-built_in">this</span>.data = data;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                data.save();<span class="hljs-comment">//要求保存数据</span><br>                Thread.sleep(<span class="hljs-number">1000</span>);<span class="hljs-comment">//休眠约一秒</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Data</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Data</span>(<span class="hljs-string">&quot;data.txt&quot;</span>, <span class="hljs-string">&quot;(empty)&quot;</span>);<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangerThread</span>(<span class="hljs-string">&quot;ChangeThread&quot;</span>, data).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">SaverThread</span>(<span class="hljs-string">&quot;SaverThread&quot;</span>, data).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="java-util-cocurrent中的超时"><a href="#java-util-cocurrent中的超时" class="headerlink" title="java.util.cocurrent中的超时"></a>java.util.cocurrent中的超时</h3><h4 id="通过异常通知超时"><a href="#通过异常通知超时" class="headerlink" title="通过异常通知超时"></a>通过异常通知超时</h4><p>当发生超时抛出异常时，返回值并不适合用于表示超时，需要使用java.util.concurrent.TimeoutException异常。</p><ul><li><strong>java.util.concurrent.Future接口的get方法</strong></li><li><strong>java.util.concurrent.Exchanger类的exchange方法</strong></li><li><strong>java.util.concurrent.Cyclicarrier类的await方法</strong></li><li><strong>java.util.concurrent.CountDownLatch类的await方法</strong></li></ul><h4 id="通过返回值通知超时"><a href="#通过返回值通知超时" class="headerlink" title="通过返回值通知超时"></a>通过返回值通知超时</h4><p>当执行多次try时，则不使用异常，而是使用返回值来表示超时。</p><ul><li><p><strong>java.util.concurrent.BlockingQueue接口</strong></p><p>当offer方法的返回值为false，或poll方法的返回值为null时，表示发生了超时。</p></li><li><p><strong>java.util.concurrent.Semaphore类</strong></p><p>当tryAcquire方法的返回值为false时，表示发生了超时。</p></li><li><p><strong>java.util.concurrent.locks.lock接口</strong></p><p>当tryLock方法的返回值为false时，表示发生了超时。</p></li></ul><h2 id="Producer-Consumer模式"><a href="#Producer-Consumer模式" class="headerlink" title="Producer-Consumer模式"></a>Producer-Consumer模式</h2><h3 id="定义-4"><a href="#定义-4" class="headerlink" title="定义"></a>定义</h3><p>Producer-Consumer Pattern就是生产者-消费者模式。<br>生产者和消费者在为不同的处理线程，生产者必须将数据安全地交给消费者，消费者进行消费时，如果生产者还没有建立数据，则消费者需要等待。<br>一般来说，可能存在多个生产者和消费者，不过也有可能生产者和消费者都只有一个，当双方都只有一个时，我们也称之为Pipe模式。</p><h3 id="模式讲解-1"><a href="#模式讲解-1" class="headerlink" title="模式讲解"></a>模式讲解</h3><p>Producer-Consumer模式的角色如下：</p><ul><li>Data(数据)参与者<br>Data代表了实际生产或消费的数据。</li><li>Producer(生产者)参与者<br>Producer会创建Data，然后传递给Channel参与者。</li><li>Consumer(消费者)参与者<br>Consumer从Channel参与者获取Data数据，进行处理。</li><li>Channel(通道)参与者<br>Channel从Producer参与者处接受Data参与者，并保管起来，并应Consumer参与者的要求，将Data参与者传送出去。为确保安全性，Producer参与者与Consumer参与者要对访问共享互斥。</li></ul><img src="/posts/4b405cfc/48.jpg" class><blockquote><p>在Swing（JFC）框架中，事件处理部分使用的就是这种方法（多个Producer角色对应一个Comsumer角色）。执行Swing事件处理的线程称为事件分发线程。这个线程相当于从Channel角色的事件队列取出事件并进行处理的Comsumer角色。事件分发线程只有一个。</p></blockquote><h3 id="示例代码-2"><a href="#示例代码-2" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">concurrent</span>.<span class="hljs-property">ArrayBlockingQueue</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用 queue</span><br><span class="hljs-comment"> */</span><br>public <span class="hljs-keyword">class</span> <span class="hljs-title class_">BlockingQueueTable</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">ArrayBlockingQueue</span>&lt;<span class="hljs-title class_">String</span>&gt; &#123;<br><br>    public <span class="hljs-title class_">BlockingQueueTable</span>(int size) &#123;<br>        <span class="hljs-variable language_">super</span>(size);<br>    &#125;<br><br>    public <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span>(final <span class="hljs-title class_">String</span> cakeName) throws <span class="hljs-title class_">InterruptedException</span> &#123;<br>        <span class="hljs-variable language_">super</span>.<span class="hljs-title function_">put</span>(cakeName);<br>    &#125;<br><br>    public <span class="hljs-title class_">String</span> <span class="hljs-title function_">take</span>() throws <span class="hljs-title class_">InterruptedException</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">super</span>.<span class="hljs-title function_">take</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> BlockingQueueTable 可以被这个替换</span><br><span class="hljs-comment"> */</span><br>public <span class="hljs-keyword">class</span> <span class="hljs-title class_">Table</span> &#123;<br><br>    private <span class="hljs-title class_">String</span>[] cakeArray;<br><br>    private int head;<br><br>    private int tail;<br><br>    private int count;<br><br>    private final int size;<br><br>    public <span class="hljs-title class_">Table</span>(int size) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">size</span> = size;<br>        cakeArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[size];<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">tail</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span> = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    public synchronized <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span>(final <span class="hljs-title class_">String</span> cakeName) throws <span class="hljs-title class_">InterruptedException</span> &#123;<br>        <span class="hljs-keyword">while</span> (count &gt;= size) &#123;<br>            <span class="hljs-title function_">wait</span>();<br>        &#125;<br><br>        cakeArray[tail] = cakeName;<br>        count++;<br>        tail = (tail + <span class="hljs-number">1</span>) % size;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-title class_">Thread</span>.<span class="hljs-title function_">currentThread</span>().<span class="hljs-title function_">getName</span>() + <span class="hljs-string">&quot; put cake &quot;</span> + cakeName);<br><br>        <span class="hljs-title function_">notifyAll</span>();<br>    &#125;<br><br>    public synchronized <span class="hljs-title class_">String</span> <span class="hljs-title function_">take</span>() throws <span class="hljs-title class_">InterruptedException</span> &#123;<br>        <span class="hljs-keyword">while</span> (count &lt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-title function_">wait</span>();<br>        &#125;<br><br>        <span class="hljs-title class_">String</span> result = cakeArray[head];<br>        head = (head + <span class="hljs-number">1</span>) % size;<br>        count--;<br><br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-title class_">Thread</span>.<span class="hljs-title function_">currentThread</span>().<span class="hljs-title function_">getName</span>() + <span class="hljs-string">&quot; take cake &quot;</span> + result);<br>        <span class="hljs-title function_">notifyAll</span>();<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">Random</span>;<br><br>public <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConsumerCakeThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Thread</span> &#123;<br><br>    private <span class="hljs-title class_">String</span> name;<br><br>    private final <span class="hljs-title class_">Table</span> table;<br><br>    public <span class="hljs-title class_">ConsumerCakeThread</span>(<span class="hljs-title class_">String</span> name, <span class="hljs-title class_">Table</span> table) &#123;<br>        <span class="hljs-variable language_">super</span>(name);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">table</span> = table;<br>    &#125;<br><br>    @<span class="hljs-title class_">Override</span><br>    public <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title class_">Random</span> random = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>(1000L);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-title class_">Thread</span>.<span class="hljs-title function_">sleep</span>(random.<span class="hljs-title function_">nextInt</span>(<span class="hljs-number">1000</span>));<br>                table.<span class="hljs-title function_">take</span>();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">InterruptedException</span> e) &#123;<br>            e.<span class="hljs-title function_">printStackTrace</span>();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">Random</span>;<br><br>public <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProducerCakeThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Thread</span> &#123;<br><br>    private final <span class="hljs-title class_">Table</span> table;<br><br>    private <span class="hljs-keyword">static</span> int id = <span class="hljs-number">0</span>;<br><br>    public <span class="hljs-title class_">ProducerCakeThread</span>(<span class="hljs-title class_">String</span> name, <span class="hljs-title class_">Table</span> table) &#123;<br>        <span class="hljs-variable language_">super</span>(name);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">table</span> = table;<br>    &#125;<br><br>    @<span class="hljs-title class_">Override</span><br>    public <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title class_">Random</span> random = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>(1000L);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-title class_">String</span> cakeName = <span class="hljs-title function_">getName</span>() + <span class="hljs-string">&quot;-&quot;</span> + <span class="hljs-title function_">genId</span>();<br>                <span class="hljs-title class_">Thread</span>.<span class="hljs-title function_">sleep</span>(random.<span class="hljs-title function_">nextInt</span>(<span class="hljs-number">1000</span>));<br>                table.<span class="hljs-title function_">put</span>(cakeName);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">InterruptedException</span> e) &#123;<br>            e.<span class="hljs-title function_">printStackTrace</span>();<br>        &#125;<br>    &#125;<br><br>    private <span class="hljs-keyword">static</span> synchronized int <span class="hljs-title function_">genId</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> id++;<br>    &#125;<br>&#125;<br><br>public <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br><br>    public <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>) &#123;<br>        <span class="hljs-title class_">Table</span> table = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Table</span>(<span class="hljs-number">3</span>);<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConsumerCakeThread</span>(<span class="hljs-string">&quot;ConsumerCake&quot;</span>, table).<span class="hljs-title function_">start</span>();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProducerCakeThread</span>(<span class="hljs-string">&quot;ProducerCake&quot;</span>, table).<span class="hljs-title function_">start</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Read-Write-Lock模式"><a href="#Read-Write-Lock模式" class="headerlink" title="Read-Write Lock模式"></a>Read-Write Lock模式</h2><h3 id="定义-5"><a href="#定义-5" class="headerlink" title="定义"></a>定义</h3><p>Read-Write Lock Pattern将读取与写入分开处理，在读取数据之前必须获取用来读取的锁定，而写入的时候必须获取用来写入的锁定。因为读取时实例的状态不会改变，所以多个线程可以同时读取；但是，写入会改变实例的状态，所以当有一个线程写入的时候，其它线程既不能读取与不能写入。</p><h3 id="模式详解-1"><a href="#模式详解-1" class="headerlink" title="模式详解"></a>模式详解</h3><p>Read-Write Lock模式的角色如下：</p><ul><li><strong>Reader(读取者)参与者</strong><br>Reader参与者会对SharedResource进行读。</li><li><strong>Writer(写入者)参与者</strong><br>Writer参与者会对SharedResource进行写。</li><li><strong>SharedResource(共享资源)参与者</strong><br>SharedResource代表Reader和Writer所共享的资源对象，SharedResource提供不改变内部状态的read操作，以及会改变内部状态的write操作。</li><li><strong>ReadWriteLock(读写锁)参与者</strong><br>ReadWriteLock提供了对SharedResource参与者进行read操作和write操作时需要的锁定。</li></ul><img src="/posts/4b405cfc/49.jpg" class><img src="/posts/4b405cfc/50.jpg" class><p>总结<br>SharedResource角色提供了read和write两个操作。read不会改变其状态，而write会，当Reader角色在read时，Writer角色必须等，而当Writer角色正在write时，Reader角色和其他Writer角色也必须等待。于是引入了ReadWriteLock角色，该角色提供分别用于read和write的锁，来执行上述的互斥处理，这样，确保了SharedResource角色的安全性，当read操作特别繁重时，程序性能能大大提高，在实现时，必须充分考虑执行互斥处理时采用的Guarded Suspension模式的守护条件。使用finally防止忘记释放锁，这就是Read Write Lock模式。</p><h3 id="示例代码-3"><a href="#示例代码-3" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Data</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">char</span>[] buffer;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantReadWriteLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantReadWriteLock</span>(<span class="hljs-literal">true</span>); <span class="hljs-comment">//这个其实是java.util.concurrent.locks写好的读写锁类,可以直接调用 不用自己写啦.</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Lock</span> <span class="hljs-variable">readLock</span> <span class="hljs-operator">=</span> lock.readLock(); <span class="hljs-comment">// 读锁</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Lock</span> <span class="hljs-variable">writeLock</span> <span class="hljs-operator">=</span> lock.writeLock(); <span class="hljs-comment">// 写锁</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ReadWriteLock</span> <span class="hljs-variable">readWriteLock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReadWriteLock</span>();<span class="hljs-comment">//我们自己实现的读写锁类</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Data</span><span class="hljs-params">(<span class="hljs-type">int</span> size)</span> &#123;<br>        <span class="hljs-built_in">this</span>.buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[size];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; buffer.length; i++) &#123;<br>            buffer[i] = <span class="hljs-string">&#x27;*&#x27;</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">char</span>[] read() <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        readWriteLock.readLock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> doRead();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            readWriteLock.unReadLock();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(<span class="hljs-type">char</span> c)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        readWriteLock.writeLock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            doWrite(c);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            readWriteLock.unWriteLock();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">char</span>[] doRead() &#123;<br>        <span class="hljs-type">char</span>[] newbuf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[buffer.length];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; newbuf.length; i++) &#123;<br>            newbuf[i] = buffer[i];<br>        &#125;<br>        slowly();<br>        <span class="hljs-keyword">return</span> newbuf;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">slowly</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">50</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            <span class="hljs-comment">// TODO Auto-generated catch block</span><br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doWrite</span><span class="hljs-params">(<span class="hljs-type">char</span> c)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; buffer.length; i++) &#123;<br>            buffer[i] = c;<br>            slowly();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReaderThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Data data;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ReaderThread</span><span class="hljs-params">(Data data)</span> &#123;<br>        <span class="hljs-built_in">this</span>.data = data;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-type">char</span>[] read = data.read();<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; reads &quot;</span> + String.valueOf(read));<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> handle exception</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WriterThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Data data;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String filler;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">WriterThread</span><span class="hljs-params">(Data data, String filler)</span> &#123;<br>        <span class="hljs-built_in">this</span>.data = data;<br>        <span class="hljs-built_in">this</span>.filler = filler;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> nextchar();<br>                data.write(c);<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; write &quot;</span> + c);<br>                Thread.sleep(random.nextInt(<span class="hljs-number">3000</span>));<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> handle exception</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">char</span> <span class="hljs-title function_">nextchar</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> filler.charAt(index);<br>        index++;<br>        <span class="hljs-keyword">if</span> (index &gt;= filler.length()) &#123;<br>            index = <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> c;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReadWriteLock</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">readingReaders</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 正在读取的线程数量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">writingWriters</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 正在写入的线程数量</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readLock</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">while</span> (writingWriters &gt; <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 如果有线程在执行写入,等待.</span><br>            wait();<br>        &#125;<br>        readingReaders++;  <span class="hljs-comment">// 实际在读取的线程+1</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unReadLock</span><span class="hljs-params">()</span> &#123;<br>        readingReaders--;  <span class="hljs-comment">// 实际读取线程-1</span><br>        notifyAll();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeLock</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">while</span> (writingWriters &gt; <span class="hljs-number">0</span> || readingReaders &gt; <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 如果有线程正在写入,或者在读取 等待</span><br>            wait();<br>        &#125;<br>        writingWriters++; <span class="hljs-comment">// 正在写入的线程+1</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unWriteLock</span><span class="hljs-params">()</span> &#123;<br>        writingWriters--; <span class="hljs-comment">// 正在写入的线程-1</span><br>        notifyAll();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Data</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Data</span>(<span class="hljs-number">10</span>);<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReaderThread</span>(data).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReaderThread</span>(data).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReaderThread</span>(data).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReaderThread</span>(data).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReaderThread</span>(data).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReaderThread</span>(data).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">WriterThread</span>(data, <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">WriterThread</span>(data, <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="ReentrantReadWriteLock特点"><a href="#ReentrantReadWriteLock特点" class="headerlink" title="ReentrantReadWriteLock特点"></a><strong>ReentrantReadWriteLock特点</strong></h3><ul><li><p>公平性</p><p>当创建ReentrantReadWriteLock类的实例时，我们可以选择锁的获取顺序是否要设为公平的。如果创建的实例是公平的，那么等待时间久的线程可以优先获取锁。</p></li><li><p>可重入性</p><p>ReentrantReadWriteLock类的锁是可重入的。也就是说，Reader角色的线程可以获取“用于写入的锁”，Writer角色的线程也可以获取“用于读取的锁”。</p></li><li><p>锁降级</p><p>ReentrantReadwriteLock类可以按如下顺序将“用于写入的锁”降级为“用于读取的锁”。</p><ul><li><p>获取用于写入的锁</p></li><li><p>获取用于读取的锁</p></li><li><p>释放用于写入的锁</p></li></ul><p>但是，“用于读取的锁”不可以升级为“用户写入的锁”。</p></li><li><p>便携方法</p><p>ReentrantReadWriteLock类提供了获取等待中的线程的个数的方法getQueueLength，以及检查是否获取了用于写入的锁的方法isWriteLocked等便携方法。</p></li></ul><h2 id="Thread-per-Message模式"><a href="#Thread-per-Message模式" class="headerlink" title="Thread-per-Message模式"></a>Thread-per-Message模式</h2><h3 id="定义-6"><a href="#定义-6" class="headerlink" title="定义"></a>定义</h3><p>Thread-Per-Message模式是说为每个请求都分配一个线程，由这个线程来执行处理，使得消息能够并发（但是注意：线程的创建是有限的，可以使用线程池来处理，超过数量则加入等待队列），这里包含两个角色，请求的提交线程和请求的执行线程。</p><h3 id="模式详解-2"><a href="#模式详解-2" class="headerlink" title="模式详解"></a>模式详解</h3><ul><li>Client（委托人）<br>Client角色会向Host角色发出请求（request），但是并不知道Host角色是如何实现该请求的。</li><li>Host<br>Host角色收到Client角色的请求（request）之后，会新创建并启动一个线程。新创建的线程将使用Helper角色来 “处理”（handle）请求。</li><li>Helper（助手）<br>Helper角色为Host角色提供请求处理的功能。Host角色创建的新线程会利用Helper角色。</li></ul><img src="/posts/4b405cfc/53.png"><img src="/posts/4b405cfc/54.jpg" style="zoom: 80%;"><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li><strong>提高响应性，缩短延迟时间</strong><br>Thread-Per-Message模式能够提高与Client角色对应的Host角色的响应性，降低延迟时间。尤其是当handle操作非常耗时，或者handle操作需要等待输入&#x2F;输出时，效果非常明显。<br>在Thread-Per-Message模式下，Host角色会启动新的线程。由于启动线程也会花费时间，所以想要提高响应性时，是否使用Thread-Per-Message模式取决于 “handle操作花费的时间” 和 “线程启动花费的时间” 之间的均衡。</li><li><strong>适用于操作顺序没有要求时</strong><br>在Thread-Per-Message模式中，handle方法并不一定是按request方法的调用顺序来执行的。因此，当操作要按某种顺序执行时，Thread-Per-Message模式并不适用。</li><li><strong>适用于不需要返回值时</strong><br>在Thread-Per-Message模式中，request方法并不会等待handle方法执行结束。所以request得不到handle的运行结果。因此，Thread-Per-Message模式适用于不需要获取返回值的情况。例如通知某个事件时。</li><li><strong>应用于服务器</strong><br>为了使服务器可以处理多个请求，我们可以使用Thread-Per-Message模式。服务器本身的线程接收客户端的请求，而这些请求的实际处理则交由其他线程来执行，服务器本身的线程则返回，去等待客户端的其他请求。</li></ol><h3 id="Factory-Method模式"><a href="#Factory-Method模式" class="headerlink" title="Factory Method模式"></a><strong>Factory Method模式</strong></h3><p>使用new创建Thread实例时，代码依赖于java.lang.Thread类。这时，我们无法控制创建线程的部分，可复用性较低。假如我们用字段threadFactory来保存ThreadFactory对象，用threadFactory.newThread(…)来替代new Thread(…)。这样一来，只要替换赋给threadFactory的ThreadFactory对象，我们便可以控制线程创建了。这就是Factory Method模式。</p><p><strong>示例代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Helper</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(<span class="hljs-type">int</span> count, <span class="hljs-type">char</span> c)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;handle begin&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; count; i++) &#123;<br>            slowly();<br>            System.out.print(c);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;handle end&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">slowly</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">100</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            <span class="hljs-comment">// TODO Auto-generated catch block</span><br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Host</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Helper</span> <span class="hljs-variable">helper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Helper</span>();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ThreadFactory threadFactory;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Host</span><span class="hljs-params">()</span> &#123;<br>        threadFactory = <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Host</span><span class="hljs-params">(ThreadFactory threadFactory)</span> &#123;<br>        <span class="hljs-built_in">this</span>.threadFactory = threadFactory;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">request</span><span class="hljs-params">(<span class="hljs-keyword">final</span> <span class="hljs-type">int</span> count, <span class="hljs-keyword">final</span> <span class="hljs-type">char</span> c)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;request begin [&quot;</span> + count + <span class="hljs-string">&quot;, &quot;</span> + c + <span class="hljs-string">&quot;] begin&quot;</span>);<br>        threadFactory.newThread(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                helper.handle(count, c);<br>            &#125;<br>        &#125;).start();<br>        System.out.println(<span class="hljs-string">&quot;request begin [&quot;</span> + count + <span class="hljs-string">&quot;, &quot;</span> + c + <span class="hljs-string">&quot;] end&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;main begin&quot;</span>);<br><br>        <span class="hljs-type">ThreadFactory</span> <span class="hljs-variable">threadFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadFactory</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Thread <span class="hljs-title function_">newThread</span><span class="hljs-params">(Runnable r)</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r);<br>            &#125;<br>        &#125;;<br>        <span class="hljs-type">Host</span> <span class="hljs-variable">host</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Host</span>(threadFactory);<br>        host.request(<span class="hljs-number">10</span>, <span class="hljs-string">&#x27;A&#x27;</span>);<br>        host.request(<span class="hljs-number">20</span>, <span class="hljs-string">&#x27;B&#x27;</span>);<br>        host.request(<span class="hljs-number">30</span>, <span class="hljs-string">&#x27;C&#x27;</span>);<br>        System.out.println(<span class="hljs-string">&quot;main End&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="java-util-concurrent-Executor接口"><a href="#java-util-concurrent-Executor接口" class="headerlink" title="java.util.concurrent.Executor接口"></a><strong>java.util.concurrent.Executor接口</strong></h3><p>Executor接口将某些“处理的执行”抽象化了，参数传入的Runnable对象表示“执行的处理”的内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Helper</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(<span class="hljs-type">int</span> count, <span class="hljs-type">char</span> c)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;handle begin&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; count; i++) &#123;<br>            slowly();<br>            System.out.print(c);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;handle end&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">slowly</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">100</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            <span class="hljs-comment">// TODO Auto-generated catch block</span><br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Host</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Helper</span> <span class="hljs-variable">helper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Helper</span>();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Executor executor;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Host</span><span class="hljs-params">(Executor executor)</span> &#123;<br>        <span class="hljs-built_in">this</span>.executor = executor;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">request</span><span class="hljs-params">(<span class="hljs-keyword">final</span> <span class="hljs-type">int</span> count, <span class="hljs-keyword">final</span> <span class="hljs-type">char</span> c)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;request begin [&quot;</span> + count + <span class="hljs-string">&quot;, &quot;</span> + c + <span class="hljs-string">&quot;] begin&quot;</span>);<br>        executor.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                helper.handle(count, c);<br>            &#125;<br>        &#125;);<br>        System.out.println(<span class="hljs-string">&quot;request begin [&quot;</span> + count + <span class="hljs-string">&quot;, &quot;</span> + c + <span class="hljs-string">&quot;] end&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;main begin&quot;</span>);<br>        <span class="hljs-type">Executor</span> <span class="hljs-variable">executor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Executor</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">(Runnable r)</span> &#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r).start();<br>            &#125;<br>        &#125;;<br>        <span class="hljs-type">Host</span> <span class="hljs-variable">host</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Host</span>(executor);<br>        host.request(<span class="hljs-number">10</span>, <span class="hljs-string">&#x27;A&#x27;</span>);<br>        host.request(<span class="hljs-number">20</span>, <span class="hljs-string">&#x27;B&#x27;</span>);<br>        host.request(<span class="hljs-number">30</span>, <span class="hljs-string">&#x27;C&#x27;</span>);<br>        System.out.println(<span class="hljs-string">&quot;main End&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="java-util-concurrent-ExecutorService接口"><a href="#java-util-concurrent-ExecutorService接口" class="headerlink" title="java.util.concurrent.ExecutorService接口"></a><strong>java.util.concurrent.ExecutorService接口</strong></h4><p>ExecutorService接口对可以反复execute的服务进行了抽象化。线程一直在后台运行着，每当调用execute方式时，在ExecutorService接口后面，线程是一直在运行着，所以ExecutorService接口<strong>提供了shutdown方法</strong>来结束服务。</p><p><strong>示例代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;main begin&quot;</span>);<br>        <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">executorService</span> <span class="hljs-operator">=</span> Executors.newCachedThreadPool();<br>        <span class="hljs-type">Host</span> <span class="hljs-variable">host</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Host</span>(executorService);<br>        <span class="hljs-keyword">try</span> &#123;<br>            host.request(<span class="hljs-number">10</span>, <span class="hljs-string">&#x27;A&#x27;</span>);<br>            host.request(<span class="hljs-number">20</span>, <span class="hljs-string">&#x27;B&#x27;</span>);<br>            host.request(<span class="hljs-number">30</span>, <span class="hljs-string">&#x27;C&#x27;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            executorService.shutdown();<br>            System.out.println(<span class="hljs-string">&quot;main End&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>java.util.concurrent.ScheduledExecutorService类</strong></p><p>java.util.concurrent.ScheduledExecutorService接口是ExecutorService的子接口，用于推迟操作的执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Helper</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(<span class="hljs-type">int</span> count, <span class="hljs-type">char</span> c)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;handle begin&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; count; i++) &#123;<br>            slowly();<br>            System.out.print(c);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;handle end&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">slowly</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">100</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            <span class="hljs-comment">// TODO Auto-generated catch block</span><br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Host</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Helper</span> <span class="hljs-variable">helper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Helper</span>();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ScheduledExecutorService scheduledExecutorService;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Host</span><span class="hljs-params">(ScheduledExecutorService scheduledExecutorService)</span> &#123;<br>        <span class="hljs-built_in">this</span>.scheduledExecutorService = scheduledExecutorService;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">request</span><span class="hljs-params">(<span class="hljs-keyword">final</span> <span class="hljs-type">int</span> count, <span class="hljs-keyword">final</span> <span class="hljs-type">char</span> c)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;request begin [&quot;</span> + count + <span class="hljs-string">&quot;, &quot;</span> + c + <span class="hljs-string">&quot;] begin&quot;</span>);<br>        scheduledExecutorService.schedule(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                helper.handle(count, c);<br>            &#125;<br>        &#125;, <span class="hljs-number">3L</span>, TimeUnit.SECONDS);<br>        System.out.println(<span class="hljs-string">&quot;request begin [&quot;</span> + count + <span class="hljs-string">&quot;, &quot;</span> + c + <span class="hljs-string">&quot;] end&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;main begin&quot;</span>);<br>        <span class="hljs-type">ScheduledExecutorService</span> <span class="hljs-variable">scheduledExecutorService</span> <span class="hljs-operator">=</span> Executors.newScheduledThreadPool(<span class="hljs-number">5</span>);<br>        <span class="hljs-type">Host</span> <span class="hljs-variable">host</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Host</span>(scheduledExecutorService);<br>        <span class="hljs-keyword">try</span> &#123;<br>            host.request(<span class="hljs-number">10</span>, <span class="hljs-string">&#x27;A&#x27;</span>);<br>            host.request(<span class="hljs-number">20</span>, <span class="hljs-string">&#x27;B&#x27;</span>);<br>            host.request(<span class="hljs-number">30</span>, <span class="hljs-string">&#x27;C&#x27;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            scheduledExecutorService.shutdown();<br>            System.out.println(<span class="hljs-string">&quot;main End&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/posts/4b405cfc/55.png" style="zoom: 50%;"><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Client 角色调用Host角色的request方法发来的请求，该请求的实际处理则交给Helper的handle去执行，然而，如果Client直接从request中调用handle方法，那么直到实际操作结束之前，都无法从handle方法返回（request返回），这样一来request的响应性能就下降了，因此，Host角色会启动用于处理来自Client角色请求的新线程，并让该线程来调用handle，这样一来发出请求的线程便可以立即从handle中返回。这就是Thread-Per-Message模式。</p><h2 id="Worker-Thread模式"><a href="#Worker-Thread模式" class="headerlink" title="Worker Thread模式"></a>Worker Thread模式</h2><h3 id="定义-7"><a href="#定义-7" class="headerlink" title="定义"></a>定义</h3><p>Worker的意思是工作的人、劳动者。在Worker Thread模式中，工人线程会逐个取回工作并进行处理。当所有工作全部完成后，工人线程会等待新的工作到来。</p><p>Worker Thread模式也被称为Background Thread（背景线程）模式。另外，如果从“保存多个工人线程的场所”这一点来看，我们也可以称这种模式为Thread Pool（线程池）模式。</p><h3 id="模式详解-3"><a href="#模式详解-3" class="headerlink" title="模式详解"></a>模式详解</h3><img src="/posts/4b405cfc/57.png" style="zoom:50%;"><img src="/posts/4b405cfc/56.png" style="zoom: 50%;"><img src="/posts/4b405cfc/58.png" style="zoom:50%;"><p><strong>角色</strong></p><ul><li><p>Client（委托者）</p><p>Client角色创建表示工作请求的Request角色并将其传递给Channel角色。在示例程序中，由ClientThread类扮演此角色。</p></li><li><p>Channel（通信线路）</p><p>Channel角色接受来自于Client角色的Request角色，并将其传递给Worker角色。在示例程序中，由Channel类扮演此角色。</p></li><li><p>Worker（工人）</p><p>Worker角色从Channel角色中获取Request角色，并进行工作。当一项工作完成后，它会继续去获取另外的Channel角色。在示例程序中，由WorkerThread类扮演此角色。</p></li><li><p>Request（请求）</p><p>Request角色是表示工作的角色。Request角色中保存了进行工作所必需的信息。在示例程序中，由Request角色扮演此角色。</p></li></ul><img src="/posts/4b405cfc/59.png" style="zoom:50%;"><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ul><li><p><strong>提高响应速度</strong></p><p>调用和执行分离。执行完调用处理的一方可以先继续执行其他处理，这样就可以提高响应速度。</p></li><li><p><strong>控制执行顺序（调度）</strong></p><p>如果调用和执行不可分离，那么在调用后就必须开始执行。</p><p>但是如果将调用和执行分离，执行就可以不再受调用调用顺序的制约。我们可以通过<strong>设置Request角色的优先级，并控制Channel角色将Request角色传递给Worker角色的顺序来实现上述处理。这种处理称为请求调度（scheduling）</strong>。</p></li><li><p><strong>可以取消和反复执行</strong></p><p>将调用和执行分离后，还可以实现“即使调用了也可以被取消执行”这种功能。</p><p>由于调用的是Request对象，所以既可以将Request角色保存，又可以反复的执行。</p></li><li><p><strong>通往分布式之路</strong></p><p>将调用和执行分离后，可以将负责调用的计算机与负责执行的计算机分离开来，然后通过网络将扮演Request角色的对象从一台计算机传递至另外一台计算机。</p></li></ul><h2 id="Future模式"><a href="#Future模式" class="headerlink" title="Future模式"></a>Future模式</h2><h3 id="定义-8"><a href="#定义-8" class="headerlink" title="定义"></a>定义</h3><p>Future模式是多线程开发中非常常见的一种设计模式。它的核心思想是异步调用。当我们需要调用一个函数方法时。如果这个函数执行很慢,那么我们就要进行等待。但有时候,我们可能并不急着要结果。因此,我们可以让被调用者立即返回,让他在后台慢慢处理这个请求。对于调用者来说,则可以先处理一些其他任务,在真正需要数据的场合再去尝试获取需要的数据。</p><blockquote><p>由于Future角色是”只能被赋值一次的变量“，所以可以把它看作一种闭锁（latch）。</p></blockquote><h3 id="模式详解-4"><a href="#模式详解-4" class="headerlink" title="模式详解"></a>模式详解</h3><table><thead><tr><th>名字</th><th>说明</th></tr></thead><tbody><tr><td>Main</td><td>向Host发出请求并获取数据的类</td></tr><tr><td>Host</td><td>向请求返回FutureData的实例的类</td></tr><tr><td>Data</td><td>表示访问数据的方法的接口。由FutureData和RealData实现该接口</td></tr><tr><td>FutureData</td><td>表示RealData的“提货单”的类。其他线程会创建RealData的实例。</td></tr><tr><td>RealData</td><td>表示实际数据的类。构造函数的处理会花费很长时间</td></tr></tbody></table><p><strong>类图</strong></p><img src="/posts/4b405cfc/60.png" style="zoom:50%;"><p><strong>时序图</strong></p><img src="/posts/4b405cfc/61.png" style="zoom:50%;"><p><strong>角色</strong></p><ul><li><p>Client（请求者）</p><p>Client角色向Host角色发出，并会立即接收到请求的处理结果——VirtualData角色。</p></li><li><p>Host</p><p>Host角色会创建新的线程，并开始在新线程中创建RealData角色。同时，它会将Future角色（当做VirtualData角色）返回给Client角色。</p></li><li><p>VirtualData</p><p>VirtualData角色是让Future角色和RealData角色具有一致性的角色。</p></li><li><p>RealData</p><p>RealData角色是表示真实数据的角色。</p></li><li><p>Future</p><p>Future角色是RealData角色的”提货单“，由Host角色传递给Client角色。</p></li></ul><h3 id="示例代码-4"><a href="#示例代码-4" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Data</span> &#123;<br>    String <span class="hljs-title function_">getContent</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FutureData</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Data</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">RealData</span> <span class="hljs-variable">realData</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">ready</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRealData</span><span class="hljs-params">(RealData realData)</span> &#123;<br>        <span class="hljs-keyword">if</span> (ready) &#123;<br>            <span class="hljs-keyword">return</span>; <span class="hljs-comment">// balk</span><br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;setting content = &quot;</span>+ realData.getContent());<br>        <span class="hljs-built_in">this</span>.realData = realData;<br>        <span class="hljs-built_in">this</span>.ready = <span class="hljs-literal">true</span>;<br>        notifyAll();<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getContent</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (!ready) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                wait();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> realData.getContent();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RealData</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Data</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String content;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">RealData</span><span class="hljs-params">(<span class="hljs-type">int</span> count, <span class="hljs-type">char</span> c)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;    making RealData(&quot;</span> + count + <span class="hljs-string">&quot;, &quot;</span> + c + <span class="hljs-string">&quot;) BEGIN&quot;</span>);<br>        <span class="hljs-type">char</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[count];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; count; i++) &#123;<br>            buffer[i] = c;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">100</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;    making RealData(&quot;</span> + count + <span class="hljs-string">&quot;, &quot;</span> + c + <span class="hljs-string">&quot;) END&quot;</span>);<br>        <span class="hljs-built_in">this</span>.content = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buffer);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getContent</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> content;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Host</span> &#123;<br>    <span class="hljs-keyword">public</span> Data <span class="hljs-title function_">request</span><span class="hljs-params">(<span class="hljs-keyword">final</span> <span class="hljs-type">int</span> count, <span class="hljs-keyword">final</span> <span class="hljs-type">char</span> c)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;    request(&quot;</span> + count + <span class="hljs-string">&quot;, &quot;</span> + c + <span class="hljs-string">&quot;) BEGIN&quot;</span>);<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">FutureData</span> <span class="hljs-variable">future</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureData</span>();<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-type">RealData</span> <span class="hljs-variable">realData</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RealData</span>(count, c);<br>                future.setRealData(realData);<br>            &#125;<br>        &#125;).start();<br><br>        System.out.println(<span class="hljs-string">&quot;    request(&quot;</span> + count + <span class="hljs-string">&quot;, &quot;</span> + c + <span class="hljs-string">&quot;) END&quot;</span>);<br>        <span class="hljs-keyword">return</span> future;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;main BEGIN&quot;</span>);<br>        <span class="hljs-type">Host</span> <span class="hljs-variable">host</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Host</span>();<br>        <span class="hljs-type">Data</span> <span class="hljs-variable">data1</span> <span class="hljs-operator">=</span> host.request(<span class="hljs-number">10</span>, <span class="hljs-string">&#x27;A&#x27;</span>);<br>        <span class="hljs-type">Data</span> <span class="hljs-variable">data2</span> <span class="hljs-operator">=</span> host.request(<span class="hljs-number">20</span>, <span class="hljs-string">&#x27;B&#x27;</span>);<br>        <span class="hljs-type">Data</span> <span class="hljs-variable">data3</span> <span class="hljs-operator">=</span> host.request(<span class="hljs-number">30</span>, <span class="hljs-string">&#x27;C&#x27;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;main otherJob BEGIN&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">5000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;main otherJob END&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;data1 = &quot;</span> + data1.getContent());<br>        System.out.println(<span class="hljs-string">&quot;data2 = &quot;</span> + data2.getContent());<br>        System.out.println(<span class="hljs-string">&quot;data3 = &quot;</span> + data3.getContent());<br>        System.out.println(<span class="hljs-string">&quot;main END&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="java-util-concurrent-示例程序"><a href="#java-util-concurrent-示例程序" class="headerlink" title="java.util.concurrent 示例程序"></a>java.util.concurrent 示例程序</h3><p><strong>Callable、Future、FutureTask的类图</strong></p><img src="/posts/4b405cfc/62.png" style="zoom: 67%;"><p><strong>示例程序时序图</strong></p><img src="/posts/4b405cfc/63.png" alt="image-20200705214631291" style="zoom: 50%;"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Data</span> &#123;<br>    String <span class="hljs-title function_">getContent</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FutureData</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FutureTask</span>&lt;RealData&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Data</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">FutureData</span><span class="hljs-params">(Callable&lt;RealData&gt; callable)</span> &#123;<br>        <span class="hljs-built_in">super</span>(callable);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getContent</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">string</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            get().getContent();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (ExecutionException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> string;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RealData</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Data</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String content;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">RealData</span><span class="hljs-params">(<span class="hljs-type">int</span> count, <span class="hljs-type">char</span> c)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;    making RealData(&quot;</span> + count + <span class="hljs-string">&quot;, &quot;</span> + c + <span class="hljs-string">&quot;) BEGIN&quot;</span>);<br>        <span class="hljs-type">char</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[count];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; count; i++) &#123;<br>            buffer[i] = c;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">100</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;    making RealData(&quot;</span> + count + <span class="hljs-string">&quot;, &quot;</span> + c + <span class="hljs-string">&quot;) END&quot;</span>);<br>        <span class="hljs-built_in">this</span>.content = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buffer);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getContent</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> content;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Host</span> &#123;<br>    <span class="hljs-keyword">public</span> FutureData <span class="hljs-title function_">request</span><span class="hljs-params">(<span class="hljs-keyword">final</span> <span class="hljs-type">int</span> count, <span class="hljs-keyword">final</span> <span class="hljs-type">char</span> c)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;    request(&quot;</span> + count + <span class="hljs-string">&quot;, &quot;</span> + c + <span class="hljs-string">&quot;) BEGIN&quot;</span>);<br><br>        <span class="hljs-type">FutureData</span> <span class="hljs-variable">future</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureData</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Callable</span>&lt;RealData&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> RealData <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RealData</span>(count, c);<br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-comment">// 启动一个新线程，用于创建RealData的实例。</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(future).start();<br><br>        System.out.println(<span class="hljs-string">&quot;    request(&quot;</span> + count + <span class="hljs-string">&quot;, &quot;</span> + c + <span class="hljs-string">&quot;) END&quot;</span>);<br>        <span class="hljs-keyword">return</span> future;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;main BEGIN&quot;</span>);<br>        <span class="hljs-type">Host</span> <span class="hljs-variable">host</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Host</span>();<br>        <span class="hljs-type">FutureData</span> <span class="hljs-variable">data1</span> <span class="hljs-operator">=</span> host.request(<span class="hljs-number">10</span>, <span class="hljs-string">&#x27;A&#x27;</span>);<br>        <span class="hljs-type">FutureData</span> <span class="hljs-variable">data2</span> <span class="hljs-operator">=</span> host.request(<span class="hljs-number">20</span>, <span class="hljs-string">&#x27;B&#x27;</span>);<br>        <span class="hljs-type">FutureData</span> <span class="hljs-variable">data3</span> <span class="hljs-operator">=</span> host.request(<span class="hljs-number">30</span>, <span class="hljs-string">&#x27;C&#x27;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;main otherJob BEGIN&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">5000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;main otherJob END&quot;</span>);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;data1 = &quot;</span> + data1.get().getContent());<br>            System.out.println(<span class="hljs-string">&quot;data2 = &quot;</span> + data2.get().getContent());<br>            System.out.println(<span class="hljs-string">&quot;data3 = &quot;</span> + data3.get().getContent());<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (ExecutionException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;main END&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Two-Phase-Termination模式"><a href="#Two-Phase-Termination模式" class="headerlink" title="Two-Phase Termination模式"></a>Two-Phase Termination模式</h2><h3 id="定义-9"><a href="#定义-9" class="headerlink" title="定义"></a>定义</h3><p>该模式的名字直译是“分两阶段终止”的意思，它是一种先执行完终止处理再终止线程的模式。</p><img src="/posts/4b405cfc/64.jpg" class><p>我们称线程在进行正常处理时的状态为“操作中”，在要停止该线程时，会发出“终止请求”，这样，线程不会突然终止，而是会先开始进行“打扫工作”，称为“终止处理中”，是线程终止的第一阶段。</p><p>在“终止处理中”状态下，线程不会在进行正常操作，它虽然仍在运行，但是只会进行终止处理，终止处理完成后，就会真正地终止线程，是线程终止的第二阶段。</p><p>该模式的要点如下。</p><ul><li>安全的终止线程。</li><li>必定会进行终止处理。</li><li>发出终止请求后尽快进行终止处理。</li></ul><h3 id="模式详解-5"><a href="#模式详解-5" class="headerlink" title="模式详解"></a>模式详解</h3><ul><li><p>TerminationRequester（终止请求发出者）<br>TerminationRequester角色负责向Terminator角色发出终止请求，是示例程序中的Main类。</p></li><li><p>Terminator（终止者）<br>Terminator负责接收终止请求，并实际执行终止处理，提供了表示终止请求的shutdownRequest方法。</p><p>当shutdownRequest方法被调用后，Terminator角色会在考虑了安全性的基础上，进入“终止处理中”状态，接着，当终止处理结束后，Terminator角色就会终止自己。</p></li></ul><p>Two-Phase Termination模式的类图</p><img src="/posts/4b405cfc/67.jpg" style="zoom:150%;"><blockquote><p><strong>NIO与多线程</strong></p><p>java.nio.channels.Channel接口以及实现了该接口的类群的设计中考虑了多线程的问题。</p><p>例如，当一个线程在Channel上发生I&#x2F;O阻塞的时候，其他线程可以close该Channel。这时，发生I&#x2F;O阻塞的线程会接收到AsynchronousCloseException异常。</p><p>另外，当一个线程在Channel上发生I&#x2F;O阻塞的时候，其他线程还可以interrupt该线程。这时，发生I&#x2F;O阻塞的线程会接收到ClosedByInterruptException异常。</p></blockquote><h3 id="示例代码-5"><a href="#示例代码-5" class="headerlink" title="示例代码"></a>示例代码</h3><p><strong>类图</strong></p><img src="/posts/4b405cfc/65.png" style="zoom: 50%;"><p><strong>时序图</strong></p><img src="/posts/4b405cfc/66.png" alt="image-20200705220252139" style="zoom: 50%;"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CountupThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * counter字段表示当前的计数器</span><br><span class="hljs-comment">     * shutdownRequested字段是表示是否已经发出终止请求的标志，该字段的值用于判断线程是否进入“终止处理中”状态</span><br><span class="hljs-comment">     * shutdownRequest方法是表示线程终止请求的方法，当要终止CountupThread的线程时，程序会调用该方法</span><br><span class="hljs-comment">     * 注意，shutdownRequest还调用了interrupt方法，这是为了确保程序在sleep和wait时也会被终止</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">//计数值</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> <span class="hljs-variable">counter</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">//发出终止请求后变为ture</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">shutdownRequested</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-comment">//终止请求</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shutdownRequest</span><span class="hljs-params">()</span> &#123;<br>        shutdownRequested = <span class="hljs-literal">true</span>;<br>        interrupt();<br>    &#125;<br><br>    <span class="hljs-comment">//检查是否发出了终止请求</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isShutdownRequested</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> shutdownRequested;<br>    &#125;<br><br>    <span class="hljs-comment">//线程体</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span> (!isShutdownRequested()) &#123;<br>                doWork();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            doShutdown();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//操作</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doWork</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        counter++;<br>        System.out.println(<span class="hljs-string">&quot;doWork: counter = &quot;</span> + counter);<br>        Thread.sleep(<span class="hljs-number">500</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//终止处理</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doShutdown</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;doShutdown: counter = &quot;</span> + counter);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 启动CountupThread的线程，大约10s后终止该线程</span><br><span class="hljs-comment">     * Thread类的join方法是用户等待线程终止的方法，在指定的线程终止前，join方法不会返回。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> args</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;main: Begin&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//启动线程</span><br>            <span class="hljs-type">CountupThread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CountupThread</span>();<br>            t.start();<br><br>            <span class="hljs-comment">//稍微间隔一段时间</span><br>            Thread.sleep(<span class="hljs-number">10000</span>);<br><br>            <span class="hljs-comment">//线程的终止请求</span><br>            System.out.println(<span class="hljs-string">&quot;main: shutdownRequest&quot;</span>);<br>            t.shutdownRequest();<br><br>            System.out.println(<span class="hljs-string">&quot;main: join&quot;</span>);<br><br>            <span class="hljs-comment">//等待线程终止</span><br>            t.join();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;main: End&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>java.util.concurrent.ExecutorService接口与Two-phase Termination模式</strong></p><p>ExecutorService使用了Two-phase Termination模式</p><table><thead><tr><th></th><th>isShutdown方法</th><th>isTerminated方法</th></tr></thead><tbody><tr><td>【操作中】</td><td>false</td><td>false</td></tr><tr><td>【终止处理中】</td><td>true</td><td>false</td></tr><tr><td>【终止】</td><td>true</td><td>true</td></tr></tbody></table><h3 id="捕获程序整体的终止"><a href="#捕获程序整体的终止" class="headerlink" title="捕获程序整体的终止"></a>捕获程序整体的终止</h3><h4 id="退出钩子"><a href="#退出钩子" class="headerlink" title="退出钩子"></a>退出钩子</h4><p>退出钩子是指在Java虚拟机退出时启动的线程。”java虚拟机退出时“指的是System.exit()被调用或是全部非守护线程终止时。这时，我们可以使用退出钩子来编写程序完全终止时的终止处理。</p><p>示例程序执行了以下处理：</p><ul><li>设置未捕获的异常的处理器</li><li>设置退出钩子</li><li>大约3秒后启动执行”整数除零计算“的线程</li></ul><p>执行整数除零计算后，程序会抛出java.lang.ArithmeticException异常。由于在示例程序中我们并没有捕获ArithmeticExeception，所以程序会终止。在终止前，”为捕获的异常的处理器“和”退出钩子“会被依次调用。</p><h4 id="未捕获的异常的处理器"><a href="#未捕获的异常的处理器" class="headerlink" title="未捕获的异常的处理器"></a>未捕获的异常的处理器</h4><h4 id="示例代码-6"><a href="#示例代码-6" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;main:BEGIN&quot;</span>);<br><br>        <span class="hljs-comment">// 设置未捕获的异常的处理器</span><br>        Thread.setDefaultUncaughtExceptionHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>.UncaughtExceptionHandler() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">uncaughtException</span><span class="hljs-params">(Thread t, Throwable e)</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;\n***********&quot;</span>);<br>                System.out.println(<span class="hljs-string">&quot;UncaughtExceptionHandler:BEGIN&quot;</span>);<br>                System.out.println(<span class="hljs-string">&quot;currentThread = &quot;</span> + Thread.currentThread());<br>                System.out.println(<span class="hljs-string">&quot;thread = &quot;</span> + t);<br>                System.out.println(<span class="hljs-string">&quot;exception = &quot;</span> + e);<br>                System.out.println(<span class="hljs-string">&quot;UncaughtExceptionHandler:END&quot;</span>);<br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-comment">// 设置退出钩子</span><br>        Runtime.getRuntime().addShutdownHook(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><br>                System.out.println(<span class="hljs-string">&quot;\n*************&quot;</span>);<br>                System.out.println(<span class="hljs-string">&quot;shutdown hook:BEGIN&quot;</span>);<br>                System.out.println(<span class="hljs-string">&quot;currentThread = &quot;</span> + Thread.currentThread());<br>                System.out.println(<span class="hljs-string">&quot;shutdown hook:END&quot;</span>);<br>            &#125;<br>        &#125;));<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;MyThread:BEGIN&quot;</span>);<br>                System.out.println(<span class="hljs-string">&quot;MyThread:SLEEP...&quot;</span>);<br><br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">3000</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br><br>                <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> / <span class="hljs-number">0</span>;<br><br>            <span class="hljs-comment">//    不会来到这里</span><br>                System.out.println(<span class="hljs-string">&quot;MyThread:END&quot;</span>);<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;MyThread&quot;</span>).start();<br><br>        System.out.println(<span class="hljs-string">&quot;main:END&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><ul><li><p><strong>Multiphase Cancellation 模式</strong></p><p>使用Multiphase Cancellation模式停止线程时，如果在一定时间内线程没有停止，那么程序会逐渐发出更加强硬的终止请求。</p></li><li><p><strong>Multi-Phase StartUp 模式</strong></p><p>使用Two-Phase Termination模式时，在接收到终止请求后，程序并不立即终止线程，而是先进入”终止处理中“阶段，然后安全的终止线程。</p><p>而使用Multi-Phase StartUp模式时，如果存在多个子系统，则程序会经过多个阶段启动全部系统。在该模式下，系统会定义一个整数值的运行级锁，用来表示当前哪个运行级别正处于启动中状态。</p><p>Java的Applet也使用了该模式，不过它将Multi-Phase StartUp模式缩减至了三步（即创建实例 → 调用init方法 → 调用start方法）。</p></li></ul></blockquote><h3 id="java-util-concurrent-CountDownLatch类"><a href="#java-util-concurrent-CountDownLatch类" class="headerlink" title="java.util.concurrent.CountDownLatch类"></a>java.util.concurrent.CountDownLatch类</h3><p>当我们想让某个线程等待指定的线程终止时，可以使用java.lang.Thread类的join方法。但是，由于join方法可以等待的只是”线程终止“这个一次性的操作，所以我们无法使用它实现”等待指定次数的某种操作发生“。</p><p>使用java.util.concurrent.CountDownLatch类可以实现”等待指定次数的CountDown方法被调用“这一功能。</p><h4 id="示例代码-7"><a href="#示例代码-7" class="headerlink" title="示例代码"></a><strong>示例代码</strong></h4><ul><li>准备一个进行工作的ExecutorService对象（service）</li><li>创建一个CountDownLatch类的实例（doneLatch）。在创建时将初始值TASKS传入CountDownLatch类的构造函数</li><li>调用execute方法执行（在内部启动线程）TASKS 个 MyTask</li><li><strong>调用await方法</strong>等待doneLatch的计数值变为0</li><li><strong>调用shutdown方法终止service</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTask</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> CountDownLatch doneLatch;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> context;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>(<span class="hljs-number">321234</span>);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyTask</span><span class="hljs-params">(CountDownLatch doneLatch, <span class="hljs-type">int</span> context)</span> &#123;<br>        <span class="hljs-built_in">this</span>.doneLatch = doneLatch;<br>        <span class="hljs-built_in">this</span>.context = context;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        doTask();<br>        doneLatch.countDown();<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doTask</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> Thread.currentThread().getName();<br>        System.out.println(name + <span class="hljs-string">&quot;:MyTask:BEGIN:context = &quot;</span> + context);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(random.nextInt(<span class="hljs-number">3000</span>));<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        System.out.println(name + <span class="hljs-string">&quot;:MyTask:END:context = &quot;</span> + context);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">TASKS</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>; <span class="hljs-comment">// 工作的个数</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;BEGIN&quot;</span>);<br>        <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">5</span>);<br>        <span class="hljs-type">CountDownLatch</span> <span class="hljs-variable">doneLatch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CountDownLatch</span>(TASKS);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 开始工作</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; TASKS; i++) &#123;<br>                service.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyTask</span>(doneLatch, i));<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;AWAIT&quot;</span>);<br>            <span class="hljs-comment">// 等待工作结束</span><br>            doneLatch.await();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            service.shutdown();<br>            System.out.println(<span class="hljs-string">&quot;END&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a><strong>时序图</strong></h4><img src="/posts/4b405cfc/68.png" style="zoom:50%;"><h3 id="java-util-concurrent-CyclicBarrier类"><a href="#java-util-concurrent-CyclicBarrier类" class="headerlink" title="java.util.concurrent.CyclicBarrier类"></a>java.util.concurrent.CyclicBarrier类</h3><p>CyclicBarrier可以周期性的创建出屏障。在屏障解除之前，碰到屏障的线程是无法继续前进的。屏障的解除条件是到达屏障处的线程个数达到了构造函数指定的个数。也就是说，当指定个数的线程到达屏障处后，屏障就会被解除，然后这些线程就会像听到了”预备，走“一样一起冲出去。</p><p><strong>在创建CyclicBarrier的实例时，可以指定Runnable对象。这个对象被称作”屏障操作“。每次屏障被解除后，该屏障操作都会被执行。</strong></p><h4 id="示例代码-8"><a href="#示例代码-8" class="headerlink" title="示例代码"></a>示例代码</h4><ul><li>调用doPhase(phase)方法进行第phase阶段的工作</li><li>调用await方法表示自己已经完成了第phase阶段的工作</li><li>当其他所有线程都完成了”第phase阶段的工作“后，run方法从await方法中返回并进入下个阶段的工作</li><li>当所有阶段的工作都完成后，使用doneLatch向主线程发送”工作结束“的消息。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTask</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">PHASE</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> CyclicBarrier phaseBarrier;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> CountDownLatch doneLatch;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> context;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>(<span class="hljs-number">32143</span>);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyTask</span><span class="hljs-params">(CyclicBarrier phaseBarrier, CountDownLatch doneLatch, <span class="hljs-type">int</span> context)</span> &#123;<br>        <span class="hljs-built_in">this</span>.phaseBarrier = phaseBarrier;<br>        <span class="hljs-built_in">this</span>.doneLatch = doneLatch;<br>        <span class="hljs-built_in">this</span>.context = context;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">phase</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; phase &lt; PHASE; phase++) &#123;<br>            doPhase(phase);<br>            <span class="hljs-keyword">try</span> &#123;<br>                phaseBarrier.await();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">catch</span> (BrokenBarrierException e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                doneLatch.countDown();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPhase</span><span class="hljs-params">(<span class="hljs-type">int</span> phase)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> Thread.currentThread().getName();<br>        System.out.println(name + <span class="hljs-string">&quot;:MyTask:BEGIN:context = &quot;</span> + context + <span class="hljs-string">&quot;, phase = &quot;</span> + phase);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(random.nextInt(<span class="hljs-number">3000</span>));<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        System.out.println(name + <span class="hljs-string">&quot;:MyTask:END:context = &quot;</span> + context + <span class="hljs-string">&quot;, phase = &quot;</span> + phase);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">THREADS</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>; <span class="hljs-comment">// 线程的个数</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;BEGIN&quot;</span>);<br><br>        <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(THREADS);<br><br>        <span class="hljs-comment">// 屏障被解除时的操作</span><br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">barrierAction</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;Barrier Action!&quot;</span>);<br>            &#125;<br>        &#125;;<br><br>        <span class="hljs-comment">// CyclicBarrier用于使线程步骤一致</span><br>        <span class="hljs-type">CyclicBarrier</span> <span class="hljs-variable">phaseBarrier</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CyclicBarrier</span>(THREADS, barrierAction);<br><br>        <span class="hljs-comment">// CountDownLatch用于确认工作是否结束</span><br>        <span class="hljs-type">CountDownLatch</span> <span class="hljs-variable">doneLatch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CountDownLatch</span>(THREADS);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; THREADS; i++) &#123;<br>                service.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyTask</span>(phaseBarrier, doneLatch, i));<br>            &#125;<br><br>            <span class="hljs-comment">// 等待工作结束</span><br>            System.out.println(<span class="hljs-string">&quot;AWAIT&quot;</span>);<br>            doneLatch.await();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            service.shutdown();<br>            System.out.println(<span class="hljs-string">&quot;END&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="时序图-1"><a href="#时序图-1" class="headerlink" title="时序图"></a>时序图</h4><img src="/posts/4b405cfc/69.png" alt="image-20200706000509173" style="zoom:50%;"><h2 id="Thread-Specific-Storage"><a href="#Thread-Specific-Storage" class="headerlink" title="Thread-Specific Storage"></a>Thread-Specific Storage</h2><h3 id="定义-10"><a href="#定义-10" class="headerlink" title="定义"></a>定义</h3><p>Thread-Specific Storage就是“线程独有的存储库”，该模式会对每个线程提供独有的内存空间。<br>java.lang.ThreadLocal类提供了该模式的实现，ThreadLocal的实例是一种集合（collection）架构，该实例管理了很多对象，可以想象成一个保管有大量保险箱的房间。</p><p>java.lang.ThreadLocal类的方法：</p><ul><li><p>public void set()<br>该方法会检查当前调用线程，默认以该线程的Thread.currentThread()值作为键，来保存指定的值。</p></li><li><p>public Object get()<br>该方法会检查当前调用线程，默认以该线程的Thread.currentThread()值作为键，获取保存指定的值。</p></li></ul><p>Thread-Specific Storage模式还有以下名称。</p><ul><li>Per-Thread Attribute（线程各自的属性）</li><li>Thread-Specific Data（线程特有的数据）</li><li>Thread-Specific Field（线程特有的字段）</li><li>Thread-Local Storage（线程中的局部存储空间）</li></ul><h3 id="模式详解-6"><a href="#模式详解-6" class="headerlink" title="模式详解"></a>模式详解</h3><p>java.lang.ThreadLocal是一个泛型类，可以通过参数的类型来指定要存储的对象的类型。ThreadLocal类的声明大致如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadLocal</span>&lt;T&gt; &#123;<br><span class="hljs-comment">// 存储</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(T value)</span> &#123;<br>...<br>&#125;<br><br><span class="hljs-comment">// 获取</span><br><span class="hljs-keyword">public</span> T <span class="hljs-title function_">get</span><span class="hljs-params">()</span> &#123;<br>...<br>&#125;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th>名字</th><th>说明</th></tr></thead><tbody><tr><td>TSLog</td><td>创建日志的类（实例属于各个线程所有）</td></tr><tr><td>Log</td><td>创建日志的类（分配各个线程）</td></tr><tr><td>java.lang.ThreadLocal</td><td>分配线程持有的存储空间的类</td></tr><tr><td>ClientThread</td><td>表示调用Log的线程的类</td></tr><tr><td>Main</td><td>测试程序行为的类</td></tr></tbody></table><p><strong>角色</strong></p><ul><li><p>Client（委托者）</p><p>Client角色将处理委托给TSObjectProxy角色。一个TSObjectProxy角色会被多个Client角色使用。</p></li><li><p>TSObjectProxy（线程特有的对象的代理人）</p><p>TSObjectProxy角色使用TSObjectCollection角色获取与Client角色对应的TSObject角色。接着，它将处理委托给TSObject角色。</p></li><li><p>TSObjectCollection（线程持有的对象的集合）</p><p>TSObjectCollection角色有一张Client角色与TSObject角色之间的对应表。</p></li><li><p>TSObject（线程特有的对象）</p><p>TSObject角色中保存着线程特有的信息。</p><p>TSObject角色有TSObjectCollection角色管理。<strong>TSObject角色的方法只会被单线程调用</strong>。</p></li></ul><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><img src="/posts/4b405cfc/72.png" alt="image-20200706205505663" style="zoom:50%;"><h3 id="时序图-2"><a href="#时序图-2" class="headerlink" title="时序图"></a>时序图</h3><p><strong>新创建TSObject角色</strong></p><img src="/posts/4b405cfc/73.png" alt="image-20200706205538651" style="zoom:50%;"><p><strong>多个client角色访问各自的TSObject角色</strong></p><img src="/posts/4b405cfc/74.png" alt="image-20200706205843433" style="zoom:50%;"><p><strong>示例程序类图</strong></p><img src="/posts/4b405cfc/70.png" alt="image-20200706202151734" style="zoom: 67%;"><p><strong>示例程序TimeThreads图</strong></p><img src="/posts/4b405cfc/71.png" alt="image-20200706204459127" style="zoom:50%;"><h3 id="示例代码-9"><a href="#示例代码-9" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TSLog</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-comment">// 初始化writer字段</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TSLog</span><span class="hljs-params">(String filename)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            writer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(filename));<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 写日志</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">println</span><span class="hljs-params">(String s)</span> &#123;<br>        writer.println(s);<br>    &#125;<br><br>    <span class="hljs-comment">// 关闭日志</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span> <span class="hljs-params">()</span> &#123;<br>        writer.println(<span class="hljs-string">&quot;=== Enf of log ===&quot;</span>);<br>        writer.close();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Log</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ThreadLocal&lt;TSLog&gt; tsLogCollection = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;&gt;();<br><br>    <span class="hljs-comment">// 写日志</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">println</span><span class="hljs-params">(String s)</span> &#123;<br>        getTsLog().println(s);<br>    &#125;<br><br>    <span class="hljs-comment">// 关闭日志</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> &#123;<br>        getTsLog().close();<br>    &#125;<br><br>    <span class="hljs-comment">// 获取线程持有的日志</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> TSLog <span class="hljs-title function_">getTsLog</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">TSLog</span> <span class="hljs-variable">tsLog</span> <span class="hljs-operator">=</span> tsLogCollection.get();<br><br>        <span class="hljs-keyword">if</span> (tsLog == <span class="hljs-literal">null</span>) &#123;<br>            tsLog = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TSLog</span>(Thread.currentThread().getName() + <span class="hljs-string">&quot;-log.txt&quot;</span>);<br>            tsLogCollection.set(tsLog);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> tsLog;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClientThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ClientThread</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(getName() + <span class="hljs-string">&quot; BEGIN&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            Log.println(<span class="hljs-string">&quot;i= &quot;</span> + i);<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">100</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            Log.close();<br>        &#125;<br>        System.out.println(getName() + <span class="hljs-string">&quot; END&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClientThread</span>(<span class="hljs-string">&quot;Alice&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClientThread</span>(<span class="hljs-string">&quot;Bobby&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClientThread</span>(<span class="hljs-string">&quot;Chris&quot;</span>).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>保存线程特有信息的位置</p><p>线程特有的信息”保存位置“有以下两种：</p><ul><li><p>线程外</p><p>类似于ThreadLocal这种将线程特有的信息保存在线程外部的方法称为”线程外“。</p></li><li><p>线程内</p><p>如果在线程中声明字段，该字段就是线程特有的信息。这就是在线程内保存线程特有的信息。</p></li></ul></blockquote><h3 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h3><p>与强调吞吐量相比，Thread-Specific Storage模式更看重如下所示的可复用性。</p><ol><li>不改变结构即可实现程序</li><li>没有显式地执行互斥处理，所以编程时犯错的可能性较小</li></ol><blockquote><p><strong>Thread-Specific Storage与Worker Thread模式不能结合使用。</strong></p><p>如果不能确保所有的任务都由不同的线程执行，Thread-Specific Storage模式可能就无法正确工作。这是使用java.lang.ThreadLocal时的一个重要制约条件。</p></blockquote><blockquote><p>在设计多线程角色时，根据以 [ 主体 ] 为主还是以 [ 客体 ] 为主的不同产生了以下两种方式。</p><ul><li><p>基于角色：以主体为主</p><p>所谓基于角色，一言以蔽之即”线程最伟大“的方式。</p><p>基于角色的方式即在表示线程的实例中保存进行工作所必需的信息（上下文、状态）。这样可以减少和减轻线程之间的交互信息量。一个线程会使用从其他线程接收到的信息来执行处理，改变自己的内部状态。通常，我们称这样的线程为角色。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Actor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>角色的内部状态<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>循环地从外部接收并执行任务，改变内部状态<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>基于任务：以客体为主</p><p>所谓基于任务，一言以蔽之即”任务最伟大“的方式。</p><p>基于任务的方式不在线程中保存信息（上下文、状态）。在这种方式下，这些信息不保存在线程中，而是保存在线程交互的实例中。而且，不仅是数据，连用于执行请求的方法都定义在其中。像这样在线程之交互的实例可以称为消息、请求或是命令。这里我们暂且称其为任务。由于任务中保存了足够的信息，所以任何线程执行该任务都没有问题。可以说，这是一种富任务往来于轻线程之间的方式。</p><p>使用该方式的一个典型的模式是Worker Thread模式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Task</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>进行工作所必需的信息<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>工作的处理内容<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>基于任务的示例</p><p>java.util.TimerTask是一个基于任务的类。该类实现了java.lang.Runnable，它会被java.util.Timer类调用。如果要定义一项在一定时间后进行的工作或者定期进行的工作，可以使用java.util.TimerTask类。</p><p>java.util.concurrent.FutureTask类也是一个基于任务的类。该类是Future模式的组成部分，它也实现了java.lang.Runnable。</p></blockquote><h2 id="Active-Object模式"><a href="#Active-Object模式" class="headerlink" title="Active Object模式"></a>Active Object模式</h2><h3 id="定义-11"><a href="#定义-11" class="headerlink" title="定义"></a>定义</h3><p>Active是主动的意思，因此ActiveObject就是主动对象的意思。所谓主动一般指有自己特有的线程，举例来说，java.lang.Thread类的实例就是一种主动对象。</p><p>不过，在Active Object模式中出厂的主动对象可不仅仅有自己特有的线程，它同时还具备可以从外部接收和处理异步消息并根据需要返回处理结果的特征。Active Object模式中的主动对象会通过自己特有的线程在合适的时机处理从外部接收到的异步消息。</p><p>在Active Object中，组成主动对象与许多自然人组成法人类似，即使是java语言这样没有异步消息的编程语言，也可以使用Active Object模式组成实际上能够处理异步消息的主动对象。</p><blockquote><p>在Java中，有一种与Active Object模式相关的技术叫做Remote Method Invocation（远程方法调用，RMI）。RMI是一种可以在本地调用方法，然后网络远端的计算机上执行方法的技术。为了能够在网络间传输对象，RMI使用了Java的序列化（serialization）技术。</p></blockquote><h3 id="模式详解-7"><a href="#模式详解-7" class="headerlink" title="模式详解"></a>模式详解</h3><p><strong>成员一览（粗体字为activeObject包中的public的类和接口）</strong></p><table><thead><tr><th>包</th><th>名字</th><th>说明</th></tr></thead><tbody><tr><td>无名</td><td>Main</td><td>测试程序行为的类</td></tr><tr><td>无名</td><td>MakeClientThread</td><td>发出”生成字符串“请求的线程</td></tr><tr><td>无名</td><td>DisplayClientThread</td><td>发出”显示字符串“请求的线程</td></tr><tr><td>activeObject</td><td><strong>ActiveObject</strong></td><td>定义”主动对象“的接口（API）的接口</td></tr><tr><td>activeObject</td><td><strong>ActiveObjectFactory</strong></td><td>创建”主动对象“的类</td></tr><tr><td>activeObject</td><td>Proxy</td><td>将方法调用转换为MethodRequest对象的类（实现了ActiveObject）的接口</td></tr><tr><td>activeObject</td><td>SchedulerThread</td><td>调用execute方法处理MethodRequest对象的类</td></tr><tr><td>activeObject</td><td>ActivationQueue</td><td>按顺序保存MethodRequest对象的类</td></tr><tr><td>activeObject</td><td>MethodRequest</td><td>表示请求的抽象类</td></tr><tr><td>activeObject</td><td>MakeStringRequest</td><td>makeString方法（生成字符串）对应的类。MethodRequest类的子类</td></tr><tr><td>activeObject</td><td>DisplayStringRequest</td><td>displayString方法（显示字符串）对应的类。MethodRequest类的子类</td></tr><tr><td>activeObject</td><td>Result</td><td>表示执行结果的抽象类</td></tr><tr><td>activeObject</td><td>FutureResult</td><td>在Future模式中表示执行结果的类</td></tr><tr><td>activeObject</td><td>RealResult</td><td>表示实际的执行结果的类</td></tr><tr><td>activeObject</td><td>Servant</td><td>执行实际处理的类（实现了ActiveObject接口）</td></tr></tbody></table><h4 id="角色-1"><a href="#角色-1" class="headerlink" title="角色"></a><strong>角色</strong></h4><ul><li><p>Client（委托者）</p><p>Client角色调用ActiveObject角色的方法来委托处理，它能调用的只有ActiveObject角色提供的方法。调用这些方法后，（如果ActivationQueue角色没有满）程序控制权会立即返回。</p><p>虽然client只知道ActiveObject角色，但它实际上调用的是Proxy角色。</p><p>Client角色在获取处理结果时，会调用VirtualResult角色的getResultValue方法。这里使用了Future模式模式。</p><p>在示例程序1中，由MakerClientThread类和DisplayClientThread类扮演此角色。</p></li><li><p>ActiveObject角色</p><p>ActiveObject角色定义了主动对象向Client角色提供的接口。</p><p>在示例1程序中，由ActiveObject接口扮演此角色。</p></li><li><p>Proxy（代理人）</p><p>Proxy角色负责将方法调用转换为MethodRequest角色的对象。转换后的MethodRequest角色会被传递给Scheduler角色。</p><p>Proxy角色实现了ActiveObject角色提供的接口。</p><p>调用Proxy角色的方法的是Client角色。将方法调用转换为MethodRequest角色，并传递给Scheduler角色的操作都是使用Client角色的线程进行的。</p><p>在示例1程序中，由Proxy类扮演此角色。</p></li><li><p>Scheduler</p><p>Scheduler角色负责将Proxy角色传递过来的MethodRequest角色传递给ActivationQueue角色，以及从ActivationQueue角色去除并执行MethodRequest角色这两项工作。</p><p>Client角色负责将MethodRequest角色传递给ActivationQueue角色。</p><p>而从ActivationQueue角色中取出并执行MethodRequest角色这项工作则是使用Scheduler角色自己的线程进行的。在ActiveObject模式中，<strong>只有使用Client角色和Scheduler角色时才会启动新线程。</strong></p><p>Scheduler角色会把MethodRequest角色放入ActivationQueue角色或者从ActivationQueue角色取出MethodRequest角色。因此，Scheduler角色可以判断下次要执行哪个请求。<strong>如果想实现请求调度的判断逻辑，可以将它们实现在Scheduler角色中。</strong>也正是因为如此，我们才将其命名为Scheduler。</p><p>在示例程序1中，由SchedulerThread类扮演此角色。SchedulerThread并没有进行特殊的调度，而只是执行FIFO（First In First Out）处理。</p></li><li><p>MethodRequest</p><p>MethodRequest角色是来自Client角色的请求对应的角色。MethodRequest定义了负责执行处理的Servant角色，以及负责设置返回值的Future角色和负责执行请求的方法（execute）。</p><p>MethodRequest角色为主动对象的接口赋予了对象的表象形式。</p><p>在示例程序1中，由MethodRequest类扮演此角色。</p></li><li><p>ConcreteMethodRequest</p><p>ConcreteMethodRequest角色是使MethodRequest角色与具体的方法相对应的角色。对于ActiveObject角色中定义的每个方法，会有各个类与之对应。比如MethodAlphaRequest、MethodBetaRequest…。</p><p>在示例程序1中，由MakeStringRequest类和DisplayStringRequest类扮演此角色。其中，MakeStringRequest类对应makeString方法，DisplayStringRequest类对应displayString方法。</p></li><li><p>Servant（仆人）</p><p>Servant角色负责实际地处理请求。</p><p>调用Servant角色的是Scheduler角色的线程。Scheduler角色会从ActivationQueue角色取出一个MethodRequest角色（实际上是ConcreteMethodRequest角色）并执行它。此时，Scheduler角色调用的就是Servant角色的方法。</p><p>Servant角色实现了ActiveObject角色定义的接口。</p><p>Proxy角色会将请求转换为MethodRequest角色，而Servant角色则会实际地执行该请求。Scheduler角色介于Proxy角色和Servant角色之间，负责管理按照什么顺序执行请求。</p><p>在示例程序1中，由Servant类扮演此角色。</p></li><li><p>ActivationQueue（主动队列）</p><p>ActivationQueue角色是保存MethodRequest角色的类。</p><p>调用putRequest方法的是Client角色的线程，而调用takeRequest方法的是Scheduler角色的线程。这里使用了Producer-Consumer模式。</p></li><li><p>VirtualResult（虚拟结果）</p><p>VirtualResult角色与Future角色、RealResult角色共同构成了Future模式。</p><p>Client角色在获取处理结果时会调用VirtualResult角色（实际上是Future角色）的getResultValue方法。</p><p>在示例程序1中，由Result类扮演此角色。</p></li><li><p>Future（期货）</p><p>Future角色是Client角色在获取处理时实际调用的角色。当处理结果还没有出来的时候，它会使用Guarded Suspension模式让Client角色的线程等待结果出来。</p><p>在示例程序1中，由FutureResult类扮演此角色。</p></li><li><p>RealResult（真实结果）</p><p>RealResult角色是表示处理结果的角色。Servant角色会创建一个RealResult角色作为处理结果，然后调用Future角色的setRealResult方法将其设置到Future角色中。</p><p>在示例程序1中，由RealResult类扮演此角色</p></li></ul><h4 id="示例程序1类图"><a href="#示例程序1类图" class="headerlink" title="示例程序1类图"></a><strong>示例程序1类图</strong></h4><img src="/posts/4b405cfc/75.png" style="zoom:67%;"><h4 id="示例程序1时序图"><a href="#示例程序1时序图" class="headerlink" title="示例程序1时序图"></a><strong>示例程序1时序图</strong></h4><img src="/posts/4b405cfc/76.png" style="zoom:67%;"><h4 id="示例1代码"><a href="#示例1代码" class="headerlink" title="示例1代码"></a>示例1代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ActivationQueue</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAX_METHOD_REQUEST</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> MethodRequest[] requestQueue;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> tail; <span class="hljs-comment">// 下次putRequest的位置</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> head; <span class="hljs-comment">// 下次taskRequest的位置</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> count; <span class="hljs-comment">// MethodRequest的数量</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ActivationQueue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.requestQueue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MethodRequest</span>[MAX_METHOD_REQUEST];<br>        <span class="hljs-built_in">this</span>.tail = tail;<br>        <span class="hljs-built_in">this</span>.head = head;<br>        <span class="hljs-built_in">this</span>.count = count;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">putRequest</span><span class="hljs-params">(MethodRequest request)</span> &#123;<br>        <span class="hljs-keyword">while</span> (count &gt;= requestQueue.length) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                wait();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        requestQueue[tail] = request;<br>        tail = (tail + <span class="hljs-number">1</span>) % requestQueue.length;<br>        count++;<br>        notifyAll();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> MethodRequest <span class="hljs-title function_">takeRequest</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (count &lt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                wait();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">MethodRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> requestQueue[head];<br>        head = (head + <span class="hljs-number">1</span>) % requestQueue.length;<br>        count --;<br>        notifyAll();<br>        <span class="hljs-keyword">return</span> request;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ActiveObject</span> &#123;<br>    Result&lt;String&gt; <span class="hljs-title function_">makeString</span><span class="hljs-params">(<span class="hljs-type">int</span> count, <span class="hljs-type">char</span> fillchar)</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">displayString</span><span class="hljs-params">(String string)</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ActiveObjectFactory</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ActiveObject <span class="hljs-title function_">createActiveObject</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Servant</span> <span class="hljs-variable">servant</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Servant</span>();<br>        <span class="hljs-type">ActivationQueue</span> <span class="hljs-variable">queue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActivationQueue</span>();<br>        <span class="hljs-type">SchedulerThread</span> <span class="hljs-variable">scheduler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SchedulerThread</span>(queue);<br>        <span class="hljs-type">Proxy</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(scheduler, servant);<br>        scheduler.start();<br>        <span class="hljs-keyword">return</span> proxy;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DisplayClientThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ActiveObject activeObject;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DisplayClientThread</span><span class="hljs-params">(String name, ActiveObject activeObject)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name);<br>        <span class="hljs-built_in">this</span>.activeObject = activeObject;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-literal">true</span>; i++) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">string</span> <span class="hljs-operator">=</span> Thread.currentThread().getName() + <span class="hljs-string">&quot; &quot;</span> + i;<br>                activeObject.displayString(string);<br>                Thread.sleep(<span class="hljs-number">200</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DisplayStringRequest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MethodRequest</span>&lt;Object&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String string;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DisplayStringRequest</span><span class="hljs-params">(Servant servant, String string)</span> &#123;<br>        <span class="hljs-built_in">super</span>(servant, <span class="hljs-literal">null</span>);<br>        <span class="hljs-built_in">this</span>.string = string;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">()</span> &#123;<br>        servant.displayString(string);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FutureResult</span>&lt;T&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Result</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">private</span> Result&lt;T&gt; result;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">ready</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setResult</span><span class="hljs-params">(Result&lt;T&gt; result)</span> &#123;<br>        <span class="hljs-built_in">this</span>.result = result;<br>        <span class="hljs-built_in">this</span>.ready = <span class="hljs-literal">true</span>;<br>        notifyAll();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> T <span class="hljs-title function_">getResultValue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (!ready) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                wait();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result.getResultValue();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ActiveObject</span> <span class="hljs-variable">activeObject</span> <span class="hljs-operator">=</span> ActiveObjectFactory.createActiveObject();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">MakeClientThread</span>(<span class="hljs-string">&quot;Alice&quot;</span>, activeObject).start();;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">MakeClientThread</span>(<span class="hljs-string">&quot;Bobby&quot;</span>, activeObject).start();;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">DisplayClientThread</span>(<span class="hljs-string">&quot;Chris&quot;</span>, activeObject).start();;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MakeClientThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ActiveObject activeObject;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">char</span> fillchar;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MakeClientThread</span><span class="hljs-params">(String name, ActiveObject activeObject)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name);<br>        <span class="hljs-built_in">this</span>.activeObject = activeObject;<br>        <span class="hljs-built_in">this</span>.fillchar = name.charAt(<span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-literal">true</span>; i++) &#123;<br>                Result&lt;String&gt; result = activeObject.makeString(i, fillchar);<br>                Thread.sleep(<span class="hljs-number">10</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> result.getResultValue();<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;: value = &quot;</span> + value);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MakeStringRequest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MethodRequest</span>&lt;String&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> count;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">char</span> fillchar;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MakeStringRequest</span><span class="hljs-params">(Servant servant, FutureResult&lt;String&gt; future, <span class="hljs-type">int</span> count, <span class="hljs-type">char</span> fillchar)</span> &#123;<br>        <span class="hljs-built_in">super</span>(servant, future);<br>        <span class="hljs-built_in">this</span>.count = count;<br>        <span class="hljs-built_in">this</span>.fillchar = fillchar;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">()</span> &#123;<br>        Result&lt;String&gt; result = servant.makeString(count, fillchar);<br>        future.setResult(result);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodRequest</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> Servant servant;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> FutureResult&lt;T&gt; future;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-title function_">MethodRequest</span><span class="hljs-params">(Servant servant, FutureResult&lt;T&gt; future)</span> &#123;<br>        <span class="hljs-built_in">this</span>.servant = servant;<br>        <span class="hljs-built_in">this</span>.future = future;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Proxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ActiveObject</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> SchedulerThread scheduler;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Servant servant;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Proxy</span><span class="hljs-params">(SchedulerThread scheduler, Servant servant)</span> &#123;<br>        <span class="hljs-built_in">this</span>.scheduler = scheduler;<br>        <span class="hljs-built_in">this</span>.servant = servant;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result&lt;String&gt; <span class="hljs-title function_">makeString</span><span class="hljs-params">(<span class="hljs-type">int</span> count, <span class="hljs-type">char</span> fillchar)</span> &#123;<br>        FutureResult&lt;String&gt; future = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureResult</span>&lt;&gt;();<br>        scheduler.invoke(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MakeStringRequest</span>(servant, future, count, fillchar));<br>        <span class="hljs-keyword">return</span> future;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">displayString</span><span class="hljs-params">(String string)</span> &#123;<br>        scheduler.invoke(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DisplayStringRequest</span>(servant, string));<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RealResult</span>&lt;T&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Result</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> T resultValue;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">RealResult</span><span class="hljs-params">(T result)</span> &#123;<br>        <span class="hljs-built_in">this</span>.resultValue = result;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">getResultValue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> resultValue;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Result</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> T <span class="hljs-title function_">getResultValue</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SchedulerThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ActivationQueue queue;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SchedulerThread</span><span class="hljs-params">(ActivationQueue queue)</span> &#123;<br>        <span class="hljs-built_in">this</span>.queue = queue;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invoke</span><span class="hljs-params">(MethodRequest request)</span> &#123;<br>        queue.putRequest(request);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-type">MethodRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> queue.takeRequest();<br>            request.execute();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Servant</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ActiveObject</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result&lt;String&gt; <span class="hljs-title function_">makeString</span><span class="hljs-params">(<span class="hljs-type">int</span> count, <span class="hljs-type">char</span> fillchar)</span> &#123;<br>        <span class="hljs-type">char</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[count];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; count; i++) &#123;<br>            buffer[i] = fillchar;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">100</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; make count = &quot;</span> + count + <span class="hljs-string">&quot;, fillchar = &quot;</span> + fillchar + <span class="hljs-string">&quot; complete&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RealResult</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buffer));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">displayString</span><span class="hljs-params">(String string)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;displayString: &quot;</span> + string);<br>            Thread.sleep(<span class="hljs-number">100</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="类图-1"><a href="#类图-1" class="headerlink" title="类图"></a>类图</h3><img src="/posts/4b405cfc/77.png" alt="20200707213425" style="zoom: 67%;"><h3 id="时序图-3"><a href="#时序图-3" class="headerlink" title="时序图"></a>时序图</h3><img src="/posts/4b405cfc/78.png" alt="11111" style="zoom: 67%;"><h3 id="TimeThreads图"><a href="#TimeThreads图" class="headerlink" title="TimeThreads图"></a>TimeThreads图</h3><img src="/posts/4b405cfc/79.png" alt="2222" style="zoom: 67%;"><h3 id="java-uti-concurrent包于Active-Object模式"><a href="#java-uti-concurrent包于Active-Object模式" class="headerlink" title="java.uti.concurrent包于Active Object模式"></a>java.uti.concurrent包于Active Object模式</h3><p><strong>类和接口一览</strong></p><table><thead><tr><th>包</th><th>类和接口</th><th>内容</th></tr></thead><tbody><tr><td>无名</td><td>Main</td><td>测试程序行为的类</td></tr><tr><td>无名</td><td>MakerClientThread</td><td>委托ActiveObject来生成字符串的线程</td></tr><tr><td>无名</td><td>DisplayClientThread</td><td>委托ACtiveObject来显示字符串的线程</td></tr><tr><td>activeObject</td><td>ActiveObject</td><td>定义主动对象的接口的接口</td></tr><tr><td>activeObject</td><td>ActiveObjectFactory</td><td>创建主动对象的类</td></tr><tr><td>activeObject</td><td>ActiveObjectImpl</td><td>实现了ActiveObject接口的类</td></tr><tr><td>activeObject</td><td>MakeStringRequest</td><td>对应makeString方法（生成字符串）的类</td></tr><tr><td>activeObject</td><td>DisplayStringRequest</td><td>对应DisplayString方法（显示字符串）的类</td></tr></tbody></table><p><strong>使用到的标准类库</strong></p><table><thead><tr><th>类和接口</th><th>内容</th></tr></thead><tbody><tr><td>java.util.concurrent.Executors</td><td>用于获取ExecutorService的工具类</td></tr><tr><td>java.util.concurrent.ExecutorService</td><td>用于提交（submit）请求的接口（替换示例程序中1中的SchedulerThread、ActivationQueue）</td></tr><tr><td>java.util.concurrent.Callable</td><td>将获取返回值的调用（call）抽象化后的接口（替代示例程序1中的MethodRequest）</td></tr><tr><td>java.util.Runnable</td><td>将不获取返回值的调用（run）抽象化后的接口（替代示例程序1中的MethodRequest）</td></tr><tr><td>java.util.concurrent.Future</td><td>表示返回值的接口（替代示例程序1中的Result、FutureResult、RealResult）</td></tr></tbody></table><h4 id="示例程序2的类图"><a href="#示例程序2的类图" class="headerlink" title="示例程序2的类图"></a><strong>示例程序2的类图</strong></h4><img src="/posts/4b405cfc/80.png" alt="3333" style="zoom:67%;"><h4 id="角色-2"><a href="#角色-2" class="headerlink" title="角色"></a><strong>角色</strong></h4><ul><li><p>Main类</p><p>用于测试程序行为的类。与示例1不同的是可以通过shutdown方法终止。</p></li><li><p>MakerClientThread类<br>MakeClientThread类是调用ActiveObject对象的makeString方法（生成字符串）的线程。<br>于示例程序1不同时，makeString方法的返回值类型是Future&lt;String&gt;。</p></li><li><p>DisplayClientThread类<br>DisplayClientThread类与MakerClientThread类一样，也是表示调用ActiveObject对象的线程的类。</p></li><li><p>ActiveObject接口<br>ActiveObject接口定义了主动对象的接口。<br>与示例程序1不同的是，makeString的返回值类行为Future&lt;String&gt;，而且也增加了shutdown方法。</p></li><li><p>ActiveObjectFactory类<br>ActiveObjectFactory类是用于构成ACtiveObject对象的类。</p><p>于示例程序1不同的是，这里不会组建多个对象，而是仅仅返回ActiveObjectImpl类的实例。这是因为，使用java.util.concurrent包后，类的结构变简单了。</p></li><li><p>ActiveObjectImpl类</p><p>ActiveObjectImpl类是实现了ActiveObject接口的类，它可以进行很多工作。该类与示例程序1中的Proxy和Servant相对应。</p><p>servant字段中保存的是通过Executors.newSingleThreadExecutor方法获取的ExecutorService对象。这样可以确保在这个ExecutorService对象中的背后只有一个线程（通过newSingleThreadExecutor则个名字我们也可以看出来）。</p><p>ExecutorService对象相当于示例程序1中的SchedulerThread类的实例。另外，虽然从表面上看不出来，但是ExecutorService对象的内部保存着一个线程安全的队列，该队列相当于示例程序1中的ActivationQueue类的实例。</p><p>shutdown方法是用于关闭service字段中保存的ExecutorService对象的方法。这样一来，ExecutorService对象就不会再接受新的请求了。</p><p>makeString方法会创建MakeStringRequest类的实例，并submit给ExecutorService对象。</p><p>displayString方法会创建DisplayStringRequest类的实例，并在ExecutorService中execute。</p><p>可以submit和execute的是Callable对象和Runnable对象。MakeStringRequest类实现了Callable接口，而DisplayStringRequest类实现了Runnable接口。</p><h4 id="示例2代码"><a href="#示例2代码" class="headerlink" title="示例2代码"></a>示例2代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ActiveObject</span> &#123;<br>    Future&lt;String&gt; <span class="hljs-title function_">makeString</span><span class="hljs-params">(<span class="hljs-type">int</span> count, <span class="hljs-type">char</span> fillchar)</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">displayString</span><span class="hljs-params">(String string)</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">shutdown</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ActiveObjectFactory</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ActiveObject <span class="hljs-title function_">createActiveObject</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActiveObjectImpl</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ActiveObjectImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ActiveObject</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> Executors.newSingleThreadExecutor();<br><br>    <span class="hljs-comment">// 有返回值的调用</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Future&lt;String&gt; <span class="hljs-title function_">makeString</span><span class="hljs-params">(<span class="hljs-type">int</span> count, <span class="hljs-type">char</span> fillchar)</span> &#123;<br>        <span class="hljs-keyword">class</span> <span class="hljs-title class_">MakeStringRequest</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Callable</span>&lt;String&gt; &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> String <span class="hljs-title function_">call</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-type">char</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[count];<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; count; i++) &#123;<br>                        buffer[i] = fillchar;<br>                        Thread.sleep(<span class="hljs-number">100</span>);<br>                    &#125;<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buffer);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 发出请求</span><br>        <span class="hljs-keyword">return</span> service.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MakeStringRequest</span>());<br>    &#125;<br><br>    <span class="hljs-comment">// 没有返回值的调用</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">displayString</span><span class="hljs-params">(String string)</span> &#123;<br>        <span class="hljs-keyword">class</span> <span class="hljs-title class_">DisplayStringRequest</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    System.out.println(<span class="hljs-string">&quot;displayString: &quot;</span> + string);<br>                    Thread.sleep(<span class="hljs-number">10</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 发出请求</span><br>        service.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DisplayStringRequest</span>());<br>    &#125;<br><br>    <span class="hljs-comment">// 终止服务</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shutdown</span><span class="hljs-params">()</span> &#123;<br>        service.shutdown();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DisplayClientThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ActiveObject activeObject;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DisplayClientThread</span><span class="hljs-params">(String name, ActiveObject activeObject)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name);<br>        <span class="hljs-built_in">this</span>.activeObject = activeObject;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-literal">true</span>; i++) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">string</span> <span class="hljs-operator">=</span> Thread.currentThread().getName() + <span class="hljs-string">&quot; &quot;</span> + i;<br>                activeObject.displayString(string);<br>                Thread.sleep(<span class="hljs-number">200</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (RejectedExecutionException e) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;:&quot;</span> + e);<br>        &#125; <span class="hljs-keyword">catch</span> (CancellationException e) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;:&quot;</span> + e);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;:&quot;</span> + e);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MakerClientThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ActiveObject activeObject;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">char</span> fillchar;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MakerClientThread</span><span class="hljs-params">(String name, ActiveObject activeObject)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name);<br>        <span class="hljs-built_in">this</span>.activeObject = activeObject;<br>        <span class="hljs-built_in">this</span>.fillchar = name.charAt(<span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-literal">true</span>; i++) &#123;<br>                Future&lt;String&gt; future = activeObject.makeString(i, fillchar);<br>                Thread.sleep(<span class="hljs-number">10</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> future.get();<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;: value = &quot;</span> + value);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (RejectedExecutionException e) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;:&quot;</span> + e);<br>        &#125; <span class="hljs-keyword">catch</span> (CancellationException e) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;:&quot;</span> + e);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;:&quot;</span> + e);<br>        &#125; <span class="hljs-keyword">catch</span> (ExecutionException e) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;:&quot;</span> + e);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ActiveObject</span> <span class="hljs-variable">activeObject</span> <span class="hljs-operator">=</span> ActiveObjectFactory.createActiveObject();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">MakerClientThread</span>(<span class="hljs-string">&quot;Alice&quot;</span>, activeObject).start();<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">MakerClientThread</span>(<span class="hljs-string">&quot;Bobby&quot;</span>, activeObject).start();<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">DisplayClientThread</span>(<span class="hljs-string">&quot;Chris&quot;</span>, activeObject).start();<br>            Thread.sleep(<span class="hljs-number">10000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;**** shutdown ****&quot;</span>);<br>            activeObject.shutdown();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;多线程设计模式&quot;&gt;&lt;a href=&quot;#多线程设计模式&quot; class=&quot;headerlink&quot; title=&quot;多线程设计模式&quot;&gt;&lt;/a&gt;多线程设计模式&lt;/h1&gt;&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.yahyav2rayssr.top/categories/Java/"/>
    
    <category term="多线程" scheme="https://blog.yahyav2rayssr.top/categories/Java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
    <category term="多线程" scheme="https://blog.yahyav2rayssr.top/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    <category term="设计" scheme="https://blog.yahyav2rayssr.top/tags/%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>Spring 单元测试</title>
    <link href="https://blog.yahyav2rayssr.top/posts/fac11a47/"/>
    <id>https://blog.yahyav2rayssr.top/posts/fac11a47/</id>
    <published>2023-04-18T15:31:33.304Z</published>
    <updated>2023-04-18T15:31:33.305Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="Juni4"><a href="#Juni4" class="headerlink" title="Juni4"></a>Juni4</h2><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomerServiceTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> CustomerServiceI customerService;<br><br><br>    <span class="hljs-meta">@Before</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUp</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCustomerAddSuccess</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//1.prepare</span><br>        <span class="hljs-type">CustomerAddCmd</span> <span class="hljs-variable">customerAddCmd</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomerAddCmd</span>();<br>        <span class="hljs-type">CustomerDTO</span> <span class="hljs-variable">customerDTO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomerDTO</span>();<br>        customerDTO.setCompanyName(<span class="hljs-string">&quot;NormalName&quot;</span>);<br>        customerAddCmd.setCustomerDTO(customerDTO);<br><br>        <span class="hljs-comment">//2.execute</span><br>        <span class="hljs-type">Response</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> customerService.addCustomer(customerAddCmd);<br><br>        <span class="hljs-comment">//3.assert</span><br>        Assert.assertTrue(response.isSuccess());<br>    &#125;<br><br>    <span class="hljs-meta">@Test(expected = BizException.class)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCustomerAddCompanyNameConflict</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//1.prepare</span><br>        <span class="hljs-type">CustomerAddCmd</span> <span class="hljs-variable">customerAddCmd</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomerAddCmd</span>();<br>        <span class="hljs-type">CustomerDTO</span> <span class="hljs-variable">customerDTO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomerDTO</span>();<br>        customerDTO.setCompanyName(<span class="hljs-string">&quot;ConflictCompanyName&quot;</span>);<br>        customerAddCmd.setCustomerDTO(customerDTO);<br><br>        <span class="hljs-comment">//2.execute</span><br>        <span class="hljs-type">Response</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> customerService.addCustomer(customerAddCmd);<br><br>        <span class="hljs-comment">//3.Exception</span><br>        <span class="hljs-comment">//Assert.assertEquals(ErrorCode.B_CUSTOMER_companyNameConflict.getErrCode(), response.getErrCode());</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="JUnit5"><a href="#JUnit5" class="headerlink" title="JUnit5"></a>JUnit5</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;Juni4&quot;&gt;&lt;a href=&quot;#Juni4&quot; class=&quot;headerlink&quot; title=&quot;Juni4&quot;&gt;&lt;/a&gt;Juni</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.yahyav2rayssr.top/categories/Java/"/>
    
    <category term="Spring" scheme="https://blog.yahyav2rayssr.top/categories/Java/Spring/"/>
    
    
    <category term="spring" scheme="https://blog.yahyav2rayssr.top/tags/spring/"/>
    
    <category term="单元测试" scheme="https://blog.yahyav2rayssr.top/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>运维常用命令-常用配置篇</title>
    <link href="https://blog.yahyav2rayssr.top/posts/c3218428/"/>
    <id>https://blog.yahyav2rayssr.top/posts/c3218428/</id>
    <published>2023-04-18T15:31:33.252Z</published>
    <updated>2023-04-18T15:31:33.253Z</updated>
    
    <content type="html"><![CDATA[<h1 id="禁止ping"><a href="#禁止ping" class="headerlink" title="禁止ping"></a>禁止ping</h1><p>Linux默认是允许Ping响应的，系统是否允许Ping由2个因素决定的：A、内核参数，B、防火墙，需要2个因素同时允许才能允许Ping，2个因素有任意一个禁Ping就无法Ping。</p><h2 id="内核参数设置"><a href="#内核参数设置" class="headerlink" title="内核参数设置"></a>内核参数设置</h2><h3 id="允许PING设置"><a href="#允许PING设置" class="headerlink" title="允许PING设置"></a>允许PING设置</h3><ul><li><p>临时允许PING操作的命令为：<code>echo 0 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all</code></p></li><li><p>永久允许PING配置方法。</p><p><strong>&#x2F;etc&#x2F;sysctl.conf</strong> 中增加一行</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">net.ipv4.icmp_echo_ignore_all=0<br></code></pre></td></tr></table></figure></li></ul><p>如果已经有<code>net.ipv4.icmp_echo_ignore_all</code>这一行了，直接修改&#x3D;号后面的值即可的（0表示允许，1表示禁止）。</p><p>修改完成后执行以下命令，使新配置生效。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sysctl -p<br></code></pre></td></tr></table></figure><h2 id="防火墙设置"><a href="#防火墙设置" class="headerlink" title="防火墙设置"></a>防火墙设置</h2><blockquote><p>注：此处的方法的前提是内核配置是默认值，也就是没有禁止Ping。</p></blockquote><p>以Iptables防火墙为例</p><h3 id="允许PING设置-1"><a href="#允许PING设置-1" class="headerlink" title="允许PING设置"></a>允许PING设置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">iptables -A INPUT -p icmp --icmp-type echo-request -j ACCEPT<br><br>iptables -A OUTPUT -p icmp --icmp-type echo-reply -j ACCEPT<br></code></pre></td></tr></table></figure><p>或者也可以临时停止防火墙操作的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">service iptables stop<br></code></pre></td></tr></table></figure><h3 id="禁止PING设置"><a href="#禁止PING设置" class="headerlink" title="禁止PING设置"></a>禁止PING设置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">iptables -A INPUT -p icmp --icmp-type 8 -s 0/0 -j DROP<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;禁止ping&quot;&gt;&lt;a href=&quot;#禁止ping&quot; class=&quot;headerlink&quot; title=&quot;禁止ping&quot;&gt;&lt;/a&gt;禁止ping&lt;/h1&gt;&lt;p&gt;Linux默认是允许Ping响应的，系统是否允许Ping由2个因素决定的：A、内核参数，B、防火墙，需要2个</summary>
      
    
    
    
    <category term="运维" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/"/>
    
    <category term="常用命令" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
    
    <category term="运维配置" scheme="https://blog.yahyav2rayssr.top/tags/%E8%BF%90%E7%BB%B4%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>大数据安装部署（高可用版）</title>
    <link href="https://blog.yahyav2rayssr.top/posts/3ee3db16/"/>
    <id>https://blog.yahyav2rayssr.top/posts/3ee3db16/</id>
    <published>2023-04-18T15:31:33.200Z</published>
    <updated>2023-04-18T15:31:33.201Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><blockquote><p>Hadoop运行模式包括：本地模式、伪分布式模式以及完全分布式模式。(这里使用完全分布式模式)。</p></blockquote><p>准备3台虚拟机，最低要求：内存4G，硬盘40G，这里准备的虚拟机是4G，硬盘40G的配置。</p><p>机器配置如下：</p><table><thead><tr><th>hostname</th><th>ip</th><th>内存</th><th>cpu</th><th>磁盘</th></tr></thead><tbody><tr><td>node1</td><td>192.168.50.246</td><td>4G</td><td>2c</td><td>40G</td></tr><tr><td>node2</td><td>192.168.50.247</td><td>4G</td><td>2c</td><td>40G</td></tr><tr><td>node3</td><td>192.168.50.248</td><td>4G</td><td>2c</td><td>40G</td></tr></tbody></table><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>所有节点都需要配置。</p><blockquote><p>注意：安装 centos7 的时候如果是最小化安装（默认的选择就是最小化安装），是不安装 psmisc 包，此时 hadoop 的 HA 无法正常切换，需要安装 <code>yum install psmisc -y</code> 包后，重启。</p><p>说明一下：psmisc 工具包含了 pstree、killall、fuser</p><ul><li><p>pstree：以树状图显示程序。</p></li><li><p>killall：用于kill指定名称的进程。</p></li><li><p>fuser：用来显示所有正在使用着指定的file, file system 或者 sockets的进程信息。</p></li></ul></blockquote><h3 id="创建hadoop用户"><a href="#创建hadoop用户" class="headerlink" title="创建hadoop用户"></a>创建hadoop用户</h3><blockquote><p>后续操作都使用hadoop用户，不使用root用户进行操作。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">useradd hadoop<br>passwd hadoop<br></code></pre></td></tr></table></figure><p>然后配置用户具有root权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/sudoers<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># Allow root to run any commands anywhere</span></span><br>root  ALL=(ALL)     ALL<br>hadoop   ALL=(ALL)     ALL<br></code></pre></td></tr></table></figure><h3 id="机器时间同步"><a href="#机器时间同步" class="headerlink" title="机器时间同步"></a>机器时间同步</h3><p>安装依赖：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo yum install -y epel-release<br>sudo yum install -y psmisc nc net-tools rsync vim lrzsz ntp libzstd openssl-static<br></code></pre></td></tr></table></figure><p>时间同步（每台机器都要执行）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl start ntpd<br></code></pre></td></tr></table></figure><p>时间同步停止命令（不用执行）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl stop ntpd<br></code></pre></td></tr></table></figure><h3 id="修改主机名"><a href="#修改主机名" class="headerlink" title="修改主机名"></a>修改主机名</h3><p>每台机器设置各自的 hostname</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">node1</span><br>sudo hostnamectl --static set-hostname node1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">node2</span><br>sudo hostnamectl --static set-hostname node2<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">node3</span><br>sudo hostnamectl --static set-hostname node3<br></code></pre></td></tr></table></figure><h3 id="设置host文件"><a href="#设置host文件" class="headerlink" title="设置host文件"></a>设置host文件</h3><p>所有机器都设置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo vim /etc/hosts<br><br>192.168.50.246   node1<br>192.168.50.247   node2<br>192.168.50.248   node3<br></code></pre></td></tr></table></figure><h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo systemctl stop firewalld<br>sudo systemctl disable firewalld<br></code></pre></td></tr></table></figure><h3 id="创建文件夹并授权给hadoop用户"><a href="#创建文件夹并授权给hadoop用户" class="headerlink" title="创建文件夹并授权给hadoop用户"></a>创建文件夹并授权给hadoop用户</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo mkdir /app<br>sudo chown -R hadoop:hadoop /app<br></code></pre></td></tr></table></figure><h3 id="SSH免密登录配置"><a href="#SSH免密登录配置" class="headerlink" title="SSH免密登录配置"></a>SSH免密登录配置</h3><p>参考文章5</p><h3 id="JDK安装"><a href="#JDK安装" class="headerlink" title="JDK安装"></a>JDK安装</h3><blockquote><p>所有节点都要安装。</p></blockquote><p>参考文章2</p><h3 id="Zookeeper安装"><a href="#Zookeeper安装" class="headerlink" title="Zookeeper安装"></a>Zookeeper安装</h3><p>参考文章7</p><h3 id="Hadoop安装"><a href="#Hadoop安装" class="headerlink" title="Hadoop安装"></a>Hadoop安装</h3><blockquote><p>所有节点都要安装。</p></blockquote><p>参考文章3</p><h2 id="集群配置"><a href="#集群配置" class="headerlink" title="集群配置"></a>集群配置</h2><h3 id="机器规划"><a href="#机器规划" class="headerlink" title="机器规划"></a>机器规划</h3><table><thead><tr><th>服务</th><th>node1</th><th>node2</th><th>node3</th></tr></thead><tbody><tr><td>HDFS</td><td>NameNode</td><td>NameNode（active节点）</td><td>NameNode</td></tr><tr><td>HDFS</td><td>-</td><td>-</td><td>SecondaryNameNode</td></tr><tr><td>HDFS</td><td>DataNode</td><td>DateNode</td><td>DateNode</td></tr><tr><td>HDFS</td><td>JournalNode</td><td>JournalNode</td><td>JournalNode</td></tr><tr><td>YARN</td><td>ResourceManager</td><td>ResourceManager</td><td>-</td></tr><tr><td>YARN</td><td>NodeManager</td><td>NodeManager</td><td>NodeManager</td></tr></tbody></table><h3 id="WEB-端口信息"><a href="#WEB-端口信息" class="headerlink" title="WEB 端口信息"></a>WEB 端口信息</h3><table><thead><tr><th>服务</th><th>类型</th><th>访问地址</th></tr></thead><tbody><tr><td>HDFS</td><td>NameNode</td><td><a href="http://node1:9870/">http://node1:9870</a>, <a href="http://node2:9870/">http://node2:9870</a>, <a href="http://node3:9870/">http://node3:9870</a></td></tr><tr><td>HDFS</td><td>SecondaryNameNode</td><td><a href="http://node3:9868/">http://node3:9868</a></td></tr><tr><td>YARN</td><td>jobhistory</td><td><a href="http://node3:19888/">http://node3:19888</a></td></tr><tr><td>YARN</td><td>ResourceManager</td><td><a href="http://node1:8088/">http://node1:8088</a>, <a href="http://node2:8088/">http://node2:8088</a></td></tr></tbody></table><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><blockquote><p>参考链接：<a href="https://blog.csdn.net/wjt199866/article/details/106473174">https://blog.csdn.net/wjt199866/article/details/106473174</a></p><p>更多配置参数信息，请参考官方网址查询</p><ul><li><a href="https://link.zhihu.com/?target=http://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-common/core-default.xml">http://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-common/core-default.xml</a></li><li><a href="https://link.zhihu.com/?target=http://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-hdfs/hdfs-default.xml">http://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-hdfs/hdfs-default.xml</a></li><li><a href="https://link.zhihu.com/?target=http://hadoop.apache.org/docs/current/hadoop-mapreduce-client/hadoop-mapreduce-client-core/mapred-default.xml">http://hadoop.apache.org/docs/current/hadoop-mapreduce-client/hadoop-mapreduce-client-core/mapred-default.xml</a></li><li><a href="https://link.zhihu.com/?target=http://hadoop.apache.org/docs/current/hadoop-yarn/hadoop-yarn-common/yarn-default.xml">http://hadoop.apache.org/docs/current/hadoop-yarn/hadoop-yarn-common/yarn-default.xml</a></li></ul><p>通过这些网址，可以了解最新的全部的hadoop 配置信息，而且包括一些过时的定义标识，从而更好地维护您的集群。</p></blockquote><p>所有的配置文件都在 &#x2F;app&#x2F;hadoop-3.2.3&#x2F;etc&#x2F;hadoop 目录下，主要需要修改的配置文件如下：</p><h4 id="配置workers"><a href="#配置workers" class="headerlink" title="配置workers"></a>配置workers</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /app/hadoop-3.2.3/etc/hadoop/workers<br><br>node1<br>node2<br>node3<br></code></pre></td></tr></table></figure><h4 id="hadoop-env-sh"><a href="#hadoop-env-sh" class="headerlink" title="hadoop-env.sh"></a>hadoop-env.sh</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">The java implementation to use. By default, this environment</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">variable is REQUIRED on ALL platforms except OS X!</span><br>export JAVA_HOME=/app/jdk1.8.0_212<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># To prevent accidents, shell commands be (superficially) locked</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">to only allow certain <span class="hljs-built_in">users</span> to execute certain subcommands.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">It uses the format of (<span class="hljs-built_in">command</span>)_(subcommand)_USER.</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># For example, to limit who can execute the namenode command,</span></span><br>export HDFS_NAMENODE_USER=&quot;hadoop&quot;<br>export HDFS_SECONDARYNAMENODE_USER=&quot;hadoop&quot;<br>export HDFS_DATANODE_USER=&quot;hadoop&quot;<br>export HDFS_JOURNALNODE_USER=&quot;hadoop&quot;<br>export HDFS_ZKFC_USER=&quot;hadoop&quot;<br>export YARN_RESOURCEMANAGER_USER=&quot;hadoop&quot;<br>export YARN_NODEMANAGER_USER=&quot;hadoop&quot;<br>export HADOOP_PID_DIR=/app/hadoop-3.2.3/tmp/hadoop-hadoop-datanode.pid<br></code></pre></td></tr></table></figure><h4 id="core-site-xml"><a href="#core-site-xml" class="headerlink" title="core-site.xml"></a>core-site.xml</h4><blockquote><p>集群全局参数。</p><p>用于定义系统级别的参数，如 HDFS URL、Hadoop 的临时目录等。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;?xml-stylesheet type=<span class="hljs-string">&quot;text/xsl&quot;</span> href=<span class="hljs-string">&quot;configuration.xsl&quot;</span>?&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 配置 hdfs 的地址，统一通信地址 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>fs.defaultFS<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hdfs://vmcluster<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 整合 Zookeeper --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>ha.zookeeper.quorum<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node1:2181,node2:2181,node3:2181<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 配置 hadoop 的数据目录 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hadoop.data.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>/app/hadoop-3.2.3/data<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 配置 hadoop 的临时目录 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hadoop.tmp.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>/app/hadoop-3.2.3/tmp<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 配置读写缓存大小 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>io.file.buffer.size<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>131072<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 代理用户配置 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hadoop.proxyuser.hadoop.hosts<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hadoop.proxyuser.hadoop.groups<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- hdfs界面设置操作文件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hadoop.http.staticuser.user<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hadoop<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.permissions.enabled<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="hdfs-site-xml"><a href="#hdfs-site-xml" class="headerlink" title="hdfs-site.xml"></a>hdfs-site.xml</h4><blockquote><p>HDFS 参数。</p><p>如名称节点和数据节点的存放位置、文件副本的个数、文件读取权限等</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;?xml-stylesheet type=<span class="hljs-string">&quot;text/xsl&quot;</span> href=<span class="hljs-string">&quot;configuration.xsl&quot;</span>?&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.name.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>file://$&#123;hadoop.data.dir&#125;/dfs/nn<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.datanode.data.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>file://$&#123;hadoop.data.dir&#125;/dfs/dn<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.checkpoint.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>file://$&#123;hadoop.data.dir&#125;/namesecondary<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.client.datanode-restart.timeout<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node3:9868<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.http-address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node1:50070<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 对照clickhouse，可以理解为给整个集群起的一个识别名字 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.nameservices<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>vmcluster<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- Currently, only a maximum of two NameNodes may be configured per nameservice. --&gt;</span><br>    <span class="hljs-comment">&lt;!-- unique identifiers for each NameNode in the nameservice --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 目前为止，一个集群里面只能最多有两个NameNodes 注意了 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.ha.namenodes.vmcluster<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>nn1,nn2,nn3<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- the fully-qualified RPC address for each NameNode to listen on --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.rpc-address.vmcluster.nn1<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node1:8020<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.rpc-address.vmcluster.nn2<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node2:8020<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.rpc-address.vmcluster.nn3<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node3:8020<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- the fully-qualified HTTP address for each NameNode to listen on --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.http-address.vmcluster.nn1<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node1:9870<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.http-address.vmcluster.nn2<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node2:9870<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.http-address.vmcluster.nn3<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node3:9870<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- the URI which identifies the group of JNs where the NameNodes will write/read edits --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.shared.edits.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>qjournal://node1:8485;node2:8485;node3:8485/vmcluster<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- the Java class that HDFS clients use to contact the Active NameNode --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.client.failover.proxy.provider.vmcluster<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- a list of scripts or Java classes which will be used to fence the Active NameNode during a failover --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 为了确保任何时候都只有一个NameNode在工作，failover的时候可能需要强制杀死一个NameNode，有两种方法，ssh或者shell，一般选择ssh --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.ha.fencing.methods<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>sshfence<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.ha.fencing.ssh.private-key-files<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>/home/hadoop/.ssh/id_rsa<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.ha.fencing.ssh.connect-timeout<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>30000<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.handler.count<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>100<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.safemode.threshold.pct<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.journalnode.edits.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>/app/hadoop-3.2.3/data/jn<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 启用自动故障转移 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.ha.automatic-failover.enabled<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.replication<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.permissions.enabled<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.blocksize<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>67108864<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="mapred-site-xml"><a href="#mapred-site-xml" class="headerlink" title="mapred-site.xml"></a>mapred-site.xml</h4><blockquote><p>Mapreduce 参数。</p><p>包括 JobHistory Server 和应用程序参数两部分，如 reduce 任务的默认个数、任务所能够使用内存的默认上下限等。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;?xml-stylesheet type=<span class="hljs-string">&quot;text/xsl&quot;</span> href=<span class="hljs-string">&quot;configuration.xsl&quot;</span>?&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.framework.name<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>yarn<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 历史服务器端地址 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.jobhistory.address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node3:10020<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 历史服务器web端地址 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node3:19888<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.app.mapreduce.am.env<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>HADOOP_MAPRED_HOME=/app/hadoop-3.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.map.env<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>HADOOP_MAPRED_HOME=/app/hadoop-3.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.reduce.env<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>HADOOP_MAPRED_HOME=/app/hadoop-3.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.application.classpath<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>$HADOOP_MAPRED_HOME/share/hadoop/mapreduce/*,$HADOOP_MAPRED_HOME/share/hadoop/mapreduce/lib/*<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="yarn-site-xml"><a href="#yarn-site-xml" class="headerlink" title="yarn-site.xml"></a>yarn-site.xml</h4><blockquote><p>集群资源管理系统参数。</p><p>配置 ResourceManager，NodeManager 的通信端口，web监控端口等。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;?xml-stylesheet type=<span class="hljs-string">&quot;text/xsl&quot;</span> href=<span class="hljs-string">&quot;configuration.xsl&quot;</span>?&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.ha.enabled<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.cluster-id<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>yarnCluster<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.ha.automatic-failover.enabled<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.ha.automatic-failover.embedded<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.connect.retry-interval.ms<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>2000<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.ha.rm-ids<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>rm1,rm2<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.hostname.rm1<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.hostname.rm2<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node2<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.webapp.address.rm1<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node1:8088<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.webapp.address.rm2<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node2:8088<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.address.rm1<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node1:8032<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.address.rm2<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node2:8032<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.scheduler.address.rm1<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node1:8030<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.scheduler.address.rm2<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node2:8030<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 整合 Zookeeper --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.zk-address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node1:2181,node2:2181,node3:2181<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>mapreduce_shuffle<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.nodemanager.aux-services.mapreduce_shuffle.class<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>org.apache.hadoop.mapred.ShuffleHandler<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node2<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.nodemanager.env-whitelist<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>JAVA_HOME,HADOOP_COMMON_HOME,HADOOP_HDFS_HOME,HADOOP_CONF_DIR,CLASSPATH_PREPEND_DISTCACHE,HADOOP_YARN_HOME,HADOOP_MAPRED_HOME<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 日志采集 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.log-aggregation-enable<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.log.server.url<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>http://node3:19888/jobhistory/logs<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.log-aggregation.retain-seconds<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>604800<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.scheduler.class<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair.FairScheduler<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.recovery.enabled<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.store.class<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>org.apache.hadoop.yarn.server.resourcemanager.recovery.ZKRMStateStore<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 整合 Zookeeper --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.zk.state-store.address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node1:2181,node2:2181,node3:2181<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.application.classpath<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span><br>            $HADOOP_CONF_DIR,<br>            $HADOOP_COMMON_HOME/share/hadoop/common/*,<br>            $HADOOP_COMMON_HOME/share/hadoop/common/lib/*,<br>            $HADOOP_HDFS_HOME/share/hadoop/hdfs/*,<br>            $HADOOP_HDFS_HOME/share/hadoop/hdfs/lib/*,<br>            $HADOOP_YARN_HOME/share/hadoop/yarn/*,<br>            $HADOOP_YARN_HOME/share/hadoop/yarn/lib/*<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.nodemanager.pmem-check-enabled<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.nodemanager.vmem-check-enabled<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapred.job.queue.name<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hadoop.myqueue<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="分发配置文件"><a href="#分发配置文件" class="headerlink" title="分发配置文件"></a>分发配置文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">xsync /app/hadoop-3.2.3/etc/hadoop<br></code></pre></td></tr></table></figure><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><h3 id="zk-初始化"><a href="#zk-初始化" class="headerlink" title="zk 初始化"></a>zk 初始化</h3><p>在 node1 上格式化 zookeeper，第33行的日志表示创建成功。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hdfs zkfc -formatZK<br></code></pre></td></tr></table></figure><p>验证 zkfc 是否格式化成功，如果多了一个 hadoop-ha 包就是成功了，如下所示：</p><img src="/posts/3ee3db16/image-20221016231450173.png" alt="image-20221016231450173" style="zoom:67%;"><h3 id="启动-JournalNode-集群"><a href="#启动-JournalNode-集群" class="headerlink" title="启动 JournalNode 集群"></a>启动 JournalNode 集群</h3><p>依次在 node1, node2, node3 上面执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hdfs --daemon start journalnode<br></code></pre></td></tr></table></figure><h3 id="NameNode-集群初始化"><a href="#NameNode-集群初始化" class="headerlink" title="NameNode 集群初始化"></a>NameNode 集群初始化</h3><p>格式化集群的一个NameNode（node1），有两种方法，我使用的是第一种：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hdfs namenode –format<br></code></pre></td></tr></table></figure><p>在 node1 上启动刚才格式化的 namenode：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hdfs --daemon start namenode<br></code></pre></td></tr></table></figure><p>在 node1 机器上，将 node1 的数据复制到 node2 上来,在 node 2 上执行（node3 同理）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hdfs namenode –bootstrapStandby<br></code></pre></td></tr></table></figure><p>启动 node2 和 node3 的 namenode：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hdfs --daemon start namenode<br></code></pre></td></tr></table></figure><h3 id="DataNode-启动"><a href="#DataNode-启动" class="headerlink" title="DataNode 启动"></a>DataNode 启动</h3><p>启动所有的datanode，在 node1 上执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hdfs --daemon start datanode<br></code></pre></td></tr></table></figure><h3 id="Yarn-启动"><a href="#Yarn-启动" class="headerlink" title="Yarn 启动"></a>Yarn 启动</h3><p>启动yarn，在 node1 上执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">start-yarn.sh<br></code></pre></td></tr></table></figure><h3 id="测试-HDFS-是否可用"><a href="#测试-HDFS-是否可用" class="headerlink" title="测试 HDFS 是否可用"></a>测试 HDFS 是否可用</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hdfs dfs -ls /<br></code></pre></td></tr></table></figure><h2 id="一键启动"><a href="#一键启动" class="headerlink" title="一键启动"></a>一键启动</h2><p>在 node1 机器下的 <code>/app/hadoop-3.2.3/sbin</code> 目录下执行一键启动命令（需提前启动好 zookeeper 集群）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">start-all.sh<br></code></pre></td></tr></table></figure><h2 id="历史服务器配置"><a href="#历史服务器配置" class="headerlink" title="历史服务器配置"></a>历史服务器配置</h2><p>主要对应配置文件 mapred-site.xml，增加如下配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">&lt;!-- 历史服务器端地址 --&gt;<br>&lt;property&gt;<br>    &lt;name&gt;mapreduce.jobhistory.address&lt;/name&gt;<br>    &lt;value&gt;node3:10020&lt;/value&gt;<br>&lt;/property&gt;<br><br>&lt;!-- 历史服务器web端地址 --&gt;<br>&lt;property&gt;<br>    &lt;name&gt;mapreduce.jobhistory.webapp.address&lt;/name&gt;<br>    &lt;value&gt;node3:19888&lt;/value&gt;<br>&lt;/property&gt;<br></code></pre></td></tr></table></figure><p>启动停止（node3 机器执行）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">启动</span><br>./bin/mapred --daemon start historyserver<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">停止</span><br>./bin/mapred --daemon stop historyserver<br></code></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://blog.51cto.com/mapengfei/4778140">YARN &amp;&amp; Hadoop 集群环境准备</a></p><p><a href="http://liangfan.tech/2019/03/15/Hadoop%E4%B9%8B4-HDFS%E9%AB%98%E5%8F%AF%E7%94%A8%E9%85%8D%E7%BD%AE/">Hadoop之4-HDFS HA配置</a></p><p><a href="https://blog.csdn.net/qq_35029061/article/details/125810621">Hadoop HA 高可用集群搭建</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h</summary>
      
    
    
    
    <category term="大数据" scheme="https://blog.yahyav2rayssr.top/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    <category term="安装部署" scheme="https://blog.yahyav2rayssr.top/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
    
    
    <category term="大数据" scheme="https://blog.yahyav2rayssr.top/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>Spring Validation 校验</title>
    <link href="https://blog.yahyav2rayssr.top/posts/698a4e8e/"/>
    <id>https://blog.yahyav2rayssr.top/posts/698a4e8e/</id>
    <published>2023-04-18T15:31:33.153Z</published>
    <updated>2023-04-18T15:31:33.154Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="NotNull-和-NotEmpty-和-NotBlank-区别"><a href="#NotNull-和-NotEmpty-和-NotBlank-区别" class="headerlink" title="@NotNull 和 @NotEmpty 和 @NotBlank 区别"></a><code>@NotNull</code> 和 <code>@NotEmpty</code> 和 <code>@NotBlank</code> 区别</h2><ul><li><p>@NotNull：不能为null，但可以为empty</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure">(<span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot; &quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;   &quot;</span>)<br></code></pre></td></tr></table></figure></li><li><p>@NotEmpty：不能为null，而且长度必须大于0</p><p>其本质是CharSequence, Collection, Map, or Array的size或者length不能为0</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure">(<span class="hljs-string">&quot; &quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;  &quot;</span>)<br></code></pre></td></tr></table></figure></li><li><p>@NotBlank：只能作用在String上，不能为null，而且调用trim()后，长度必须大于0</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">(<span class="hljs-string">&quot;test&quot;</span>)    即：必须有实际字符<br></code></pre></td></tr></table></figure></li><li><p>@NonNull</p><p>@NotNull 是 JSR303（Bean的校验框架）的注解，用于运行时检查一个属性是否为空，如果为空则不合法。<br>@NonNull 是JSR 305（缺陷检查框架）的注解，是告诉编译器这个域不可能为空，当代码检查有空值时会给出一个风险警告，目前这个注解只有IDEA支持。</p></li></ul><h2 id="Validated-和-Valid-的区别"><a href="#Validated-和-Valid-的区别" class="headerlink" title="@Validated 和 @Valid 的区别"></a><code>@Validated</code> 和 <code>@Valid</code> 的区别</h2><h3 id="1-分组"><a href="#1-分组" class="headerlink" title="1. 分组"></a><strong>1. 分组</strong></h3><p>@Validated：提供了一个分组功能，可以在入参验证时，根据不同的分组采用不同的验证机制，这个网上也有资料，不详述。</p><p>@Valid：作为标准JSR-303规范，还没有吸收分组的功能。</p><p><strong>分组校验支撑继承归类分组</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ValidationGroups</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Common</span> &#123;<br>        <br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Insert</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Common</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Update</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Common</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">List</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Common</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Export</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Common</span> &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-注解地方"><a href="#2-注解地方" class="headerlink" title="2. 注解地方"></a><strong>2. 注解地方</strong></h3><p>@Validated：可以用在类型、方法和方法参数上。但是不能用在成员属性（字段）上</p><p>@Valid：可以用在方法、构造函数、方法参数和成员属性（字段）上</p><p>两者是否能用于成员属性（字段）上直接影响能否提供嵌套验证的功能。</p><blockquote><p>嵌套验证必须用@Valid</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Item</span> &#123;<br><br>    <span class="hljs-meta">@NotNull(message = &quot;id不能为空&quot;)</span><br>    <span class="hljs-meta">@Min(value = 1, message = &quot;id必须为正整数&quot;)</span><br>    <span class="hljs-keyword">private</span> Long id;<br><br>    <span class="hljs-meta">@Valid</span> <span class="hljs-comment">// 嵌套验证必须用@Valid</span><br>    <span class="hljs-meta">@NotNull(message = &quot;props不能为空&quot;)</span><br>    <span class="hljs-meta">@Size(min = 1, message = &quot;props至少要有一个自定义属性&quot;)</span><br>    <span class="hljs-keyword">private</span> List&lt;Prop&gt; props;<br>&#125;<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@NotEmpty</span><br><span class="hljs-keyword">private</span> List&lt;<span class="hljs-meta">@NotNull</span> <span class="hljs-meta">@Valid</span> UserInfo&gt; parents;<br></code></pre></td></tr></table></figure><p><strong>总结一下 @Validated 和 @Valid 在嵌套验证功能上的区别：</strong></p><p><strong>@Validated：</strong> 用在方法入参上无法单独提供嵌套验证功能。不能用在成员属性（字段）上，也无法提示框架进行嵌套验证。能配合嵌套验证注解@Valid进行嵌套验证。</p><p><strong>@Valid：</strong> 用在方法入参上无法单独提供嵌套验证功能。能够用在成员属性（字段）上，提示验证框架进行嵌套验证。能配合嵌套验证注解@Valid进行嵌套验证。</p><table><thead><tr><th>注解</th><th>含义</th></tr></thead><tbody><tr><td>@AssertFalse</td><td>验证注解的元素值是false</td></tr><tr><td>@AssertTrue</td><td>验证注解的元素值是true</td></tr><tr><td>@DecimalMax(value)</td><td>不大于value的数值</td></tr><tr><td>@DecimalMin(value)</td><td>不小于value的数值</td></tr><tr><td>@Digits(integer,fraction)</td><td>整数部分不超过integer,小数部分不超过fraction</td></tr><tr><td>@Future</td><td>将来的日期</td></tr><tr><td>@Past</td><td>过去的日期</td></tr><tr><td>@Max(value)</td><td>不大于value的数值</td></tr><tr><td>@Min(value)</td><td>不小于value的数值</td></tr><tr><td>@Pattern(value)</td><td>满足指定正则表达式</td></tr><tr><td>@Size(max,min)</td><td>长度在min到max之间，用法同@Length，不过@Length是Hibernate的，推荐用@Size</td></tr></tbody></table><h2 id="BindingResult-校验模式"><a href="#BindingResult-校验模式" class="headerlink" title="BindingResult 校验模式"></a><code>BindingResult</code> 校验模式</h2><p>我们使用<code>BindingResult</code>验证不通过的结果集合，但是通常按顺序验证到第一个字段不符合验证要求时，就可以直接拒绝请求了。</p><p>这就涉及到两种<strong>校验模式</strong>的配置：</p><ol><li>普通模式（默认是这个模式）: 会校验完所有的属性，然后返回所有的验证失败信息</li><li>快速失败模式: 只要有一个验证失败，则返回<br>如果想要配置第二种模式，需要添加如下配置类：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.hibernate.validator.HibernateValidator;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> javax.validation.Validation;<br><span class="hljs-keyword">import</span> javax.validation.Validator;<br><span class="hljs-keyword">import</span> javax.validation.ValidatorFactory;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ValidatorConf</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Validator <span class="hljs-title function_">validator</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">ValidatorFactory</span> <span class="hljs-variable">validatorFactory</span> <span class="hljs-operator">=</span> Validation.byProvider( HibernateValidator.class )<br>                .configure()<br>                .failFast( <span class="hljs-literal">true</span> )<br>                .buildValidatorFactory();<br>        <span class="hljs-type">Validator</span> <span class="hljs-variable">validator</span> <span class="hljs-operator">=</span> validatorFactory.getValidator();<br><br>        <span class="hljs-keyword">return</span> validator;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="自定义校验注解"><a href="#自定义校验注解" class="headerlink" title="自定义校验注解"></a>自定义校验注解</h2><p>定义<code>@ListNotHasNull</code>注解， 用于校验 List 集合中是否有null 元素</p><blockquote><p>注意：message、groups、payload属性都需要定义在参数校验注解中不能缺省</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(&#123;ElementType.ANNOTATION_TYPE, ElementType.METHOD, ElementType.FIELD&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-comment">//此处指定了注解的实现类为ListNotHasNullValidatorImpl</span><br><span class="hljs-meta">@Constraint(validatedBy = ListNotHasNullValidatorImpl.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> ListNotHasNull &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加value属性，可以作为校验时的条件,若不需要，可去掉此处定义</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">value</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>;<br><br>    String <span class="hljs-title function_">message</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;List集合中不能含有null元素&quot;</span>;<br><br>    Class&lt;?&gt;[] groups() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>    Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Payload</span>&gt;[] payload() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 定义List，为了让Bean的一个属性上可以添加多套规则</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Target(&#123;ElementType.METHOD, ElementType.FIELD, ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR, ElementType.PARAMETER&#125;)</span><br>    <span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br>    <span class="hljs-meta">@Documented</span><br>    <span class="hljs-meta">@interface</span> List &#123;<br>        ListNotHasNull[] value();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="注解实现类"><a href="#注解实现类" class="headerlink" title="注解实现类"></a>注解实现类</h3><p>该类需要实现<code>ConstraintValidator</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> javax.validation.ConstraintValidator;<br><span class="hljs-keyword">import</span> javax.validation.ConstraintValidatorContext;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ListNotHasNullValidatorImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ConstraintValidator</span>&lt;ListNotHasNull, List&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> value;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initialize</span><span class="hljs-params">(ListNotHasNull constraintAnnotation)</span> &#123;<br>        <span class="hljs-comment">//传入value 值，可以在校验中使用</span><br>        <span class="hljs-built_in">this</span>.value = constraintAnnotation.value();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isValid</span><span class="hljs-params">(List list, ConstraintValidatorContext constraintValidatorContext)</span> &#123;<br>        <span class="hljs-keyword">for</span> (Object object : list) &#123;<br>            <span class="hljs-keyword">if</span> (object == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">//如果List集合中含有Null元素，校验失败</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后我们就能在之前的例子中使用该注解了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@NotEmpty</span><br><span class="hljs-meta">@ListNotHasNull</span><br><span class="hljs-keyword">private</span> List&lt;<span class="hljs-meta">@Valid</span> UserInfo&gt; parents;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;NotNull-和-NotEmpty-和-NotBlank-区别&quot;&gt;&lt;a href=&quot;#NotNull-和-NotEmpty-和-</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.yahyav2rayssr.top/categories/Java/"/>
    
    <category term="Spring" scheme="https://blog.yahyav2rayssr.top/categories/Java/Spring/"/>
    
    
    <category term="spring" scheme="https://blog.yahyav2rayssr.top/tags/spring/"/>
    
    <category term="validation" scheme="https://blog.yahyav2rayssr.top/tags/validation/"/>
    
  </entry>
  
  <entry>
    <title>Vim 基本命令</title>
    <link href="https://blog.yahyav2rayssr.top/posts/154baef/"/>
    <id>https://blog.yahyav2rayssr.top/posts/154baef/</id>
    <published>2023-04-18T15:31:33.093Z</published>
    <updated>2023-04-18T15:31:33.094Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="跳至行首-x2F-行尾"><a href="#跳至行首-x2F-行尾" class="headerlink" title="跳至行首&#x2F;行尾"></a>跳至行首&#x2F;行尾</h2><p>跳至当前行行首</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">shift</span>+4命令可以敲出$字母</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"></span><br><span class="language-bash"></span><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">或者数字0</span><br>0<br></code></pre></td></tr></table></figure><p>跳至当前行行尾</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">大写的A</span><br>A<br></code></pre></td></tr></table></figure><p></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;跳至行首-x2F-行尾&quot;&gt;&lt;a href=&quot;#跳至行首-x2F-行尾&quot; class=&quot;headerlink&quot; title=&quot;跳至行</summary>
      
    
    
    
    <category term="Vim" scheme="https://blog.yahyav2rayssr.top/categories/Vim/"/>
    
    
    <category term="vim" scheme="https://blog.yahyav2rayssr.top/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>运维常用命令-常用篇</title>
    <link href="https://blog.yahyav2rayssr.top/posts/e9ae7850/"/>
    <id>https://blog.yahyav2rayssr.top/posts/e9ae7850/</id>
    <published>2023-04-18T15:31:33.049Z</published>
    <updated>2023-04-18T15:31:33.050Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-ls-系列"><a href="#1-ls-系列" class="headerlink" title="1. ls 系列"></a>1. ls 系列</h1><blockquote><p>-F：根据文件、目录等信息在文件名或目录名最后给予附加数据结构</p><ol><li>*  代表可执行文件；</li><li>&#x2F;  代表目录</li><li>&#x3D;  代表socket文件</li><li>|  代表FIFO文件</li><li>@  代表连接文件</li></ol></blockquote><h2 id="1-只显示文件类型，排除目录"><a href="#1-只显示文件类型，排除目录" class="headerlink" title="1. 只显示文件类型，排除目录"></a>1. 只显示文件类型，排除目录</h2><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><blockquote><p>^[^d] 是一个正则表达式，[^d] 表示字符串含有一个不是 d 的字符， ^d 表示以 d 开头，^[^d] 表示不以 d 开头</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ls -l | grep ^[^d]<br></code></pre></td></tr></table></figure><p>所以只显示文件夹的写法为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ls -l | grep ^d<br></code></pre></td></tr></table></figure><h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ls -l | grep -v ^d<br></code></pre></td></tr></table></figure><p>如果文件名包含空格，可以用下面命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ls -l | grep -v [/$]<br></code></pre></td></tr></table></figure><hr><h1 id="2-sed-系列"><a href="#2-sed-系列" class="headerlink" title="2. sed 系列"></a>2. sed 系列</h1><h2 id="1-替换字符串"><a href="#1-替换字符串" class="headerlink" title="1. 替换字符串"></a>1. 替换字符串</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sed &#x27;s/old/new/g&#x27;<br></code></pre></td></tr></table></figure><h1 id="3-rm-系列"><a href="#3-rm-系列" class="headerlink" title="3. rm 系列"></a>3. rm 系列</h1><h2 id="1-删除带有指定字符串的文件"><a href="#1-删除带有指定字符串的文件" class="headerlink" title="1. 删除带有指定字符串的文件"></a>1. 删除带有指定字符串的文件</h2><h3 id="方法一：-1"><a href="#方法一：-1" class="headerlink" title="方法一："></a>方法一：</h3><blockquote><p>注意字符串如果含有特殊字符，必须做转义处理，否则默认会删除当前目录下的所有文件。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rm -f *字符串*<br></code></pre></td></tr></table></figure><h3 id="方法二：-1"><a href="#方法二：-1" class="headerlink" title="方法二："></a>方法二：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">find -type f -name &#x27;*字符串*&#x27; -delete<br></code></pre></td></tr></table></figure><h1 id="4-awk-系列"><a href="#4-awk-系列" class="headerlink" title="4. awk 系列"></a>4. awk 系列</h1><h2 id="1-获取某一行中指定字符后的内容"><a href="#1-获取某一行中指定字符后的内容" class="headerlink" title="1. 获取某一行中指定字符后的内容"></a>1. 获取某一行中指定字符后的内容</h2><p>比如有个xxx.txt文件，里面有很多行内容，其中有行内容为ro.xxx&#x3D;123，要想获取到123这个值，可以如下处理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br>NAME=`cat xxx.txt | grep &#x27;ro.xxx&#x27; | awk -F &#x27;=&#x27; &#x27;&#123;print $2&#125;&#x27;`<br>echo $NAME<br></code></pre></td></tr></table></figure><h1 id="5-cd-dirname-0-pwd"><a href="#5-cd-dirname-0-pwd" class="headerlink" title="5. $(cd dirname $0;pwd)"></a>5. $(cd <code>dirname $0</code>;pwd)</h1><p><code>cd &quot;$(dirname &quot;$0&quot;)&quot;;pwd</code> 等同于 <code>$(dirname $(readlink -f &quot;$0&quot;))</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">在/home/admin/test/下新建test.sh内容如下：</span><br>cd `dirname $0`<br>echo `pwd`<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">然后返回到/home/admin/执行</span><br>sh test/test.sh<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">运行结果:</span><br>/home/admin/test<br></code></pre></td></tr></table></figure><h1 id="6-basename"><a href="#6-basename" class="headerlink" title="6. basename"></a>6. basename</h1><h2 id="1-basename"><a href="#1-basename" class="headerlink" title="1. basename"></a>1. basename</h2><p>打印除上层路径外的基础文件名；当文件名后存在后缀时，除去后面的后缀，如 # basename include&#x2F;stdio.h .h 只会打印出 stdio</p><h2 id="2-basename-s"><a href="#2-basename-s" class="headerlink" title="2. basename -s"></a>2. basename -s</h2><p>-s参数后面指定要去除的后缀字符，即：# basename -s .h include&#x2F;stdio.h 同 # basename include&#x2F;stdio.h .h 一样只会打印出 stdio</p><h2 id="3-basename-a"><a href="#3-basename-a" class="headerlink" title="3. basename -a"></a>3. basename -a</h2><p>-a参数可追加执行多个文件路径，取每一个路径的基础文件名并打印。用法如下图：</p><h1 id="7-pwd"><a href="#7-pwd" class="headerlink" title="7. pwd"></a>7. pwd</h1><h2 id="1-pwd-L"><a href="#1-pwd-L" class="headerlink" title="1. pwd -L"></a>1. pwd -L</h2><p>打印出环境变量 $PWD 的值，如果 PWD 赋值为当前工作路径，pwd 默认同 pwd -L</p><h2 id="2-pwd-P"><a href="#2-pwd-P" class="headerlink" title="2. pwd -P"></a>2. pwd -P</h2><p>打印真实路径，不打印链接的路径，区别如图：</p><h1 id="8-watch"><a href="#8-watch" class="headerlink" title="8. watch"></a>8. watch</h1><p><strong>命令参数</strong>：</p><p>-n 或 –interval watch 缺省每2秒运行一下程序，可以用 -n 或 -interval 来指定间隔的时间。</p><p>-d 或 –differences 用 -d 或 –differences 选项 watch 会高亮显示变化的区域。 而 -d&#x3D;cumulative 选项会把变动过的地方(不管最近的那次有没有变动)都高亮显示出来。</p><p>-t 或-no-title 会关闭watch命令在顶部的时间间隔,命令，当前时间的输出。</p><p><strong>示例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">watch -n 1 -d &quot;&lt;command&gt;&quot;<br></code></pre></td></tr></table></figure><h1 id="9-grep"><a href="#9-grep" class="headerlink" title="9. grep"></a>9. grep</h1><table><thead><tr><th>元字符</th><th>功能</th><th>例子</th><th>匹配什么</th></tr></thead><tbody><tr><td>^</td><td>锚定行的开始</td><td>&#x2F;^love&#x2F;</td><td>匹配所有以love开头的行</td></tr><tr><td>$</td><td>锚定行的结束</td><td>&#x2F;love$&#x2F;</td><td>匹配所有以love 结束的行</td></tr><tr><td>.</td><td>匹配一个字符</td><td>&#x2F;l..e&#x2F;</td><td>匹配这样的行，这些行包含这样的字符：第一个字符是l,紧跟着两个字符，然后是e</td></tr><tr><td>*</td><td>代表0个或多个先前字符</td><td>&#x2F;*love&#x2F;</td><td>匹配所有这样的行，有0个或多个空格，空格后跟着love</td></tr><tr><td>[]</td><td>匹配字符组中的一个字符</td><td>&#x2F;[Ll]ove&#x2F;</td><td>匹配所有包含love或者Love的行</td></tr><tr><td>[^]</td><td>匹配一个不在范围内的字符</td><td>&#x2F;[^A-Z]ove&#x2F;</td><td></td></tr><tr><td>&lt;</td><td>锚定单词的开始</td><td>&lt;love</td><td>匹配所有这样的行，这些行包含以love开头的单词（vi和grep支持这个功能）</td></tr><tr><td>&gt;</td><td>锚定单词的结束</td><td>Love&gt;</td><td>匹配所有这样的行，这些行包含以love结束的单词（vi和grep支持这个功能）</td></tr><tr><td>(..)</td><td>标记后面用到的匹配字符</td><td>&#x2F;(love)able1rs&#x2F;</td><td>最多可以使用9个标签。第一个标签是模板最左边的部分。在本例子中，模板love保存的标签为1，后面的1指得就是love；本例子搜索的是这样的行，这些行包含这样的字符，在Loveabel后面跟着lovers</td></tr><tr><td>x{m}</td><td>M次复制字符x</td><td></td><td></td></tr><tr><td>x{m,}</td><td>至少m次复制字符x</td><td></td><td></td></tr><tr><td>x{m,n}</td><td>至少m次，至多n次复制字x</td><td></td><td></td></tr><tr><td>w</td><td>文字和数字字符，[A-Za-z0-9]</td><td>Lw*e</td><td>匹配一个l字符，紧跟着0个或多个文字或数字字符，然后是e</td></tr><tr><td>W</td><td>同上</td><td></td><td></td></tr><tr><td>b</td><td>单词分界线</td><td>bloveb</td><td>仅仅匹配单词love</td></tr></tbody></table><h2 id="递归查找某个文本内容"><a href="#递归查找某个文本内容" class="headerlink" title="递归查找某个文本内容"></a>递归查找某个文本内容</h2><ul><li>R 表示递归，就是在当前目录找不到就去子目录找 </li><li>E 表示把文件名也打印出来 </li><li>n 打印此行在文件中的位置。</li></ul><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">这句可以显示在哪个文件里包含3306</span><br>grep -Rl &quot;3306&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">可以显现文件名，行数</span><br>grep -REn &quot;3306&quot;<br></code></pre></td></tr></table></figure><h3 id="查找替换内容"><a href="#查找替换内容" class="headerlink" title="查找替换内容"></a>查找替换内容</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">sed -i <span class="hljs-string">&quot;s/[原字符串]/[新字符串]/g&quot;</span> `grep <span class="hljs-string">&#x27;[原字符串]&#x27;</span> -rl /opt/kubernetes`</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">示例：替换/opt/kubernetes下所有文件内容为242的换成245</span><br>sed -i &quot;s/242/245/g&quot; `grep &#x27;242&#x27; -rl /opt/kubernetes`<br></code></pre></td></tr></table></figure><h1 id="10-查看端口占用"><a href="#10-查看端口占用" class="headerlink" title="10. 查看端口占用"></a>10. 查看端口占用</h1><h2 id="查看那些程序使用tcp的80端口"><a href="#查看那些程序使用tcp的80端口" class="headerlink" title="查看那些程序使用tcp的80端口"></a>查看那些程序使用tcp的80端口</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$</span><span class="language-bash">fuser -v -n tcp 80</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">fuser -v 80/tcp</span>  <br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-ls-系列&quot;&gt;&lt;a href=&quot;#1-ls-系列&quot; class=&quot;headerlink&quot; title=&quot;1. ls 系列&quot;&gt;&lt;/a&gt;1. ls 系列&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;-F：根据文件、目录等信息在文件名或目录名最后给予附加数据结构&lt;/p&gt;</summary>
      
    
    
    
    <category term="运维" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/"/>
    
    <category term="常用命令" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
    
    <category term="命令" scheme="https://blog.yahyav2rayssr.top/tags/%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>大数据常见错误：bash v3.2+ is required. Sorry.</title>
    <link href="https://blog.yahyav2rayssr.top/posts/9170957e/"/>
    <id>https://blog.yahyav2rayssr.top/posts/9170957e/</id>
    <published>2023-04-18T15:31:33.005Z</published>
    <updated>2023-04-18T15:31:33.006Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="bash-v3-2-is-required-Sorry"><a href="#bash-v3-2-is-required-Sorry" class="headerlink" title="bash v3.2+ is required. Sorry."></a>bash v3.2+ is required. Sorry.</h2><p>Running with <em>root</em> user:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">start-dfs.sh</span> <br>Starting namenodes on [master]<br>bash v3.2+ is required. Sorry.<br>Starting datanodes<br>bash v3.2+ is required. Sorry.<br>Starting secondary namenodes [master_bis]<br>bash v3.2+ is required. Sorry<br></code></pre></td></tr></table></figure><p>Then I created a <em>hadoop</em> user and gave this user privileges on the Hadoop installation (R&#x2F;W access). After logging in with this new user I have the following output for the command that caused me some troubles:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">start-dfs.sh</span> <br>Starting namenodes on [master]<br>Starting datanodes<br>Starting secondary namenodes [master_bis]<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;bash-v3-2-is-required-Sorry&quot;&gt;&lt;a href=&quot;#bash-v3-2-is-required-Sorr</summary>
      
    
    
    
    <category term="大数据" scheme="https://blog.yahyav2rayssr.top/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    <category term="安装部署" scheme="https://blog.yahyav2rayssr.top/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
    
    <category term="常见错误" scheme="https://blog.yahyav2rayssr.top/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/"/>
    
    
    <category term="大数据" scheme="https://blog.yahyav2rayssr.top/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>Java 数学运算</title>
    <link href="https://blog.yahyav2rayssr.top/posts/74a86a53/"/>
    <id>https://blog.yahyav2rayssr.top/posts/74a86a53/</id>
    <published>2023-04-18T15:31:32.956Z</published>
    <updated>2023-04-18T15:31:32.957Z</updated>
    
    <content type="html"><![CDATA[<h1 id="处理价格中逗号"><a href="#处理价格中逗号" class="headerlink" title="处理价格中逗号"></a>处理价格中逗号</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> &#123;  <br>    java.util.<span class="hljs-type">StringTokenizer</span> <span class="hljs-variable">st</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringTokenizer</span>( <span class="hljs-string">&quot;123,456,789&quot;</span>, <span class="hljs-string">&quot;,&quot;</span>);  <br>    <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();  <br>    <span class="hljs-keyword">while</span>(st.hasMoreTokens())   &#123;  <br>        sb.append(st.nextToken());  <br>    &#125;  <br>    System.out.println(sb);  <span class="hljs-comment">//123456789  </span><br>&#125;  <br>  <br><span class="hljs-meta">@Test</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span> &#123;  <br>    <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123,456,789&quot;</span>;  <br>    str = str.replace(<span class="hljs-string">&quot;,&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);  <br>    System.out.println(str);  <span class="hljs-comment">//123456789  </span><br>&#125;  <br></code></pre></td></tr></table></figure><h1 id="BigDecimal"><a href="#BigDecimal" class="headerlink" title="BigDecimal"></a>BigDecimal</h1><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><blockquote><p>尽量用字符串类型的初始化，保证精度是正确的。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-number">0.005</span>);<br><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-number">1000000</span>);<br><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">num3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(-<span class="hljs-number">1000000</span>);<br><span class="hljs-comment">//尽量用字符串的形式初始化</span><br><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">num12</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-string">&quot;0.005&quot;</span>);<br><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">num22</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-string">&quot;1000000&quot;</span>);<br><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">num32</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-string">&quot;-1000000&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="绝对值"><a href="#绝对值" class="headerlink" title="绝对值"></a>绝对值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">result4</span> <span class="hljs-operator">=</span> num3.abs();<br></code></pre></td></tr></table></figure><h2 id="数值类型转换"><a href="#数值类型转换" class="headerlink" title="数值类型转换"></a>数值类型转换</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">toString()                <span class="hljs-comment">/** 将BigDecimal对象的数值转换成字符串。**/</span><br>doubleValue()             <span class="hljs-comment">/** 将BigDecimal对象中的值以双精度数返回。**/</span><br>floatValue()              <span class="hljs-comment">/** 将BigDecimal对象中的值以单精度数返回。**/</span><br>longValue()               <span class="hljs-comment">/** 将BigDecimal对象中的值以长整数返回。**/</span><br>intValue()                <span class="hljs-comment">/** 将BigDecimal对象中的值以整数返回。**/</span><br></code></pre></td></tr></table></figure><h2 id="比较大小"><a href="#比较大小" class="headerlink" title="比较大小"></a>比较大小</h2><p>BigDecimal是通过使用<code>compareTo(BigDecimal)</code>来进行两个BigDecimal比较的。</p><h2 id="科学计数法"><a href="#科学计数法" class="headerlink" title="科学计数法"></a>科学计数法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">bd</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-string">&quot;3.40256010353E11&quot;</span>);  <br><span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> bd.toPlainString();  <br>System.out.println(result);  <span class="hljs-comment">//340256010353 </span><br></code></pre></td></tr></table></figure><h2 id="加减乘除"><a href="#加减乘除" class="headerlink" title="加减乘除"></a>加减乘除</h2><h3 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">result1</span> <span class="hljs-operator">=</span> num1.add(num2);<br></code></pre></td></tr></table></figure><h3 id="减法"><a href="#减法" class="headerlink" title="减法"></a>减法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">result2</span> <span class="hljs-operator">=</span> num1.subtract(num2);<br></code></pre></td></tr></table></figure><h3 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h3><blockquote><p>乘积之后小数点位数会变的不确定，所以一般在这之后还要调用<code>setScale(int newScale, RoundingMode roundingMode)</code>方法保留指定小数位数。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">result3</span> <span class="hljs-operator">=</span> num1.multiply(num2);<br></code></pre></td></tr></table></figure><h3 id="除法"><a href="#除法" class="headerlink" title="除法"></a>除法</h3><blockquote><p>使用除法函数在divide的时候要设置各种参数，<strong>要精确的小数位数和舍入模式</strong>，不然会出现报错。</p><p>一下为API讲解示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"># divisor：除数<br># scale：保留精度<br># roundingMode：进位方式，示例中为四舍五入法<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">divide</span><span class="hljs-params">(BigDecimal divisor, <span class="hljs-type">int</span> scale, <span class="hljs-type">int</span> roundingMode)</span><br></code></pre></td></tr></table></figure></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">result5</span> <span class="hljs-operator">=</span> num2.divide(num1, <span class="hljs-number">20</span>, BigDecimal.ROUND_HALF_UP);<br></code></pre></td></tr></table></figure><h4 id="八种舍入模式解释如下"><a href="#八种舍入模式解释如下" class="headerlink" title="八种舍入模式解释如下"></a>八种舍入模式解释如下</h4><h5 id="1、ROUND-UP"><a href="#1、ROUND-UP" class="headerlink" title="1、ROUND_UP"></a>1、ROUND_UP</h5><p>舍入远离零的舍入模式。</p><p>在丢弃非零部分之前始终增加数字(始终对非零舍弃部分前面的数字加1)。</p><p>注意，此舍入模式始终不会减少计算值的大小。</p><h5 id="2、ROUND-DOWN"><a href="#2、ROUND-DOWN" class="headerlink" title="2、ROUND_DOWN"></a>2、ROUND_DOWN</h5><p>接近零的舍入模式。</p><p>在丢弃某部分之前始终不增加数字(从不对舍弃部分前面的数字加1，即截短)。</p><p>注意，此舍入模式始终不会增加计算值的大小。</p><h5 id="3、ROUND-CEILING"><a href="#3、ROUND-CEILING" class="headerlink" title="3、ROUND_CEILING"></a>3、ROUND_CEILING</h5><p>接近正无穷大的舍入模式。</p><p>如果 BigDecimal 为正，则舍入行为与 ROUND_UP 相同;</p><p>如果为负，则舍入行为与 ROUND_DOWN 相同。</p><p>注意，此舍入模式始终不会减少计算值。</p><h5 id="4、ROUND-FLOOR"><a href="#4、ROUND-FLOOR" class="headerlink" title="4、ROUND_FLOOR"></a>4、ROUND_FLOOR</h5><p>接近负无穷大的舍入模式。</p><p>如果 BigDecimal 为正，则舍入行为与 ROUND_DOWN 相同;</p><p>如果为负，则舍入行为与 ROUND_UP 相同。</p><p>注意，此舍入模式始终不会增加计算值。</p><h5 id="5、ROUND-HALF-UP"><a href="#5、ROUND-HALF-UP" class="headerlink" title="5、ROUND_HALF_UP"></a>5、ROUND_HALF_UP</h5><p>向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则为向上舍入的舍入模式。</p><p>如果舍弃部分 &gt;&#x3D; 0.5，则舍入行为与 ROUND_UP 相同;否则舍入行为与 ROUND_DOWN 相同。</p><p>注意，这是我们大多数人在小学时就学过的舍入模式(四舍五入)。</p><h5 id="6、ROUND-HALF-DOWN"><a href="#6、ROUND-HALF-DOWN" class="headerlink" title="6、ROUND_HALF_DOWN"></a>6、ROUND_HALF_DOWN</h5><p>向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则为上舍入的舍入模式。</p><p>如果舍弃部分 &gt; 0.5，则舍入行为与 ROUND_UP 相同;否则舍入行为与 ROUND_DOWN 相同(五舍六入)。</p><h5 id="7、ROUND-HALF-EVEN"><a href="#7、ROUND-HALF-EVEN" class="headerlink" title="7、ROUND_HALF_EVEN"></a>7、ROUND_HALF_EVEN</h5><p>向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则向相邻的偶数舍入。</p><p>如果舍弃部分左边的数字为奇数，则舍入行为与 ROUND_HALF_UP 相同;</p><p>如果为偶数，则舍入行为与 ROUND_HALF_DOWN 相同。</p><p>注意，在重复进行一系列计算时，此舍入模式可以将累加错误减到最小。</p><p>此舍入模式也称为“<strong>银行家舍入法</strong>”，主要在美国使用。四舍六入，五分两种情况。</p><p>如果前一位为奇数，则入位，否则舍去。</p><p>以下例子为保留小数点1位，那么这种舍入方式下的结果。</p><p>1.15 &gt; 1.2</p><p>1.25 &gt; 1.2</p><h5 id="8、ROUND-UNNECESSARY"><a href="#8、ROUND-UNNECESSARY" class="headerlink" title="8、ROUND_UNNECESSARY"></a>8、ROUND_UNNECESSARY</h5><p>断言请求的操作具有精确的结果，因此不需要舍入。</p><p>如果对获得精确结果的操作指定此舍入模式，则抛出ArithmeticException。</p><img src="/posts/74a86a53/2018091611573630.jpg" class alt="img"><p>计算1÷3的结果（最后一种ROUND_UNNECESSARY在结果为无限小数的情况下会报错）</p><img src="/posts/74a86a53/2018091611592867.jpg" class alt="img"><h1 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h1><h3 id="NumberFormat"><a href="#NumberFormat" class="headerlink" title="NumberFormat"></a>NumberFormat</h3><p> NumberFormat是所有数值格式的抽象基类。此类提供格式化和解析数值的接口，可用于格式化和解析任何语言环境的数值。使代码能够完全独立于小数点、千位分隔符甚至所用特定小数位数的语言环境约定，并与数值格式是否为偶小数无关。</p><ul><li><code>getInstance</code> 或 <code>getNumberInstance</code> 获取常规数值格式。</li><li><code>getIntegerInstance</code> 只保留整数数值格式。</li><li><code>getCurrencyInstance</code> 获取货币数值格式。</li><li><code>getPercentInstance</code> 获取显示百分比的格式。使用此格式，小数 0.53 将显示为 53%。</li><li><code>setMinimumFractionDigits</code> 控制数值的显示。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">NumberFormat</span> <span class="hljs-variable">currency</span> <span class="hljs-operator">=</span> NumberFormat.getCurrencyInstance(); <span class="hljs-comment">//建立货币格式化引用</span><br><span class="hljs-type">NumberFormat</span> <span class="hljs-variable">percent</span> <span class="hljs-operator">=</span> NumberFormat.getPercentInstance();  <span class="hljs-comment">//建立百分比格式化引用</span><br>percent.setMaximumFractionDigits(<span class="hljs-number">3</span>); <span class="hljs-comment">//百分比小数点最多3位</span><br><br><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">loanAmount</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-string">&quot;150.48&quot;</span>); <span class="hljs-comment">//贷款金额</span><br><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">interestRate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-string">&quot;0.008&quot;</span>); <span class="hljs-comment">//利率</span><br><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">interest</span> <span class="hljs-operator">=</span> loanAmount.multiply(interestRate); <span class="hljs-comment">//相乘</span><br><br>System.out.println(<span class="hljs-string">&quot;贷款金额:\t&quot;</span> + currency.format(loanAmount)); <span class="hljs-comment">//贷款金额: ￥150.48</span><br>System.out.println(<span class="hljs-string">&quot;利率:\t&quot;</span> + percent.format(interestRate));  <span class="hljs-comment">//利率: 0.8%</span><br>System.out.println(<span class="hljs-string">&quot;利息:\t&quot;</span> + currency.format(interest)); <span class="hljs-comment">//利息: ￥1.20</span><br></code></pre></td></tr></table></figure><h3 id="DecimalFormat"><a href="#DecimalFormat" class="headerlink" title="DecimalFormat"></a>DecimalFormat</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span> &#123;  <br>    <span class="hljs-type">DecimalFormat</span> <span class="hljs-variable">df</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DecimalFormat</span>();  <br>    <span class="hljs-type">double</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-number">1234.56789</span>; <span class="hljs-comment">//格式化之前的数字  </span><br>    <span class="hljs-comment">//1、定义要显示的数字的格式（这种方式会四舍五入）  </span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">style</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;0.0&quot;</span>;  <br>    df.applyPattern(style);  <br>    System.out.println(<span class="hljs-string">&quot;1--&gt;&quot;</span> + df.format(data));  <span class="hljs-comment">//1234.6  </span><br>  <br>    <span class="hljs-comment">//2、在格式后添加诸如单位等字符  </span><br>    style = <span class="hljs-string">&quot;00000.000 kg&quot;</span>;  <br>    df.applyPattern(style);  <br>    System.out.println(<span class="hljs-string">&quot;2--&gt;&quot;</span> + df.format(data));  <span class="hljs-comment">//01234.568 kg  </span><br>  <br>    <span class="hljs-comment">//3、 模式中的&quot;#&quot;表示如果该位存在字符，则显示字符，如果不存在，则不显示。  </span><br>    style = <span class="hljs-string">&quot;##000.000 kg&quot;</span>;  <br>    df.applyPattern(style);  <br>    System.out.println(<span class="hljs-string">&quot;3--&gt;&quot;</span> + df.format(data));  <span class="hljs-comment">//1234.568 kg  </span><br>  <br>    <span class="hljs-comment">//4、 模式中的&quot;-&quot;表示输出为负数，要放在最前面  </span><br>    style = <span class="hljs-string">&quot;-000.000&quot;</span>;  <br>    df.applyPattern(style);  <br>    System.out.println(<span class="hljs-string">&quot;4--&gt;&quot;</span> + df.format(data)); <span class="hljs-comment">//-1234.568  </span><br> <br>    <span class="hljs-comment">//5、 模式中的&quot;,&quot;在数字中添加逗号，方便读数字  </span><br>    style = <span class="hljs-string">&quot;-0,000.0#&quot;</span>;  <br>    df.applyPattern(style);  <br>    System.out.println(<span class="hljs-string">&quot;5--&gt;&quot;</span> + df.format(data));  <span class="hljs-comment">//5--&gt;-1,234.57  </span><br>  <br>    <span class="hljs-comment">//6、模式中的&quot;E&quot;表示输出为指数，&quot;E&quot;之前的字符串是底数的格式，  </span><br>    <span class="hljs-comment">// &quot;E&quot;之后的是字符串是指数的格式  </span><br>    style = <span class="hljs-string">&quot;0.00E000&quot;</span>;  <br>    df.applyPattern(style);  <br>    System.out.println(<span class="hljs-string">&quot;6--&gt;&quot;</span> + df.format(data));  <span class="hljs-comment">//6--&gt;1.23E003  </span><br>  <br>    <span class="hljs-comment">//7、 模式中的&quot;%&quot;表示乘以100并显示为百分数，要放在最后。  </span><br>    style = <span class="hljs-string">&quot;0.00%&quot;</span>;  <br>    df.applyPattern(style);  <br>    System.out.println(<span class="hljs-string">&quot;7--&gt;&quot;</span> + df.format(data));  <span class="hljs-comment">//7--&gt;123456.79%  </span><br>  <br>    <span class="hljs-comment">//8、 模式中的&quot;\u2030&quot;表示乘以1000并显示为千分数，要放在最后。  </span><br>    style = <span class="hljs-string">&quot;0.00\u2030&quot;</span>;  <br>    <span class="hljs-comment">//在构造函数中设置数字格式  </span><br>    <span class="hljs-type">DecimalFormat</span> <span class="hljs-variable">df1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DecimalFormat</span>(style);  <br>    <span class="hljs-comment">//df.applyPattern(style);  </span><br>    System.out.println(<span class="hljs-string">&quot;8--&gt;&quot;</span> + df1.format(data));  <span class="hljs-comment">//8--&gt;1234567.89‰  </span><br>&#125;  <br></code></pre></td></tr></table></figure><h1 id="Double保留两位小数"><a href="#Double保留两位小数" class="headerlink" title="Double保留两位小数"></a>Double保留两位小数</h1><h2 id="DecimalFormat-方式"><a href="#DecimalFormat-方式" class="headerlink" title="DecimalFormat 方式"></a>DecimalFormat 方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">DecimalFormat</span> <span class="hljs-variable">df</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DecimalFormat</span>(<span class="hljs-string">&quot;0.00&quot;</span>);<br><br><span class="hljs-type">double</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> <span class="hljs-number">3.23456</span>;<br><span class="hljs-type">double</span> <span class="hljs-variable">d2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.0</span>;<br><span class="hljs-type">double</span> <span class="hljs-variable">d3</span> <span class="hljs-operator">=</span> <span class="hljs-number">2.0</span>;<br>System.out.println(df.format(d1));<br>System.out.println(df.format(d2));<br>System.out.println(df.format(d3));<br></code></pre></td></tr></table></figure><h2 id="BigDecimal-setScale-方式"><a href="#BigDecimal-setScale-方式" class="headerlink" title="BigDecimal#setScale 方式"></a>BigDecimal#setScale 方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">double</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-number">111231.5585</span>;<br><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(f);<br><span class="hljs-type">double</span> <span class="hljs-variable">f1</span> <span class="hljs-operator">=</span> b.setScale(<span class="hljs-number">2</span>, BigDecimal.ROUND_HALF_UP).doubleValue();<br>System.out.println(f1);<br></code></pre></td></tr></table></figure><h2 id="String-format-方式"><a href="#String-format-方式" class="headerlink" title="String#format 方式"></a>String#format 方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">double</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-number">3.1415926</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;%.2f&quot;</span>, d);<br>System.out.println(result);<br></code></pre></td></tr></table></figure><h2 id="NumberFormat-format-方式"><a href="#NumberFormat-format-方式" class="headerlink" title="NumberFormat#format 方式"></a>NumberFormat#format 方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">double</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">23.5455</span>;<br><br><span class="hljs-type">NumberFormat</span> <span class="hljs-variable">ddf1</span> <span class="hljs-operator">=</span> NumberFormat.getNumberInstance();<br>ddf1.setMaximumFractionDigits(<span class="hljs-number">2</span>);<br><br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> ddf1.format(x);<br>System.out.print(s);<br></code></pre></td></tr></table></figure><h1 id="科学计数法-1"><a href="#科学计数法-1" class="headerlink" title="科学计数法"></a>科学计数法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">bd</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-string">&quot;3.40256010353E11&quot;</span>);  <br><span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> bd.toPlainString();  <br>System.out.println(result);  <span class="hljs-comment">//340256010353  </span><br></code></pre></td></tr></table></figure><h1 id="处理价格中逗号-1"><a href="#处理价格中逗号-1" class="headerlink" title="处理价格中逗号"></a>处理价格中逗号</h1><h2 id="StringTokenizer处理"><a href="#StringTokenizer处理" class="headerlink" title="StringTokenizer处理"></a>StringTokenizer处理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">StringTokenizer</span> <span class="hljs-variable">st</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringTokenizer</span>(<span class="hljs-string">&quot;123,456,789&quot;</span>, <span class="hljs-string">&quot;,&quot;</span>);<br><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br><span class="hljs-keyword">while</span> (st.hasMoreTokens()) &#123;<br>    sb.append(st.nextToken());<br>&#125;<br>System.out.println(sb);  <span class="hljs-comment">//123456789</span><br></code></pre></td></tr></table></figure><h2 id="常规处理"><a href="#常规处理" class="headerlink" title="常规处理"></a>常规处理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123,456,789&quot;</span>;  <br>str = str.replace(<span class="hljs-string">&quot;,&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);  <br>System.out.println(str);  <span class="hljs-comment">//123456789 </span><br></code></pre></td></tr></table></figure><h1 id="BigDecimal数据转换为JSON时精度不丢失"><a href="#BigDecimal数据转换为JSON时精度不丢失" class="headerlink" title="BigDecimal数据转换为JSON时精度不丢失"></a>BigDecimal数据转换为JSON时精度不丢失</h1><p><code>BigDecimalRetainFractionSerializer</code>类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.fasterxml.jackson.core.JsonGenerator;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.JsonSerializer;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.SerializerProvider;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BigDecimalRetainFractionSerializer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JsonSerializer</span>&lt;BigDecimal&gt; &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(BigDecimal value, JsonGenerator gen, SerializerProvider serializers)</span> <span class="hljs-keyword">throws</span> IOException, JsonProcessingException &#123;<br>        <span class="hljs-keyword">if</span> (value != <span class="hljs-literal">null</span>) &#123;<br>            gen.writeString(value.toString());<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            gen.writeNull();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>属性字段上添加注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@JsonSerialize(using = BigDecimalRetainFractionSerializer.class)</span><br><span class="hljs-keyword">private</span> BigDecimal value;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;处理价格中逗号&quot;&gt;&lt;a href=&quot;#处理价格中逗号&quot; class=&quot;headerlink&quot; title=&quot;处理价格中逗号&quot;&gt;&lt;/a&gt;处理价格中逗号&lt;/h1&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.yahyav2rayssr.top/categories/Java/"/>
    
    <category term="Java 基础" scheme="https://blog.yahyav2rayssr.top/categories/Java/Java-%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="https://blog.yahyav2rayssr.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Maven 常见问题</title>
    <link href="https://blog.yahyav2rayssr.top/posts/4f5fa1df/"/>
    <id>https://blog.yahyav2rayssr.top/posts/4f5fa1df/</id>
    <published>2023-04-18T15:31:32.857Z</published>
    <updated>2023-04-18T15:31:32.858Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="1、Maven-多模块打包时提示-找不到符号"><a href="#1、Maven-多模块打包时提示-找不到符号" class="headerlink" title="1、Maven 多模块打包时提示 找不到符号"></a>1、Maven 多模块打包时提示 找不到符号</h2><p>子模块使用 pom 打包方式即可解决</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果还未能解决，在公共模块或者当前模块下加入打包工具</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;build&gt;<br>    &lt;plugins&gt;<br>        &lt;plugin&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;<br>     &lt;!-- 加入此配置start --&gt;<br>            &lt;configuration&gt;<br>                &lt;classifier&gt;exec&lt;/classifier&gt;<br>            &lt;/configuration&gt;<br>     &lt;!-- 加入此配置end --&gt;<br>        &lt;/plugin&gt;<br>    &lt;/plugins&gt;<br>&lt;/build&gt;<br></code></pre></td></tr></table></figure><h2 id="2、Could-not-find-artifact-XXXX-in-aliyun-spring"><a href="#2、Could-not-find-artifact-XXXX-in-aliyun-spring" class="headerlink" title="2、Could not find artifact XXXX in aliyun-spring"></a>2、Could not find artifact XXXX in aliyun-spring</h2><p>Maven在下载依赖时会先在本地仓库查找，如若未找到，则会去内网私服查找，如若仍未找到，再去远程仓库查找。</p><p>所以只要把jar包打包到本地缓存仓库即可，如下图所示：</p><img src="/posts/4f5fa1df/image-20210710161747133.png" class alt="image-20210710161747133"><h2 id="3、Failed-to-execute-goal-org-apache-maven-plugins-maven-clean-plugin"><a href="#3、Failed-to-execute-goal-org-apache-maven-plugins-maven-clean-plugin" class="headerlink" title="3、Failed to execute goal org.apache.maven.plugins:maven-clean-plugin"></a>3、Failed to execute goal org.apache.maven.plugins:maven-clean-plugin</h2><p>解除提示对应的文件占用即可</p><h2 id="4、org-x2F-apache-x2F-maven-x2F-shared-x2F-artifact-x2F-filter-x2F-collection-x2F-ArtifactsFilter"><a href="#4、org-x2F-apache-x2F-maven-x2F-shared-x2F-artifact-x2F-filter-x2F-collection-x2F-ArtifactsFilter" class="headerlink" title="4、org&#x2F;apache&#x2F;maven&#x2F;shared&#x2F;artifact&#x2F;filter&#x2F;collection&#x2F;ArtifactsFilter"></a>4、org&#x2F;apache&#x2F;maven&#x2F;shared&#x2F;artifact&#x2F;filter&#x2F;collection&#x2F;ArtifactsFilter</h2><p>原来是没有在仓库中找到对应的插件，指定一个找得到的版本号即可解决</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.5.2.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="5、打包后丢失xml文件"><a href="#5、打包后丢失xml文件" class="headerlink" title="5、打包后丢失xml文件"></a>5、打包后丢失xml文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 是否替换资源中的属性 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="6、resolution-will-not-be-reattempted-until-the-update-interval-of-nexus-has-elapsed-or-updates-are-forced"><a href="#6、resolution-will-not-be-reattempted-until-the-update-interval-of-nexus-has-elapsed-or-updates-are-forced" class="headerlink" title="6、resolution will not be reattempted until the update interval of nexus has elapsed or updates are forced"></a>6、resolution will not be reattempted until the update interval of nexus has elapsed or updates are forced</h2><p>项目jar包是放在nexus上的，这是由于私服的更新策略导致的，nexus上的依赖库在更新库版本号打包时并没有更新，导致项目打包找不到依赖。</p><p>解决方法：</p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>修改nexus的依赖库更新策略，添加 <code>&lt;updatePolicy&gt;always&lt;/updatePolicy&gt;</code></p><p>updatePolicy 该元素指定更新发生的频率。Maven会比较本地 POM 和远程 POM 的时间戳。这里的选项是：</p><ul><li>always（一直）</li><li>daily（默认，每日）</li><li>interval:X（这里X是以分钟为单位的时间间隔）</li><li>never（从不）</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>zang-nexus<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">repositories</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>zang-nexus<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://10.253.40.2XX:6XXX/nexus/content/groups/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">releases</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><br>　　　　　　　　　 <span class="hljs-tag">&lt;<span class="hljs-name">updatePolicy</span>&gt;</span>always<span class="hljs-tag">&lt;/<span class="hljs-name">updatePolicy</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">releases</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">snapshots</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><br>　　　　　　　　　 <span class="hljs-tag">&lt;<span class="hljs-name">updatePolicy</span>&gt;</span>always<span class="hljs-tag">&lt;/<span class="hljs-name">updatePolicy</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">snapshots</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">repositories</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">pluginRepositories</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">pluginRepository</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>zang-nexus<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://10.253.40.2XX:6XXX/nexus/content/groups/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">releases</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><br>　　　　　　　　　 <span class="hljs-tag">&lt;<span class="hljs-name">updatePolicy</span>&gt;</span>always<span class="hljs-tag">&lt;/<span class="hljs-name">updatePolicy</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">releases</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">snapshots</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><br>　　　　　　　　　 <span class="hljs-tag">&lt;<span class="hljs-name">updatePolicy</span>&gt;</span>always<span class="hljs-tag">&lt;/<span class="hljs-name">updatePolicy</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">snapshots</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">pluginRepository</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">pluginRepositories</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>删除未下载成功的文件，重新编译</p><p>maven默认会使用本地缓存的库来编译工程，对于上次下载失败的库，maven会在 <code>Repository/&lt;group&gt;/&lt;artifact&gt;/&lt;version&gt;/</code> 目录下创建 xxx.lastUpdated 文件，一旦这个文件存在，那么在直到下一次nexus更新之前都不会更新这个依赖库，所以可以根据报错信息，删除 <code>Repository/&lt;group&gt;/&lt;artifact&gt;/&lt;version&gt;/</code> 目录下的 *.lastUpdated 文件，然后再次运行 mvn compile 编译工程。</p><h2 id="7、Maven传递依赖无法引入解决办法"><a href="#7、Maven传递依赖无法引入解决办法" class="headerlink" title="7、Maven传递依赖无法引入解决办法"></a>7、Maven传递依赖无法引入解决办法</h2><p>使用 <code>mvn install -X</code> 命令查看完整编译过程，发现有文件提示使用了<strong>未经检查或不安全的操作</strong>，在提示警告的文件类上增加以下注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br></code></pre></td></tr></table></figure><p>问题解决。</p><h2 id="8、-WARNING-File-encoding-has-not-been-set-using-platform-encoding-UTF-8-i-e-build-is-platform-dependent"><a href="#8、-WARNING-File-encoding-has-not-been-set-using-platform-encoding-UTF-8-i-e-build-is-platform-dependent" class="headerlink" title="8、[WARNING] File encoding has not been set, using platform encoding UTF-8, i.e. build is platform dependent"></a>8、[WARNING] File encoding has not been set, using platform encoding UTF-8, i.e. build is platform dependent</h2><p>在 pom.xml 文件中增加一个配置项：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;常见问题&quot;&gt;&lt;a href=&quot;#常见问题&quot; class=&quot;headerlink&quot; title=&quot;常见问题&quot;&gt;&lt;/a&gt;常见问题&lt;/h1&gt;&lt;h2 id=&quot;1、Maven-多模块打包时提示-找不到符号&quot;&gt;&lt;a href=&quot;#1、Maven-多模块打包时提示-找不到符号&quot;</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.yahyav2rayssr.top/categories/Java/"/>
    
    <category term="maven" scheme="https://blog.yahyav2rayssr.top/categories/Java/maven/"/>
    
    
    <category term="maven" scheme="https://blog.yahyav2rayssr.top/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>JVM 垃圾收集器与内存分配策略</title>
    <link href="https://blog.yahyav2rayssr.top/posts/5b44aded/"/>
    <id>https://blog.yahyav2rayssr.top/posts/5b44aded/</id>
    <published>2023-04-18T15:31:32.702Z</published>
    <updated>2023-04-18T15:31:32.703Z</updated>
    
    <content type="html"><![CDATA[<h1 id="垃圾收集器与内存分配策略"><a href="#垃圾收集器与内存分配策略" class="headerlink" title="垃圾收集器与内存分配策略"></a>垃圾收集器与内存分配策略</h1><h2 id="对象回收处理过程"><a href="#对象回收处理过程" class="headerlink" title="对象回收处理过程"></a>对象回收处理过程</h2><img src="/posts/5b44aded/22.jpg" class><h2 id="判断对象是否存活"><a href="#判断对象是否存活" class="headerlink" title="判断对象是否存活"></a>判断对象是否存活</h2><p>判断一个对象是否存活需要同时满足以下三个条件：</p><ol><li>该类所有的实例都已经被回收</li><li>加载该类的类加载器已经被回收</li><li>该类对应的java.lang.Class对象没有在任何地方被引用</li></ol><h3 id="引用计数算法"><a href="#引用计数算法" class="headerlink" title="引用计数算法"></a><del>引用计数算法</del></h3><p>引用计数法的逻辑是：在堆中存储对象时，在对象头处维护一个counter计数器，如果一个对象增加了一个引用与之相连，则将counter++。如果一个引用关系失效则counter–。如果一个对象的counter变为0，则说明该对象已经被废弃，不处于存活状态。</p><img src="/posts/5b44aded/20.jpg" class><p>这种方法来标记对象的状态会存在很多问题：</p><blockquote><p>1 jdk从1.2开始增加了多种引用方式：软引用、弱引用、虚引用，且在不同引用情况下程序应进行不同的操作。如果我们只采用一个引用计数法来计数无法准确的区分这么多种引用的情况。</p></blockquote><p>引用计数法无法解决多种类型引用的问题。但这并不是致命的，因为我们可以通过增加逻辑区分四种引用情况，虽然麻烦一些但还算是引用计数法的变体，真正让引用计数法彻底报废的下面的情况；如果一个对象A持有对象B，而对象B也持有一个对象A，那发生了类似操作系统中死锁的循环持有，这种情况下A与B的counter恒大于1，会使得GC永远无法回收这两个对象。</p><img src="/posts/5b44aded/21.jpg" class><h3 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h3><p>在主流的商用程序语言中(Java和C#)，都是使用可达性分析算法判断对象是否存活的。这个算法的基本思路就是通过一系列名为<strong>GC Roots</strong>的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链(Reference Chain)，当一个对象到GC Roots没有任何引用链相连时，则证明此对象是不可用的，下图对象object5, object6, object7虽然有互相判断，但它们到GC Roots是不可达的，所以它们将会判定为是可回收对象。</p><img src="/posts/5b44aded/17.jpg" class><p>如下情况的对象可以作为GC Roots：</p><ul><li><p>虚拟机栈(栈桢中的本地变量表)中的引用的对象</p></li><li><p>方法区中的类静态属性引用的对象</p></li><li><p>方法区中的常量引用的对象</p></li><li><p>本地方法栈中JNI（Native方法）的引用的对象</p></li><li><p>所有被同步锁持有的对象</p></li><li><p>反应Java虚拟机内部情况的JMXBean、JVMTI中注册的回调、本地代码缓存等。</p></li></ul><h2 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h2><h3 id="强引用-StrongReference"><a href="#强引用-StrongReference" class="headerlink" title="强引用(StrongReference)"></a>强引用(StrongReference)</h3><p><strong>强引用</strong>是使用最普遍的引用。如果一个对象具有强引用，那<strong>垃圾回收器</strong>绝不会回收它。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Object</span> <span class="hljs-variable">strongReference</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br></code></pre></td></tr></table></figure><h3 id="软引用-SoftReference"><a href="#软引用-SoftReference" class="headerlink" title="软引用(SoftReference)"></a>软引用(SoftReference)</h3><p>如果一个对象只具有<strong>软引用</strong>，则<strong>内存空间充足</strong>时，<strong>垃圾回收器</strong>就<strong>不会</strong>回收它；如果<strong>内存空间不足</strong>了，就会<strong>回收</strong>这些对象的内存。只要垃圾回收器没有回收它，该对象就可以被程序使用。</p><blockquote><p>软引用可用来实现内存敏感的高速缓存。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 强引用</span><br><span class="hljs-type">String</span> <span class="hljs-variable">strongReference</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;abc&quot;</span>);<br><span class="hljs-comment">// 软引用</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;abc&quot;</span>);<br>SoftReference&lt;String&gt; softReference = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SoftReference</span>&lt;String&gt;(str);<br></code></pre></td></tr></table></figure><h3 id="弱引用-WeakReference"><a href="#弱引用-WeakReference" class="headerlink" title="弱引用(WeakReference)"></a>弱引用(WeakReference)</h3><p><strong>弱引用</strong>与<strong>软引用</strong>的区别在于：只具有<strong>弱引用</strong>的对象拥有<strong>更短暂</strong>的<strong>生命周期</strong>。在垃圾回收器线程扫描它所管辖的内存区域的过程中，一旦发现了只具有<strong>弱引用</strong>的对象，不管当前<strong>内存空间足够与否</strong>，都会<strong>回收</strong>它的内存。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;abc&quot;</span>);<br>   WeakReference&lt;String&gt; weakReference = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakReference</span>&lt;&gt;(str);<br>   str = <span class="hljs-literal">null</span>;<br>   <br><span class="hljs-comment">// 复制代码JVM首先将软引用中的对象引用置为null，然后通知垃圾回收器进行回收：</span><br>   str = <span class="hljs-literal">null</span>;<br>   System.gc();<br></code></pre></td></tr></table></figure><p><strong>弱引用</strong>再次变为一个<strong>强引用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;abc&quot;</span>);<br>WeakReference&lt;String&gt; weakReference = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakReference</span>&lt;&gt;(str);<br><span class="hljs-comment">// 弱引用转强引用</span><br><span class="hljs-type">String</span> <span class="hljs-variable">strongReference</span> <span class="hljs-operator">=</span> weakReference.get();<br></code></pre></td></tr></table></figure><h3 id="虚引用-PhantomReference"><a href="#虚引用-PhantomReference" class="headerlink" title="虚引用(PhantomReference)"></a>虚引用(PhantomReference)</h3><p><strong>虚引用</strong>顾名思义，就是<strong>形同虚设</strong>。与其他几种引用都不同，<strong>虚引用</strong>并<strong>不会</strong>决定对象的<strong>生命周期</strong>。如果一个对象<strong>仅持有虚引用</strong>，那么它就和<strong>没有任何引用</strong>一样，在任何时候都可能被垃圾回收器回收。</p><p><strong>应用场景：</strong></p><p><strong>虚引用</strong>主要用来<strong>跟踪对象</strong>被垃圾回收器<strong>回收</strong>的活动。 <strong>虚引用</strong>与<strong>软引用</strong>和<strong>弱引用</strong>的一个区别在于：</p><blockquote><p>虚引用必须和引用队列(ReferenceQueue)联合使用。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之关联的引用队列中。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;abc&quot;</span>);<br><span class="hljs-type">ReferenceQueue</span> <span class="hljs-variable">queue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReferenceQueue</span>();<br><span class="hljs-comment">// 创建虚引用，要求必须与一个引用队列关联</span><br><span class="hljs-type">PhantomReference</span> <span class="hljs-variable">pr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PhantomReference</span>(str, queue);<br></code></pre></td></tr></table></figure><p><strong>总结：</strong></p><table><thead><tr><th>引用类型</th><th>被垃圾回收时间</th><th>用途</th><th>生存时间</th></tr></thead><tbody><tr><td>强引用</td><td>从来不会</td><td>对象的一般状态</td><td>JVM停止运行时终止</td></tr><tr><td>软引用</td><td>当内存不足时</td><td>对象缓存</td><td>内存不足时终止</td></tr><tr><td>弱引用</td><td>正常垃圾回收时</td><td>对象缓存</td><td>垃圾回收后终止</td></tr><tr><td>虚引用</td><td>正常垃圾回收时</td><td>跟踪对象的垃圾回收</td><td>垃圾回收后终止</td></tr></tbody></table><blockquote><p>任何一个对象的finallize()方法都只会被系统调用一次。</p></blockquote><h2 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h2><p>垃圾收集算法可以划分为“引用计数式垃圾收集”和“追踪式垃圾收集”两大类。</p><img src="/posts/5b44aded/23.jpg" class><h3 id="分代收集理论"><a href="#分代收集理论" class="headerlink" title="分代收集理论"></a>分代收集理论</h3><ul><li><p>弱分代假说：绝大多数对象都是朝生夕灭的。</p></li><li><p>强分代假说：熬过越多次垃圾收集过程的对象就越难以消亡。</p></li><li><p>跨代引用假说：举个例子，如果某个新生代对象存在跨代引用，由于年老代对象难以消亡，该引用会使得新生代对象在收集时同样得以存活，进而在年龄增长之后晋升到年老代中，这时跨代引用也随即被消除了。</p><p>根据此引申出一个在新生代的数据结构，俗称<strong>记忆集</strong>：这个结构把年老代划分成若干小块，当发生新生代收集时，引用的小块内存里的对象才会被加入到GC Roots进行扫描。</p></li></ul><blockquote><p>GC概念：</p><ul><li><p>部分收集（Partial PC）</p><ul><li><p>新生代收集（Minor GC &#x2F; Young GC）</p></li><li><p>老年代收集（Major GC &#x2F; Old GC）：目前只有CMS收集器会有单独收集老年代的行为。</p></li></ul></li><li><p>整堆收集（Full GC）</p></li></ul></blockquote><h3 id="标记清除算法"><a href="#标记清除算法" class="headerlink" title="标记清除算法"></a><strong>标记清除算法</strong></h3><p>该算法用于<strong>新生代</strong>的处理，标记-清除算法分为标记和清除两个阶段。该算法首先从根集合进行扫描，对存活的对象对象标记，标记完毕后，再扫描整个空间中未被标记的对象并进行回收（也可以反过来标记存活的对象）</p><img src="/posts/5b44aded/18.jpg" class><ul><li><strong>效率问题：</strong>标记和清除两个过程的效率都不高;</li><li><strong>空间碎片化问题：</strong>标记-清除算法不需要进行对象的移动，并且仅对不存活的对象进行处理，因此标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致以后在程序运行过程中需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。</li></ul><img src="/posts/5b44aded/19.jpg" class><h3 id="半复制算法"><a href="#半复制算法" class="headerlink" title="半复制算法"></a><strong>半复制算法</strong></h3><p><strong>复制算法将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。</strong>这种算法适用于对象存活率低的场景，比如新生代。</p><img src="/posts/5b44aded/24.jpg" class><h4 id="Appel式回收原理"><a href="#Appel式回收原理" class="headerlink" title="Appel式回收原理"></a>Appel式回收原理</h4><p>Appel式回收是针对标准ML提出的一种自适应分代策略，在ML语言中，一次回收完成通常只有不到2%的对象能够存活，Appel式回收正式针对这一种情况而设计的策略。<strong>Appel式回收策略将空间分为三个：老年代、复制保留区、新生代，在HotSpot虚拟机中的实现中新生代收集器将新生代变成Eden空间，将复制保留区变成两块较小的Survivor空间，在程序运行中每次分配内存只使用Eden和其中一块Survivor空间，在发生垃圾收集时，将存活的对象复制到保留的那一块Survivor上，另外两块空间直接清零</strong>（在HotSpot虚拟机中Eden和Survivor的比例为8:1）。</p><p>可通过JVM参数：<code>-XX:SurvivorRatio</code>配置比例，<code>-XX:SurvivorRatio=8</code> 表示 <code>Eden区大小 / 1块Survivor区大小 = 8</code>。</p><p><strong>第一次Young GC</strong></p><img src="/posts/5b44aded/25.jpg" class><p>当Eden区满的时候，触发第一次Young GC，把存活对象拷贝到Survivor的from区，清空Eden区。</p><p>当Survivor空间不足以容纳一次Minor GC之后，就需要依赖其他内存区域（大部分时候是老年代）进行分配担保，这些没有足够空间存放的对象直接进入其他区域；再次触发Young GC，扫描Eden区和from区，把存活的对象复制到To区，清空Eden区和from区。如果此时Survivor区的空间不够了，就会提前把对象放入老年代。</p><p><strong>第二次Young GC</strong></p><img src="/posts/5b44aded/26.jpg" class><p>再次触发Young GC，扫描Eden区和from区，把存活的对象复制到To区，清空Eden区和from区。如果此时Survivor区的空间不够了，就会提前把对象放入老年代。</p><blockquote><p>交换次数可以通过JVM参数<code>MaxTenuringThreshold</code>进行设置。</p></blockquote><h3 id="标记-整理算法"><a href="#标记-整理算法" class="headerlink" title="标记-整理算法"></a>标记-整理算法</h3><p>标记整理算法的标记过程类似标记清除算法，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存，类似于磁盘整理的过程，该垃圾回收算法适用于对象存活率高的场景（<strong>老年代</strong>）。</p><img src="/posts/5b44aded/27.jpg" class><blockquote><p>Hotspot虚拟机里面关注吞吐量的Parallel Scavenge收集是基于标记-整理算法的；</p><p>而关注延迟的CMS收集器则是基于标记-清除算法的，辅助以标记-整理算法，两种算法同时使用。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;垃圾收集器与内存分配策略&quot;&gt;&lt;a href=&quot;#垃圾收集器与内存分配策略&quot; class=&quot;headerlink&quot; title=&quot;垃圾收集器与内存分配策略&quot;&gt;&lt;/a&gt;垃圾收集器与内存分配策略&lt;/h1&gt;&lt;h2 id=&quot;对象回收处理过程&quot;&gt;&lt;a href=&quot;#对象回收处</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.yahyav2rayssr.top/categories/Java/"/>
    
    <category term="JVM" scheme="https://blog.yahyav2rayssr.top/categories/Java/JVM/"/>
    
    
    <category term="JVM" scheme="https://blog.yahyav2rayssr.top/tags/JVM/"/>
    
    <category term="垃圾收集器" scheme="https://blog.yahyav2rayssr.top/tags/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Intellij IDEA 常见错误</title>
    <link href="https://blog.yahyav2rayssr.top/posts/4211b3cd/"/>
    <id>https://blog.yahyav2rayssr.top/posts/4211b3cd/</id>
    <published>2023-04-18T15:31:32.661Z</published>
    <updated>2023-04-18T15:31:32.662Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="Command-line-is-too-long"><a href="#Command-line-is-too-long" class="headerlink" title="Command line is too long"></a>Command line is too long</h2><p>报错内容:</p><p>Error running ‘ServiceStarter’: Command line is too long. Shorten command line for ServiceStarter or also for Application default configuration.</p><p>解法:</p><p>修改项目下 <code>.idea\workspace.xml</code>，找到标签 <code>&lt;component name=&quot;PropertiesComponent&quot;&gt;</code> ， 在标签里加一行 <code>&lt;property name=&quot;dynamic.classpath&quot; value=&quot;true&quot; /&gt;</code></p><h2 id="中文乱码以及-SpringBoot-yml配置文件中文乱码"><a href="#中文乱码以及-SpringBoot-yml配置文件中文乱码" class="headerlink" title="中文乱码以及(SpringBoot)yml配置文件中文乱码"></a>中文乱码以及(SpringBoot)yml配置文件中文乱码</h2><p>打开设置并搜索File Encodings,全部改成UTF-8，示图如下：</p><img src="/posts/4211b3cd/20200524104000676.png" class alt="img"><h2 id="maven-控制台中文乱码"><a href="#maven-控制台中文乱码" class="headerlink" title="maven 控制台中文乱码"></a>maven 控制台中文乱码</h2><p>打开 File -&gt; Settings -&gt; Build, Execution, Deployment -&gt; Build Tools -&gt; Maven -&gt; Runner 菜单，在 VM Options 选项框里添加以下参数（无需重启）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">-Dfile.encoding=GB2312<br></code></pre></td></tr></table></figure><p>如图所示：</p><img src="/posts/4211b3cd/image-20230215175452549.png" alt="image-20230215175452549" style="zoom:80%;">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;Command-line-is-too-long&quot;&gt;&lt;a href=&quot;#Command-line-is-too-long&quot; cla</summary>
      
    
    
    
    <category term="研发工具" scheme="https://blog.yahyav2rayssr.top/categories/%E7%A0%94%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    <category term="Intellij IDEA" scheme="https://blog.yahyav2rayssr.top/categories/%E7%A0%94%E5%8F%91%E5%B7%A5%E5%85%B7/Intellij-IDEA/"/>
    
    
    <category term="intell" scheme="https://blog.yahyav2rayssr.top/tags/intell/"/>
    
  </entry>
  
  <entry>
    <title>运维常用命令-系统篇</title>
    <link href="https://blog.yahyav2rayssr.top/posts/85b72ed0/"/>
    <id>https://blog.yahyav2rayssr.top/posts/85b72ed0/</id>
    <published>2023-04-18T15:31:32.609Z</published>
    <updated>2023-04-18T15:31:32.610Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设置-hostname"><a href="#设置-hostname" class="headerlink" title="设置 hostname"></a>设置 hostname</h1><blockquote><p>hostname 存放于 <code>/etc/host/hostname</code></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hostnamectl set-hostname [hostname]<br></code></pre></td></tr></table></figure><h1 id="查看用户和用户组"><a href="#查看用户和用户组" class="headerlink" title="查看用户和用户组"></a>查看用户和用户组</h1><h2 id="查看用户列表"><a href="#查看用户列表" class="headerlink" title="查看用户列表"></a>查看用户列表</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /etc/passwd<br></code></pre></td></tr></table></figure><img src="/posts/85b72ed0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FkdmFuY2luZ1N0b25l,size_16,color_FFFFFF,t_70.png" alt="img" style="zoom: 67%;"><h2 id="查看用户组列表"><a href="#查看用户组列表" class="headerlink" title="查看用户组列表"></a>查看用户组列表</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /etc/group<br></code></pre></td></tr></table></figure><img src="/posts/85b72ed0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FkdmFuY2luZ1N0b25l,size_16,color_FFFFFF,t_70-16654207556175.png" alt="img" style="zoom:67%;"><h2 id="查看系统中有哪些用户"><a href="#查看系统中有哪些用户" class="headerlink" title="查看系统中有哪些用户"></a>查看系统中有哪些用户</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cut -d : -f 1 /etc/passwd<br></code></pre></td></tr></table></figure><img src="/posts/85b72ed0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FkdmFuY2luZ1N0b25l,size_16,color_FFFFFF,t_70-16654207833218.png" alt="img" style="zoom:67%;"><h2 id="查看可以登录系统的用户"><a href="#查看可以登录系统的用户" class="headerlink" title="查看可以登录系统的用户"></a>查看可以登录系统的用户</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /etc/passwd | grep -v /sbin/nologin | cut -d : -f 1<br></code></pre></td></tr></table></figure><img src="/posts/85b72ed0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FkdmFuY2luZ1N0b25l,size_16,color_FFFFFF,t_70-166542080828011.png" alt="img" style="zoom:67%;"><h2 id="查看用户操作"><a href="#查看用户操作" class="headerlink" title="查看用户操作"></a>查看用户操作</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">w (root权限)<br></code></pre></td></tr></table></figure><img src="/posts/85b72ed0/20191010163558992.png" alt="img" style="zoom:67%;"><h2 id="查看某一用户"><a href="#查看某一用户" class="headerlink" title="查看某一用户"></a>查看某一用户</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">w &lt;user_name&gt;<br></code></pre></td></tr></table></figure><img src="/posts/85b72ed0/20191010164001289.png" alt="img" style="zoom:67%;"><h2 id="查看登录用户"><a href="#查看登录用户" class="headerlink" title="查看登录用户"></a>查看登录用户</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">who<br></code></pre></td></tr></table></figure><img src="/posts/85b72ed0/20191010164049493.png" alt="img" style="zoom:67%;"><h2 id="查看用户登录历史记录"><a href="#查看用户登录历史记录" class="headerlink" title="查看用户登录历史记录"></a>查看用户登录历史记录</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">last<br></code></pre></td></tr></table></figure><img src="/posts/85b72ed0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FkdmFuY2luZ1N0b25l,size_16,color_FFFFFF,t_70-166542096091420.png" alt="img" style="zoom:67%;"><h2 id="修改root用户密码"><a href="#修改root用户密码" class="headerlink" title="修改root用户密码"></a>修改root用户密码</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">passwd<br></code></pre></td></tr></table></figure><img src="/posts/85b72ed0/20191010164451776.png" alt="img" style="zoom:67%;"><h2 id="root用户修改其他用户密码"><a href="#root用户修改其他用户密码" class="headerlink" title="root用户修改其他用户密码"></a>root用户修改其他用户密码</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">passwd &lt;user_name&gt;<br></code></pre></td></tr></table></figure><img src="/posts/85b72ed0/20191010164520363.png" alt="img" style="zoom:67%;"><h1 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h1><h2 id="init-6"><a href="#init-6" class="headerlink" title="init 6"></a>init 6</h2><p>init 6 基于一系列 <code>/etc/inittab</code> 文件，并且每个应用都会有一个相应 shutdown 脚本。<br>init 6 调用一系列 shutdown 脚本(&#x2F;etc&#x2F;rc0.d&#x2F;K*)来使系统优雅关机。</p><h2 id="reboot"><a href="#reboot" class="headerlink" title="reboot"></a>reboot</h2><p>reboot 并不执行这些过程，reboot更是一个 kernel 级别的命令，不对应用使用 shutdown 脚本。</p><p>综上平常推荐使用 init 6 命令，只有在系统出了问题的时候才比较推荐使用 reboot 命令。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设置-hostname&quot;&gt;&lt;a href=&quot;#设置-hostname&quot; class=&quot;headerlink&quot; title=&quot;设置 hostname&quot;&gt;&lt;/a&gt;设置 hostname&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;hostname 存放于 &lt;code&gt;/e</summary>
      
    
    
    
    <category term="运维" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/"/>
    
    <category term="常用命令" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
    
    <category term="运维配置" scheme="https://blog.yahyav2rayssr.top/tags/%E8%BF%90%E7%BB%B4%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>Springboot 常用配置</title>
    <link href="https://blog.yahyav2rayssr.top/posts/fd57e58c/"/>
    <id>https://blog.yahyav2rayssr.top/posts/fd57e58c/</id>
    <published>2023-04-18T15:31:32.530Z</published>
    <updated>2023-04-18T15:31:32.532Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="SpringBoot-指定-logback-配置文件"><a href="#SpringBoot-指定-logback-配置文件" class="headerlink" title="SpringBoot 指定 logback 配置文件"></a>SpringBoot 指定 logback 配置文件</h2><p>我们可以在springboot的配置文件中指明使用哪个xml作为logger的配置，比如：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">logging.config</span>=<span class="hljs-string">classpath:logback-spring-dev.xml</span><br></code></pre></td></tr></table></figure><p>如果不指定，则会按照<code>logback.xml</code> -&gt; <code>application.yml</code> -&gt; <code>logback-spring.xml</code>的顺序去查找是否存在默认的配置。</p><p>如果是命令行下进行指定，可以按下面的方式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">java -jar -Dlogging.config=./config/logback-spring.xml your-jar.jar<br></code></pre></td></tr></table></figure><h2 id="SpringProfile-多环境切换"><a href="#SpringProfile-多环境切换" class="headerlink" title="SpringProfile 多环境切换"></a>SpringProfile 多环境切换</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">springProfile</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;local,dev&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;INFO&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;CONSOLE-WITH-COLOR&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;FILE&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">springProfile</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">springProfile</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prod&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;INFO&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;CONSOLE-WITH-COLOR&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;FILE&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">springProfile</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="SpringBoot-设置支持跨域请求"><a href="#SpringBoot-设置支持跨域请求" class="headerlink" title="SpringBoot 设置支持跨域请求"></a>SpringBoot 设置支持跨域请求</h2><p><strong>CORS 常见 header</strong></p><ul><li>Access-Control-Allow-Origin：<a href="http://somehost.com/">http://somehost.com</a> 表示允许<a href="http://somehost.com发起跨域请求/">http://somehost.com发起跨域请求</a>。</li><li>Access-Control-Max-Age：86400 表示在86400秒内不需要再发送预校验请求。</li><li>Access-Control-Allow-Methods：GET,POST,PUT,DELETE 表示允许跨域请求的方法。</li><li>Access-Control-Allow-Headers：content-type 表示允许跨域请求包含content-type</li></ul><h3 id="配置过滤器"><a href="#配置过滤器" class="headerlink" title="配置过滤器"></a>配置过滤器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GlobalCorsConfig</span> &#123;<br>    <br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> CorsFilter <span class="hljs-title function_">corsFilter</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//1.添加CORS配置信息</span><br>        <span class="hljs-type">CorsConfiguration</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CorsConfiguration</span>();<br>          <span class="hljs-comment">//放行哪些原始域</span><br>          config.addAllowedOrigin(<span class="hljs-string">&quot;*&quot;</span>);<br>          <span class="hljs-comment">//是否发送Cookie信息</span><br>          config.setAllowCredentials(<span class="hljs-literal">true</span>);<br>          <span class="hljs-comment">//放行哪些原始域(请求方式)</span><br>          config.addAllowedMethod(<span class="hljs-string">&quot;*&quot;</span>);<br>          <span class="hljs-comment">//放行哪些原始域(头部信息)</span><br>          config.addAllowedHeader(<span class="hljs-string">&quot;*&quot;</span>);<br>          <span class="hljs-comment">//暴露哪些头部信息（因为跨域访问默认不能获取全部头部信息）</span><br>          config.addExposedHeader(<span class="hljs-string">&quot;*&quot;</span>);<br><br>        <span class="hljs-comment">//2.添加映射路径</span><br>        <span class="hljs-type">UrlBasedCorsConfigurationSource</span> <span class="hljs-variable">configSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UrlBasedCorsConfigurationSource</span>();<br>        configSource.registerCorsConfiguration(<span class="hljs-string">&quot;/**&quot;</span>, config);<br><br>        <span class="hljs-comment">//3.返回新的CorsFilter.</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CorsFilter</span>(configSource);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="配置拦截器"><a href="#配置拦截器" class="headerlink" title="配置拦截器"></a>配置拦截器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConfiguration</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebMvcConfigurerAdapter</span>  &#123;<br><br><span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCorsMappings</span><span class="hljs-params">(CorsRegistry registry)</span> &#123;  <br>        registry.addMapping(<span class="hljs-string">&quot;/**&quot;</span>)  <br>                .allowCredentials(<span class="hljs-literal">true</span>)  <br>                .allowedHeaders(<span class="hljs-string">&quot;*&quot;</span>)  <br>                .allowedOrigins(<span class="hljs-string">&quot;*&quot;</span>)  <br>                .allowedMethods(<span class="hljs-string">&quot;*&quot;</span>);  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="重写-WebMvcConfigurer"><a href="#重写-WebMvcConfigurer" class="headerlink" title="重写 WebMvcConfigurer"></a>重写 WebMvcConfigurer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GlobalCorsConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> WebMvcConfigurer <span class="hljs-title function_">corsConfigurer</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebMvcConfigurer</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-comment">//重写父类提供的跨域请求处理的接口</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCorsMappings</span><span class="hljs-params">(CorsRegistry registry)</span> &#123;<br>                <span class="hljs-comment">//添加映射路径</span><br>                registry.addMapping(<span class="hljs-string">&quot;/**&quot;</span>)<br>                        <span class="hljs-comment">//放行哪些原始域</span><br>                        .allowedOrigins(<span class="hljs-string">&quot;*&quot;</span>)<br>                        <span class="hljs-comment">//是否发送Cookie信息</span><br>                        .allowCredentials(<span class="hljs-literal">true</span>)<br>                        <span class="hljs-comment">//放行哪些原始域(请求方式)</span><br>                        .allowedMethods(<span class="hljs-string">&quot;GET&quot;</span>,<span class="hljs-string">&quot;POST&quot;</span>, <span class="hljs-string">&quot;PUT&quot;</span>, <span class="hljs-string">&quot;DELETE&quot;</span>)<br>                        <span class="hljs-comment">//放行哪些原始域(头部信息)</span><br>                        .allowedHeaders(<span class="hljs-string">&quot;*&quot;</span>)<br>                        <span class="hljs-comment">//暴露哪些头部信息（因为跨域访问默认不能获取全部头部信息）</span><br>                        .exposedHeaders(<span class="hljs-string">&quot;Header1&quot;</span>, <span class="hljs-string">&quot;Header2&quot;</span>);<br>            &#125;<br>        &#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="CrossOrigin-注解"><a href="#CrossOrigin-注解" class="headerlink" title="@CrossOrigin 注解"></a>@CrossOrigin 注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br><span class="hljs-meta">@CrossOrigin(&quot;http://localhost:8080&quot;)</span> <br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">( )</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello World&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>或者在控制器（@Controller）上使用注解 @CrossOrigin ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@CrossOrigin(origins = &quot;http://xx-domain.com&quot;, maxAge = 3600)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AccountController</span> &#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">( )</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello World&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>手工设置响应头（局部跨域 ）</li></ol><p>使用HttpServletResponse对象添加响应头（Access-Control-Allow-Origin）来授权原始域，这里Origin的值也可以设置为”*” ，表示全部放行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">(HttpServletResponse response)</span>&#123;<br>    response.addHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="hljs-string">&quot;http://localhost:8080&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello World&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="SpringBoot-配置Filter过滤器"><a href="#SpringBoot-配置Filter过滤器" class="headerlink" title="SpringBoot 配置Filter过滤器"></a>SpringBoot 配置Filter过滤器</h2><h3 id="通过-WebFilter-注解来配置"><a href="#通过-WebFilter-注解来配置" class="headerlink" title="通过 @WebFilter 注解来配置"></a>通过 @WebFilter 注解来配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@WebFilter(urlPatterns = &quot;/webapi/*&quot;, filterName = &quot;authFilter&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    ......<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="通过-Bean-注解来配置"><a href="#通过-Bean-注解来配置" class="headerlink" title="通过 @Bean 注解来配置"></a>通过 @Bean 注解来配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> FilterRegistrationBean <span class="hljs-title function_">testFilterRegistration</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">FilterRegistrationBean</span> <span class="hljs-variable">registration</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterRegistrationBean</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TestFilter</span>());<br>registration.addUrlPatterns(<span class="hljs-string">&quot;/webapi/*&quot;</span>); <span class="hljs-comment">//</span><br>registration.addInitParameter(<span class="hljs-string">&quot;paramName&quot;</span>, <span class="hljs-string">&quot;paramValue&quot;</span>); <span class="hljs-comment">//</span><br>registration.setName(<span class="hljs-string">&quot;testFilter&quot;</span>);<br><span class="hljs-keyword">return</span> registration;<br>&#125;<br></code></pre></td></tr></table></figure><p>那如果有多个过虑器，怎么指定执行的顺序呢？</p><blockquote><p>注意：</p><p>1、如果指定了 Order 属性，执行的顺序与注册的顺序是无关的；</p><p>2、数字越小，优先级越高；</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> FilterRegistrationBean <span class="hljs-title function_">testFilterRegistration</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">FilterRegistrationBean</span> <span class="hljs-variable">registration</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterRegistrationBean</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TestFilter</span>());<br>registration.addUrlPatterns(<span class="hljs-string">&quot;/webapi/*&quot;</span>); <span class="hljs-comment">//</span><br>registration.addInitParameter(<span class="hljs-string">&quot;paramName&quot;</span>, <span class="hljs-string">&quot;paramValue&quot;</span>); <span class="hljs-comment">//</span><br>registration.setName(<span class="hljs-string">&quot;testFilter&quot;</span>);<br>registration.setOrder(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">return</span> registration;<br>&#125;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> FilterRegistrationBean <span class="hljs-title function_">authFilterRegistration</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">FilterRegistrationBean</span> <span class="hljs-variable">registration</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterRegistrationBean</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AuthFilter</span>());<br>registration.addUrlPatterns(<span class="hljs-string">&quot;/webapi/*&quot;</span>); <span class="hljs-comment">//</span><br>registration.addInitParameter(<span class="hljs-string">&quot;paramName&quot;</span>, <span class="hljs-string">&quot;paramValue&quot;</span>); <span class="hljs-comment">//</span><br>registration.setName(<span class="hljs-string">&quot;authFilter&quot;</span>);<br>registration.setOrder(<span class="hljs-number">2</span>);<br><span class="hljs-keyword">return</span> registration;<br>&#125;<br></code></pre></td></tr></table></figure><p>获取<code>spring.profiles.active</code>值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProfileUtil</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApplicationContextAware</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setApplicationContext</span><span class="hljs-params">(ApplicationContext applicationContext)</span><br>            <span class="hljs-keyword">throws</span> BeansException &#123;<br>        <span class="hljs-built_in">this</span>.context = applicationContext;<br>    &#125;<br><br>    <span class="hljs-comment">// 获取当前环境参数  exp: dev,prod,test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getActiveProfile</span><span class="hljs-params">()</span> &#123;<br>        String[] profiles = context.getEnvironment().getActiveProfiles();<br>        <span class="hljs-keyword">if</span>(!ArrayUtils.isEmpty(profiles))&#123;<br>            <span class="hljs-keyword">return</span> profiles[<span class="hljs-number">0</span>];<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="捕获-NoHandlerFoundException"><a href="#捕获-NoHandlerFoundException" class="headerlink" title="捕获 NoHandlerFoundException"></a>捕获 NoHandlerFoundException</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">mvc:</span><br>    <span class="hljs-attr">static-path-pattern:</span> <span class="hljs-string">/statics/**</span><br>    <span class="hljs-attr">throw-exception-if-no-handler-found:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h2 id="RequestContextHolder-getRequestAttributes-空指针问题"><a href="#RequestContextHolder-getRequestAttributes-空指针问题" class="headerlink" title="RequestContextHolder.getRequestAttributes() 空指针问题"></a>RequestContextHolder.getRequestAttributes() 空指针问题</h2><p>增加以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> RequestContextListener <span class="hljs-title function_">requestContextListener</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestContextListener</span>();<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><p>@ConditionalOnBean：当容器里有指定Bean的条件下</p></li><li><p>@ConditionalOnClass：当类路径下有指定的类的条件下</p></li><li><p>@ConditionalOnExpression：基于SpEL表达式为true的时候作为判断条件才去实例化</p></li><li><p>@ConditionalOnJava：基于JVM版本作为判断条件</p></li><li><p>@ConditionalOnJndi：在JNDI存在的条件下查找指定的位置</p></li><li><p>@ConditionalOnMissingBean：当容器里没有指定Bean的情况下</p></li><li><p>@ConditionalOnMissingClass：当容器里没有指定类的情况下</p></li><li><p>@ConditionalOnWebApplication：当前项目时Web项目的条件下</p></li><li><p>@ConditionalOnNotWebApplication：当前项目不是Web项目的条件下</p></li><li><p>@ConditionalOnProperty：指定的属性是否有指定的值</p></li><li><p>@ConditionalOnResource：类路径是否有指定的值</p></li><li><p>@ConditionalOnOnSingleCandidate：当指定Bean在容器中只有一个，或者有多个但是指定首选的Bean</p></li></ol><h2 id="Import-注解"><a href="#Import-注解" class="headerlink" title="Import 注解"></a>Import 注解</h2><h3 id="普通类"><a href="#普通类" class="headerlink" title="普通类"></a>普通类</h3><p>spring4.2之后<code>@Import</code>注解可以实例化普通类的bean实例。例如：</p><p>先定义Role类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Role</span> &#123;<br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String name;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后在任意配置类上导入Role类，<code>@Import</code>支持同时导入多个普通类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Import(&#123;Role.class, User.class&#125;)</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-comment">// 配置类</span><br></code></pre></td></tr></table></figure><h3 id="Configuration类"><a href="#Configuration类" class="headerlink" title="Configuration类"></a>Configuration类</h3><blockquote><p>如果配置类不在指定的spring扫描目录或者子目录下，则通过<code>@Import</code>注解的导入功能，也能额外扫描到被导入的配置类，适用于多项目工程。</p></blockquote><p>上面介绍了@Import注解导入普通类的方法，它同时也支持导入Configuration类。</p><h3 id="ImportSelector接口"><a href="#ImportSelector接口" class="headerlink" title="ImportSelector接口"></a>ImportSelector接口</h3><p>复杂自定义的配置导入可以实现ImportSelector接口来实现，代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyDataImportSelector</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ImportSelector</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;com.sue.async.service.User&quot;</span>, <span class="hljs-string">&quot;com.sue.async.service.Role&quot;</span>&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>重写<code>selectImports</code>方法，在该方法中指定需要定义bean的类名，注意要包含完整路径，而非相对路径。</p><p>然后用<code>@Import</code>注解导入该类即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Import(&#123;MyDataImportSelector.class&#125;)</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-comment">// 配置类</span><br></code></pre></td></tr></table></figure><h3 id="ImportBeanDefinitionRegistrar接口"><a href="#ImportBeanDefinitionRegistrar接口" class="headerlink" title="ImportBeanDefinitionRegistrar接口"></a>ImportBeanDefinitionRegistrar接口</h3><p>除了能够非常灵活的自定义bean以外，还能自定义bean的名称和作用域等属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomImportSelector</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ImportBeanDefinitionRegistrar</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerBeanDefinitions</span><span class="hljs-params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> &#123;<br>        <span class="hljs-type">RootBeanDefinition</span> <span class="hljs-variable">roleBeanDefinition</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RootBeanDefinition</span>(Role.class);<br>        registry.registerBeanDefinition(<span class="hljs-string">&quot;role&quot;</span>, roleBeanDefinition);<br><br>        <span class="hljs-type">RootBeanDefinition</span> <span class="hljs-variable">userBeanDefinition</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RootBeanDefinition</span>(User.class);<br>        userBeanDefinition.setScope(ConfigurableBeanFactory.SCOPE_PROTOTYPE);<br>        registry.registerBeanDefinition(<span class="hljs-string">&quot;user&quot;</span>, userBeanDefinition);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后通过@Import注解导入该配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Import(&#123;CustomImportSelector.class&#125;)</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-comment">// 配置类</span><br></code></pre></td></tr></table></figure><h2 id="PostProcessor"><a href="#PostProcessor" class="headerlink" title="PostProcessor"></a>PostProcessor</h2><img src="/posts/fd57e58c/b883feb54a6b4e608bd3d133f848de40tplv-k3u1fbpfcp-zoom-1.image" alt="img" style="zoom:50%;"><p>修改应用程序上下文的内部bean定义注册表标准初始化。所有常规bean定义都将被加载，但是还没有bean被实例化。这允许进一步添加在下一个后处理阶段开始之前定义bean。</p><h3 id="BeanDefinitionRegistryPostProcessor-接口"><a href="#BeanDefinitionRegistryPostProcessor-接口" class="headerlink" title="BeanDefinitionRegistryPostProcessor 接口"></a>BeanDefinitionRegistryPostProcessor 接口</h3><p>重写<code>postProcessBeanDefinitionRegistry</code>方法，在该方法中能够获取<code>BeanDefinitionRegistry</code>对象，它负责bean的注册工作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRegistryPostProcessor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanDefinitionRegistryPostProcessor</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postProcessBeanDefinitionRegistry</span><span class="hljs-params">(BeanDefinitionRegistry registry)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        <span class="hljs-type">RootBeanDefinition</span> <span class="hljs-variable">roleBeanDefinition</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RootBeanDefinition</span>(Role.class);<br>        registry.registerBeanDefinition(<span class="hljs-string">&quot;role&quot;</span>, roleBeanDefinition);<br><br>        <span class="hljs-type">RootBeanDefinition</span> <span class="hljs-variable">userBeanDefinition</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RootBeanDefinition</span>(User.class);<br>        userBeanDefinition.setScope(ConfigurableBeanFactory.SCOPE_PROTOTYPE);<br>        registry.registerBeanDefinition(<span class="hljs-string">&quot;user&quot;</span>, userBeanDefinition);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postProcessBeanFactory</span><span class="hljs-params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="BeanFactoryPostProcessor-接口"><a href="#BeanFactoryPostProcessor-接口" class="headerlink" title="BeanFactoryPostProcessor 接口"></a>BeanFactoryPostProcessor 接口</h3><img src="/posts/fd57e58c/555db8a009404ae8bcda8b6a9bd0c0eatplv-k3u1fbpfcp-zoom-1.image" class alt="img"><p>在应用程序上下文的标准bean工厂之后修改其内部bean工厂初始化。所有bean定义都已加载，但没有bean将被实例化。这允许重写或添加属性甚至可以初始化bean。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyPostProcessor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanFactoryPostProcessor</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postProcessBeanFactory</span><span class="hljs-params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        <span class="hljs-type">DefaultListableBeanFactory</span> <span class="hljs-variable">registry</span> <span class="hljs-operator">=</span> (DefaultListableBeanFactory)beanFactory;<br>        <span class="hljs-type">RootBeanDefinition</span> <span class="hljs-variable">roleBeanDefinition</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RootBeanDefinition</span>(Role.class);<br>        registry.registerBeanDefinition(<span class="hljs-string">&quot;role&quot;</span>, roleBeanDefinition);<br><br>        <span class="hljs-type">RootBeanDefinition</span> <span class="hljs-variable">userBeanDefinition</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RootBeanDefinition</span>(User.class);<br>        userBeanDefinition.setScope(ConfigurableBeanFactory.SCOPE_PROTOTYPE);<br>        registry.registerBeanDefinition(<span class="hljs-string">&quot;user&quot;</span>, userBeanDefinition);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>既然这两个接口都能注册bean，那么他们有什么区别？</p><ul><li>BeanDefinitionRegistryPostProcessor 更侧重于bean的注册</li><li>BeanFactoryPostProcessor 更侧重于对已经注册的bean的属性进行修改，虽然也可以注册bean。</li></ul><h3 id="BeanFactoryAware接口"><a href="#BeanFactoryAware接口" class="headerlink" title="BeanFactoryAware接口"></a><del>BeanFactoryAware</del>接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BeanFactoryRegistry</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanFactoryAware</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBeanFactory</span><span class="hljs-params">(BeanFactory beanFactory)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        <span class="hljs-type">DefaultListableBeanFactory</span> <span class="hljs-variable">registry</span> <span class="hljs-operator">=</span> (DefaultListableBeanFactory) beanFactory;<br>        <span class="hljs-type">RootBeanDefinition</span> <span class="hljs-variable">rootBeanDefinition</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RootBeanDefinition</span>(User.class);<br>        registry.registerBeanDefinition(<span class="hljs-string">&quot;user&quot;</span>, rootBeanDefinition);<br><br>        <span class="hljs-type">RootBeanDefinition</span> <span class="hljs-variable">userBeanDefinition</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RootBeanDefinition</span>(User.class);<br>        userBeanDefinition.setScope(ConfigurableBeanFactory.SCOPE_PROTOTYPE);<br>        registry.registerBeanDefinition(<span class="hljs-string">&quot;user&quot;</span>, userBeanDefinition);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><img src="/posts/fd57e58c/da87ec4ada9148e08209cd2d1702634ctplv-k3u1fbpfcp-zoom-1.image" class alt="img"><p>原因如下：</p><p>spring中bean的创建过程顺序：</p><img src="/posts/fd57e58c/ad2dd7bded1b4b68b5c44731aeca7a7btplv-k3u1fbpfcp-zoom-1.image" class alt="img"><p><code>BeanFactoryAware</code>接口是在bean创建成功，并且完成依赖注入之后，在真正初始化之前才被调用的。在这个时候去注册bean意义不大，因为这个接口是给我们获取bean的，并不建议去注册bean，会引发很多问题。</p><h1 id="CommandLineRunner和ApplicationRunner接口"><a href="#CommandLineRunner和ApplicationRunner接口" class="headerlink" title="CommandLineRunner和ApplicationRunner接口"></a>CommandLineRunner和ApplicationRunner接口</h1><p>CommandLineRunner的参数是最原始的参数，没有做任何处理。ApplicationRunner的参数是ApplicationArguments，是对原始参数做了进一步的封装。</p><p>ApplicationArguments是对参数（main方法）做了进一步的处理，可以解析–name&#x3D;value的，我们就可以通过name来获取value（而CommandLineRunner只是获取–name&#x3D;value）</p><h2 id="CommandLineRunner-接口"><a href="#CommandLineRunner-接口" class="headerlink" title="CommandLineRunner 接口"></a>CommandLineRunner 接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Order(1)</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServerSuccessReport</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">CommandLineRunner</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(String... args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;=====应用已经成功启动=====&quot;</span> + Arrays.asList(args));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ImproveApplication</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">ConfigurableApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> SpringApplication.run(ImproveApplication.class, args);<br><span class="hljs-type">ApplicationArguments</span> <span class="hljs-variable">applicationArguments</span> <span class="hljs-operator">=</span> context.getBean(ApplicationArguments.class);<br>System.out.println(<span class="hljs-string">&quot;============&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;name=&quot;</span>+applicationArguments.getOptionNames());<br>System.out.println(<span class="hljs-string">&quot;values====&quot;</span>+applicationArguments.getOptionValues(<span class="hljs-string">&quot;developer.name&quot;</span>));<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/posts/fd57e58c/5225109-2dee19989fb39697.png" class alt="img"><h2 id="ApplicationRunner-接口"><a href="#ApplicationRunner-接口" class="headerlink" title="ApplicationRunner 接口"></a>ApplicationRunner 接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyApplicationRunner</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApplicationRunner</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(ApplicationArguments args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;===MyApplicationRunner===&quot;</span> + Arrays.asList(args.getSourceArgs()));<br>        System.out.println(<span class="hljs-string">&quot;===getOptionNames========&quot;</span> + args.getOptionNames());<br>        System.out.println(<span class="hljs-string">&quot;===getOptionValues=======&quot;</span> + args.getOptionValues(<span class="hljs-string">&quot;foo&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;==getOptionValues========&quot;</span> + args.getOptionValues(<span class="hljs-string">&quot;developer.name&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="AutoCloseable接口"><a href="#AutoCloseable接口" class="headerlink" title="AutoCloseable接口"></a>AutoCloseable接口</h1><p><strong>对于实现AutoCloseable接口的类的实例，将其放到try后面（我们称之为：带资源的try语句），在try结束的时候，会自动将这些资源关闭（调用close方法）。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserContext</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AutoCloseable</span> &#123;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ThreadLocal&lt;LoginUser&gt; current = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserContext</span><span class="hljs-params">(LoginUser user)</span> &#123;<br>        current.set(user);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> LoginUser <span class="hljs-title function_">getCurrentUser</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> current.get();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCurrentUser</span><span class="hljs-params">(LoginUser user)</span> &#123;<br>        current.set(user);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> &#123;<br>        current.remove();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Spring中BeanFactoryPostProcessor和BeanPostProcessor区别"><a href="#Spring中BeanFactoryPostProcessor和BeanPostProcessor区别" class="headerlink" title="Spring中BeanFactoryPostProcessor和BeanPostProcessor区别"></a>Spring中BeanFactoryPostProcessor和BeanPostProcessor区别</h1><p>Spring IoC容器允许BeanFactoryPostProcessor在容器实例化任何bean之前读取bean的定义(配置元数据)，并可以修改它。同时可以定义多个BeanFactoryPostProcessor，通过设置’order’属性来确定各个BeanFactoryPostProcessor执行顺序。</p><p>注册一个BeanFactoryPostProcessor实例需要定义一个Java类来实现BeanFactoryPostProcessor接口，并重写该接口的postProcessorBeanFactory方法。通过beanFactory可以获取bean的定义信息，并可以修改bean的定义信息。这点是和BeanPostProcessor最大区别</p><p><strong>BeanPostProcessor.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.spring;<br> <br><span class="hljs-keyword">import</span> org.springframework.beans.BeansException;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.config.BeanPostProcessor;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * bean后置处理器</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zss</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PostProcessor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanPostProcessor</span> &#123;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">postProcessBeforeInitialization</span><span class="hljs-params">(Object bean,</span><br><span class="hljs-params">            String beanName)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        System.out.println(<span class="hljs-string">&quot;后置处理器处理bean=【&quot;</span>+beanName+<span class="hljs-string">&quot;】开始&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">postProcessAfterInitialization</span><span class="hljs-params">(Object bean,</span><br><span class="hljs-params">            String beanName)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        System.out.println(<span class="hljs-string">&quot;后置处理器处理bean=【&quot;</span>+beanName+<span class="hljs-string">&quot;】完毕!&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>BeanFactoryPostProcessor.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.spring;<br> <br><span class="hljs-keyword">import</span> org.springframework.beans.BeansException;<br><span class="hljs-keyword">import</span> org.springframework.beans.MutablePropertyValues;<br><span class="hljs-keyword">import</span> org.springframework.beans.PropertyValue;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.config.BeanDefinition;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.config.BeanFactoryPostProcessor;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.config.ConfigurableListableBeanFactory;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FactoryPostProcessor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanFactoryPostProcessor</span> &#123;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postProcessBeanFactory</span><span class="hljs-params">(</span><br><span class="hljs-params">            ConfigurableListableBeanFactory configurableListableBeanFactory)</span><br>            <span class="hljs-keyword">throws</span> BeansException &#123;<br>        System.out.println(<span class="hljs-string">&quot;******调用了BeanFactoryPostProcessor&quot;</span>);<br>        String[] beanStr = configurableListableBeanFactory<br>                .getBeanDefinitionNames();<br>        <span class="hljs-keyword">for</span> (String beanName : beanStr) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;beanFactoryPostProcessorTest&quot;</span>.equals(beanName)) &#123;<br>                <span class="hljs-type">BeanDefinition</span> <span class="hljs-variable">beanDefinition</span> <span class="hljs-operator">=</span> configurableListableBeanFactory<br>                        .getBeanDefinition(beanName);<br>                <span class="hljs-type">MutablePropertyValues</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> beanDefinition.getPropertyValues();<br>                <span class="hljs-keyword">if</span> (m.contains(<span class="hljs-string">&quot;name&quot;</span>)) &#123;<br>                    m.addPropertyValue(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;赵四&quot;</span>);<br>                    System.out.println(<span class="hljs-string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 修改了name属性初始值了&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br> <br>&#125;<br></code></pre></td></tr></table></figure><h1 id="获取spring容器对象"><a href="#获取spring容器对象" class="headerlink" title="获取spring容器对象"></a>获取spring容器对象</h1><h2 id="实现BeanFactoryAware接口"><a href="#实现BeanFactoryAware接口" class="headerlink" title="实现BeanFactoryAware接口"></a>实现BeanFactoryAware接口</h2><p>实现<code>BeanFactoryAware</code>接口，然后重写<code>setBeanFactory</code>方法，就能从该方法中获取到spring容器对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanFactoryAware</span> &#123;<br>    <span class="hljs-keyword">private</span> BeanFactory beanFactory;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBeanFactory</span><span class="hljs-params">(BeanFactory beanFactory)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        <span class="hljs-built_in">this</span>.beanFactory = beanFactory;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> (Person) beanFactory.getBean(<span class="hljs-string">&quot;person&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="实现ApplicationContextAware接口"><a href="#实现ApplicationContextAware接口" class="headerlink" title="实现ApplicationContextAware接口"></a>实现ApplicationContextAware接口</h2><p>实现<code>ApplicationContextAware</code>接口，然后重写<code>setApplicationContext</code>方法，也能从该方法中获取到spring容器对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonService2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApplicationContextAware</span> &#123;<br>    <span class="hljs-keyword">private</span> ApplicationContext applicationContext;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setApplicationContext</span><span class="hljs-params">(ApplicationContext applicationContext)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        <span class="hljs-built_in">this</span>.applicationContext = applicationContext;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> (Person) applicationContext.getBean(<span class="hljs-string">&quot;person&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="实现-ApplicationListener-接口"><a href="#实现-ApplicationListener-接口" class="headerlink" title="实现 ApplicationListener 接口"></a>实现 ApplicationListener 接口</h2><p>实现 <code>ApplicationListener</code> 接口，需要注意的是该接口接收的泛型是 <code>ContextRefreshedEvent</code> 类，然后重写 <code>onApplicationEvent</code> 方法，也能从该方法中获取到 spring 容器对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonService3</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApplicationListener</span>&lt;ContextRefreshedEvent&gt; &#123;<br>    <span class="hljs-keyword">private</span> ApplicationContext applicationContext;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onApplicationEvent</span><span class="hljs-params">(ContextRefreshedEvent event)</span> &#123;<br>        applicationContext = event.getApplicationContext();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> (Person) applicationContext.getBean(<span class="hljs-string">&quot;person&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>Aware</code> 接口是很常用的功能，目前包含如下功能：</p><img src="/posts/fd57e58c/7dcf8487d9984a9fa6bfb61d5d3f3094tplv-k3u1fbpfcp-watermark.image" class alt="img">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;SpringBoot-指定-logback-配置文件&quot;&gt;&lt;a href=&quot;#SpringBoot-指定-logback-配置文件&quot;</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.yahyav2rayssr.top/categories/Java/"/>
    
    <category term="Spring" scheme="https://blog.yahyav2rayssr.top/categories/Java/Spring/"/>
    
    
    <category term="spring" scheme="https://blog.yahyav2rayssr.top/tags/spring/"/>
    
    <category term="springboot" scheme="https://blog.yahyav2rayssr.top/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>zookeeper 安装</title>
    <link href="https://blog.yahyav2rayssr.top/posts/146a1eb6/"/>
    <id>https://blog.yahyav2rayssr.top/posts/146a1eb6/</id>
    <published>2023-04-18T15:31:32.486Z</published>
    <updated>2023-04-18T15:31:32.487Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>zookeeper 集群通常是用来对用户的分布式应用程序提供协调服务的，为了保证数据的一致性，对 zookeeper 集群进行了这样三种角色划分：leader、follower、observer 分别对应着总统、议员和观察者。</p><ul><li>总统（leader）：负责进行投票的发起和决议，更新系统状态。</li><li>议员（follower）：用于接收客户端请求并向客户端返回结果以及在选举过程中参与投票。</li><li>观察者（observer）：也可以接收客户端连接，将写请求转发给leader节点，但是不参与投票过程，只同步leader的状态。通常对查询操作做负载。</li></ul><h2 id="机器规划"><a href="#机器规划" class="headerlink" title="机器规划"></a>机器规划</h2><table><thead><tr><th>类型</th><th>IP地址</th><th>掩码</th><th>网关</th></tr></thead><tbody><tr><td>master</td><td>192.168.50.246</td><td>255.255.255.0</td><td>192.168.50.1</td></tr><tr><td>slave1</td><td>192.168.50.247</td><td>255.255.255.0</td><td>192.168.50.1</td></tr><tr><td>slave2</td><td>192.168.50.248</td><td>255.255.255.0</td><td>192.168.50.1</td></tr></tbody></table><h2 id="官网地址"><a href="#官网地址" class="headerlink" title="官网地址"></a>官网地址</h2><p><a href="https://zookeeper.apache.org/releases.html">https://zookeeper.apache.org/releases.html</a></p><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p><a href="https://archive.apache.org/dist/zookeeper/">https://archive.apache.org/dist/zookeeper/</a></p><h2 id="JDK安装"><a href="#JDK安装" class="headerlink" title="JDK安装"></a>JDK安装</h2><blockquote><p>所有节点都要安装。</p></blockquote><p>参考文章2</p><p>将zookeeper压缩文件解压后，我们进入到 conf 目录：</p><h2 id="文件配置"><a href="#文件配置" class="headerlink" title="文件配置"></a>文件配置</h2><h3 id="配置-zoo-cfg"><a href="#配置-zoo-cfg" class="headerlink" title="配置 zoo.cfg"></a>配置 zoo.cfg</h3><p>将zookeeper压缩文件解压后，我们进入到 conf 目录，将 zoo_sample.cfg 文件复制并重命名为 zoo.cfg 文件。</p><img src="/posts/146a1eb6/image-20221011233253265.png" alt="image-20221011233253265" style="zoom: 67%;"><p>配置文件修改如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">The number of milliseconds of each tick</span><br>tickTime=2000<br><span class="hljs-meta prompt_"># </span><span class="language-bash">The number of ticks that the initial</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">synchronization phase can take</span><br>initLimit=10<br><span class="hljs-meta prompt_"># </span><span class="language-bash">The number of ticks that can pass between</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">sending a request and getting an acknowledgement</span><br>syncLimit=5<br><span class="hljs-meta prompt_"># </span><span class="language-bash">the directory <span class="hljs-built_in">where</span> the snapshot is stored.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-keyword">do</span> not use /tmp <span class="hljs-keyword">for</span> storage, /tmp here is just</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">example sakes.</span><br>dataDir=/usr/local/software/zookeeper-3.4.14/data<br><span class="hljs-meta prompt_"># </span><span class="language-bash">the port at <span class="hljs-built_in">which</span> the clients will connect</span><br>clientPort=2181<br>server.1=192.168.50.246:2888:3888<br>server.2=192.168.50.247:2888:3888<br>server.3=192.168.50.248:2888:3888<br><span class="hljs-meta prompt_"># </span><span class="language-bash">the maximum number of client connections.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">increase this <span class="hljs-keyword">if</span> you need to handle more clients</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">maxClientCnxns=60</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># Be sure to read the maintenance section of the</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">administrator guide before turning on autopurge.</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># The number of snapshots to retain in dataDir</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">autopurge.snapRetainCount=3</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Purge task interval <span class="hljs-keyword">in</span> hours</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Set to <span class="hljs-string">&quot;0&quot;</span> to <span class="hljs-built_in">disable</span> auto purge feature</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">autopurge.purgeInterval=1</span><br></code></pre></td></tr></table></figure><blockquote><p>参考官方文档：<a href="https://zookeeper.apache.org/doc/r3.5.8/zookeeperStarted.html">https://zookeeper.apache.org/doc/r3.5.8/zookeeperStarted.html</a></p></blockquote><p>主要是修改 dataDir 所对应的目录和增加server开头的三个节点的配置信息</p><ul><li><strong>tickTime</strong>：基本事件单元，这个时间是作为Zookeeper服务器之间或客户端与服务器之间维持心跳的时间间隔，每隔tickTime时间就会发送一个心跳；最小 的session过期时间为2倍tickTime</li><li><strong>dataDir</strong>：存储内存中数据库快照的位置，除非另有说明，否则指向数据库更新的事务日志。注意：应该谨慎的选择日志存放的位置，使用专用的日志存储设备能够大大提高系统的性能，如果将日志存储在比较繁忙的存储设备上，那么将会很大程度上影像系统性能。</li><li><strong>client</strong>：监听客户端连接的端口。</li><li><strong>initLimit</strong>：允许follower连接并同步到Leader的初始化连接时间，以tickTime为单位。当初始化连接时间超过该值，则表示连接失败。</li><li><strong>syncLimit</strong>：表示Leader与Follower之间发送消息时，请求和应答时间长度。如果follower在设置时间内不能与leader通信，那么此follower将会被丢弃。</li><li><strong>server.A&#x3D;B:C:D</strong></li></ul><p>　　　　A：其中 A 是一个数字，表示这个是服务器的编号；</p><p>　　　　B：是这个服务器的 ip 地址；</p><p>　　　　C：Zookeeper服务器之间的通信端口；</p><p>　　　　D：Leader选举的端口。</p><p>我们需要修改的第一个是 dataDir ,在指定的位置处创建好目录。</p><p>第二个需要新增的是 server.A&#x3D;B:C:D 配置，其中 A 对应下面我们即将介绍的myid 文件。B是集群的各个IP地址，C:D 是端口配置。</p><h3 id="创建-myid-文件"><a href="#创建-myid-文件" class="headerlink" title="创建 myid 文件"></a>创建 myid 文件</h3><p>在 上一步 dataDir 指定的目录下，创建 myid 文件。</p><img src="/posts/146a1eb6/image-20221011233910662.png" alt="image-20221011233910662" style="zoom:67%;"><p>server 节点配置信息：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">server.1</span>=<span class="hljs-string">192.168.50.246:2888:3888</span><br><span class="hljs-attr">server.2</span>=<span class="hljs-string">192.168.50.247:2888:3888</span><br><span class="hljs-attr">server.3</span>=<span class="hljs-string">192.168.50.248:2888:3888</span><br></code></pre></td></tr></table></figure><p>在 192.168.50.246 机器的的 &#x2F;usr&#x2F;local&#x2F;software&#x2F;zookeeper-3.3.6&#x2F;data 目录下创建 myid 文件，然后在该文件中写上 1 即可。</p><img src="/posts/146a1eb6/image-20221011234129145.png" alt="image-20221011234129145" style="zoom:67%;"><p>后面的机器依次在相应目录创建myid文件，写上相应配置数字即可。</p><h2 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h2><p>为了能够在任意目录启动zookeeper集群，我们需要配置环境变量。</p><p>ps:你也可以不配，这不是搭建集群的必要操作，只不过如果你不配置环境变量，那么每次启动zookeeper需要到安装文件的 bin 目录下去启动。</p><p>首先进入到 &#x2F;etc&#x2F;profile 目录，添加相应的配置信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">zookeeper</span><br>export ZK_HOME=/usr/local/software/zookeeper-3.4.14<br>export PATH=$PATH:$ZK_HOME/bin<br></code></pre></td></tr></table></figure><p>然后通过如下命令使得环境变量生效：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">source /etc/profle<br></code></pre></td></tr></table></figure><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><p>启动命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">zkServer.sh start<br></code></pre></td></tr></table></figure><p>停止命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">zkServer.sh stop<br></code></pre></td></tr></table></figure><p>重启命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">zkServer.sh restart<br></code></pre></td></tr></table></figure><p>查看集群节点状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">zkServer.sh status<br></code></pre></td></tr></table></figure><p>我们分别对集群三台机器执行启动命令。执行完毕后，分别查看集群节点状态：</p><p>出现如下即是集群搭建成功：</p><img src="/posts/146a1eb6/image-20221011234618444.png" alt="image-20221011234618444" style="zoom:67%;"><img src="/posts/146a1eb6/image-20221011234647595.png" alt="image-20221011234647595" style="zoom:67%;"><img src="/posts/146a1eb6/image-20221011234722471.png" alt="image-20221011234722471" style="zoom:67%;"><p>三台机器， node2 成功的通过了选举称为了 leader，而剩下的两台成为了 follower。这时候，如果你将 node2 关掉，会发现剩下两台又会有一台变成了 leader 节点。</p><h2 id="集群测试"><a href="#集群测试" class="headerlink" title="集群测试"></a>集群测试</h2><p>集群搭建完毕，可以使用客户端连接任意一台服务器进行操作，连接服务器2，创建新的节点，连接服务器1，查看新创建的节点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost opt]# zkCli.sh -server localhost:2181<br><br>[zk: localhost:2183(CONNECTED) 1] ls /<br>[zookeeper]<br>[zk: localhost:2183(CONNECTED) 2] create /mynode1 mydata1<br>Created /mynode1<br><br>[root@localhost opt]# zkCli.sh -server localhost:2181<br><br>[zk: localhost:2181(CONNECTED) 1] ls /<br>[mynode1, zookeeper]<br></code></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.cnblogs.com/ysocean/p/9860529.html">zookeeper 集群搭建</a></p><p><a href="https://cloud.tencent.com/developer/article/1820033">Zookeeper系列(4)：搭建Zookeeper集群</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;p&gt;zookeeper 集群通常是用来对用户的分布式应用程序提供协调服务的，为了保证数据的一致性，对 zookeeper 集群进行了这样三种角色</summary>
      
    
    
    
    <category term="大数据" scheme="https://blog.yahyav2rayssr.top/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    <category term="安装部署" scheme="https://blog.yahyav2rayssr.top/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
    
    
    <category term="zookeeper" scheme="https://blog.yahyav2rayssr.top/tags/zookeeper/"/>
    
    <category term="大数据" scheme="https://blog.yahyav2rayssr.top/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>rabbitmq 面试题</title>
    <link href="https://blog.yahyav2rayssr.top/posts/217b8ff8/"/>
    <id>https://blog.yahyav2rayssr.top/posts/217b8ff8/</id>
    <published>2023-04-18T15:31:32.441Z</published>
    <updated>2023-04-18T15:31:32.442Z</updated>
    
    <content type="html"><![CDATA[<h2 id="消息堆积"><a href="#消息堆积" class="headerlink" title="消息堆积"></a>消息堆积</h2><p>一个消费者一秒是 1000 条，一秒 3 个消费者是 3000 条，一分钟就是 18 万条。所以如果你积压了几百万到上千万的数据，即使消费者恢复了，也需要大概 1 小时的时间才能恢复过来。</p><p>一般这个时候，只能临时紧急扩容了，具体操作步骤和思路如下：</p><p>先修复 consumer 的问题，确保其恢复消费速度，然后将现有 consumer 都停掉。<br>新建一个 topic，partition 是原来的 10 倍，临时建立好原先 10 倍的 queue 数量。<br>然后写一个临时的分发数据的 consumer 程序，这个程序部署上去消费积压的数据，消费之后不做耗时的处理，直接均匀轮询写入临时建立好的 10 倍数量的 queue。<br>接着临时征用 10 倍的机器来部署 consumer，每一批 consumer 消费一个临时 queue 的数据。这种做法相当于是临时将 queue 资源和 consumer 资源扩大 10 倍，以正常的 10 倍速度来消费数据。<br>等快速消费完积压数据之后，得恢复原先部署的架构，重新用原先的 consumer 机器来消费消息。<br> mq 中的消息过期失效了</p><p>假设你用的是 RabbitMQ，RabbtiMQ 是可以设置过期时间的，也就是 TTL。如果消息在 queue 中积压超过一定的时间就会被 RabbitMQ 给清理掉，这个数据就没了。那这就是第二个坑了。这就不是说数据会大量积压在 mq 里，而是大量的数据会直接搞丢。</p><p>这个情况下，就不是说要增加 consumer 消费积压的消息，因为实际上没啥积压，而是丢了大量的消息。我们可以采取一个方案，就是批量重导，这个我们之前线上也有类似的场景干过。就是大量积压的时候，我们当时就直接丢弃数据了，然后等过了高峰期以后，比如大家一起喝咖啡熬夜到晚上12点以后，用户都睡觉了。这个时候我们就开始写程序，将丢失的那批数据，写个临时程序，一点一点的查出来，然后重新灌入 mq 里面去，把白天丢的数据给他补回来。也只能是这样了。</p><p>假设 1 万个订单积压在 mq 里面，没有处理，其中 1000 个订单都丢了，你只能手动写程序把那 1000 个订单给查出来，手动发到 mq 里去再补一次。</p><p>mq 都快写满了</p><p>如果消息积压在mq里，你很长时间都没有处理掉，此时导致mq都快写满了，咋办？这个还有别的办法吗？没有，谁让你第一个方案执行的太慢了，你临时写程序，接入数据来消费，消费一个丢弃一个，都不要了，快速消费掉所有的消息。然后走第二个方案，到了晚上再补数据吧。</p><h2 id="confirm机制投递消息的高延迟性"><a href="#confirm机制投递消息的高延迟性" class="headerlink" title="confirm机制投递消息的高延迟性"></a><strong>confirm机制投递消息的高延迟性</strong></h2><p>绝对不能以同步写消息 + 等待ack的方式来投递消息，用来临时存放未ack消息的存储需要承载高并发写入，而且我们不需要什么复杂的运算操作，这种存储首选绝对不是MySQL之类的关系数据库，而<strong>建议采用kv存储</strong>。kv存储承载高并发能力极强，而且kv操作性能很高。</p><p>生产者消息投递出去之后并且在kv存储器存储，这个投递的线程其实就可以返回了，至于每个消息的异步回调，是通过在channel注册一个confirm监听器实现的。生产者收到一个消息ack之后，就从kv存储中删除这条临时消息；收到一个消息nack之后，就从kv存储提取这条消息然后重新投递一次即可；也可以自己对kv存储里的消息做监控，如果超过一定时长没收到ack，就主动重发消息。</p><p><strong>异步confirm模式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> channelManager.getPublisherChannel(namespaceName);<br><span class="hljs-type">ProxiedConfirmListener</span> <span class="hljs-variable">confirmListener</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProxiedConfirmListener</span>();<span class="hljs-comment">//监听类</span><br>confirmListener.setChannelManager(channelManager);<br>confirmListener.setChannel(channel);<br>confirmListener.setNamespace(namespaceName);<br>confirmListener.addSuccessCallbacks(successCallbacks);<br>channel.addConfirmListener(confirmListener);<br>channel.confirmSelect();<span class="hljs-comment">//开启confirm模式</span><br>AMQP.<span class="hljs-type">BasicProperties</span> <span class="hljs-variable">messageProperties</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (message.getProperty() <span class="hljs-keyword">instanceof</span> AMQP.BasicProperties) &#123;<br>    messageProperties = (AMQP.BasicProperties) message.getProperty();<br>&#125;<br>confirmListener.toConfirm(channel.getNextPublishSeqNo(), rawMsg);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">50</span>;i++)&#123;<br>    channel.basicPublish(<br>            exchange, routingKey,<br>            mandatory, immediate,<br>            messageProperties,<br>            message.getContent()<br>    );<br>&#125;<br></code></pre></td></tr></table></figure><p>异步模式需要自己多写一部分复杂的代码实现，异步监听类，监听server端的通知消息，异步的好处性能会大幅度提升，发送完毕之后，可以继续发送其他消息。 MQServer通知生产端ConfirmListener监听类：用户可以继承接口实现自己的实现类，处理消息确认机制，此处继承类代码省略，就是上面 ProxiedConfirmListener 类： 下面贴下要实现的接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.rabbitmq.client;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Implement this interface in order to be notified of Confirm events.</span><br><span class="hljs-comment"> * Acks represent messages handled successfully; Nacks represent</span><br><span class="hljs-comment"> * messages lost by the broker.  Note, the lost messages could still</span><br><span class="hljs-comment"> * have been delivered to consumers, but the broker cannot guarantee</span><br><span class="hljs-comment"> * this.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ConfirmListener</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    ** handleAck RabbitMQ消息接收成功的方法，成功后业务可以做的事情</span><br><span class="hljs-comment">    ** 发送端投递消息前，需要把消息先存起来，比如用KV存储，接收到ack后删除</span><br><span class="hljs-comment">    **/</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleAck</span><span class="hljs-params">(<span class="hljs-type">long</span> deliveryTag, <span class="hljs-type">boolean</span> multiple)</span><br>        <span class="hljs-keyword">throws</span> IOException;<br><br>    <span class="hljs-comment">//handleNack RabbitMQ消息接收失败的通知方法，用户可以在这里重新投递消息</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleNack</span><span class="hljs-params">(<span class="hljs-type">long</span> deliveryTag, <span class="hljs-type">boolean</span> multiple)</span><br>        <span class="hljs-keyword">throws</span> IOException;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;消息堆积&quot;&gt;&lt;a href=&quot;#消息堆积&quot; class=&quot;headerlink&quot; title=&quot;消息堆积&quot;&gt;&lt;/a&gt;消息堆积&lt;/h2&gt;&lt;p&gt;一个消费者一秒是 1000 条，一秒 3 个消费者是 3000 条，一分钟就是 18 万条。所以如果你积压了几百万到上千万的</summary>
      
    
    
    
    <category term="面试" scheme="https://blog.yahyav2rayssr.top/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
    <category term="rabbitmq" scheme="https://blog.yahyav2rayssr.top/tags/rabbitmq/"/>
    
  </entry>
  
  <entry>
    <title>黑苹果常见错误</title>
    <link href="https://blog.yahyav2rayssr.top/posts/42c32bc5/"/>
    <id>https://blog.yahyav2rayssr.top/posts/42c32bc5/</id>
    <published>2023-04-18T15:31:32.386Z</published>
    <updated>2023-04-18T15:31:32.387Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="解决-App-Store-无法登录"><a href="#解决-App-Store-无法登录" class="headerlink" title="解决 App Store 无法登录"></a>解决 App Store 无法登录</h2><p>打开终端，输入命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo nvram -cPassword:nvram: Error clearing firmware variables: (iokit/common) not permitted<br></code></pre></td></tr></table></figure><p>输入用户密码，然后回车，不必理会提示信息，然后重启</p><h2 id="BIOS-未禁用-CFG-LOCK-选项"><a href="#BIOS-未禁用-CFG-LOCK-选项" class="headerlink" title="BIOS 未禁用 CFG LOCK 选项"></a>BIOS 未禁用 CFG LOCK 选项</h2><p>相关错误信息：</p><ul><li><strong>卡在 <code>[EB|#LOG:EXITBS:START]</code></strong></li></ul><p>某些用户会忘记或无法禁用BIOS中的CFG-Lock(特别是与用于电源管理的锁定0xE2 MSR位有关，显然更安全地关闭CFG-Lock)。请注意，这仅适用于Intel用户，不适用于AMD。发生这种情况时，有几个可能的解决方法：</p><p>开<code>OpenCore</code>的配置文件<code>config.plist</code>，勾选如下三个选项：</p><ul><li><code>Kernel</code> -&gt; <code>Quirks</code><ul><li><code>AppleCpuPmCfgLock</code></li><li><code>AppleXcpmCfgLock</code></li></ul></li><li><code>UEFI</code> -&gt; <code>Quirks</code><ul><li><code>IgnoreInvalidFlexRatio</code></li></ul></li></ul><img src="/posts/42c32bc5/image-20230319221225660.png" alt="image-20230319221225660" style="zoom:67%;"><img src="/posts/42c32bc5/image-20230319221303369.png" alt="image-20230319221303369" style="zoom:67%;"><h2 id="BIOS-重设或重启-x2F-关机后发送到安全模式"><a href="#BIOS-重设或重启-x2F-关机后发送到安全模式" class="headerlink" title="BIOS 重设或重启 &#x2F; 关机后发送到安全模式"></a>BIOS 重设或重启 &#x2F; 关机后发送到安全模式</h2><p><code>AppleRTC</code> 的问题，很简单的解决方法：</p><ul><li>打开 <code>Config.plist</code> 配置文件：<ul><li><code>Kernel</code> -&gt; <code>Quirks</code> -&gt; <code>DisableRtcChecksum</code></li></ul></li></ul><p><strong>注意</strong>：如果仍然有问题，则需要使用 <code>RTCMemoryFixup.kext</code> 并排除范围。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.cxyzjd.com/article/weixin_33352924/113086729">Big Sur安装常见问题</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;解决-App-Store-无法登录&quot;&gt;&lt;a href=&quot;#解决-App-Store-无法登录&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="黑苹果" scheme="https://blog.yahyav2rayssr.top/categories/%E9%BB%91%E8%8B%B9%E6%9E%9C/"/>
    
    
    <category term="黑苹果" scheme="https://blog.yahyav2rayssr.top/tags/%E9%BB%91%E8%8B%B9%E6%9E%9C/"/>
    
  </entry>
  
  <entry>
    <title>Intellij IDEA maven 配置</title>
    <link href="https://blog.yahyav2rayssr.top/posts/a3c558a3/"/>
    <id>https://blog.yahyav2rayssr.top/posts/a3c558a3/</id>
    <published>2023-04-18T15:31:32.339Z</published>
    <updated>2023-04-18T15:31:32.340Z</updated>
    
    <content type="html"><![CDATA[<h1 id="idea配置maven依赖优先从指定本地仓库获取"><a href="#idea配置maven依赖优先从指定本地仓库获取" class="headerlink" title="idea配置maven依赖优先从指定本地仓库获取"></a>idea配置maven依赖优先从指定本地仓库获取</h1><p>在设置中搜索 Runner ,在VM Option中设置参数 <code>-DarchetypeCatalog=internal</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">-DarchetypeCatalog=internal<br></code></pre></td></tr></table></figure><img src="/posts/a3c558a3/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hlc2h1bmNoZW5n,size_16,color_FFFFFF,t_70.png" alt="在这里插入图片描述" style="zoom: 33%;"><h1 id="maven离线模式及设置"><a href="#maven离线模式及设置" class="headerlink" title="maven离线模式及设置"></a>maven离线模式及设置</h1><h2 id="下载maven依赖"><a href="#下载maven依赖" class="headerlink" title="下载maven依赖"></a>下载maven依赖</h2><p>通过idea创建maven项目，maven插件会自动将maven依赖下载到本地仓库。</p><h2 id="复制本地仓库"><a href="#复制本地仓库" class="headerlink" title="复制本地仓库"></a>复制本地仓库</h2><p>先要找到maven的本地仓库，可以通过 <code>file-&gt;settings-&gt;maven</code> 流程查看到maven本地仓库的位置，然后直接复制，粘贴到生产环境下。</p><h2 id="修改maven配置"><a href="#修改maven配置" class="headerlink" title="修改maven配置"></a>修改maven配置</h2><p>这里指修改生产环境（即不能联网）下的maven的settings.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">settings</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;</span><br> <br><span class="hljs-comment">&lt;!-- 这个就是第二步，maven本地仓库粘贴在生产环境下的位置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">localRepository</span>&gt;</span>D:\Apache\apache-maven-3.6.3<span class="hljs-tag">&lt;/<span class="hljs-name">localRepository</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mirrors</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 这个就是第二步，maven本地仓库粘贴在生产环境下的位置 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>file://D:\Apache\apache-maven-3.6.3<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">mirrors</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="步骤四，设置idea"><a href="#步骤四，设置idea" class="headerlink" title="步骤四，设置idea"></a>步骤四，设置idea</h2><p>通过 <code>file-&gt;settings-&gt;maven</code> 流程，勾选 work offline 选项，并填写上 maven 本地仓库和修改过的 settings.xml 的位置</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;idea配置maven依赖优先从指定本地仓库获取&quot;&gt;&lt;a href=&quot;#idea配置maven依赖优先从指定本地仓库获取&quot; class=&quot;headerlink&quot; title=&quot;idea配置maven依赖优先从指定本地仓库获取&quot;&gt;&lt;/a&gt;idea配置maven依赖优</summary>
      
    
    
    
    <category term="研发工具" scheme="https://blog.yahyav2rayssr.top/categories/%E7%A0%94%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    <category term="Intellij IDEA" scheme="https://blog.yahyav2rayssr.top/categories/%E7%A0%94%E5%8F%91%E5%B7%A5%E5%85%B7/Intellij-IDEA/"/>
    
    
    <category term="maven" scheme="https://blog.yahyav2rayssr.top/tags/maven/"/>
    
    <category term="intellij idea" scheme="https://blog.yahyav2rayssr.top/tags/intellij-idea/"/>
    
  </entry>
  
</feed>
