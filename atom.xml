<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yahya的博客</title>
  
  <subtitle>学习笔记</subtitle>
  <link href="https://blog.yahyav2rayssr.top/atom.xml" rel="self"/>
  
  <link href="https://blog.yahyav2rayssr.top/"/>
  <updated>2023-04-16T04:08:05.443Z</updated>
  <id>https://blog.yahyav2rayssr.top/</id>
  
  <author>
    <name>Yahya</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hexo 安装</title>
    <link href="https://blog.yahyav2rayssr.top/posts/9d95a809/"/>
    <id>https://blog.yahyav2rayssr.top/posts/9d95a809/</id>
    <published>2023-04-16T04:08:05.443Z</published>
    <updated>2023-04-16T04:08:05.443Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="yum-源配置"><a href="#yum-源配置" class="headerlink" title="yum 源配置"></a>yum 源配置</h2><p>将 yun 源设置成阿里云的，可以大大提高安装速度，推荐使用，所需命令如下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">rm -rf /etc/yum.repos.d/*  # 删除本地repo文件<br><br>curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo  ## 下载阿里云centos7镜像源<br><br>yum clean all; yum makecache # 清理缓存、建立缓存<br></code></pre></td></tr></table></figure><p>如果担心中途出其他问题先考虑先把原有 <code>/etc/yum.repos.d</code> 目录下的文件做一次备份方便还原。</p><h2 id="git-安装"><a href="#git-安装" class="headerlink" title="git 安装"></a>git 安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y git<br></code></pre></td></tr></table></figure><h2 id="nodejs-安装"><a href="#nodejs-安装" class="headerlink" title="nodejs 安装"></a>nodejs 安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://nodejs.org/dist/v16.14.2/node-v16.14.2-linux-x64.tar.xz<br><br>tar -vxf node-v16.14.2-linux-x64.tar.xz   # 解压node.js软件压缩软件包<br>mv node-v16.14.2-linux-x64 /usr/local/bin # 移动node到/usr/local/bin目录下<br><br>cd /usr/local/bin/ # 进入/usr/local/bin<br><br>mv node-v16.14.2-linux-x64/ node # 修改node-v16.14.2-linux-x64 名称为 node<br></code></pre></td></tr></table></figure><p>然后修改 <code>/etc/profile</code> 文件，增加以下配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">export N_PREFIX=/usr/local/bin/node  # 设置node软件家目录的环境变量<br>export PATH=$PATH:$N_PREFIX/bin  # 设置node软件到bin目录下环境变量  实现bin目录下命令的全局使用<br></code></pre></td></tr></table></figure><p>最后执行 <code>source /etc/profile</code> 使配置生效，用以下命令验证确认 nodejs 已经安装成功。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">node -v<br><br>npm -v<br></code></pre></td></tr></table></figure><h3 id="n-安装"><a href="#n-安装" class="headerlink" title="n 安装"></a>n 安装</h3><p>使用 n 可以对 nodejs 进行多版本管理，推荐使用 n 来切换管理 nodejs 版本，安装命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g n<br></code></pre></td></tr></table></figure><p>常用命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">n stable # 安装最新的稳定版<br><br>n lts # 安装最新的 LTS 版<br><br>n &lt;version&gt; # 安装指定的 node 版本<br></code></pre></td></tr></table></figure><h2 id="hexo-安装"><a href="#hexo-安装" class="headerlink" title="hexo 安装"></a>hexo 安装</h2><p>hexo 的安装比较简单，直接按照<a href="https://hexo.io/zh-cn/">官网</a>的说明步骤安装即可。首先是基础软件 nodejs 以及 git，这两个都是常用基础软件所以就不介绍细节了，官网直接安装即可。 按照使用了 npm 这个 nodejs 库管理软件，由于默认源在国外经常连接超时，所以首先需要修改成国内的镜像源，这里是改成了淘宝的镜像源。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm config set registry https://registry.npm.taobao.org<br></code></pre></td></tr></table></figure><p>接下来就是使用 <code>npm</code> 命令安装 hexo，推荐使用 cnpm</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g cnpm --registry=https://registry.npm.taobao.org<br><br>cnpm install -g hexo-cli<br></code></pre></td></tr></table></figure><h2 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl stop firewalld; systemctl disable firewalld<br></code></pre></td></tr></table></figure><h2 id="关闭-selinux"><a href="#关闭-selinux" class="headerlink" title="关闭 selinux"></a>关闭 selinux</h2><h3 id="临时关闭"><a href="#临时关闭" class="headerlink" title="临时关闭"></a>临时关闭</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">0: Permissive</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">1: Enforcing</span><br><br>setenforce 0<br></code></pre></td></tr></table></figure><h3 id="永久关闭"><a href="#永久关闭" class="headerlink" title="永久关闭"></a>永久关闭</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">vim /etc/selinux/config</span><br><br>SELINUX=disabled<br></code></pre></td></tr></table></figure><h2 id="hexo-初始化"><a href="#hexo-初始化" class="headerlink" title="hexo 初始化"></a>hexo 初始化</h2><blockquote><ul><li>站点配置文件：站点目录下的<code>_config.yml</code>，路径为<code>&lt;folder&gt;\_config.yml</code></li><li>主题配置文件：站点目录下的<code>themes</code>文件夹下的，主题文件夹下的<code>_config.yml</code>，路径为<code>&lt;folder&gt;\themes\&lt;主题文件夹&gt;\_config.yml</code></li></ul></blockquote><p>新建一个目录，作为统一存放 markdown 文件的目录，然后进入到该目录下执行以下命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo init<br></code></pre></td></tr></table></figure><h2 id="markdown-菜单目录生成"><a href="#markdown-菜单目录生成" class="headerlink" title="markdown 菜单目录生成"></a>markdown 菜单目录生成</h2><p>hexo 文件首部加上 <code>toc: true</code>，就可以在文章左侧生成目录，且可以正常跳转。因此你只用简单的加上<code>toc: true</code>即可，任何其他的操作都是不必要的。</p><p><strong>如果你装了hexo的toc插件，请你删除它，它会影响你目录的跳转！使用下面的语句删除toc插件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm remove hexo-toc --save<br></code></pre></td></tr></table></figure><h2 id="图片相对路径配置"><a href="#图片相对路径配置" class="headerlink" title="图片相对路径配置"></a>图片相对路径配置</h2><blockquote><p><a href="https://github.com/hexojs/hexo-renderer-marked">hexo-renderer-marked</a> 3.1.0 引入了一个新的选项，其允许你无需使用 <code>asset_img</code> 标签插件就可以在 markdown 中嵌入图片，如需启用，编辑 _config.yml，添加以下配置：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">post_asset_folder: true<br>marked:<br>  prependRoot: true<br>  postAsset: true<br></code></pre></td></tr></table></figure><p>安装以下依赖：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install https://github.com/7ym0n/hexo-asset-image --save # 解决 &lt;img /&gt; 图片标签相对路径问题<br><br>npm install hexo-simple-image --save # 解决 ![]() 图片标签相对路径问题<br></code></pre></td></tr></table></figure><p>最终效果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">├── hexo-asset-image@0.0.3 (git+ssh://git@github.com/7ym0n/hexo-asset-image.git#6c88c98214765112d148850a646ddca379fcdcfe)<br>├── hexo-simple-image@1.0.4<br></code></pre></td></tr></table></figure><p>这样子以 <code>&lt;img /&gt;</code> 和 <code>![]()</code> 包裹的相对路径图片都可以正常显示了。</p><h2 id="创建自定义-about-页"><a href="#创建自定义-about-页" class="headerlink" title="创建自定义 about 页"></a>创建自定义 about 页</h2><p>博客是用的<code>hexo</code>，打算增加一个<code>about</code>页。</p><p>根据文档，当然非常简单，只需要：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo new page &quot;about&quot;<br></code></pre></td></tr></table></figure><p>然后修改所用主题目录下的<code>_config.yml</code>文件，将<code>menu</code>中<code>about</code>前的注释去掉。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">menu</span>:<br>  <span class="hljs-attr">home</span>:  / || home<br>  <span class="hljs-attr">about</span>:  <span class="hljs-regexp">/about/</span> || user<br>  <span class="hljs-attr">tags</span>:  <span class="hljs-regexp">/tags/</span> || tags<br>  ...<br></code></pre></td></tr></table></figure><p>然后修改<code>source/about/</code>目录中的<code>index.md</code>文件即可。</p><p>但是，我想要在页面中显示表格，而且不用<code>markdown</code>格式的表格。</p><p>经谷歌，可以直接在<code>index.md</code>中写<code>html</code>代码，这太好了。</p><p>可是，写好代码，<code>hexo g</code>之后，怪异的现象出现了，<code>about</code>页面中，页顶标题下是许多空白行，表格要下拉到页面最底部才可见。</p><p>又搜索之后，找到了答案，将 <code>index.md</code> 改名为 <code>index.html</code>，修改之后，马上显示正常了。</p><h2 id="主题方案"><a href="#主题方案" class="headerlink" title="主题方案"></a>主题方案</h2><h3 id="fluid"><a href="#fluid" class="headerlink" title="fluid"></a>fluid</h3><p>代码高亮主题选择方案：<a href="https://highlightjs.org/static/demo/">https://highlightjs.org/static/demo/</a></p><p>使用手册：<a href="https://hexo.fluid-dev.com/docs/start/#%E4%B8%BB%E9%A2%98%E7%AE%80%E4%BB%8B">https://hexo.fluid-dev.com/docs/start/#%E4%B8%BB%E9%A2%98%E7%AE%80%E4%BB%8B</a></p><h3 id="next"><a href="#next" class="headerlink" title="next"></a>next</h3><blockquote><p>参考配置：<a href="https://blog.csdn.net/as480133937/article/details/100138838">https://blog.csdn.net/as480133937/article/details/100138838</a></p></blockquote><h4 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h4><p>NexT 主题自带了一个搜索功能 <a href="https://github.com/next-theme/hexo-generator-searchdb">Local Search</a>，即在编译文件时本地生成一个数据库，放在网站根目录下，用户借助此数据库进行搜索查询。 安装：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-generator-searchdb <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>在 NexT 的配置文件中打开：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">local_search:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h4 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Vanilla JavaScript plugin for lazyloading images.</span><br><span class="hljs-comment"># For more information: https://github.com/ApoorvSaxena/lozad.js</span><br><span class="hljs-attr">lazyload:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h3 id="yilia-plus"><a href="#yilia-plus" class="headerlink" title="yilia-plus"></a>yilia-plus</h3><blockquote><p>参考配置：<a href="https://gitee.com/nate-lin/yilia-plus">https://gitee.com/nate-lin/yilia-plus</a></p></blockquote><h2 id="远程发布"><a href="#远程发布" class="headerlink" title="远程发布"></a>远程发布</h2><h3 id="github"><a href="#github" class="headerlink" title="github"></a>github</h3><h4 id="免密关联"><a href="#免密关联" class="headerlink" title="免密关联"></a>免密关联</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh-keygen<br></code></pre></td></tr></table></figure><p>然后将生成的 <code>id_rsa.pub</code> 文件内容关联到 github 的 SSH and GPG Keys 菜单的下的 ssh key 列表</p><img src="/posts/9d95a809/image-20230408234337544.png" class alt="image-20230408234337544"><h4 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h4><p>仓库名称格式 <strong>&lt;你的 GitHub 用户名&gt;.github.io</strong> ，站点会通过这个名称实现域名访问</p><blockquote><p>注意：仓库的访问权限需要设置为 public，否则无法通过 .github.io 域名的形式进行访问。</p></blockquote><img src="/posts/9d95a809/image-20230408235308117.png" alt="image-20230408235308117" style="zoom: 67%;"><h4 id="github-page-暴露"><a href="#github-page-暴露" class="headerlink" title="github page 暴露"></a>github page 暴露</h4><blockquote><p>参考链接：<a href="https://docs.github.com/en/pages/quickstart">https://docs.github.com/en/pages/quickstart</a></p></blockquote><p>默认情况下新建的仓库在 github page 是不关联任何分支的，即为 None，所以需要调整 Pages 配置为以下图示效果：</p><img src="/posts/9d95a809/image-20230409000036606.png" alt="image-20230409000036606"><h4 id="cloudflare-加速"><a href="#cloudflare-加速" class="headerlink" title="cloudflare 加速"></a>cloudflare 加速</h4><p>经实测 githubpage 在国内很容易被墙，所以决定在现有的 cloudflare 网站上做一层 CNAME 域名重定向访问到 github page 上，解决国内无法直接访问 github page 的问题，操作步骤如下：</p><p>创建 CNAME DNS 解析记录，最终访问域名为 <a href="https://blog.yahyav2rayssr.top,cloudflare/">https://blog.yahyav2rayssr.top，cloudflare</a> 配置如下：</p><img src="/posts/9d95a809/image-20230409003317201.png" class alt="image-20230409003317201"><p>另外还需要在 github 上面设置自定义域名，填写位置如下：</p><img src="/posts/9d95a809/image-20230409003825608.png" alt="image-20230409003825608"><h4 id="hexo-远程仓库配置"><a href="#hexo-远程仓库配置" class="headerlink" title="hexo 远程仓库配置"></a>hexo 远程仓库配置</h4><h5 id="安装发布插件"><a href="#安装发布插件" class="headerlink" title="安装发布插件"></a>安装发布插件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cnpm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><h5 id="修改-hexo-配置"><a href="#修改-hexo-配置" class="headerlink" title="修改 hexo 配置"></a>修改 hexo 配置</h5><p>增加 github 相关配置，内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">Deployment</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># Docs: https://hexo.io/docs/one-command-deployment</span></span><br>deploy:<br>  type: git<br>  repo: git@github.com:yaoyuming/yaoyuming.github.io.git<br>  branch: master<br></code></pre></td></tr></table></figure><h2 id="文件压缩"><a href="#文件压缩" class="headerlink" title="文件压缩"></a>文件压缩</h2><h3 id="hexo-neat"><a href="#hexo-neat" class="headerlink" title="hexo-neat"></a>hexo-neat</h3><blockquote><p>hexo-neat 主要用来压缩 html，css 以及 js 文件。</p></blockquote><h4 id="安装-hexo-neat"><a href="#安装-hexo-neat" class="headerlink" title="安装 hexo-neat"></a>安装 hexo-neat</h4><p>在站点根目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-neat --save<br></code></pre></td></tr></table></figure><h4 id="添加相关配置"><a href="#添加相关配置" class="headerlink" title="添加相关配置"></a>添加相关配置</h4><p>在站点配置文件 <code>_config.yml</code> 添加相关配置，直接添加到站点配置文件的末尾就可以。可以安装自己的需求去自定义配置，配置内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># hexo-neat</span><br><span class="hljs-comment"># 博文压缩</span><br><span class="hljs-attr">neat_enable:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment"># 压缩html</span><br><span class="hljs-attr">neat_html:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">exclude:</span><br><span class="hljs-comment"># 压缩css  </span><br><span class="hljs-attr">neat_css:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">exclude:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;**/*.min.css&#x27;</span><br><span class="hljs-comment"># 压缩js</span><br><span class="hljs-attr">neat_js:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">mangle:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">output:</span><br>  <span class="hljs-attr">compress:</span><br>  <span class="hljs-attr">exclude:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;**/*.min.js&#x27;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;**/jquery.fancybox.pack.js&#x27;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;**/index.js&#x27;</span>  <br></code></pre></td></tr></table></figure><h4 id="hexo-neat-插件注意事项"><a href="#hexo-neat-插件注意事项" class="headerlink" title="hexo-neat 插件注意事项"></a>hexo-neat 插件注意事项</h4><p>在使用hexo-neat插件时，可以在命令窗口中看到各个文件的压缩率，于是可以通过跳过一些文件让效率更高。</p><p><strong>跳过压缩文件的正确配置方式</strong></p><blockquote><p>压缩 html 时不要跳过 .md 文件和 .swig 文件</p><p>.md 文件就是 markdown 文件，如果跳过压缩 .md 文件，而又刚好在文章中使用到了 tab 标签，那么当 hexo 在生成静态页面时就会发生解析错误。这会导致使用到了 tab 标签的页面生成失败而无法访问。</p><p>.swig 文件是模板引擎文件，也就是 hexo 可以通过这些文件来生成对应的页面。如果跳过这些文件，所有页面完全没有起到压缩的效果，页面源代码里依然存在着一大堆空白。</p></blockquote><p>如果按照官方插件的文档说明来配置exclude，会发现完全不起作用。这是因为配置的文件路径不对，压缩时找不到你配置的文件，自然也就无法跳过了。于是需要给这些文件指定正确的路径，万能的配置方式如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">neat_css:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">exclude:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;**/*.min.css&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="gulp"><a href="#gulp" class="headerlink" title="gulp"></a>gulp</h3><blockquote><p>gulp 主要用来压缩图片。</p></blockquote><h4 id="安装-gulp"><a href="#安装-gulp" class="headerlink" title="安装 gulp"></a>安装 gulp</h4><p>gulp 全局安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install --global gulp-cli<br></code></pre></td></tr></table></figure><p>gulp 局部安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install gulp --save<br><br>npm install gulp-babel babel-preset-env babel-preset-mobx --save<br>npm install -D @babel/core @babel/preset-react @babel/preset-env --save<br></code></pre></td></tr></table></figure><p>图片压缩安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install gulp-imagemin --save<br></code></pre></td></tr></table></figure><p>最终生成的 package.json 新增内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;compile&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;hexo clean &amp;&amp; hexo generate &amp;&amp; gulp minify-images&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;dependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;babel-preset-env&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^1.7.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;babel-preset-mobx&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^2.0.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;gulp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^4.0.2&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;gulp-babel&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^8.0.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;gulp-imagemin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^7.1.0&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;devDependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;@babel/core&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^7.8.4&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;@babel/preset-env&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^7.8.4&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;@babel/preset-react&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^7.8.3&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="gulpfile-js-配置"><a href="#gulpfile-js-配置" class="headerlink" title="gulpfile.js 配置"></a>gulpfile.js 配置</h4><p>新增 gulpfile.js，内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 引入需要的模块</span><br><span class="hljs-keyword">var</span> gulp = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp&#x27;</span>);<br><span class="hljs-keyword">var</span> imagemin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-imagemin&#x27;</span>);<br><br><span class="hljs-comment">// 压缩图片</span><br>gulp.<span class="hljs-title function_">task</span>(<span class="hljs-string">&#x27;minify-images&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> gulp.<span class="hljs-title function_">src</span>([<span class="hljs-string">&#x27;./public/**/*.png&#x27;</span>, <span class="hljs-string">&#x27;./public/**/*.jpg&#x27;</span>, <span class="hljs-string">&#x27;./public/**/*.gif&#x27;</span>])<br>        .<span class="hljs-title function_">pipe</span>(<span class="hljs-title function_">imagemin</span>(<br>            [imagemin.<span class="hljs-title function_">gifsicle</span>(&#123; <span class="hljs-string">&#x27;optimizationLevel&#x27;</span>: <span class="hljs-number">3</span> &#125;),<br>            imagemin.<span class="hljs-title function_">mozjpeg</span>(&#123; <span class="hljs-string">&#x27;progressive&#x27;</span>: <span class="hljs-literal">true</span> &#125;),<br>            imagemin.<span class="hljs-title function_">optipng</span>(&#123; <span class="hljs-string">&#x27;optimizationLevel&#x27;</span>: <span class="hljs-number">5</span> &#125;),<br>            imagemin.<span class="hljs-title function_">svgo</span>()],<br>            &#123; <span class="hljs-string">&#x27;verbose&#x27;</span>: <span class="hljs-literal">true</span> &#125;))<br>        .<span class="hljs-title function_">pipe</span>(gulp.<span class="hljs-title function_">dest</span>(<span class="hljs-string">&#x27;./public&#x27;</span>))<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="制作永久链接"><a href="#制作永久链接" class="headerlink" title="制作永久链接"></a>制作永久链接</h2><p>hexo 预设永久连结是依照日期，但是这个很容易改动，又不希望永久连结内使用文章标题（因为是中文也有可能改动），所以有必要对链接路径做自定义配置。</p><h3 id="安装-abbrlink"><a href="#安装-abbrlink" class="headerlink" title="安装 abbrlink"></a>安装 abbrlink</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-abbrlink --save<br></code></pre></td></tr></table></figure><h3 id="设定"><a href="#设定" class="headerlink" title="设定"></a>设定</h3><h4 id="预设设定"><a href="#预设设定" class="headerlink" title="预设设定"></a>预设设定</h4><p>hexo的站点配置文件(_config.yml)中</p><p>使用 <code>permalink: :year/:month/:day/:title/</code> 当作永久连结的设定</p><p>也就是说文章的永久连接最后会是 <code>年/月/日/标题</code> 这样的格式，详情可以看 <a href="https://hexo.io/zh-cn/docs/permalinks.html">hexo永久连结文档</a></p><p>而稍微底下一点有</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">permalink_defaults:</span><br></code></pre></td></tr></table></figure><p>这个是可以设定自己的参数的。</p><h4 id="自定义设定"><a href="#自定义设定" class="headerlink" title="自定义设定"></a>自定义设定</h4><p>我使用 <a href="https://github.com/Rozbo/hexo-abbrlink">hexo-abbrlink</a> 对每篇文章生出一个编号</p><p>设定 hexo-abbrlink<br>在主题配置文件加上</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">abbrlink:</span><br>  <span class="hljs-attr">alg:</span> <span class="hljs-string">crc32</span>  <span class="hljs-comment"># support crc16(default) and crc32  </span><br>  <span class="hljs-attr">rep:</span> <span class="hljs-string">hex</span>    <span class="hljs-comment"># support dec(default) and hex</span><br><br>  <span class="hljs-comment"># crc16/crc32: 差别在于编号个数的极限，crc16可以生出65535个</span><br>  <span class="hljs-comment"># dec/hex:     差别在于编号生出来是十进制还是十六进制</span><br></code></pre></td></tr></table></figure><h4 id="自定义永久连结格式"><a href="#自定义永久连结格式" class="headerlink" title="自定义永久连结格式"></a>自定义永久连结格式</h4><p>我想要以作者名字为主，再加上编号来形成永久连结</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">permalink_defaults:</span><br>  <span class="hljs-attr">author_name:</span> <span class="hljs-string">yahya</span>   <span class="hljs-comment"># 新增一个作者名字的参数</span><br><br><span class="hljs-attr">permalink:</span> <span class="hljs-string">:author_name/:abbrlink/</span>    <span class="hljs-comment"># 结果是：网域/作者名字/abbrlink生成编号</span><br></code></pre></td></tr></table></figure><h2 id="私人文章隐藏"><a href="#私人文章隐藏" class="headerlink" title="私人文章隐藏"></a>私人文章隐藏</h2><p>当一篇文章被设置为「隐藏」时，它不会出现在任何列表中（包括首页、存档、分类页面、标签页面、Feed、站点地图等），也不会被搜索引擎索引（前提是搜索引擎遵守 noindex 标签）。</p><p>只有知道文章链接的人才可以访问被隐藏的文章。</p><p>Github 地址：<a href="https://github.com/printempw/hexo-hide-posts">https://github.com/printempw/hexo-hide-posts</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>在站点根目录下执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-hide-posts --save<br></code></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>在站点目录下的<code>_config.yml</code>中如下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># hexo-hide-posts</span><br><span class="hljs-attr">hide_posts:</span><br>  <span class="hljs-comment"># 可以改成其他你喜欢的名字</span><br>  <span class="hljs-attr">filter:</span> <span class="hljs-string">hidden</span><br>  <span class="hljs-comment"># 指定你想要传递隐藏文章的位置，比如让所有隐藏文章在存档页面可见</span><br>  <span class="hljs-comment"># 常见的位置有：index, tag, category, archive, sitemap, feed, etc.</span><br>  <span class="hljs-comment"># 留空则默认全部隐藏</span><br>  <span class="hljs-attr">public_generators:</span> []<br>  <span class="hljs-comment"># 为隐藏的文章添加 noindex meta 标签，阻止搜索引擎收录</span><br>  <span class="hljs-attr">noindex:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>举个栗子：设置 <code>filter: secret</code> 之后，你就可以在 front-matter 中使用 <code>secret: true</code> 来隐藏文章了。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>在文章的属性中定义 <code>hidden: true</code> 即可隐藏文章。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">&#x27;Hidden Post&#x27;</span><br><span class="hljs-attr">date:</span> <span class="hljs-string">&#x27;2021/03/05 21:45:14&#x27;</span><br><span class="hljs-attr">hidden:</span> <span class="hljs-literal">true</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>虽然首页上被隐藏了，但你仍然可以通过 <code>https://hexo.test/lorem-ipsum/</code> 链接访问它。</p><p>你可以在命令行运行 <code>hexo hidden:list</code> 来获取当前所有的已隐藏文章列表。</p><p>插件也在 <a href="https://hexo.io/api/locals">Local Variables</a> 中添加了 <code>all_posts</code> 和 <code>hidden_posts</code> 变量，供自定义主题使用。</p><h2 id="推荐主题"><a href="#推荐主题" class="headerlink" title="推荐主题"></a>推荐主题</h2><p><a href="https://github.com/fluid-dev/hexo-theme-fluid">hexo-theme-fluid</a></p><p><a href="https://github.com/theme-next/hexo-theme-next">hexo-theme-next</a></p><p><a href="https://github.com/cofess/hexo-theme-pure">hexo-theme-pure</a></p><p><a href="https://github.com/JoeyBling/hexo-theme-yilia-plus">hexo-theme-yilia-plus</a></p><p><a href="https://github.com/yelog/hexo-theme-3-hexo">hexo-theme-3-hexo</a></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://home.ustc.edu.cn/~liujunyan/blog/hexo-next-theme-config/#hexo-%E5%AE%89%E8%A3%85">Hexo 博客 NexT 主题的安装使用</a></p><p><a href="https://bbs.huaweicloud.com/blogs/348180">centos7系统部署hexo博客新手入门</a></p><p><a href="https://monkeywie.cn/2020/08/20/fast-github-page-with-cloudflare/">使用cloudflare免费加速github page</a></p><p><a href="https://www.voidking.com/dev-hexo-gulp/">Hexo使用Gulp压缩静态资源</a></p><p><a href="https://blog.csdn.net/GerZhouGengCheng/article/details/106074545">使用Gulp压缩Hexo博客静态资源</a></p><p><a href="https://www.jb51.net/article/98153.htm">node.js版本管理工具n无效的原理和解决方法</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;yum-源配置&quot;&gt;&lt;a href=&quot;#yum-源配置&quot; class=&quot;headerlink&quot; title=&quot;yum 源配置&quot;&gt;&lt;/</summary>
      
    
    
    
    <category term="运维" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/"/>
    
    <category term="常用安装" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/%E5%B8%B8%E7%94%A8%E5%AE%89%E8%A3%85/"/>
    
    
    <category term="hexo" scheme="https://blog.yahyav2rayssr.top/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>常见错误</title>
    <link href="https://blog.yahyav2rayssr.top/posts/c10f304f/"/>
    <id>https://blog.yahyav2rayssr.top/posts/c10f304f/</id>
    <published>2023-04-16T04:05:46.654Z</published>
    <updated>2023-04-16T03:12:26.071Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="解决-x2F-bin-x2F-bash-M-bad-interpreter-No-such-file-or-directory"><a href="#解决-x2F-bin-x2F-bash-M-bad-interpreter-No-such-file-or-directory" class="headerlink" title="[解决]&#x2F;bin&#x2F;bash^M: bad interpreter: No such file or directory"></a>[解决]&#x2F;bin&#x2F;bash^M: bad interpreter: No such file or directory</h2><p>执行一个脚本full_build.sh 时, 一直是提示我:<br>-bash: .&#x2F;full_build.sh: &#x2F;bin&#x2F;bash^M: bad interpreter: No such file or directory</p><p>开始是说我权限不够, 不能执行, 接着我就把权限给改了,  就一直报上面问题.<br>记得几个月前, 就遇到过类似的问题, 当时是在编译Android Framework, 后来打开出错的.xml文件, 很直接的看到很多的^M的标识,  由于负责编译的同事帮忙解决了, 就没有去问为什么, 今天再次遇到, 就上网搜了搜, 才明白了原因.  </p><p>出现上面错误的原因之一是脚本文件是DOS格式的, 即每一行的行尾以\r\n来标识, 使用vim编辑器打开脚本, 运行:<br>:set ff?<br>可以看到DOS或UNIX的字样. 使用set ff&#x3D;unix把它强制为unix格式的, 然后存盘退出, 即可.</p><p>网上也有很多的其他方法, 比如: 执行dos2unix 命令转换编码,  命令为: #dos2unix full_build.sh,  但我没有dos2unix的安装包, 所以就跳过了.  </p><p>也有说造成这种问题的原因是在使用vim时不小心按了个: Ctrl+v,  脚本是我从服务器上下的, 不清楚到底怎么会变成了DOS格式的了. 总之解决了就行啦.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;解决-x2F-bin-x2F-bash-M-bad-interpreter-No-such-file-or-directory&quot;&gt;</summary>
      
    
    
    
    <category term="运维" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/"/>
    
    <category term="常见错误" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/"/>
    
    
    <category term="常见错误" scheme="https://blog.yahyav2rayssr.top/tags/%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/"/>
    
  </entry>
  
  <entry>
    <title>杂烩</title>
    <link href="https://blog.yahyav2rayssr.top/posts/c10d2cc/"/>
    <id>https://blog.yahyav2rayssr.top/posts/c10d2cc/</id>
    <published>2023-04-16T04:04:37.515Z</published>
    <updated>2023-04-16T03:54:11.646Z</updated>
    
    <content type="html"><![CDATA[<h1 id="刷新DNS缓存"><a href="#刷新DNS缓存" class="headerlink" title="刷新DNS缓存"></a>刷新DNS缓存</h1><p>现在很多Linux发行版都没有内置DNS本地缓存，Linux不像Windows那样可以使用ipconfig &#x2F;flushdns来刷新，在Linux下无需刷新，因为本身没有缓存；</p><p>当然，如果非要缓存刷新，可以安装nscd，然后刷新这个守护进程。</p><p>Ubuntu：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-get install -y nscd<br></code></pre></td></tr></table></figure><p>CentOS:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y nscd<br></code></pre></td></tr></table></figure><p>使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">service nscd restart<br></code></pre></td></tr></table></figure><h1 id="查看DNS信息"><a href="#查看DNS信息" class="headerlink" title="查看DNS信息"></a>查看DNS信息</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">[deployer@CBSS-DMZ-19 ~]$ nslookup mall.10010.com<br>Server:         202.106.0.20                                           　　 #这个域名是通过202.106.0.20这个DNS服务器进行解析的.<br>Address:        202.106.0.20#53                                         　　#DNS服务器使用的IP地址和端口号<br><br>Non-authoritative answer:<br>mall.10010.com  canonical name = mall.10010.com.cdn.dnsv1.com.          　　#mall.10010.com对应的另外的域名mall.10010.com.cdn.dnsv1.com<br>mall.10010.com.cdn.dnsv1.com    canonical name = lt.p23.tc.cdntip.com. 　　 #mall.10010.com.cdn.dnsv1.com对应的另外的域名lt.p23.tc.cdntip.com<br>Name:   lt.p23.tc.cdntip.com<br>Address: 123.125.46.202      　　 #域名对应的第1个IP地址<br>Name:   lt.p23.tc.cdntip.com<br>Address: 121.29.54.199       　　 #域名对应的第2个IP地址<br>Name:   lt.p23.tc.cdntip.com<br>Address: 121.29.54.195       　　 #域名对应的第3个IP地址<br><br>[deployer@CBSS-DMZ-19 ~]$ cat /etc/resolv.conf    　　 #LINUX主机在本地配置的域名服务器<br>nameserver 202.106.0.20<br></code></pre></td></tr></table></figure><h1 id="防火墙开放端口"><a href="#防火墙开放端口" class="headerlink" title="防火墙开放端口"></a>防火墙开放端口</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">查看防火墙某个端口是否开放</span><br>firewall-cmd --query-port=3306/tcp<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">开放防火墙端口3306</span><br>firewall-cmd --zone=public --add-port=3306/tcp --permanent<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看防火墙状态</span><br>systemctl status firewalld<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">关闭防火墙</span><br>systemctl stop firewalld<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">打开防火墙</span><br>systemctl start firewalld<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">开放一段端口</span><br>firewall-cmd --zone=public --add-port=40000-45000/tcp --permanent<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看开放的端口列表</span><br>firewall-cmd --zone=public --list-ports<br></code></pre></td></tr></table></figure><h1 id="解决SSH连接Linux超时自动断开"><a href="#解决SSH连接Linux超时自动断开" class="headerlink" title="解决SSH连接Linux超时自动断开"></a>解决SSH连接Linux超时自动断开</h1><h2 id="1-TMOUT-系统环境变量"><a href="#1-TMOUT-系统环境变量" class="headerlink" title="1. $TMOUT 系统环境变量"></a>1. $TMOUT 系统环境变量</h2><p>用以下命令判断是否是否设置了该参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo $TMOUT<br></code></pre></td></tr></table></figure><p>如果输出空或0表示不超时，大于0的数字n表示n秒没有收入则超时</p><p><strong>修改方法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi /etc/profile<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">将以下900修改为0就是设置不超时</span><br>export TMOUT=900<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">让配置立即生效</span><br>source /etc/profile<br></code></pre></td></tr></table></figure><h2 id="2-sshd-服务配置"><a href="#2-sshd-服务配置" class="headerlink" title="2. sshd 服务配置"></a>2. sshd 服务配置</h2><blockquote><ol><li>ClientAliveInterval指定了服务器端向客户端请求消息的时间间隔, 默认是0, 不发送。设置60表示每分钟发送一次, 然后客户端响应, 这样就保持长连接了。</li><li>ClientAliveCountMax表示服务器发出请求后客户端没有响应的次数达到一定值, 就自动断开。正常情况下, 客户端不会不响应，使用默认值3即可。</li></ol></blockquote><h3 id="1-查看现有配置"><a href="#1-查看现有配置" class="headerlink" title="1. 查看现有配置"></a>1. 查看现有配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /etc/ssh<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看sshd_config中关于客户端活动状态的配置</span><br>grep ClientAlive sshd_config<br></code></pre></td></tr></table></figure><p><strong>默认输出如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">----------------------------</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">ClientAliveInterval 0</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">ClientAliveCountMax 3</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">----------------------------</span><br></code></pre></td></tr></table></figure><h3 id="3-修改sshd配置"><a href="#3-修改sshd配置" class="headerlink" title="3. 修改sshd配置"></a>3. 修改sshd配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">启用客户端活动检查，每60秒检查一次，3次不活动断开连接</span><br>sed -i &quot;s/#ClientAliveInterval 0/ClientAliveInterval 60/g&quot; sshd_config<br>sed -i &quot;s/#ClientAliveCountMax 3/ClientAliveCountMax 3/g&quot; sshd_config<br></code></pre></td></tr></table></figure><h3 id="4-重新加载"><a href="#4-重新加载" class="headerlink" title="4. 重新加载"></a>4. 重新加载</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">service sshd reload</span><br></code></pre></td></tr></table></figure><h3 id="5-确认修改情况"><a href="#5-确认修改情况" class="headerlink" title="5. 确认修改情况"></a>5. 确认修改情况</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">备份原配置文件</span><br>cp sshd_config sshd_config.bak<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">确认修改</span><br>grep ClientAlive sshd_config<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">比较配置文件差异</span><br>diff sshd_config sshd_config.bak<br></code></pre></td></tr></table></figure><h2 id="3-xshell简易配置方式"><a href="#3-xshell简易配置方式" class="headerlink" title="3. xshell简易配置方式"></a>3. xshell简易配置方式</h2><img src="/posts/c10d2cc/1680091905.png" class alt="2020-04-07T00:48:36.png">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;刷新DNS缓存&quot;&gt;&lt;a href=&quot;#刷新DNS缓存&quot; class=&quot;headerlink&quot; title=&quot;刷新DNS缓存&quot;&gt;&lt;/a&gt;刷新DNS缓存&lt;/h1&gt;&lt;p&gt;现在很多Linux发行版都没有内置DNS本地缓存，Linux不像Windows那样可以使用ipcon</summary>
      
    
    
    
    <category term="运维" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/"/>
    
    <category term="杂烩" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/%E6%9D%82%E7%83%A9/"/>
    
    
    <category term="杂烩" scheme="https://blog.yahyav2rayssr.top/tags/%E6%9D%82%E7%83%A9/"/>
    
  </entry>
  
  <entry>
    <title>zoilr 账号信息</title>
    <link href="https://blog.yahyav2rayssr.top/posts/6bf18a3f/"/>
    <id>https://blog.yahyav2rayssr.top/posts/6bf18a3f/</id>
    <published>2023-04-16T03:58:07.241Z</published>
    <updated>2023-04-16T03:58:07.242Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h2><p><a href="https://zoilr.com/">https://zoilr.com</a></p><h2 id="订单查询"><a href="#订单查询" class="headerlink" title="订单查询"></a>订单查询</h2><p><a href="https://zoilr.com/user/index/query">https://zoilr.com/user/index/query</a></p><h2 id="账号"><a href="#账号" class="headerlink" title="账号"></a>账号</h2><p>邮箱：<a href="mailto:&#x36;&#x37;&#50;&#53;&#53;&#x34;&#55;&#x38;&#x34;&#64;&#x71;&#x71;&#46;&#x63;&#x6f;&#x6d;">&#x36;&#x37;&#50;&#53;&#53;&#x34;&#55;&#x38;&#x34;&#64;&#x71;&#x71;&#46;&#x63;&#x6f;&#x6d;</a></p><p>查询密码：Yao88219620ko</p><h2 id="网易邮箱"><a href="#网易邮箱" class="headerlink" title="网易邮箱"></a>网易邮箱</h2><p>邮箱：<a href="mailto:&#x79;&#97;&#x6f;&#x79;&#117;&#109;&#105;&#x6e;&#x67;&#x38;&#x30;&#64;&#x31;&#x36;&#51;&#x2e;&#99;&#x6f;&#x6d;">&#x79;&#97;&#x6f;&#x79;&#117;&#109;&#105;&#x6e;&#x67;&#x38;&#x30;&#64;&#x31;&#x36;&#51;&#x2e;&#99;&#x6f;&#x6d;</a></p><p>密码：Yao88219620ko</p><h2 id="苹果账号"><a href="#苹果账号" class="headerlink" title="苹果账号"></a>苹果账号</h2><blockquote><p>原始账号信息：</p><p>苹果账号【<a href="mailto:&#99;&#106;&#x65;&#x70;&#120;&#104;&#x62;&#x6e;&#100;&#64;&#x68;&#x6f;&#x74;&#x6d;&#x61;&#105;&#x6c;&#46;&#x63;&#111;&#x6d;">&#99;&#106;&#x65;&#x70;&#120;&#104;&#x62;&#x6e;&#100;&#64;&#x68;&#x6f;&#x74;&#x6d;&#x61;&#105;&#x6c;&#46;&#x63;&#111;&#x6d;</a>】<br>苹果密码【Qqz112211】修改资料教程【<a href="http://www.qtao.ink/f519%E3%80%91%E6%94%B6%E5%88%B0%E5%BD%93%E6%97%A5%E5%BF%85%E9%A1%BB%E6%8C%89%E6%95%99%E7%A8%8B%E4%BF%AE%E6%94%B9%E5%85%A8%E9%83%A8%E8%B5%84%E6%96%99%E5%8C%85%E6%8B%AC%E9%82%AE%E7%AE%B1%EF%BC%8C%E5%90%A6%E5%88%99%E4%B8%80%E5%88%87%E9%97%AE%E9%A2%98%E8%87%AA%E8%A1%8C%E6%89%BF%E6%8B%85%EF%BC%9B">www.qtao.ink/f519】收到当日必须按教程修改全部资料包括邮箱，否则一切问题自行承担；</a><br>生日【1983年1月21日】密保问题答案【朋友的名字：A111，理想的工作：B111，父母在哪认识：C111】<br>禁止登陆iCloud（只要不是AppStore里登录都是错误的）【正确登陆教程：<a href="http://www.qtao.ink/ae07%E3%80%91">www.qtao.ink/ae07】</a><br>常见问题（密码错误&#x2F;无法登陆&#x2F;无法更新等）解决方法【<a href="http://www.qtao.ink/WXMs%E3%80%91">www.qtao.ink/WXMs】</a></p></blockquote><p>用户名：<a href="mailto:&#121;&#97;&#111;&#121;&#117;&#x6d;&#x69;&#110;&#x67;&#x38;&#x30;&#64;&#49;&#54;&#x33;&#x2e;&#99;&#111;&#109;">&#121;&#97;&#111;&#121;&#117;&#x6d;&#x69;&#110;&#x67;&#x38;&#x30;&#64;&#49;&#54;&#x33;&#x2e;&#99;&#111;&#109;</a></p><p>密码：Yahya88219620ko</p><!-- flag of hidden posts -->]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;网址&quot;&gt;&lt;a href=&quot;#网址&quot; class=&quot;headerlink&quot; title=&quot;网址&quot;&gt;&lt;/a&gt;网址&lt;/h2&gt;&lt;p&gt;&lt;a </summary>
      
    
    
    
    <category term="网站账号" scheme="https://blog.yahyav2rayssr.top/categories/%E7%BD%91%E7%AB%99%E8%B4%A6%E5%8F%B7/"/>
    
    
    <category term="zoilr" scheme="https://blog.yahyav2rayssr.top/tags/zoilr/"/>
    
  </entry>
  
  <entry>
    <title>vps 服务器信息</title>
    <link href="https://blog.yahyav2rayssr.top/posts/c491f2c3/"/>
    <id>https://blog.yahyav2rayssr.top/posts/c491f2c3/</id>
    <published>2023-04-16T03:58:04.204Z</published>
    <updated>2023-04-16T03:58:04.204Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="HostEONS-服务器信息"><a href="#HostEONS-服务器信息" class="headerlink" title="HostEONS 服务器信息"></a>HostEONS 服务器信息</h2><p>IP：194.33.38.170</p><p>用户名：root</p><p>密码：Yahya88219620ko</p><h3 id="VNC"><a href="#VNC" class="headerlink" title="VNC"></a>VNC</h3><p>IP：103.114.160.14</p><p>Port: 6198</p><p>密码：76133</p><!-- flag of hidden posts -->]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;HostEONS-服务器信息&quot;&gt;&lt;a href=&quot;#HostEONS-服务器信息&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="网站账号" scheme="https://blog.yahyav2rayssr.top/categories/%E7%BD%91%E7%AB%99%E8%B4%A6%E5%8F%B7/"/>
    
    
    <category term="vps" scheme="https://blog.yahyav2rayssr.top/tags/vps/"/>
    
  </entry>
  
  <entry>
    <title>parsec 账号信息</title>
    <link href="https://blog.yahyav2rayssr.top/posts/e7ec76f5/"/>
    <id>https://blog.yahyav2rayssr.top/posts/e7ec76f5/</id>
    <published>2023-04-16T03:57:56.335Z</published>
    <updated>2023-04-16T03:57:56.335Z</updated>
    
    <content type="html"><![CDATA[<h2 id="账号信息"><a href="#账号信息" class="headerlink" title="账号信息"></a>账号信息</h2><table><thead><tr><th>账号类型</th><th>邮箱地址</th><th>手机号</th><th>密码</th></tr></thead><tbody><tr><td>主邮箱</td><td><a href="mailto:&#x36;&#x37;&#50;&#53;&#53;&#x34;&#55;&#x38;&#x34;&#x40;&#113;&#x71;&#x2e;&#x63;&#x6f;&#x6d;">&#x36;&#x37;&#50;&#53;&#53;&#x34;&#55;&#x38;&#x34;&#x40;&#113;&#x71;&#x2e;&#x63;&#x6f;&#x6d;</a></td><td>13580367153</td><td>Yao8282925ok!</td></tr><tr><td>辅助邮箱</td><td><a href="mailto:&#121;&#97;&#111;&#121;&#x75;&#109;&#105;&#x6e;&#x67;&#x37;&#x35;&#64;&#x67;&#x6d;&#x61;&#105;&#108;&#46;&#99;&#111;&#109;">&#121;&#97;&#111;&#121;&#x75;&#109;&#105;&#x6e;&#x67;&#x37;&#x35;&#64;&#x67;&#x6d;&#x61;&#105;&#108;&#46;&#99;&#111;&#109;</a></td><td>13580367153</td><td>Yao8282925ok!</td></tr></tbody></table><h2 id="parsec-backup-codes"><a href="#parsec-backup-codes" class="headerlink" title="parsec_backup_codes"></a>parsec_backup_codes</h2><p>04855980<br>80400128<br>07189034<br>00166003<br>03162744<br>26591363<br>89041915<br>23873067<br>32488016<br>90064824</p><!-- flag of hidden posts -->]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;账号信息&quot;&gt;&lt;a href=&quot;#账号信息&quot; class=&quot;headerlink&quot; title=&quot;账号信息&quot;&gt;&lt;/a&gt;账号信息&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;账号类型&lt;/th&gt;
&lt;th&gt;邮箱地址&lt;/th&gt;
&lt;th&gt;手机号&lt;/th&gt;
&lt;th</summary>
      
    
    
    
    <category term="网站账号" scheme="https://blog.yahyav2rayssr.top/categories/%E7%BD%91%E7%AB%99%E8%B4%A6%E5%8F%B7/"/>
    
    
    <category term="parsec" scheme="https://blog.yahyav2rayssr.top/tags/parsec/"/>
    
  </entry>
  
  <entry>
    <title>哔哩哔哩私人信息</title>
    <link href="https://blog.yahyav2rayssr.top/posts/e79f5c74/"/>
    <id>https://blog.yahyav2rayssr.top/posts/e79f5c74/</id>
    <published>2023-04-16T03:57:51.927Z</published>
    <updated>2023-04-16T03:57:51.927Z</updated>
    
    <content type="html"><![CDATA[<h1 id="注册时间"><a href="#注册时间" class="headerlink" title="注册时间"></a>注册时间</h1><p>参考网址，取里面的<code>jointime</code>字段</p><ol><li><p><a href="https://member.bilibili.com/x2/creative/h5/calendar/card?ts=0">https://member.bilibili.com/x2/creative/h5/calendar/card?ts=0</a></p></li><li><p><a href="https://member.bilibili.com/x2/creative/h5/calendar/event?ts=0">https://member.bilibili.com/x2/creative/h5/calendar/event?ts=0</a></p></li><li><p><a href="https://api.bilibili.com/x/space/myinfo">https://api.bilibili.com/x/space/myinfo</a></p></li></ol><p>实际效果如图所示：</p><img src="/posts/e79f5c74/image-20210828194424214.png" class alt="image-20210828194424214"><p>取得的注册时间为：2015年10月11号</p><h1 id="个人ID"><a href="#个人ID" class="headerlink" title="个人ID"></a>个人ID</h1><p>链接：<a href="https://account.bilibili.com/account/setting">https://account.bilibili.com/account/setting</a></p><p>个人ID：bili_4795208417</p><img src="/posts/e79f5c74/image-20210828210750229.png" class alt="image-20210828210750229"><!-- flag of hidden posts -->]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;注册时间&quot;&gt;&lt;a href=&quot;#注册时间&quot; class=&quot;headerlink&quot; title=&quot;注册时间&quot;&gt;&lt;/a&gt;注册时间&lt;/h1&gt;&lt;p&gt;参考网址，取里面的&lt;code&gt;jointime&lt;/code&gt;字段&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http</summary>
      
    
    
    
    <category term="网站账号" scheme="https://blog.yahyav2rayssr.top/categories/%E7%BD%91%E7%AB%99%E8%B4%A6%E5%8F%B7/"/>
    
    
    <category term="bilibili" scheme="https://blog.yahyav2rayssr.top/tags/bilibili/"/>
    
  </entry>
  
  <entry>
    <title>windows 常见错误</title>
    <link href="https://blog.yahyav2rayssr.top/posts/dfcbdf9f/"/>
    <id>https://blog.yahyav2rayssr.top/posts/dfcbdf9f/</id>
    <published>2023-04-16T03:46:34.031Z</published>
    <updated>2023-04-16T03:46:34.031Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="dll-注册"><a href="#dll-注册" class="headerlink" title="dll 注册"></a>dll 注册</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-keyword">for</span> %<span class="hljs-number">1</span> <span class="hljs-keyword">in</span> (<span class="hljs-variable">%windir%</span>\system32\*.dll) <span class="hljs-keyword">do</span> regsvr32.exe /s %<span class="hljs-number">1</span><br><br><span class="hljs-keyword">for</span> %<span class="hljs-number">1</span> <span class="hljs-keyword">in</span> (<span class="hljs-variable">%windir%</span>\system32\*.dll) <span class="hljs-keyword">do</span> regasm.exe /s %<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="模块xxx已加载，但找不到入口点DllRegisterServer"><a href="#模块xxx已加载，但找不到入口点DllRegisterServer" class="headerlink" title="模块xxx已加载，但找不到入口点DllRegisterServer"></a>模块xxx已加载，但找不到入口点DllRegisterServer</h2><img src="/posts/dfcbdf9f/image-20210425114620080.png" class alt="image-20210425114620080"><img src="/posts/dfcbdf9f/1391262323_739070.png" class alt="img"><h2 id="使用regasm注册-net-com组件出现不是有效的-net程序集的解决办法"><a href="#使用regasm注册-net-com组件出现不是有效的-net程序集的解决办法" class="headerlink" title="使用regasm注册.net com组件出现不是有效的.net程序集的解决办法"></a>使用regasm注册.net com组件出现不是有效的.net程序集的解决办法</h2><p>在电脑上装有VS 2008和VS 2010.使用VS 2010编写了一个C# com组件:MyCom（基于.net framework4.0），然后使用VS 2008的命令提示工具运行命令：regasm MyCom，结果提示错误：RegAsm：error RA0000,“MyCOM”不是有效的.net程序集。开始百思不得其解。后来才醒悟到VS 2008的命令提示工具运行的regasm.exe是vs2008版本，它可能注册不了基于.net framework4.0的C# com组件。后来发现确实是这样的。如果一台机子上装有VS 2008和VS 2010，那么它就有两个版本的regasm.exe，分别存放的位置是C:\Windows\Microsoft.NET\Framework\v2.0.50727和C:\Windows\Microsoft.NET\Framework\v4.0.30319.使用VS 2010版本的regasm能注册vs2008编写的C# com组件，但是使用vs2008版本的regasm不能注册基于.net framework4.0的C# com组件。</p><h2 id="程序无法正常启动-0xc0000142-解决方法"><a href="#程序无法正常启动-0xc0000142-解决方法" class="headerlink" title="程序无法正常启动 0xc0000142 解决方法"></a>程序无法正常启动 0xc0000142 解决方法</h2><p>在命令下执行</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-keyword">for</span> %<span class="hljs-number">1</span> <span class="hljs-keyword">in</span> (<span class="hljs-variable">%windir%</span>\system32\*.dll) <span class="hljs-keyword">do</span> regsvr32.exe /s %<span class="hljs-number">1</span> <br></code></pre></td></tr></table></figure><p>完成后重启<br>如果不能解决，继续以管理员身份运行命令提示符中依次执行以下命令</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cmd">DISM/Online /Cleanup-image /Scanhealth<br><br>DISM/Online /Cleanup-image /Restorehealth<br><br>Sfc /scannow<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;dll-注册&quot;&gt;&lt;a href=&quot;#dll-注册&quot; class=&quot;headerlink&quot; title=&quot;dll 注册&quot;&gt;&lt;/a&gt;d</summary>
      
    
    
    
    <category term="运维" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/"/>
    
    <category term="windows" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/windows/"/>
    
    
    <category term="windows" scheme="https://blog.yahyav2rayssr.top/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>字体替换</title>
    <link href="https://blog.yahyav2rayssr.top/posts/7e3491fa/"/>
    <id>https://blog.yahyav2rayssr.top/posts/7e3491fa/</id>
    <published>2023-04-16T03:46:33.429Z</published>
    <updated>2023-04-16T03:46:33.429Z</updated>
    
    <content type="html"><![CDATA[<h1 id="字体替换"><a href="#字体替换" class="headerlink" title="字体替换"></a>字体替换</h1><h2 id="1-方式一"><a href="#1-方式一" class="headerlink" title="1. 方式一"></a>1. 方式一</h2><h3 id="1-替换系统字体"><a href="#1-替换系统字体" class="headerlink" title="1. 替换系统字体"></a>1. 替换系统字体</h3><blockquote><p>powershell 命令</p><ul><li><p>覆盖文件<br>move-item [源文件] [目标文件] -force</p></li><li><p>删除文件</p><p>delete-item [文件]</p></li></ul></blockquote><p>重启电脑，进入安全模式，然后打开 CMD 命令行窗口，将需要替换的字体放到下 c:\fonts 目录下，然后执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">xcopy C:\fonts C:\Windows\Fonts<br></code></pre></td></tr></table></figure><h2 id="2-方式二（无须进入安全模式，推荐）"><a href="#2-方式二（无须进入安全模式，推荐）" class="headerlink" title="2. 方式二（无须进入安全模式，推荐）"></a>2. 方式二（无须进入安全模式，推荐）</h2><h3 id="1-替换-CMD-默认字体"><a href="#1-替换-CMD-默认字体" class="headerlink" title="1. 替换 CMD 默认字体"></a>1. 替换 CMD 默认字体</h3><blockquote><p>如果强制覆盖了 <code>SimSun &amp; NSimSun (TrueType)</code> 和 <code>SimSun-ExtB (TrueType)</code>（原始字体分别对应 simsun.ttc 和 simsunb.ttf），会出现重启之后无法打开 CMD 命令行窗口的情况，所以需要对 CMD 命令行的默认字体做切换。</p></blockquote><p>运行 regedit，然后打开如下的键：<code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Console\TrueTypeFont</code>，如下图所示：</p><img src="/posts/7e3491fa/image-20220707134252971.png" alt="image-20220707134252971" style="zoom: 67%;"><p>鼠标右键，然后新建字符串值：</p><img src="/posts/7e3491fa/image-20220707134342130.png" alt="image-20220707134342130" style="zoom: 67%;"><p>输入 0 或者 00 或者 000 或者 0000，每增加一个字体，增加一个0，这里增加的 Consolas-with-Yahei 第四个新的字体，因此使用的是0000，然后选中 0000 这一项，修改，在弹出框中输入字体 Consolas-with-Yahei，如下所示：</p><img src="/posts/7e3491fa/image-20220707135051523.png" alt="image-20220707135051523" style="zoom:80%;"><p>这样子就修改完成了，我们需要进入到 CMD 下，然后在窗口标题栏上右键 -&gt; Options -&gt; 打开字体面板， 发现没有出现注册表中的字体，我们需要回到 CMD 下，输入以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chcp 437<br></code></pre></td></tr></table></figure><p>然后会切换字体。这时候再来看字体这里，就会出现新的字体，选择我们需要的字体，然后确定就OK了。</p><p><strong>这里附带一个永久修改 Active Code Page 的办法：</strong></p><p>有时候，我们的 CMD 的 codepage 和字体等会变化，比如突然由中文变成英文的 codepage（因为一些sh程序的干扰）</p><p>下面是修正方法：</p><p>进入 <code>HKEY_CURRENT_USER\Console\%SystemRoot%_system32_cmd.exe</code>，编辑 CodePage 项，设置为如下的数值：</p><blockquote><p>数值含义如下：</p><ul><li>十六进制 <code>000003a8</code> 或十进制 <code>936</code>，表示 936 (ANSI&#x2F;OEM - 简体中文 GBK)。</li><li>十六进制 <code>000001b5</code> 或十进制 <code>437</code>，表示 437 (OEM - 美国)。</li></ul></blockquote><p>效果如下图所示：</p><img src="/posts/7e3491fa/image-20220707141155227.png" alt="image-20220707141155227" style="zoom: 67%;"><h3 id="2-替换系统字体"><a href="#2-替换系统字体" class="headerlink" title="2. 替换系统字体"></a>2. 替换系统字体</h3><p>键盘上 Windows + R，打开运行后输入 regedit。</p><p>找到路径：<code>计算机\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Fonts</code>，如下图所示：</p><img src="/posts/7e3491fa/image-20220707122639862.png" alt="image-20220707122639862" style="zoom:67%;"><p>点击后面有默认字样的字体，鼠标右键，修改：<code>Microsoft YaHei &amp; Microsoft YaHei UI (TrueType)</code>，这是系统默认的字体。如下图所示。</p><img src="/posts/7e3491fa/image-20220707122723496.png" alt="image-20220707122723496" style="zoom:67%;"><p>点击确定后，再找到 <code>Microsoft YaHei Bold &amp; Microsoft YaHei UI Bold (TrueType)</code>，检查是否一致。</p><img src="/posts/7e3491fa/image-20220707122755801.png" alt="image-20220707122755801" style="zoom:67%;"><p>重启电脑，字体生效。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;字体替换&quot;&gt;&lt;a href=&quot;#字体替换&quot; class=&quot;headerlink&quot; title=&quot;字体替换&quot;&gt;&lt;/a&gt;字体替换&lt;/h1&gt;&lt;h2 id=&quot;1-方式一&quot;&gt;&lt;a href=&quot;#1-方式一&quot; class=&quot;headerlink&quot; title=&quot;1. 方式一&quot;</summary>
      
    
    
    
    <category term="运维" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/"/>
    
    <category term="windows" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/windows/"/>
    
    
    <category term="字体" scheme="https://blog.yahyav2rayssr.top/tags/%E5%AD%97%E4%BD%93/"/>
    
  </entry>
  
  <entry>
    <title>windows 开启 FTP</title>
    <link href="https://blog.yahyav2rayssr.top/posts/b7b934f4/"/>
    <id>https://blog.yahyav2rayssr.top/posts/b7b934f4/</id>
    <published>2023-04-16T03:46:33.427Z</published>
    <updated>2023-04-16T03:46:33.427Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WIN10开启FTP"><a href="#WIN10开启FTP" class="headerlink" title="WIN10开启FTP"></a>WIN10开启FTP</h1><h2 id="1-控制面板-–-gt-程序–-gt-启用或关闭windows功能"><a href="#1-控制面板-–-gt-程序–-gt-启用或关闭windows功能" class="headerlink" title="1.控制面板 –&gt; 程序–&gt; 启用或关闭windows功能"></a>1.控制面板 –&gt; 程序–&gt; 启用或关闭windows功能</h2><img src="/posts/b7b934f4/16d074065c68093dtplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="img"><h2 id="2-左下角搜索栏搜索IIS（iis）"><a href="#2-左下角搜索栏搜索IIS（iis）" class="headerlink" title="2.左下角搜索栏搜索IIS（iis）"></a>2.左下角搜索栏搜索IIS（iis）</h2><h2 id><a href="#" class="headerlink" title></a><img src="/posts/b7b934f4/16d0741a099df148tplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="img"></h2><h2 id="3-右键添加FTP站点"><a href="#3-右键添加FTP站点" class="headerlink" title="3.右键添加FTP站点"></a>3.右键添加FTP站点</h2><img src="/posts/b7b934f4/16d074257e348820tplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="img"><h2 id="4-创建站点名字和目录"><a href="#4-创建站点名字和目录" class="headerlink" title="4.创建站点名字和目录"></a>4.创建站点名字和目录<img src="/posts/b7b934f4/16d0744058a08ce7tplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="img"></h2><h2 id="5-绑定本机IP地址，SSL勾选无SSL442"><a href="#5-绑定本机IP地址，SSL勾选无SSL442" class="headerlink" title="5.绑定本机IP地址，SSL勾选无SSL442"></a>5.绑定本机IP地址，SSL勾选无SSL442</h2><h2 id="6-身份验证-–-gt-匿名，授权-–-gt-所有用户，权限-–-gt-读取写入"><a href="#6-身份验证-–-gt-匿名，授权-–-gt-所有用户，权限-–-gt-读取写入" class="headerlink" title="6.身份验证 –&gt;匿名，授权 –&gt; 所有用户，权限 –&gt;读取写入"></a>6.身份验证 –&gt;匿名，授权 –&gt; 所有用户，权限 –&gt;读取写入<img src="/posts/b7b934f4/16d07466ae7f503atplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="img"></h2><h2 id="7-控制面板-–-gt-系统和安全-–-gt-Windows-Defender-防火墙-–-gt-允许应用或功能通过Windows-Defender-防火墙"><a href="#7-控制面板-–-gt-系统和安全-–-gt-Windows-Defender-防火墙-–-gt-允许应用或功能通过Windows-Defender-防火墙" class="headerlink" title="7.控制面板 –&gt; 系统和安全 –&gt; Windows Defender 防火墙 –&gt; 允许应用或功能通过Windows Defender 防火墙 "></a>7.控制面板 –&gt; 系统和安全 –&gt; Windows Defender 防火墙 –&gt; 允许应用或功能通过Windows Defender 防火墙 <img src="/posts/b7b934f4/16d074b087ab0b0ctplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="img"></h2><h2 id="8-更改设置-–-gt-勾选-FTP-服务器"><a href="#8-更改设置-–-gt-勾选-FTP-服务器" class="headerlink" title="8.更改设置 –&gt; 勾选 FTP 服务器"></a>8.更改设置 –&gt; 勾选 FTP 服务器<img src="/posts/b7b934f4/16d074c12b9bbf34tplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="img"></h2><h2 id="9-设置应用路径（C-Windows-System32-svchost-exe）"><a href="#9-设置应用路径（C-Windows-System32-svchost-exe）" class="headerlink" title="9.设置应用路径（C:\Windows\System32\svchost.exe）"></a>9.设置应用路径（C:\Windows\System32\svchost.exe）<img src="/posts/b7b934f4/16d074cc9212392btplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="img"></h2><h2 id="10-使用ftp访问（格式为ftp-x2F-x2F-要访问的IP地址）"><a href="#10-使用ftp访问（格式为ftp-x2F-x2F-要访问的IP地址）" class="headerlink" title="10.使用ftp访问（格式为ftp:&#x2F;&#x2F; + 要访问的IP地址）"></a>10.使用ftp访问（格式为ftp:&#x2F;&#x2F; + 要访问的IP地址）<img src="/posts/b7b934f4/16d074de825e9e71tplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="img"></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;WIN10开启FTP&quot;&gt;&lt;a href=&quot;#WIN10开启FTP&quot; class=&quot;headerlink&quot; title=&quot;WIN10开启FTP&quot;&gt;&lt;/a&gt;WIN10开启FTP&lt;/h1&gt;&lt;h2 id=&quot;1-控制面板-–-gt-程序–-gt-启用或关闭windows功能</summary>
      
    
    
    
    <category term="运维" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/"/>
    
    <category term="windows" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/windows/"/>
    
    
    <category term="ftp" scheme="https://blog.yahyav2rayssr.top/tags/ftp/"/>
    
  </entry>
  
  <entry>
    <title>windows 常用配置</title>
    <link href="https://blog.yahyav2rayssr.top/posts/d741411d/"/>
    <id>https://blog.yahyav2rayssr.top/posts/d741411d/</id>
    <published>2023-04-16T03:46:33.426Z</published>
    <updated>2023-04-16T03:46:33.426Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="设置U盘插入电脑后自动打开文件夹播放"><a href="#设置U盘插入电脑后自动打开文件夹播放" class="headerlink" title="设置U盘插入电脑后自动打开文件夹播放"></a>设置U盘插入电脑后自动打开文件夹播放</h2><p>更改媒体或设备的默认设置</p><img src="/posts/d741411d/image-20220108114958119.png" alt="image-20220108114958119" style="zoom: 40%;"><p>选择需要的选项即可，如下图所示：</p><img src="/posts/d741411d/image-20220108115023892.png" class alt="image-20220108115023892"><h2 id="修改时区"><a href="#修改时区" class="headerlink" title="修改时区"></a>修改时区</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><blockquote><p>使用「Windows 设置」自动设置时区</p></blockquote><ol><li>使用 Windows + I 快捷键打开「Windows 设置」</li><li>打开「时间和语言」——「日期和时间」</li><li>启用「自动设置时区」开关</li></ol><img src="/posts/d741411d/windows-10-time-zone-settings-2.jpg" class alt="img"><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>使用「命令提示符」调整时区，执行以下命令以查看当前时区设置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tzutil /g<br></code></pre></td></tr></table></figure><p>如果要调整时区设置，可使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tzutil /s <span class="hljs-string">&quot;China Standard Time&quot;</span><br></code></pre></td></tr></table></figure><img src="/posts/d741411d/image-20230107114419603.png" alt="image-20230107114419603" style="zoom:67%;"><p>上述是以中国标准时间为例，如果要列出所有可用时区选项，可用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tzutil /l<br></code></pre></td></tr></table></figure><img src="/posts/d741411d/image-20230107114714132.png" alt="image-20230107114714132" style="zoom:67%;"><h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><blockquote><p>使用 Powershell 调整时区。</p></blockquote><p>使用 Windows + X 快捷键打开快捷菜单——选择 Windows PowerShell（管理员），执行以下命令查看当前时区设置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Get-TimeZone<br></code></pre></td></tr></table></figure><p>执行以下命令列出可用时区列表：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-built_in">Get</span><span class="hljs-operator">-</span><span class="hljs-built_in">TimeZone</span> <span class="hljs-operator">-</span><span class="hljs-variable">ListAvailable</span><br></code></pre></td></tr></table></figure><img src="/posts/d741411d/image-20230107115555904.png" alt="image-20230107115555904" style="zoom:67%;"><p>使用以下命令调整时区设置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Set-TimeZone -Name &quot;China Standard Time&quot;<br></code></pre></td></tr></table></figure><h2 id="解决Windows-10下蓝牙设备无法删除的故障"><a href="#解决Windows-10下蓝牙设备无法删除的故障" class="headerlink" title="解决Windows 10下蓝牙设备无法删除的故障"></a>解决Windows 10下蓝牙设备无法删除的故障</h2><p>在更换了一张无线网卡（蓝牙适配器跟无线网卡是集成在一起的）后，蓝牙设备全失联了，想要重新配对，可是原有设备无法删除。</p><img src="https:////upload-images.jianshu.io/upload_images/14575015-3af58d4f3a967eac.png?imageMogr2/auto-orient/strip|imageView2/2/w/796/format/webp" alt="img" style="zoom: 67%;"><p>蓝牙设备无法删除，折腾了好久啊，最后突然发现了如下方法，打开“计算机管理”中的“设备管理器”节点，在该节点上右击后点“查看”然后勾选“显示隐藏的设备”如下图：</p><img src="https:////upload-images.jianshu.io/upload_images/14575015-44298aa29fa13865.png?imageMogr2/auto-orient/strip|imageView2/2/w/687/format/webp" alt="img" style="zoom:67%;"><p>勾选“显示隐藏的设备”， 在右边蓝节节点，找到要删除的蓝牙设备，在其上点右键，选择“卸载设备”。</p><img src="https:////upload-images.jianshu.io/upload_images/14575015-67e3ddf3fa3a86fc.png?imageMogr2/auto-orient/strip|imageView2/2/w/872/format/webp" alt="img" style="zoom:67%;"><p>卸载设备，依次把要删除的多个设备全卸载，问题就解决了。</p><h2 id="删除右键菜单-AMD-选项"><a href="#删除右键菜单-AMD-选项" class="headerlink" title="删除右键菜单 AMD 选项"></a>删除右键菜单 AMD 选项</h2><p>打开 regedit 菜单，进入到 <code>计算机\HKEY_CLASSES_ROOT\Directory\Background\shellex\ContextMenuHandlers\ace</code> 路径，找到默认值，右键删除即可。</p><img src="/posts/d741411d/20220615110515_75408.jpg" class alt="img">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;设置U盘插入电脑后自动打开文件夹播放&quot;&gt;&lt;a href=&quot;#设置U盘插入电脑后自动打开文件夹播放&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="运维" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/"/>
    
    <category term="windows" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/windows/"/>
    
    
    <category term="windows" scheme="https://blog.yahyav2rayssr.top/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>gpedit 常用配置</title>
    <link href="https://blog.yahyav2rayssr.top/posts/9e487b57/"/>
    <id>https://blog.yahyav2rayssr.top/posts/9e487b57/</id>
    <published>2023-04-16T03:46:33.423Z</published>
    <updated>2023-04-16T03:46:33.423Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关闭-Antimalware-Service-Executable"><a href="#关闭-Antimalware-Service-Executable" class="headerlink" title="关闭 Antimalware Service Executable"></a>关闭 Antimalware Service Executable</h1><img src="/posts/9e487b57/image-20211031204947072.png" class alt="image-20211031204947072"><p>Antimalware Service Executable是什么 如何关闭<br>Antimalware Service Executable进程是微软杀毒软件Windows Defender的相关系统进程,是个正常的系统进程，其工作时经常会出现高CPU、高内存与高磁盘的情况。</p><p>关闭步骤：<br>1、win键+R，输入“gpedit.msc”，打开“本地组策略编辑器”；<br>2、依次选择“计算机配置”-“管理模板”-“Windows组件”-“Windows Defender防病毒程序”；<br>3、找到“关闭Windows Defender防病毒程序”选项，右键“编辑“，选择“已启用”，确定即可；</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;关闭-Antimalware-Service-Executable&quot;&gt;&lt;a href=&quot;#关闭-Antimalware-Service-Executable&quot; class=&quot;headerlink&quot; title=&quot;关闭 Antimalware Service Exe</summary>
      
    
    
    
    <category term="运维" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/"/>
    
    <category term="windows" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/windows/"/>
    
    
    <category term="gpedit" scheme="https://blog.yahyav2rayssr.top/tags/gpedit/"/>
    
  </entry>
  
  <entry>
    <title>windows 常用命令</title>
    <link href="https://blog.yahyav2rayssr.top/posts/7101b844/"/>
    <id>https://blog.yahyav2rayssr.top/posts/7101b844/</id>
    <published>2023-04-16T03:42:26.417Z</published>
    <updated>2023-04-16T03:42:26.417Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="转换磁盘"><a href="#转换磁盘" class="headerlink" title="转换磁盘"></a>转换磁盘</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">convert</span> [driver] /<span class="hljs-built_in">fs</span>:ntfs<br></code></pre></td></tr></table></figure><h2 id="查看局域网所有IP"><a href="#查看局域网所有IP" class="headerlink" title="查看局域网所有IP"></a>查看局域网所有IP</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">arp -a<br></code></pre></td></tr></table></figure><h2 id="CMD临时代理"><a href="#CMD临时代理" class="headerlink" title="CMD临时代理"></a>CMD临时代理</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">set</span> http_proxy=http://<span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">1080</span><br><span class="hljs-built_in">set</span> https_proxy=http://<span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">1080</span><br></code></pre></td></tr></table></figure><h2 id="设置IP、DNS、网关"><a href="#设置IP、DNS、网关" class="headerlink" title="设置IP、DNS、网关"></a>设置IP、DNS、网关</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmd">netsh interface ip <span class="hljs-built_in">set</span> address name=&quot;本地连接&quot; source=static addr=<span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">132</span>.<span class="hljs-number">5</span> mask=<span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">0</span><br>netsh interface ip <span class="hljs-built_in">set</span> address name=&quot;本地连接&quot; gateway=<span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">132</span>.<span class="hljs-number">1</span> gwmetric=<span class="hljs-number">0</span><br>netsh interface ip <span class="hljs-built_in">set</span> dns name=&quot;本地连接&quot; source=static addr=<span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">132</span>.<span class="hljs-number">1</span> register=PRIMARY<br>netsh interface ip <span class="hljs-built_in">set</span> wins name=&quot;本地连接&quot; source=static addr=none<br></code></pre></td></tr></table></figure><h2 id="查看IP、DNS、网关"><a href="#查看IP、DNS、网关" class="headerlink" title="查看IP、DNS、网关"></a>查看IP、DNS、网关</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">netsh interface ip show address<br></code></pre></td></tr></table></figure><h2 id="清除DNS缓存"><a href="#清除DNS缓存" class="headerlink" title="清除DNS缓存"></a>清除DNS缓存</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">ipconfig</span> /flushdns<br></code></pre></td></tr></table></figure><h2 id="重置Winsock目录"><a href="#重置Winsock目录" class="headerlink" title="重置Winsock目录"></a>重置Winsock目录</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">netsh winsock reset<br></code></pre></td></tr></table></figure><h2 id="tasklist"><a href="#tasklist" class="headerlink" title="tasklist"></a>tasklist</h2><blockquote><p>&#x2F;S     system           指定连接到的远程系统。  </p><p>&#x2F;U     [domain]user    指定使用哪个用户执行这个命令。  </p><p>&#x2F;P     [password]       为指定的用户指定密码。  </p><p>&#x2F;M     [module]         列出调用指定的 DLL 模块的所有进程。如果没有指定模块名，显示每个进程加载的所有模块。  </p><p>&#x2F;SVC                   显示每个进程中的服务。  </p><p>&#x2F;V                      指定要显示详述信息。  </p><p>&#x2F;FI    filter           显示一系列符合筛选器指定的进程。  </p><p>&#x2F;FO    format           指定输出格式，有效值: “TABLE”、”LIST”、”CSV”。  </p><p>&#x2F;NH                     指定栏标头不应该在输出中显示。只对 “TABLE” 和 “CSV” 格式有效。</p></blockquote><h2 id="taskkill"><a href="#taskkill" class="headerlink" title="taskkill"></a>taskkill</h2><blockquote><p>TASKKILL [&#x2F;S system [&#x2F;U username [&#x2F;P [password]]]]  </p><p>{ [&#x2F;FI filter] [&#x2F;PID processid | &#x2F;IM imagename] } [&#x2F;F] [&#x2F;T]</p></blockquote><h2 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># 执行命令<br>netsh interface portproxy add v4tov4 listenaddress=[LOCAL_HOST]  listenport=[LOCAL_PORT]  connectaddress=[TARGET_HOST] connectport=[TARGET_PORT]<br># 例<br>netsh interface portproxy add v4tov4 listenaddress=<span class="hljs-number">100</span>.<span class="hljs-number">120</span>.<span class="hljs-number">9</span>.<span class="hljs-number">96</span>  listenport=<span class="hljs-number">2222</span>  connectaddress=<span class="hljs-number">10</span>.<span class="hljs-number">206</span>.<span class="hljs-number">230</span>.<span class="hljs-number">177</span> connectport=<span class="hljs-number">22</span><br><br># 查看现有的配置<br>netsh interface portproxy show all<br><br># 删除原有的端口转发<br>netsh interface portproxy delete v4tov4 listenaddress=[LOCAL_HOST]  listenport=[LOCAL_PORT]<br># 例<br>netsh interface portproxy delete v4tov4 listenaddress=<span class="hljs-number">100</span>.<span class="hljs-number">120</span>.<span class="hljs-number">9</span>.<span class="hljs-number">96</span>  listenport=<span class="hljs-number">2222</span><br></code></pre></td></tr></table></figure><hr><h2 id="Diskpart-手动创建-EFI、MSR-引导分区"><a href="#Diskpart-手动创建-EFI、MSR-引导分区" class="headerlink" title="Diskpart 手动创建 EFI、MSR 引导分区"></a>Diskpart 手动创建 EFI、MSR 引导分区</h2><h3 id="用傲梅分区助手将磁盘转换为GPT格式"><a href="#用傲梅分区助手将磁盘转换为GPT格式" class="headerlink" title="用傲梅分区助手将磁盘转换为GPT格式"></a>用傲梅分区助手将磁盘转换为GPT格式</h3><h4 id="创建-EFI-分区"><a href="#创建-EFI-分区" class="headerlink" title="创建 EFI 分区"></a>创建 EFI 分区</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cmd">diskpart<br>list disk<br>select disk x   (选择需要的硬盘)<br>create partition efi size=<span class="hljs-number">100</span><br>assign letter=b<br><span class="hljs-built_in">format</span> quick <span class="hljs-built_in">fs</span>=FAT32<br></code></pre></td></tr></table></figure><h4 id="创建-msr-分区"><a href="#创建-msr-分区" class="headerlink" title="创建 msr 分区"></a>创建 msr 分区</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">create partition msr size=<span class="hljs-number">16</span>  (Win <span class="hljs-number">10</span> 默认是<span class="hljs-number">16</span>M) <br></code></pre></td></tr></table></figure><h4 id="创建-Recovery-分区-WindowsRE"><a href="#创建-Recovery-分区-WindowsRE" class="headerlink" title="创建 Recovery 分区 (WindowsRE)"></a>创建 Recovery 分区 (WindowsRE)</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cmd">create partition primary size=<span class="hljs-number">450</span><br><span class="hljs-built_in">format</span> quick <span class="hljs-built_in">fs</span>=ntfs <span class="hljs-built_in">label</span>=&quot;Recovery&quot;<br>assign letter=&quot;R&quot;<br><span class="hljs-built_in">set</span> id=&quot;de94bba4-<span class="hljs-number">06</span>d1-<span class="hljs-number">4</span>d40-a16a-bfd50179d6ac&quot;<br>gpt attributes=<span class="hljs-number">0</span>x8000000000000001      ( <span class="hljs-number">8</span> 和 <span class="hljs-number">1</span>之间有<span class="hljs-number">14</span>个<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><h2 id="IP释放、更新、以及清除-DNS"><a href="#IP释放、更新、以及清除-DNS" class="headerlink" title="IP释放、更新、以及清除 DNS"></a>IP释放、更新、以及清除 DNS</h2><ol><li>在桌面上，按<strong>Windows键，</strong>然后输入<strong>CMD</strong>。</li><li>右键单击“ <strong>命令提示符”，</strong>然后选择<strong>“以管理员身份运行”</strong>。</li><li>在命令提示符下输入<code>ipconfig / release</code>。</li><li>等待几秒钟可以得到IP地址已释放。</li><li>在命令提示符下输入<code>ipconfig /renew</code>。</li><li>等待几秒钟可以得到已重新建立IP地址。</li><li>在命令提示符下输入<code>ipconfig / flushdns</code>。</li><li>关闭命令窗口并尝试建立连接。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;转换磁盘&quot;&gt;&lt;a href=&quot;#转换磁盘&quot; class=&quot;headerlink&quot; title=&quot;转换磁盘&quot;&gt;&lt;/a&gt;转换磁盘&lt;/h</summary>
      
    
    
    
    <category term="运维" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/"/>
    
    <category term="windows" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/windows/"/>
    
    
    <category term="windows" scheme="https://blog.yahyav2rayssr.top/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>zsh 安装</title>
    <link href="https://blog.yahyav2rayssr.top/posts/a1ba4b4f/"/>
    <id>https://blog.yahyav2rayssr.top/posts/a1ba4b4f/</id>
    <published>2023-04-16T03:29:09.214Z</published>
    <updated>2023-04-16T03:29:09.214Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装zsh配置oh-my-zsh"><a href="#安装zsh配置oh-my-zsh" class="headerlink" title="安装zsh配置oh-my-zsh"></a>安装zsh配置oh-my-zsh</h1><p>安装了虚拟机，玩了几天，发现自带的shell不太好用。本着折腾的优良作风，配置了oh-my-zsh，本文记录下安装步骤。</p><h2 id="查看当前shell"><a href="#查看当前shell" class="headerlink" title="查看当前shell"></a>查看当前shell</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo $SHELL<br></code></pre></td></tr></table></figure><p>返回结果:</p><blockquote><p>bin&#x2F;bash</p></blockquote><h2 id="安装zsh"><a href="#安装zsh" class="headerlink" title="安装zsh"></a>安装zsh</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y zsh<br></code></pre></td></tr></table></figure><p>静候安装完成…</p><p>成功后如下所示</p><p>681</p><p>zsh下载完成</p><h2 id="设置默认shell"><a href="#设置默认shell" class="headerlink" title="设置默认shell"></a>设置默认shell</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chsh -s /bin/zsh<br></code></pre></td></tr></table></figure><p><strong>请在root用户下切换shell</strong></p><p>1143</p><p>更换shell</p><p>返回结果如下，表示切换完成（配置完成后需要重启方能生效，我们先下载oh-my-zsh，稍后重启）</p><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><p>自动和手动安装都需要安装git，执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y git<br></code></pre></td></tr></table></figure><p>静候安装完成,完成后选择一种oh-my-zsh的安装方式。</p><h2 id="安装oh-my-zsh（自动）"><a href="#安装oh-my-zsh（自动）" class="headerlink" title="安装oh-my-zsh（自动）"></a>安装oh-my-zsh（自动）</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;<br></code></pre></td></tr></table></figure><p>使用curl来安装，wget命令执行后不起作用，暂时不知道怎么回事。</p><p>出现以下界面，显示安装成功。</p><p>2118</p><p>oh-my-zsh</p><h2 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h2><p>下载源码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh<br></code></pre></td></tr></table></figure><p>复制配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc<br></code></pre></td></tr></table></figure><h2 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h2><p><code>ZSH_THEME</code> 字段就是主题，可以从资料里的主题找</p><p>2965</p><p>主题配置</p><h2 id="完成后，重启生效默认shell"><a href="#完成后，重启生效默认shell" class="headerlink" title="完成后，重启生效默认shell"></a>完成后，重启生效默认shell</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">reboot<br></code></pre></td></tr></table></figure><h2 id="别名配置"><a href="#别名配置" class="headerlink" title="别名配置"></a>别名配置</h2><p>首先我们看下git的别名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi ~/.oh-my-zsh/plugins/git/git.plugin.zsh<br></code></pre></td></tr></table></figure><p>3716</p><p>git别名</p><p>很强大有木有，我们还可以自定义别名，在<code>~/.zshrc</code>中，最下面直接写即可。</p><p>自定义别名</p><p>3921</p><p>自定义别名</p><h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><p>1、输入<code>d</code>,就会列出你在这个回话中访问的目录，输入前面的序号，就可以直接跳转<br> 2、可以忽略<code>cd</code>命令, 输入<code>..</code>或者<code>...</code>和当前目录名都可以跳转</p><h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul><li><a href="https://link.jianshu.com/?t=https://github.com/Ortonzhang/oh-my-zsh">oh-my-zsh</a></li><li><a href="https://link.jianshu.com/?t=https://github.com/robbyrussell/oh-my-zsh/wiki/themes">oh-my-zsh主题一览</a></li><li><a href="https://link.jianshu.com/?t=http://yijiebuyi.com/blog/b9b5e1ebb719f22475c38c4819ab8151.html">oh-my-zsh配置你的zsh提高shell逼格终极选择</a></li></ul><h1 id="主题修改"><a href="#主题修改" class="headerlink" title="主题修改"></a>主题修改</h1><p>进入themes的目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd ~/.oh-my-zsh/themes<br>ll #查看主题 默认主题是 ZSH_THEME=&quot;robbyrussell&quot;<br></code></pre></td></tr></table></figure><p>在.zshrc中修改主题vi ~&#x2F;.zshrc</p><blockquote><p>推荐主题：jonathan 或者 rkj-repos</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi ~/.zshrc # 找到ZSH_THEME 修改为你想要的主题即可<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;安装zsh配置oh-my-zsh&quot;&gt;&lt;a href=&quot;#安装zsh配置oh-my-zsh&quot; class=&quot;headerlink&quot; title=&quot;安装zsh配置oh-my-zsh&quot;&gt;&lt;/a&gt;安装zsh配置oh-my-zsh&lt;/h1&gt;&lt;p&gt;安装了虚拟机，玩了几天，发现</summary>
      
    
    
    
    <category term="运维" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/"/>
    
    <category term="常用安装" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/%E5%B8%B8%E7%94%A8%E5%AE%89%E8%A3%85/"/>
    
    
    <category term="zsh" scheme="https://blog.yahyav2rayssr.top/tags/zsh/"/>
    
  </entry>
  
  <entry>
    <title>运维常用命令-系统篇</title>
    <link href="https://blog.yahyav2rayssr.top/posts/85b72ed0/"/>
    <id>https://blog.yahyav2rayssr.top/posts/85b72ed0/</id>
    <published>2023-04-16T03:27:44.915Z</published>
    <updated>2023-04-16T03:27:44.915Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设置-hostname"><a href="#设置-hostname" class="headerlink" title="设置 hostname"></a>设置 hostname</h1><blockquote><p>hostname 存放于 <code>/etc/host/hostname</code></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hostnamectl set-hostname [hostname]<br></code></pre></td></tr></table></figure><h1 id="查看用户和用户组"><a href="#查看用户和用户组" class="headerlink" title="查看用户和用户组"></a>查看用户和用户组</h1><h2 id="查看用户列表"><a href="#查看用户列表" class="headerlink" title="查看用户列表"></a>查看用户列表</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /etc/passwd<br></code></pre></td></tr></table></figure><img src="/posts/85b72ed0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FkdmFuY2luZ1N0b25l,size_16,color_FFFFFF,t_70.png" alt="img" style="zoom: 67%;"><h2 id="查看用户组列表"><a href="#查看用户组列表" class="headerlink" title="查看用户组列表"></a>查看用户组列表</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /etc/group<br></code></pre></td></tr></table></figure><img src="/posts/85b72ed0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FkdmFuY2luZ1N0b25l,size_16,color_FFFFFF,t_70-16654207556175.png" alt="img" style="zoom:67%;"><h2 id="查看系统中有哪些用户"><a href="#查看系统中有哪些用户" class="headerlink" title="查看系统中有哪些用户"></a>查看系统中有哪些用户</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cut -d : -f 1 /etc/passwd<br></code></pre></td></tr></table></figure><img src="/posts/85b72ed0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FkdmFuY2luZ1N0b25l,size_16,color_FFFFFF,t_70-16654207833218.png" alt="img" style="zoom:67%;"><h2 id="查看可以登录系统的用户"><a href="#查看可以登录系统的用户" class="headerlink" title="查看可以登录系统的用户"></a>查看可以登录系统的用户</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /etc/passwd | grep -v /sbin/nologin | cut -d : -f 1<br></code></pre></td></tr></table></figure><img src="/posts/85b72ed0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FkdmFuY2luZ1N0b25l,size_16,color_FFFFFF,t_70-166542080828011.png" alt="img" style="zoom:67%;"><h2 id="查看用户操作"><a href="#查看用户操作" class="headerlink" title="查看用户操作"></a>查看用户操作</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">w (root权限)<br></code></pre></td></tr></table></figure><img src="/posts/85b72ed0/20191010163558992.png" alt="img" style="zoom:67%;"><h2 id="查看某一用户"><a href="#查看某一用户" class="headerlink" title="查看某一用户"></a>查看某一用户</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">w &lt;user_name&gt;<br></code></pre></td></tr></table></figure><img src="/posts/85b72ed0/20191010164001289.png" alt="img" style="zoom:67%;"><h2 id="查看登录用户"><a href="#查看登录用户" class="headerlink" title="查看登录用户"></a>查看登录用户</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">who<br></code></pre></td></tr></table></figure><img src="/posts/85b72ed0/20191010164049493.png" alt="img" style="zoom:67%;"><h2 id="查看用户登录历史记录"><a href="#查看用户登录历史记录" class="headerlink" title="查看用户登录历史记录"></a>查看用户登录历史记录</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">last<br></code></pre></td></tr></table></figure><img src="/posts/85b72ed0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FkdmFuY2luZ1N0b25l,size_16,color_FFFFFF,t_70-166542096091420.png" alt="img" style="zoom:67%;"><h2 id="修改root用户密码"><a href="#修改root用户密码" class="headerlink" title="修改root用户密码"></a>修改root用户密码</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">passwd<br></code></pre></td></tr></table></figure><img src="/posts/85b72ed0/20191010164451776.png" alt="img" style="zoom:67%;"><h2 id="root用户修改其他用户密码"><a href="#root用户修改其他用户密码" class="headerlink" title="root用户修改其他用户密码"></a>root用户修改其他用户密码</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">passwd &lt;user_name&gt;<br></code></pre></td></tr></table></figure><img src="/posts/85b72ed0/20191010164520363.png" alt="img" style="zoom:67%;"><h1 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h1><h2 id="init-6"><a href="#init-6" class="headerlink" title="init 6"></a>init 6</h2><p>init 6 基于一系列 <code>/etc/inittab</code> 文件，并且每个应用都会有一个相应 shutdown 脚本。<br>init 6 调用一系列 shutdown 脚本(&#x2F;etc&#x2F;rc0.d&#x2F;K*)来使系统优雅关机。</p><h2 id="reboot"><a href="#reboot" class="headerlink" title="reboot"></a>reboot</h2><p>reboot 并不执行这些过程，reboot更是一个 kernel 级别的命令，不对应用使用 shutdown 脚本。</p><p>综上平常推荐使用 init 6 命令，只有在系统出了问题的时候才比较推荐使用 reboot 命令。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设置-hostname&quot;&gt;&lt;a href=&quot;#设置-hostname&quot; class=&quot;headerlink&quot; title=&quot;设置 hostname&quot;&gt;&lt;/a&gt;设置 hostname&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;hostname 存放于 &lt;code&gt;/e</summary>
      
    
    
    
    <category term="运维" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/"/>
    
    <category term="常用命令" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
    
    <category term="运维配置" scheme="https://blog.yahyav2rayssr.top/tags/%E8%BF%90%E7%BB%B4%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>gitlab 安装</title>
    <link href="https://blog.yahyav2rayssr.top/posts/fc8249c5/"/>
    <id>https://blog.yahyav2rayssr.top/posts/fc8249c5/</id>
    <published>2023-04-16T03:27:44.915Z</published>
    <updated>2023-04-16T03:27:44.915Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>gitlab 运行需要较大内存，建议将虚拟机内存设置为 4GB 以上，并保证相关端口不被其他进行占用。</p></blockquote><h3 id="安装相关依赖"><a href="#安装相关依赖" class="headerlink" title="安装相关依赖"></a>安装相关依赖</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum -y install policycoreutils openssh-server openssh-clients postfix<br></code></pre></td></tr></table></figure><h3 id="设置-postfix"><a href="#设置-postfix" class="headerlink" title="设置 postfix"></a>设置 postfix</h3><blockquote><p>设置 postfix 为开机自启动，目的：支持 gitlab 邮件发送。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl enable postfix &amp;&amp; systemctl start postfix<br></code></pre></td></tr></table></figure><h3 id="rpm-包安装"><a href="#rpm-包安装" class="headerlink" title="rpm 包安装"></a>rpm 包安装</h3><p>官方参考链接：<a href="https://packages.gitlab.com/gitlab/gitlab-ce/install#bash-rpm">https://packages.gitlab.com/gitlab/gitlab-ce/install#bash-rpm</a></p><p>使用以下命令进行快速安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -s https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash<br></code></pre></td></tr></table></figure><blockquote><p>EL 是 Red Hat Enterprise Linux 的简写 </p><ul><li>EL6 软件包用于在 Red Hat 6.x, CentOS 6.x, and CloudLinux 6.x 的安装。</li><li>EL5 软件包用于在 Red Hat 5.x, CentOS 5.x, CloudLinux 5.x 的安装。</li><li>EL7 软件包用于在 Red Hat 7.x, CentOS 7.x, and CloudLinux 7.x 的安装。</li></ul></blockquote><p>所以这里我们采用安装 EL7 的模式，安装命令如下：</p><p>官方参考链接：<a href="https://packages.gitlab.com/gitlab/gitlab-ce/packages/el/7/gitlab-ce-15.8.5-ce.0.el7.x86_64.rpm">https://packages.gitlab.com/gitlab/gitlab-ce/packages/el/7/gitlab-ce-15.8.5-ce.0.el7.x86_64.rpm</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo yum -y install gitlab-ce-15.8.5-ce.0.el7.x86_64<br></code></pre></td></tr></table></figure><p>安装完毕后的主体文件都在 <code>/opt/gitlab/</code> 目录下，可自行翻阅按需修改。</p><h2 id="修改-root-密码"><a href="#修改-root-密码" class="headerlink" title="修改 root 密码"></a>修改 root 密码</h2><p>官方修改密码：(<a href="https://link.jianshu.com/?t=http://docs.gitlab.com/ce/security/reset_root_password.html">http://docs.gitlab.com/ce/security/reset_root_password.html</a>)</p><p>在root用户下，执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">老版命令</span><br>gitlab-rails console production<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">新版命令</span><br>gitlab-rails console -e production<br></code></pre></td></tr></table></figure><p>获得用户数据，修改用户密码</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs ruby">[root<span class="hljs-variable">@svr34</span> bin]<span class="hljs-comment"># gitlab-rails console production</span><br><span class="hljs-title class_">Loading</span> production environment (<span class="hljs-title class_">Rails</span> <span class="hljs-number">4.2</span>.<span class="hljs-number">5.2</span>)<br><br><span class="hljs-meta prompt_">irb(main):001:0&gt;</span> user = <span class="hljs-title class_">User</span>.where(<span class="hljs-symbol">id:</span> <span class="hljs-number">1</span>).first<br>=&gt; #&lt;User id:1 @root&gt;<br><br><span class="hljs-meta prompt_">irb(main):002:0&gt;</span> user.password=<span class="hljs-string">&quot;7613302589&quot;</span><br>=&gt; <span class="hljs-string">&quot;12345678&quot;</span><br><br><span class="hljs-meta prompt_">irb(main):003:0&gt;</span> user.password_confirmation=<span class="hljs-string">&quot;7613302589&quot;</span><br>=&gt; <span class="hljs-string">&quot;12345678&quot;</span><br><br><span class="hljs-meta prompt_">irb(main):004:0&gt;</span> user.save!<br>=&gt; <span class="hljs-literal">true</span><br><br><span class="hljs-meta prompt_">irb(main):005:0&gt;</span> quit<br></code></pre></td></tr></table></figure><h2 id="修改访问-URL"><a href="#修改访问-URL" class="headerlink" title="修改访问 URL"></a>修改访问 URL</h2><p>编辑 gitlab.rb 文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">vim /etc/gitlab/gitlab.rb</span><br><br>external_url &#x27;http://192.168.50.245:8138&#x27;<br></code></pre></td></tr></table></figure><blockquote><p>此处注意别使用已被占用的端口！（如8080）</p></blockquote><img src="/posts/fc8249c5/image-20230402104707147.png" alt="image-20230402104707147" style="zoom:50%;"><h2 id="重置并启动-Gitlab"><a href="#重置并启动-Gitlab" class="headerlink" title="重置并启动 Gitlab"></a>重置并启动 Gitlab</h2><p>重置：</p><blockquote><p><em>注：第一次预计需要几分钟</em></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gitlab-ctl reconfigure<br></code></pre></td></tr></table></figure><p>启动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gitlab-ctl restart<br></code></pre></td></tr></table></figure><h2 id="端口用途一览"><a href="#端口用途一览" class="headerlink" title="端口用途一览"></a>端口用途一览</h2><img src="/posts/fc8249c5/image-20230402124422358.png" alt="image-20230402124422358" style="zoom: 67%;"><table><thead><tr><th>端口号</th><th>归类</th><th>用途</th></tr></thead><tbody><tr><td>8060</td><td>Nginx</td><td>用途不明</td></tr><tr><td>8138</td><td>Nginx</td><td>第二个 nginx 的端口，就是 gitlab 实例的主端口，所有外部访问的 http 均通过 gitlab 内置的 nginx 服务器处理，并使用该端口，当然暴露地址为外网0.0.0.0</td></tr><tr><td>9121</td><td>Redis</td><td>redis_exporter 的 9121，是 gitlab 内置 redis 数据库，只向本机暴露</td></tr><tr><td>9090</td><td>Prometheus</td><td>向本机暴露，用途应该是创建和管理时间序列事件的触发，如通知那些功能</td></tr><tr><td>9187</td><td>PostgreSQL</td><td>postgres_expoter 的9187，是 gitlab 内置的 postegres 数据库，向本机暴露</td></tr><tr><td>9093</td><td>Ruby</td><td>config.ru 的 9093，gitlab 使用 ruby 的 unicorn 作为 app server 运行，管理 worker 等功能，比较重要，默认为 8080，由于 8080 比较受欢迎，这个端口基本上都得改，暴露可自行设定；</td></tr><tr><td>9168</td><td>Ruby</td><td>用途不明</td></tr><tr><td>9100</td><td>NodeJS</td><td>node_exporter 的 9100，一个 nodejs 进程，用于实现测量所在的机器的资源状态比如cpu、内存、硬盘等数据的功能</td></tr><tr><td>9229</td><td>Go</td><td>gitlab-workhors 的 9229，一个是用 go 语言写的组件，是 gitlab 发展途中添加进来的用于优化 git over http 的组件，具体历史可以查看<a href="https://www.oschina.net/translate/a-brief-history-of-gitlab-workhorse">这里</a>了解gitlab-workhors的由来</td></tr><tr><td>8082</td><td>其他</td><td>sidekiq 的 8082，是一种多线程后台处理系统，用于实现 gitlab 异步运行任务</td></tr><tr><td>9236</td><td>其他</td><td>gitaly 的9236，是一个能够提供访问 git 仓库的 RPC 远程调用功能的服务，属于 gitlab 的一个托管组件<br>gitlab 的配置文件位于<code>/etc/gitlab/gitlab/gitlab.rb</code>，使用vim等工具可以直接修改，各种参数配置修改可以参考<a href="https://docs.gitlab.com/">官方文档</a></td></tr></tbody></table><h2 id="nginx-代理"><a href="#nginx-代理" class="headerlink" title="nginx 代理"></a>nginx 代理</h2><h3 id="关闭-selinux"><a href="#关闭-selinux" class="headerlink" title="关闭 selinux"></a>关闭 selinux</h3><blockquote><p><strong>什么是selinux ？</strong></p><p>SELinux：即安全增强型 Linux（Security-Enhanced Linux）</p><p>它是一个 Linux 内核模块，也是 Linux 的一个安全子系统</p><p>它主要由美国国家安全局开发，主要作用是最大限度地减小系统中服务进程可访问的资源（最小权限原则）</p><p><strong>为什么要关闭 selinux ？</strong></p><p>有的软件对于 selinux 的安全规则支持不够好，就会建议在安装前把 selinux 先关闭，例如 k8s，本次在启动 nginx 的过程中发现 gitlab 会报 502 的错误，经由使用 <code>journalctl -xe</code>  命令发现有 selinux 的相关错误信息，所以需要把 selinux 做一次人工的手动禁用。</p><p>selinux 常用命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看审计日志</span><br>cat /var/log/audit/audit.log<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">分析一个文件</span><br>sealert -a /var/log/audit/audit.log<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查询系统中的布尔型规则及其状态</span><br>getsebool -a<br></code></pre></td></tr></table></figure></blockquote><p>selinux的三种运行模式:</p><ul><li>enforcing: 强制模式，SELinux 正在运行中，已经在限制 domain&#x2F;type</li><li>permissive: 宽容模式：SELinux 正在运行中，但仅发出警告信息,并不会实际限制 domain&#x2F;type 的存取（permissive模式可以用在测试环境中供调试规则时使用）</li><li>disabled: 关闭，SELinux 没有实际运行。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sestatus -v # 查看当前信息<br>getenforce # 查看当前运行模式<br></code></pre></td></tr></table></figure><h4 id="临时关闭"><a href="#临时关闭" class="headerlink" title="临时关闭"></a>临时关闭</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">0: Permissive</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">1: Enforcing</span><br><br>setenforce 0<br></code></pre></td></tr></table></figure><h4 id="永久关闭"><a href="#永久关闭" class="headerlink" title="永久关闭"></a>永久关闭</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">vim /etc/selinux/config</span><br><br>SELINUX=disabled<br></code></pre></td></tr></table></figure><h3 id="外部-nginx-安装"><a href="#外部-nginx-安装" class="headerlink" title="外部 nginx 安装"></a>外部 nginx 安装</h3><p>添加 Nginx 到 YUM 源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm<br></code></pre></td></tr></table></figure><p>安装 nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo yum install -y nginx<br></code></pre></td></tr></table></figure><p>启用 nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo systemctl enable nginx.service &amp;&amp; sudo systemctl start nginx.service<br></code></pre></td></tr></table></figure><p>Nginx 常用配置目录如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">资源文件目录</span><br>/usr/share/nginx/html/<br>├── 50x.html<br>└── index.html<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">配置文件主目录</span><br>/etc/nginx/<br>├── conf.d<br>│   ├── default.conf<br>│   └── gitlab.conf # gitlab 配置文件<br>├── fastcgi_params<br>├── mime.types<br>├── modules<br>├── nginx.conf # nginx 根目录配置文件<br>├── scgi_params<br>└── uwsgi_params<br></code></pre></td></tr></table></figure><h3 id="代理-gitlab-内部-nginx"><a href="#代理-gitlab-内部-nginx" class="headerlink" title="代理 gitlab 内部 nginx"></a>代理 gitlab 内部 nginx</h3><p>gitlab 服务器主体框架如下：</p><img src="/posts/fc8249c5/gitlab-frame.png" class alt="gitlab服务器框架"><h4 id="nginx-配置文件"><a href="#nginx-配置文件" class="headerlink" title="nginx 配置文件"></a>nginx 配置文件</h4><p>gitlab.conf 配置文件内容如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 主访问入口</span><br><span class="hljs-section">server</span> &#123;<br>  <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>  <span class="hljs-attribute">server_name</span> gitlab.yahya.top;<br><br>  <span class="hljs-comment"># 入口反向代理</span><br>  <span class="hljs-section">location</span> / &#123;<br>    <span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$host</span>;<br>    <span class="hljs-attribute">proxy_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>    <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>    <span class="hljs-attribute">proxy_redirect</span> <span class="hljs-literal">off</span>;<br>    <span class="hljs-comment"># 配置反向代理地址</span><br>    <span class="hljs-attribute">proxy_pass</span> http://192.168.50.245:8138;<br>    <span class="hljs-attribute">proxy_http_version</span> <span class="hljs-number">1</span>.<span class="hljs-number">1</span>;<br>    <span class="hljs-comment"># 一定记得要配置 body_size</span><br>    <span class="hljs-attribute">client_max_body_size</span> <span class="hljs-number">1024m</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>修改 gitlab.rb 文件</p><blockquote><p>external_url 的配置直接影响到 gitlab 系统中所有 http 入口的地址，比如 git 仓库的 http 地址，gitlab 访问页面的地址，注册回调的地址，邮件验证的地址等。</p></blockquote><p>编辑 gitlab.rb 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/gitlab/gitlab.rb<br></code></pre></td></tr></table></figure><h4 id="配置域名"><a href="#配置域名" class="headerlink" title="配置域名"></a>配置域名</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">external_url &#x27;http://gitlab.yahya.top&#x27;<br></code></pre></td></tr></table></figure><h4 id="修改对外主端口"><a href="#修改对外主端口" class="headerlink" title="修改对外主端口"></a>修改对外主端口</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nginx[&#x27;listen_port&#x27;] = 8138<br></code></pre></td></tr></table></figure><h4 id="max-body-size-配置"><a href="#max-body-size-配置" class="headerlink" title="max_body_size 配置"></a>max_body_size 配置</h4><p>gitlab 是可以使用 http 和 ssh 两种方式来进行git操作的，当使用 http 时，是通过post请求发送内容，若 nginx 在代理时没有设置 body_size 时将会收到：413 Request Entity Too Large 的错误，push 不了代码，内外部的 nginx 都需要配置，在 gitlab.rb 中添加：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nginx[&#x27;client_max_body_size&#x27;] = &#x27;1024m&#x27;<br></code></pre></td></tr></table></figure><h2 id="认证普通用户"><a href="#认证普通用户" class="headerlink" title="认证普通用户"></a>认证普通用户</h2><blockquote><p>默认情况下注册的用户是需要进行审批，否则在没有审批的情况下登录会报以下的错误：</p><p>Your account is pending approval from your GitLab administrator and hence bl</p></blockquote><p>登录 root 用户，点击头像这里</p><img src="/posts/fc8249c5/image-20230402122006519.png" alt="image-20230402122006519"><p>点击 Overview -&gt; Users -&gt; Pending approval，审批需要注册的用户即可。</p><img src="/posts/fc8249c5/image-20230402122531351.png" class alt="image-20230402122531351"><h2 id="临时关闭分支保护"><a href="#临时关闭分支保护" class="headerlink" title="临时关闭分支保护"></a>临时关闭分支保护</h2><blockquote><p>git push 报错 pre-receive hook declined，原因为 master 为受保护分支，无法强推代码到 master 分支上。使用 Owner 以及 Admin 角色账号推送都无法成功。</p></blockquote><p>Settings -&gt; Repository -&gt; Protected Branches 临时 Unprotect master 分支(强推成功后一定要重新添加为受保护的分支)</p><img src="/posts/fc8249c5/image-20230402131743121.png" alt="image-20230402131743121" style="zoom:67%;"><p><strong>关于 GitLab 访问权限</strong></p><p>访问权限 - Visibility Level：</p><p>这个是在建立项目时就需要选定的，主要用于决定哪些人可以访问此项目，包含 3 种：</p><ul><li><strong>Private - 私有</strong>，只有属于该项目成员才有看到</li><li><strong>Internal - 内部</strong>，用 GitLab 账号的人都看到</li><li><strong>Public - 公开</strong>，任何人可以看到</li></ul><p>开源项目和组设置的是 Internal。</p><p>行为权限：</p><p>在满足行为权限之前，必须具备访问权限（如果没有访问权限，那就无所谓行为权限了），行为权限是指对该项目进行某些操作，比如提交、创建问题、创建新分支、删除分支、创建标签、删除标签等角色。</p><blockquote><p>官方权限解释文档：<a href="https://docs.gitlab.com/ee/user/permissions.html#project-members-permissions">https://docs.gitlab.com/ee/user/permissions.html#project-members-permissions</a></p></blockquote><ul><li><p><strong>Guest - 访客</strong></p><p>可以创建 issue、发表评论，不能读写版本库。</p></li><li><p><strong>Reporter  - 报告者</strong></p><p>可以理解为测试员、产品经理等，一般负责提交 issue 等<br> 可以克隆代码，不能提交，QA、PM 可以赋予这个权限。</p></li><li><p><strong>Developer - 开发者</strong></p><p>可以克隆代码、开发、提交、push，RD 可以赋予这个权限。</p></li><li><p><strong>Master - 主人</strong></p><p>可以创建项目、添加 tag、保护分支、添加项目成员、编辑项目，核心 RD 负责人可以赋予这个权限。</p></li><li><p><strong>Owner - 拥有者</strong></p><p>可以设置项目访问权限 - Visibility Level、删除项目、迁移项目、管理组成员，开发组 Leader 可以赋予这个权限。</p></li><li><p><strong>Maintainer - 维护者</strong></p><p>权限与 Owner 差不多，但无删除项目等权限。</p></li></ul><h2 id="参见错误"><a href="#参见错误" class="headerlink" title="参见错误"></a>参见错误</h2><p>502 错误：</p><p>首先保证Gitlab可用运行内存大于 <strong>4G</strong>，端口未被占用</p><p>再赋予<strong>权限</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod -R 755 /var/log/gitlab<br></code></pre></td></tr></table></figure><p>再重置重启，访问后仍然可能遇到502，不过我刷新2次就一切ok了。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://blog.hobairiku.site/2018/02/26/gitlab-setup/#1-%E5%87%86%E5%A4%87">使用Nginx搭建并代理GitLab服务器</a></p><p><a href="https://blog.csdn.net/Abysscarry/article/details/79402695">Centos7 搭建Gitlab服务器并配置项目全过程</a></p><p><a href="https://cloud.tencent.com/developer/article/1918458?from=15425&areaSource=102001.1&traceId=ENuxuOXF_A89HJy85bkR3">gitlab配置域名并https访问</a></p><p><a href="https://www.cnblogs.com/architectforest/p/12987499.html">linux(centos8):禁用selinux(临时关闭&#x2F;永久关闭)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;block</summary>
      
    
    
    
    <category term="运维" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/"/>
    
    <category term="常用安装" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/%E5%B8%B8%E7%94%A8%E5%AE%89%E8%A3%85/"/>
    
    
    <category term="gitlab" scheme="https://blog.yahyav2rayssr.top/tags/gitlab/"/>
    
  </entry>
  
  <entry>
    <title>运维常用命令-时间篇</title>
    <link href="https://blog.yahyav2rayssr.top/posts/c72fbcb5/"/>
    <id>https://blog.yahyav2rayssr.top/posts/c72fbcb5/</id>
    <published>2023-04-16T03:27:44.914Z</published>
    <updated>2023-04-16T03:27:44.914Z</updated>
    
    <content type="html"><![CDATA[<h1 id="linux-查看系统当前时间，修改时间，查看文件时间"><a href="#linux-查看系统当前时间，修改时间，查看文件时间" class="headerlink" title="linux 查看系统当前时间，修改时间，查看文件时间"></a>linux 查看系统当前时间，修改时间，查看文件时间</h1><h2 id="查看时间和日期"><a href="#查看时间和日期" class="headerlink" title="查看时间和日期"></a><strong>查看时间和日期</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">date<br></code></pre></td></tr></table></figure><h2 id="设置时间和日期"><a href="#设置时间和日期" class="headerlink" title="设置时间和日期"></a><strong>设置时间和日期</strong></h2><p>例如：将系统日期设定成2018年6月8日的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">date -s 06/08/2018<br></code></pre></td></tr></table></figure><p>将系统时间设定成下午10点46分03秒的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">date -s 10:46:03<br></code></pre></td></tr></table></figure><h2 id="查看时区"><a href="#查看时区" class="headerlink" title="查看时区"></a><strong>查看时区</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">date -R<br></code></pre></td></tr></table></figure><h2 id="查询系统当前日期"><a href="#查询系统当前日期" class="headerlink" title="查询系统当前日期"></a><strong>查询系统当前日期</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">date +&quot;%Y-%m-%d&quot;<br></code></pre></td></tr></table></figure><h2 id="查询系统当前时间"><a href="#查询系统当前时间" class="headerlink" title="查询系统当前时间"></a><strong>查询系统当前时间</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">date +&quot;%H-%M-%S&quot;<br></code></pre></td></tr></table></figure><h2 id="查看文件时间"><a href="#查看文件时间" class="headerlink" title="查看文件时间"></a><strong>查看文件时间</strong></h2><p>ls -l 或者 ll</p><img src="/posts/c72fbcb5/image-20220523011236380.png" class alt="image-20220523011236380"><p>要显示秒（实际更精确），可以用 <code>--full-time</code> 参数</p><img src="/posts/c72fbcb5/image-20220523011700623.png" class alt="image-20220523011700623"><p>要显示更多信息，用 stat 命令：</p><img src="/posts/c72fbcb5/image-20220523011735344.png" class alt="image-20220523011735344">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;linux-查看系统当前时间，修改时间，查看文件时间&quot;&gt;&lt;a href=&quot;#linux-查看系统当前时间，修改时间，查看文件时间&quot; class=&quot;headerlink&quot; title=&quot;linux 查看系统当前时间，修改时间，查看文件时间&quot;&gt;&lt;/a&gt;linux 查看</summary>
      
    
    
    
    <category term="运维" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/"/>
    
    <category term="常用命令" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
    
    <category term="运维配置" scheme="https://blog.yahyav2rayssr.top/tags/%E8%BF%90%E7%BB%B4%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>运维常用命令-常用配置篇</title>
    <link href="https://blog.yahyav2rayssr.top/posts/c3218428/"/>
    <id>https://blog.yahyav2rayssr.top/posts/c3218428/</id>
    <published>2023-04-16T03:27:43.847Z</published>
    <updated>2023-04-16T03:27:43.848Z</updated>
    
    <content type="html"><![CDATA[<h1 id="禁止ping"><a href="#禁止ping" class="headerlink" title="禁止ping"></a>禁止ping</h1><p>Linux默认是允许Ping响应的，系统是否允许Ping由2个因素决定的：A、内核参数，B、防火墙，需要2个因素同时允许才能允许Ping，2个因素有任意一个禁Ping就无法Ping。</p><h2 id="内核参数设置"><a href="#内核参数设置" class="headerlink" title="内核参数设置"></a>内核参数设置</h2><h3 id="允许PING设置"><a href="#允许PING设置" class="headerlink" title="允许PING设置"></a>允许PING设置</h3><ul><li><p>临时允许PING操作的命令为：<code>echo 0 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all</code></p></li><li><p>永久允许PING配置方法。</p><p><strong>&#x2F;etc&#x2F;sysctl.conf</strong> 中增加一行</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">net.ipv4.icmp_echo_ignore_all=0<br></code></pre></td></tr></table></figure></li></ul><p>如果已经有<code>net.ipv4.icmp_echo_ignore_all</code>这一行了，直接修改&#x3D;号后面的值即可的（0表示允许，1表示禁止）。</p><p>修改完成后执行以下命令，使新配置生效。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sysctl -p<br></code></pre></td></tr></table></figure><h2 id="防火墙设置"><a href="#防火墙设置" class="headerlink" title="防火墙设置"></a>防火墙设置</h2><blockquote><p>注：此处的方法的前提是内核配置是默认值，也就是没有禁止Ping。</p></blockquote><p>以Iptables防火墙为例</p><h3 id="允许PING设置-1"><a href="#允许PING设置-1" class="headerlink" title="允许PING设置"></a>允许PING设置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">iptables -A INPUT -p icmp --icmp-type echo-request -j ACCEPT<br><br>iptables -A OUTPUT -p icmp --icmp-type echo-reply -j ACCEPT<br></code></pre></td></tr></table></figure><p>或者也可以临时停止防火墙操作的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">service iptables stop<br></code></pre></td></tr></table></figure><h3 id="禁止PING设置"><a href="#禁止PING设置" class="headerlink" title="禁止PING设置"></a>禁止PING设置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">iptables -A INPUT -p icmp --icmp-type 8 -s 0/0 -j DROP<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;禁止ping&quot;&gt;&lt;a href=&quot;#禁止ping&quot; class=&quot;headerlink&quot; title=&quot;禁止ping&quot;&gt;&lt;/a&gt;禁止ping&lt;/h1&gt;&lt;p&gt;Linux默认是允许Ping响应的，系统是否允许Ping由2个因素决定的：A、内核参数，B、防火墙，需要2个</summary>
      
    
    
    
    <category term="运维" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/"/>
    
    <category term="常用命令" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
    
    <category term="运维配置" scheme="https://blog.yahyav2rayssr.top/tags/%E8%BF%90%E7%BB%B4%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>运维常用命令-常用篇</title>
    <link href="https://blog.yahyav2rayssr.top/posts/e9ae7850/"/>
    <id>https://blog.yahyav2rayssr.top/posts/e9ae7850/</id>
    <published>2023-04-16T03:24:47.241Z</published>
    <updated>2023-04-16T03:24:47.241Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-ls-系列"><a href="#1-ls-系列" class="headerlink" title="1. ls 系列"></a>1. ls 系列</h1><blockquote><p>-F：根据文件、目录等信息在文件名或目录名最后给予附加数据结构</p><ol><li>*  代表可执行文件；</li><li>&#x2F;  代表目录</li><li>&#x3D;  代表socket文件</li><li>|  代表FIFO文件</li><li>@  代表连接文件</li></ol></blockquote><h2 id="1-只显示文件类型，排除目录"><a href="#1-只显示文件类型，排除目录" class="headerlink" title="1. 只显示文件类型，排除目录"></a>1. 只显示文件类型，排除目录</h2><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><blockquote><p>^[^d] 是一个正则表达式，[^d] 表示字符串含有一个不是 d 的字符， ^d 表示以 d 开头，^[^d] 表示不以 d 开头</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ls -l | grep ^[^d]<br></code></pre></td></tr></table></figure><p>所以只显示文件夹的写法为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ls -l | grep ^d<br></code></pre></td></tr></table></figure><h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ls -l | grep -v ^d<br></code></pre></td></tr></table></figure><p>如果文件名包含空格，可以用下面命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ls -l | grep -v [/$]<br></code></pre></td></tr></table></figure><hr><h1 id="2-sed-系列"><a href="#2-sed-系列" class="headerlink" title="2. sed 系列"></a>2. sed 系列</h1><h2 id="1-替换字符串"><a href="#1-替换字符串" class="headerlink" title="1. 替换字符串"></a>1. 替换字符串</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sed &#x27;s/old/new/g&#x27;<br></code></pre></td></tr></table></figure><h1 id="3-rm-系列"><a href="#3-rm-系列" class="headerlink" title="3. rm 系列"></a>3. rm 系列</h1><h2 id="1-删除带有指定字符串的文件"><a href="#1-删除带有指定字符串的文件" class="headerlink" title="1. 删除带有指定字符串的文件"></a>1. 删除带有指定字符串的文件</h2><h3 id="方法一：-1"><a href="#方法一：-1" class="headerlink" title="方法一："></a>方法一：</h3><blockquote><p>注意字符串如果含有特殊字符，必须做转义处理，否则默认会删除当前目录下的所有文件。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rm -f *字符串*<br></code></pre></td></tr></table></figure><h3 id="方法二：-1"><a href="#方法二：-1" class="headerlink" title="方法二："></a>方法二：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">find -type f -name &#x27;*字符串*&#x27; -delete<br></code></pre></td></tr></table></figure><h1 id="4-awk-系列"><a href="#4-awk-系列" class="headerlink" title="4. awk 系列"></a>4. awk 系列</h1><h2 id="1-获取某一行中指定字符后的内容"><a href="#1-获取某一行中指定字符后的内容" class="headerlink" title="1. 获取某一行中指定字符后的内容"></a>1. 获取某一行中指定字符后的内容</h2><p>比如有个xxx.txt文件，里面有很多行内容，其中有行内容为ro.xxx&#x3D;123，要想获取到123这个值，可以如下处理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br>NAME=`cat xxx.txt | grep &#x27;ro.xxx&#x27; | awk -F &#x27;=&#x27; &#x27;&#123;print $2&#125;&#x27;`<br>echo $NAME<br></code></pre></td></tr></table></figure><h1 id="5-cd-dirname-0-pwd"><a href="#5-cd-dirname-0-pwd" class="headerlink" title="5. $(cd dirname $0;pwd)"></a>5. $(cd <code>dirname $0</code>;pwd)</h1><p><code>cd &quot;$(dirname &quot;$0&quot;)&quot;;pwd</code> 等同于 <code>$(dirname $(readlink -f &quot;$0&quot;))</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">在/home/admin/test/下新建test.sh内容如下：</span><br>cd `dirname $0`<br>echo `pwd`<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">然后返回到/home/admin/执行</span><br>sh test/test.sh<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">运行结果:</span><br>/home/admin/test<br></code></pre></td></tr></table></figure><h1 id="6-basename"><a href="#6-basename" class="headerlink" title="6. basename"></a>6. basename</h1><h2 id="1-basename"><a href="#1-basename" class="headerlink" title="1. basename"></a>1. basename</h2><p>打印除上层路径外的基础文件名；当文件名后存在后缀时，除去后面的后缀，如 # basename include&#x2F;stdio.h .h 只会打印出 stdio</p><h2 id="2-basename-s"><a href="#2-basename-s" class="headerlink" title="2. basename -s"></a>2. basename -s</h2><p>-s参数后面指定要去除的后缀字符，即：# basename -s .h include&#x2F;stdio.h 同 # basename include&#x2F;stdio.h .h 一样只会打印出 stdio</p><h2 id="3-basename-a"><a href="#3-basename-a" class="headerlink" title="3. basename -a"></a>3. basename -a</h2><p>-a参数可追加执行多个文件路径，取每一个路径的基础文件名并打印。用法如下图：</p><h1 id="7-pwd"><a href="#7-pwd" class="headerlink" title="7. pwd"></a>7. pwd</h1><h2 id="1-pwd-L"><a href="#1-pwd-L" class="headerlink" title="1. pwd -L"></a>1. pwd -L</h2><p>打印出环境变量 $PWD 的值，如果 PWD 赋值为当前工作路径，pwd 默认同 pwd -L</p><h2 id="2-pwd-P"><a href="#2-pwd-P" class="headerlink" title="2. pwd -P"></a>2. pwd -P</h2><p>打印真实路径，不打印链接的路径，区别如图：</p><h1 id="8-watch"><a href="#8-watch" class="headerlink" title="8. watch"></a>8. watch</h1><p><strong>命令参数</strong>：</p><p>-n 或 –interval watch 缺省每2秒运行一下程序，可以用 -n 或 -interval 来指定间隔的时间。</p><p>-d 或 –differences 用 -d 或 –differences 选项 watch 会高亮显示变化的区域。 而 -d&#x3D;cumulative 选项会把变动过的地方(不管最近的那次有没有变动)都高亮显示出来。</p><p>-t 或-no-title 会关闭watch命令在顶部的时间间隔,命令，当前时间的输出。</p><p><strong>示例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">watch -n 1 -d &quot;&lt;command&gt;&quot;<br></code></pre></td></tr></table></figure><h1 id="9-grep"><a href="#9-grep" class="headerlink" title="9. grep"></a>9. grep</h1><table><thead><tr><th>元字符</th><th>功能</th><th>例子</th><th>匹配什么</th></tr></thead><tbody><tr><td>^</td><td>锚定行的开始</td><td>&#x2F;^love&#x2F;</td><td>匹配所有以love开头的行</td></tr><tr><td>$</td><td>锚定行的结束</td><td>&#x2F;love$&#x2F;</td><td>匹配所有以love 结束的行</td></tr><tr><td>.</td><td>匹配一个字符</td><td>&#x2F;l..e&#x2F;</td><td>匹配这样的行，这些行包含这样的字符：第一个字符是l,紧跟着两个字符，然后是e</td></tr><tr><td>*</td><td>代表0个或多个先前字符</td><td>&#x2F;*love&#x2F;</td><td>匹配所有这样的行，有0个或多个空格，空格后跟着love</td></tr><tr><td>[]</td><td>匹配字符组中的一个字符</td><td>&#x2F;[Ll]ove&#x2F;</td><td>匹配所有包含love或者Love的行</td></tr><tr><td>[^]</td><td>匹配一个不在范围内的字符</td><td>&#x2F;[^A-Z]ove&#x2F;</td><td></td></tr><tr><td>&lt;</td><td>锚定单词的开始</td><td>&lt;love</td><td>匹配所有这样的行，这些行包含以love开头的单词（vi和grep支持这个功能）</td></tr><tr><td>&gt;</td><td>锚定单词的结束</td><td>Love&gt;</td><td>匹配所有这样的行，这些行包含以love结束的单词（vi和grep支持这个功能）</td></tr><tr><td>(..)</td><td>标记后面用到的匹配字符</td><td>&#x2F;(love)able1rs&#x2F;</td><td>最多可以使用9个标签。第一个标签是模板最左边的部分。在本例子中，模板love保存的标签为1，后面的1指得就是love；本例子搜索的是这样的行，这些行包含这样的字符，在Loveabel后面跟着lovers</td></tr><tr><td>x{m}</td><td>M次复制字符x</td><td></td><td></td></tr><tr><td>x{m,}</td><td>至少m次复制字符x</td><td></td><td></td></tr><tr><td>x{m,n}</td><td>至少m次，至多n次复制字x</td><td></td><td></td></tr><tr><td>w</td><td>文字和数字字符，[A-Za-z0-9]</td><td>Lw*e</td><td>匹配一个l字符，紧跟着0个或多个文字或数字字符，然后是e</td></tr><tr><td>W</td><td>同上</td><td></td><td></td></tr><tr><td>b</td><td>单词分界线</td><td>bloveb</td><td>仅仅匹配单词love</td></tr></tbody></table><h2 id="递归查找某个文本内容"><a href="#递归查找某个文本内容" class="headerlink" title="递归查找某个文本内容"></a>递归查找某个文本内容</h2><ul><li>R 表示递归，就是在当前目录找不到就去子目录找 </li><li>E 表示把文件名也打印出来 </li><li>n 打印此行在文件中的位置。</li></ul><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">这句可以显示在哪个文件里包含3306</span><br>grep -Rl &quot;3306&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">可以显现文件名，行数</span><br>grep -REn &quot;3306&quot;<br></code></pre></td></tr></table></figure><h3 id="查找替换内容"><a href="#查找替换内容" class="headerlink" title="查找替换内容"></a>查找替换内容</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">sed -i <span class="hljs-string">&quot;s/[原字符串]/[新字符串]/g&quot;</span> `grep <span class="hljs-string">&#x27;[原字符串]&#x27;</span> -rl /opt/kubernetes`</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">示例：替换/opt/kubernetes下所有文件内容为242的换成245</span><br>sed -i &quot;s/242/245/g&quot; `grep &#x27;242&#x27; -rl /opt/kubernetes`<br></code></pre></td></tr></table></figure><h1 id="10-查看端口占用"><a href="#10-查看端口占用" class="headerlink" title="10. 查看端口占用"></a>10. 查看端口占用</h1><h2 id="查看那些程序使用tcp的80端口"><a href="#查看那些程序使用tcp的80端口" class="headerlink" title="查看那些程序使用tcp的80端口"></a>查看那些程序使用tcp的80端口</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$</span><span class="language-bash">fuser -v -n tcp 80</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">fuser -v 80/tcp</span>  <br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-ls-系列&quot;&gt;&lt;a href=&quot;#1-ls-系列&quot; class=&quot;headerlink&quot; title=&quot;1. ls 系列&quot;&gt;&lt;/a&gt;1. ls 系列&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;-F：根据文件、目录等信息在文件名或目录名最后给予附加数据结构&lt;/p&gt;</summary>
      
    
    
    
    <category term="运维" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/"/>
    
    <category term="常用命令" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
    
    <category term="命令" scheme="https://blog.yahyav2rayssr.top/tags/%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>vmware 网络配置</title>
    <link href="https://blog.yahyav2rayssr.top/posts/da1888d/"/>
    <id>https://blog.yahyav2rayssr.top/posts/da1888d/</id>
    <published>2023-04-16T03:12:25.418Z</published>
    <updated>2023-04-16T03:12:25.418Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="网卡配置"><a href="#网卡配置" class="headerlink" title="网卡配置"></a>网卡配置</h2><h3 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h3><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://blog.csdn.net/qiuqurenkong/article/details/78598650">Mac VMware fusion10 Centos7网络配置</a></p><p><a href="https://blog.csdn.net/kakuma_chen/article/details/71425620">如何使VMware ip与本机ip处于同一网段</a></p><p><a href="https://blog.csdn.net/masson32/article/details/48105793">CentOS 7 在vmware中的网络设置</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;网卡配置&quot;&gt;&lt;a href=&quot;#网卡配置&quot; class=&quot;headerlink&quot; title=&quot;网卡配置&quot;&gt;&lt;/a&gt;网卡配置&lt;/h</summary>
      
    
    
    
    <category term="运维" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/"/>
    
    <category term="vmware" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/vmware/"/>
    
    
    <category term="vmware" scheme="https://blog.yahyav2rayssr.top/tags/vmware/"/>
    
  </entry>
  
</feed>
