<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yahya的博客</title>
  
  <subtitle>学习笔记</subtitle>
  <link href="https://blog.yahyav2rayssr.top/atom.xml" rel="self"/>
  
  <link href="https://blog.yahyav2rayssr.top/"/>
  <updated>2024-04-14T10:46:48.142Z</updated>
  <id>https://blog.yahyav2rayssr.top/</id>
  
  <author>
    <name>Yahya</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Maven Archetype 使用</title>
    <link href="https://blog.yahyav2rayssr.top/posts/3a21973e/"/>
    <id>https://blog.yahyav2rayssr.top/posts/3a21973e/</id>
    <published>2024-04-14T10:46:48.142Z</published>
    <updated>2024-04-14T10:46:48.142Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Archetype 是一个 Maven 项目模板工具包。原型被定义为原始模式或模型，从中创建所有其他相同类型的东西。这些名称适合我们尝试提供一个系统，该系统提供生成Maven项目的一致方法。Archetype 将帮助作者为用户创建 Maven 项目模板，并为用户提供生成这些项目模板的参数化版本的方法。</p><h2 id="Archetype-创建"><a href="#Archetype-创建" class="headerlink" title="Archetype 创建"></a>Archetype 创建</h2><h3 id="添加-maven-依赖"><a href="#添加-maven-依赖" class="headerlink" title="添加 maven 依赖"></a>添加 maven 依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.archetype.version</span>&gt;</span>3.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">maven.archetype.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-archetype-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;maven.archetype.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="新建-archetype-properties"><a href="#新建-archetype-properties" class="headerlink" title="新建 archetype.properties"></a>新建 archetype.properties</h3><p>这个文件的作用就是定义哪些文件需要构建到骨架模版中，和 pom.xml 同级目录。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 添加不需要放到模板的正则匹配</span><br><span class="hljs-attr">excludePatterns</span>=<span class="hljs-string">.idea/**,README.md,.mvn/wrapper/*,.gitignore</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 需要替换处理的文件后缀，默认没有yml、yaml</span><br><span class="hljs-attr">archetype.filteredExtensions</span>=<span class="hljs-string">java,yml,yaml,xml,txt,groovy,cs,mdo,aj,jsp,gsp,vm,html,xhtml,properties,classpath,project,doc,docx,bat,sh,sql,vm</span><br></code></pre></td></tr></table></figure><h3 id="生成-archetype"><a href="#生成-archetype" class="headerlink" title="生成 archetype"></a>生成 archetype</h3><p>打开 cmd 窗口，在刚才的 maven 项目的根目录中运行 maven 命令：</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-title">mvn</span> arche<span class="hljs-keyword">type</span>:create-from-project<br></code></pre></td></tr></table></figure><p>如果报了 <code>Invoker process ended with result different than 0!</code> 这个错误，需要手动指定 maven settings.xml 的文件位置，示例命令如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">mvn archetype:create-from-project -s D:\Apache\apache-maven-3.6.3\conf\settings.xml<br></code></pre></td></tr></table></figure><h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><p>首先进入 <code>target/generated-sources/archetype</code> 目录。</p><h4 id="本地仓库"><a href="#本地仓库" class="headerlink" title="本地仓库"></a>本地仓库</h4><p>执行 <code>mvn install</code>，当然也可以发布到私服，这里我没有私服，就只安装到本地。</p><h4 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h4><p>配置你的Maven的setting.xml文件，配置有上传权限的用户名和密码，以及仓库地址。</p><p>配置完成，需要修改 <code>/target/generated-sources/archetype</code> 的 pom.xml 文件，添加以下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">distributionManagement</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Local Nexus Releases Repository<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>release仓库地址<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">snapshotRepository</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>snapshots<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Local Nexus Snapshots Repository<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>snaphost仓库地址<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">uniqueVersion</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">uniqueVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">snapshotRepository</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">distributionManagement</span>&gt;</span><br></code></pre></td></tr></table></figure><p>最后执行 <code>mvn deploy</code> 发布到远程仓库即可。</p><h4 id="更新索引（可选）"><a href="#更新索引（可选）" class="headerlink" title="更新索引（可选）"></a>更新索引（可选）</h4><p>到此，我们自己的 archetype 模板已经创建成功，可以使用 <code>mvn archetype:crawl</code> 更新索引（该命令会执行较长一段时间）。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="方式一（idea）："><a href="#方式一（idea）：" class="headerlink" title="方式一（idea）："></a>方式一（idea）：</h4><p>依次展开 File -&gt; Settings -&gt; Build, Execution, Deployment -&gt; Build Tools -&gt; Maven -&gt; Archetype Catalogs 菜单，点击 + 号按钮，添加本地 archetype-catalog.xml 位置，效果如下：</p><img src="/posts/3a21973e/image-20240115174421067.png" alt="image-20240115174421067" style="zoom: 80%;"><p>然后在 idea 新建一个 maven 项目就可以看到如下效果：</p><img src="/posts/3a21973e/image-20240115174558668.png" alt="image-20240115174558668" style="zoom:80%;"><p>在 Advanced Settings 选项填写自己需要的 GroupId，ArtifactId 和 Version 即可。</p><h4 id="方式二："><a href="#方式二：" class="headerlink" title="方式二："></a>方式二：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mvn archetype:generate -DarchetypeCatalog=<span class="hljs-built_in">local</span><br></code></pre></td></tr></table></figure><p>archetypeCatalog 参数，用来指定 maven-archetype-plugin 读取 archetype-catalog.xml 文件的位置，</p><p>位置有以下几种类型：</p><ul><li><p>internal——maven-archetype-plugin 内置的</p></li><li><p>local——本地的，位置为 ~&#x2F;.m2&#x2F;archetype-catalog.xml</p></li><li><p>remote——指向 Maven 远程仓库的 Catalog</p></li></ul><h4 id="方式三："><a href="#方式三：" class="headerlink" title="方式三："></a>方式三：</h4><p>这种模式属于精确指定，需要我们手动指定我们 archetype 信息，示例命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">mvn archetype:generate \<br>-DarchetypeGroupId=com.sf.saas \<br>-DarchetypeArtifactId=ibu-saas-iss-archetype-quickstart-archetype \<br>-DarchetypeVersion=0.0.1-SNAPSHOT \<br>-DgroupId=com.sf.saas \<br>-DartifactId=quickstart \<br>-Dpackage=com.sf.saas.quickstart \<br>-Dversion=1.0.0 \<br>-DappName=ibu-saas-iss-archetype-quickstart<br></code></pre></td></tr></table></figure><p><strong>注意事项</strong></p><ul><li>上面语句是一条完整语句，不能有空格</li><li>-D 前面都有个空格</li><li>-DarchetypeArtifactId 注意后面有 archetype</li></ul><p>其中最后的5个参数根据实际的情况进行修改，基本规范如下：</p><ul><li><code>groupId</code>：项目工程的 groupId；</li><li><code>artifactId</code>：项目工程的 artifactId；</li><li><code>package</code>：项目工程的顶级 package；</li><li><code>version</code>：项目工程的版本号；</li><li><code>appName</code>：项目工程打成包时的名字，当基于tomcat插件进行调试时，此名称也作为ContextPath名称。</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://developer.aliyun.com/article/689387">Maven Archetype简介以及搭建</a></p><p><a href="https://blog.51cto.com/u_15127629/2883893">Maven Archetype 模板开发详解</a></p><p><a href="https://blog.csdn.net/muguaigun/article/details/134975904">自定义archetype项目模板并发布到远程仓库</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Arc</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.yahyav2rayssr.top/categories/Java/"/>
    
    <category term="maven" scheme="https://blog.yahyav2rayssr.top/categories/Java/maven/"/>
    
    
    <category term="maven" scheme="https://blog.yahyav2rayssr.top/tags/maven/"/>
    
    <category term="archetype" scheme="https://blog.yahyav2rayssr.top/tags/archetype/"/>
    
  </entry>
  
  <entry>
    <title>Arthas 基本概念</title>
    <link href="https://blog.yahyav2rayssr.top/posts/b25563b9/"/>
    <id>https://blog.yahyav2rayssr.top/posts/b25563b9/</id>
    <published>2024-04-14T10:46:48.141Z</published>
    <updated>2024-04-14T10:46:48.141Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="入参"><a href="#入参" class="headerlink" title="入参"></a>入参</h2><h3 id="变量引用"><a href="#变量引用" class="headerlink" title="变量引用"></a>变量引用</h3><p>OGNL 在计算表达式的过程中, 随时会将当前对象保存在 <code>this</code> 变量中, 这个变量也可以象其他任何变量一样引用,用 <code>#this</code> 表示当前对象，举个栗子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ognl -c 18b4aac2 <span class="hljs-string">&#x27;#value1=new com.RoleDTO(), #value1.setRole(&quot;role&quot;), @com.SpringUtil@getBean(&quot;roleServiceImpl&quot;).getRole(#value1).(#this.getSysName())&#x27;</span><br></code></pre></td></tr></table></figure><p>可以通过 <code>#this.getSysName()</code> 调用返回结果的相关方法。</p><h3 id="class-类型"><a href="#class-类型" class="headerlink" title="class 类型"></a>class 类型</h3><p>入参类型如果是 class 类型，需要全包名路径，写法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ognl <span class="hljs-string">&#x27;@全路径包名+类名@class&#x27;</span><br></code></pre></td></tr></table></figure><p>举个栗子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ognl -c 338fc1d8 <span class="hljs-string">&#x27;@com.example.SpringContextHolder@getApplicationContext().getBean(@com.example.TestBean@class).handle(&#123;&quot;7899896&quot;&#125;)&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="新建对象"><a href="#新建对象" class="headerlink" title="新建对象"></a>新建对象</h3><p>可以通过声明变量的形式进行传入，语法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ognl <span class="hljs-string">&#x27;#变量名=new 全路径包名+类名, #变量名.方法&#x27;</span><br></code></pre></td></tr></table></figure><p>举个栗子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ognl -c 18b4aac2 <span class="hljs-string">&#x27;#value1=new com.RoleDTO(), #value1.setRole(&quot;role&quot;), @com.SpringUtil@getBean(&quot;accessSystemRoleServiceImpl&quot;).getRole(#value1)&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="map-类型"><a href="#map-类型" class="headerlink" title="map 类型"></a>map 类型</h3><p>可以通过声明变量的形式进行传入，语法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ognl <span class="hljs-string">&#x27;#变量名=#&#123;&quot;key1&quot;:&quot;value1&quot;, &quot;key2&quot;:&quot;value2&quot;&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>举个栗子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ognl <span class="hljs-string">&#x27;#inputmap=#&#123;&quot;foo&quot;: &quot;foo value&quot;, &quot;bar&quot;:&quot;bar value&quot; &#125;, @com.OgnlTest@getMap(#inputmap)&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="多级传递"><a href="#多级传递" class="headerlink" title="多级传递"></a>多级传递</h3><p>方法 A 的返回值当做方法 B 的入参，执行多行表达式，返回一个 List，示例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ognl <span class="hljs-string">&#x27;#value1=@com.OgnlTest@getPerson(&quot;src&quot;,18), #value2=@com.OgnlTest@setPerson(#value1), &#123;#value1,#value2&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id><a href="#" class="headerlink" title></a></h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;入参&quot;&gt;&lt;a href=&quot;#入参&quot; class=&quot;headerlink&quot; title=&quot;入参&quot;&gt;&lt;/a&gt;入参&lt;/h2&gt;&lt;h3 id</summary>
      
    
    
    
    <category term="研发工具" scheme="https://blog.yahyav2rayssr.top/categories/%E7%A0%94%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    <category term="arthas" scheme="https://blog.yahyav2rayssr.top/categories/%E7%A0%94%E5%8F%91%E5%B7%A5%E5%85%B7/arthas/"/>
    
    
    <category term="arthas" scheme="https://blog.yahyav2rayssr.top/tags/arthas/"/>
    
  </entry>
  
  <entry>
    <title>Arthas 常用命令</title>
    <link href="https://blog.yahyav2rayssr.top/posts/1b15733b/"/>
    <id>https://blog.yahyav2rayssr.top/posts/1b15733b/</id>
    <published>2024-04-14T10:46:48.141Z</published>
    <updated>2024-04-14T10:46:48.141Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>官方文档链接：<a href="https://arthas.gitee.io/doc/commands.html#jvm-%E7%9B%B8%E5%85%B3">https://arthas.gitee.io/doc/commands.html#jvm-%E7%9B%B8%E5%85%B3</a></p><h2 id="ognl-表达式"><a href="#ognl-表达式" class="headerlink" title="ognl 表达式"></a>ognl 表达式</h2><p>参考文档：<a href="https://blog.csdn.net/u010634066/article/details/101013479">https://blog.csdn.net/u010634066/article/details/101013479</a></p><p><strong>参数说明:</strong></p><table><thead><tr><th align="right">参数名称</th><th align="left">参数说明</th></tr></thead><tbody><tr><td align="right"><em>express</em></td><td align="left">执行的表达式</td></tr><tr><td align="right"><code>[c:]</code></td><td align="left">执行表达式的 ClassLoader 的 hashcode，默认值是 SystemClassLoader</td></tr><tr><td align="right"><code>[classLoaderClass:]</code></td><td align="left">指定执行表达式的 ClassLoader 的 class name</td></tr><tr><td align="right">[x]</td><td align="left">结果对象的展开层次，默认值 1</td></tr></tbody></table><h3 id="调用静态属性"><a href="#调用静态属性" class="headerlink" title="调用静态属性"></a>调用静态属性</h3><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ognl <span class="hljs-string">&#x27;@全路径类目@静态属性名&#x27;</span><br></code></pre></td></tr></table></figure><p>举个栗子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ognl <span class="hljs-string">&#x27;@com.shirc.arthasexample.ognl.OgnlTest@static_str&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="调用静态方法"><a href="#调用静态方法" class="headerlink" title="调用静态方法"></a>调用静态方法</h3><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ognl <span class="hljs-string">&#x27;@全路径类目@静态方法名(&quot;参数&quot;)&#x27;</span><br></code></pre></td></tr></table></figure><p>举个栗子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ognl -c 18b4aac2  <span class="hljs-string">&#x27;@cn.hutool.extra.spring.SpringUtil@getBean(&quot;lineRequireInfoPlatformRepoImpl&quot;).queryByRequireId(&quot;231102012391075&quot;)&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="json-格式化"><a href="#json-格式化" class="headerlink" title="json 格式化"></a>json 格式化</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">options json-format <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h2 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h2><p>很多时候我们都知道一个方法被执行，但这个方法被执行的路径非常多，或者你根本就不知道这个方法是从那里被执行了，此时你需要的是 stack 命令。</p><p><strong>参数说明:</strong></p><table><thead><tr><th align="right">参数名称</th><th align="left">参数说明</th></tr></thead><tbody><tr><td align="right"><em>class-pattern</em></td><td align="left">类名表达式匹配</td></tr><tr><td align="right"><em>method-pattern</em></td><td align="left">方法名表达式匹配</td></tr><tr><td align="right"><em>condition-express</em></td><td align="left">条件表达式</td></tr><tr><td align="right">[E]</td><td align="left">开启正则表达式匹配，默认为通配符匹配</td></tr><tr><td align="right"><code>[n:]</code></td><td align="left">执行次数限制</td></tr><tr><td align="right"><code>[m &lt;arg&gt;]</code></td><td align="left">指定 Class 最大匹配数量，默认值为 50。长格式为<code>[maxMatch &lt;arg&gt;]</code>。</td></tr></tbody></table><p><strong>举个栗子：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">stack com.sf.ground.require.mgmt.service.PeriodicLineService exportData -n 5 <br></code></pre></td></tr></table></figure><h2 id="sc"><a href="#sc" class="headerlink" title="sc"></a>sc</h2><p>查看 JVM 已加载的类信息。“Search-Class” 的简写，这个命令能搜索出所有已经加载到 JVM 中的 Class 信息，这个命令支持的参数有 <code>[d]</code>、<code>[E]</code>、<code>[f]</code> 和 <code>[x:]</code>。</p><p><strong>参数说明:</strong></p><table><thead><tr><th align="right">参数名称</th><th align="left">参数说明</th></tr></thead><tbody><tr><td align="right"><em>class-pattern</em></td><td align="left">类名表达式匹配</td></tr><tr><td align="right"><em>method-pattern</em></td><td align="left">方法名表达式匹配</td></tr><tr><td align="right">[d]</td><td align="left">输出当前类的详细信息，包括这个类所加载的原始文件来源、类的声明、加载的 ClassLoader 等详细信息。 <br>如果一个类被多个 ClassLoader 所加载，则会出现多次</td></tr><tr><td align="right">[E]</td><td align="left">开启正则表达式匹配，默认为通配符匹配</td></tr><tr><td align="right">[f]</td><td align="left">输出当前类的成员变量信息（需要配合参数-d 一起使用）</td></tr><tr><td align="right">[x:]</td><td align="left">指定输出静态变量时属性的遍历深度，默认为 0，即直接使用 <code>toString</code> 输出</td></tr><tr><td align="right"><code>[c:]</code></td><td align="left">指定 class 的 ClassLoader 的 hashcode</td></tr><tr><td align="right"><code>[classLoaderClass:]</code></td><td align="left">指定执行表达式的 ClassLoader 的 class name</td></tr><tr><td align="right"><code>[n:]</code></td><td align="left">具有详细信息的匹配类的最大数量（默认为 100）</td></tr><tr><td align="right"><code>[cs &lt;arg&gt;]</code></td><td align="left">指定 class 的 ClassLoader#toString() 返回值。长格式<code>[classLoaderStr &lt;arg&gt;]</code></td></tr></tbody></table><p><strong>举个栗子：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sc -d cn.hutool.extra.spring.SpringUtil<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;p&gt;官方文档链接：&lt;a href=&quot;https://arthas.gitee.io/doc/commands.html#jvm-%E7%9B%B</summary>
      
    
    
    
    <category term="研发工具" scheme="https://blog.yahyav2rayssr.top/categories/%E7%A0%94%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    <category term="arthas" scheme="https://blog.yahyav2rayssr.top/categories/%E7%A0%94%E5%8F%91%E5%B7%A5%E5%85%B7/arthas/"/>
    
    
    <category term="arthas" scheme="https://blog.yahyav2rayssr.top/tags/arthas/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://blog.yahyav2rayssr.top/posts/0/"/>
    <id>https://blog.yahyav2rayssr.top/posts/0/</id>
    <published>2024-04-14T10:46:48.141Z</published>
    <updated>2024-04-14T10:46:48.141Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="百度网盘会员"><a href="#百度网盘会员" class="headerlink" title="百度网盘会员"></a>百度网盘会员</h2><p><a href="https://sm.ii5.top/?key=9PSq8glOdQ4ual6w">https://sm.ii5.top/?key=9PSq8glOdQ4ual6w</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;百度网盘会员&quot;&gt;&lt;a href=&quot;#百度网盘会员&quot; class=&quot;headerlink&quot; title=&quot;百度网盘会员&quot;&gt;&lt;/a&gt;百</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Spring 常用类</title>
    <link href="https://blog.yahyav2rayssr.top/posts/b230d5e5/"/>
    <id>https://blog.yahyav2rayssr.top/posts/b230d5e5/</id>
    <published>2024-04-14T10:46:48.139Z</published>
    <updated>2024-04-14T10:46:48.139Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="bean-的生命周期"><a href="#bean-的生命周期" class="headerlink" title="bean 的生命周期"></a>bean 的生命周期</h2><p>前置执行顺序</p><p>Constructor 方法 &gt; @PostConstruct 注解修饰的方法 &gt; InitializingBean 接口 &gt; init-method 方法</p><p>后置执行顺序</p><p>@PreDestroy 注解修饰的方法 &gt; destroy() 方法</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;bean-的生命周期&quot;&gt;&lt;a href=&quot;#bean-的生命周期&quot; class=&quot;headerlink&quot; title=&quot;bean </summary>
      
    
    
    
    <category term="Java" scheme="https://blog.yahyav2rayssr.top/categories/Java/"/>
    
    <category term="Spring" scheme="https://blog.yahyav2rayssr.top/categories/Java/Spring/"/>
    
    
    <category term="spring" scheme="https://blog.yahyav2rayssr.top/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring 基本概念</title>
    <link href="https://blog.yahyav2rayssr.top/posts/f2bd63b2/"/>
    <id>https://blog.yahyav2rayssr.top/posts/f2bd63b2/</id>
    <published>2024-04-14T10:46:48.139Z</published>
    <updated>2024-04-14T10:46:48.139Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="bean-默认名称规则"><a href="#bean-默认名称规则" class="headerlink" title="bean 默认名称规则"></a>bean 默认名称规则</h2><ol><li>bean 名称的默认规则是类名的首字母小写，如 SysConfig - sysConfig，Tools - tools。</li><li>如果类名前两个或以上个字母都是大写，那么 bean 名称与类名一样，如 RBACUserLog - RBACUserLog，RBACUser - RBACUser。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;bean-默认名称规则&quot;&gt;&lt;a href=&quot;#bean-默认名称规则&quot; class=&quot;headerlink&quot; title=&quot;bea</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.yahyav2rayssr.top/categories/Java/"/>
    
    <category term="Spring" scheme="https://blog.yahyav2rayssr.top/categories/Java/Spring/"/>
    
    
    <category term="spring" scheme="https://blog.yahyav2rayssr.top/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>npm 基本概念</title>
    <link href="https://blog.yahyav2rayssr.top/posts/c62ddf2b/"/>
    <id>https://blog.yahyav2rayssr.top/posts/c62ddf2b/</id>
    <published>2024-04-14T10:46:48.139Z</published>
    <updated>2024-04-14T10:46:48.139Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="npm-语义化版本号"><a href="#npm-语义化版本号" class="headerlink" title="npm 语义化版本号"></a>npm 语义化版本号</h2><p>npm使用 <code>a.b.c</code> 的版本号来管理安装包，a 为大版本号，有重大 api 改变，一般不向下兼容，b 为小版本号，新增功能，向下兼容，c 为补丁号，通常修复一些 bug。npm 安装包的时候允许使用一些特殊符号表示安装的版本范围，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 取最新的c的版本号值，a与b保持不变</span><br>~a.b.c<br><br><span class="hljs-comment"># 取b和c均为最新版本号，a保持不变</span><br>^a.b.c<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;npm-语义化版本号&quot;&gt;&lt;a href=&quot;#npm-语义化版本号&quot; class=&quot;headerlink&quot; title=&quot;npm 语</summary>
      
    
    
    
    <category term="前端" scheme="https://blog.yahyav2rayssr.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="npm" scheme="https://blog.yahyav2rayssr.top/categories/%E5%89%8D%E7%AB%AF/npm/"/>
    
    
    <category term="npm" scheme="https://blog.yahyav2rayssr.top/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://blog.yahyav2rayssr.top/posts/0/"/>
    <id>https://blog.yahyav2rayssr.top/posts/0/</id>
    <published>2024-04-14T10:46:48.139Z</published>
    <updated>2024-04-14T10:46:48.139Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="离线下载"><a href="#离线下载" class="headerlink" title="离线下载"></a>离线下载</h2><h3 id="mac"><a href="#mac" class="headerlink" title="mac"></a>mac</h3><p>下载地址：<a href="http://dropbox.com/download?full=1&plat=win">http://dropbox.com/download?full=1&amp;plat=win</a></p><h3 id="win"><a href="#win" class="headerlink" title="win"></a>win</h3><p>下载地址：<a href="http://dropbox.com/download?full=1&plat=mac">http://dropbox.com/download?full=1&amp;plat=mac</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;离线下载&quot;&gt;&lt;a href=&quot;#离线下载&quot; class=&quot;headerlink&quot; title=&quot;离线下载&quot;&gt;&lt;/a&gt;离线下载&lt;/h</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>log 日志基本概念</title>
    <link href="https://blog.yahyav2rayssr.top/posts/a6ab95f3/"/>
    <id>https://blog.yahyav2rayssr.top/posts/a6ab95f3/</id>
    <published>2024-04-14T10:46:48.137Z</published>
    <updated>2024-04-14T10:46:48.137Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="格式化符号"><a href="#格式化符号" class="headerlink" title="格式化符号"></a>格式化符号</h2><table><thead><tr><th>符号</th><th>说明</th><th>常用</th></tr></thead><tbody><tr><td>%d</td><td>输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，如：%d{yyyy&#x2F;MM&#x2F;dd HH:mm:ss,SSS}</td><td>是</td></tr><tr><td>%t</td><td>输出产生该日志事件的线程名</td><td>是</td></tr><tr><td>%l</td><td>输出日志事件的发生位置，相当于%c.%M(%F:%L)的组合，包括类全名、方法、文件名以及在代码中的行数。例如：test.TestLog4j.main(TestLog4j.java:10)</td><td>是</td></tr><tr><td>%c</td><td>输出日志信息所属的类目，通常就是所在类的全名</td><td>是</td></tr><tr><td>%M</td><td>输出产生日志信息的方法名</td><td>是</td></tr><tr><td>%L</td><td>输出代码中的行号</td><td>是</td></tr><tr><td>%m</td><td>输出代码中指定的具体日志信息</td><td>是</td></tr><tr><td>%n</td><td>输出一个回车换行符，Windows平台为”rn”，Unix平台为”n”</td><td>是</td></tr><tr><td>%x</td><td>输出和当前线程相关联的 NDC (嵌套诊断环境)，尤其用到像 java servlets 这样的多客户多线程的应用中</td><td>是</td></tr><tr><td>%F</td><td>输出日志消息产生时所在的文件名称</td><td></td></tr><tr><td>%p</td><td>输出日志信息的优先级，即 DEBUG，INFO，WARN，ERROR，FATAL</td><td></td></tr><tr><td>%r</td><td>输出自应用程序启动到输出该 log 信息耗费的毫秒数</td><td></td></tr><tr><td>%%</td><td>输出一个”%”字符</td><td></td></tr></tbody></table><p>另外，还可以在 % 与格式字符之间加上修饰符来控制其最小长度、最大长度、和文本的对齐方式。如：</p><ul><li>%-20c：”-“号表示左对齐。</li><li>%.30c：指定输出 category 的名称，最大的长度是 30，如果 category 的名称长度大于 30 的话，就会将左边多出的字符截掉，但小于30的话也不会补空格。</li></ul><h2 id="其他参数"><a href="#其他参数" class="headerlink" title="其他参数"></a>其他参数</h2><p>ImmediateFlush&#x3D;true：表示所有消息都会被立即输出，设为 false 则不输出，默认值是 true。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;格式化符号&quot;&gt;&lt;a href=&quot;#格式化符号&quot; class=&quot;headerlink&quot; title=&quot;格式化符号&quot;&gt;&lt;/a&gt;格式化符</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.yahyav2rayssr.top/categories/Java/"/>
    
    <category term="log" scheme="https://blog.yahyav2rayssr.top/categories/Java/log/"/>
    
    
    <category term="log" scheme="https://blog.yahyav2rayssr.top/tags/log/"/>
    
  </entry>
  
  <entry>
    <title>Spring XML 配置详解</title>
    <link href="https://blog.yahyav2rayssr.top/posts/df193b61/"/>
    <id>https://blog.yahyav2rayssr.top/posts/df193b61/</id>
    <published>2024-04-14T10:46:48.137Z</published>
    <updated>2024-04-14T10:46:48.137Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="properties-文件读取"><a href="#properties-文件读取" class="headerlink" title="properties 文件读取"></a>properties 文件读取</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>classpath:*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果是多个，可以用 list 包裹，代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>classpath:*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;properties-文件读取&quot;&gt;&lt;a href=&quot;#properties-文件读取&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.yahyav2rayssr.top/categories/Java/"/>
    
    <category term="Spring" scheme="https://blog.yahyav2rayssr.top/categories/Java/Spring/"/>
    
    
    <category term="xml" scheme="https://blog.yahyav2rayssr.top/tags/xml/"/>
    
    <category term="spring" scheme="https://blog.yahyav2rayssr.top/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>计算机基础</title>
    <link href="https://blog.yahyav2rayssr.top/posts/c783f2ce/"/>
    <id>https://blog.yahyav2rayssr.top/posts/c783f2ce/</id>
    <published>2024-04-14T10:46:48.136Z</published>
    <updated>2024-04-14T10:46:48.136Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="计算-byte-和-bit-和-kb-的转换"><a href="#计算-byte-和-bit-和-kb-的转换" class="headerlink" title="计算 byte 和 bit 和 kb 的转换"></a>计算 byte 和 bit 和 kb 的转换</h2><p>1、byte 代表的是字节，1byte &#x3D; 8bit</p><p>2、bit 是最小的计量单位</p><h3 id="单位换算"><a href="#单位换算" class="headerlink" title="单位换算"></a>单位换算</h3><p>1Byte&#x3D;8bit（一个字节&#x3D;8bit）</p><p>1KB&#x3D;1024Byte(字节)&#x3D;8*1024bit</p><p>1MB&#x3D;1024KB</p><p>1GB&#x3D;1024MB</p><p>1TB&#x3D;1024GB</p><h2 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h2><blockquote><p>参考链接：<a href="https://www.51cto.com/article/718780.html">https://www.51cto.com/article/718780.html</a></p></blockquote><h3 id="QPS（每秒查询）"><a href="#QPS（每秒查询）" class="headerlink" title="QPS（每秒查询）"></a>QPS（每秒查询）</h3><p>QPS：Queries Per Second意思是“每秒查询率”，是一台服务器每秒能够相应的查询次数，是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准。互联网中，作为域名系</p><p>统服务器的机器的性能经常用每秒查询率来衡量。</p><h3 id="TPS（每秒事务）"><a href="#TPS（每秒事务）" class="headerlink" title="TPS（每秒事务）"></a>TPS（每秒事务）</h3><p>TPS：是TransactionsPerSecond的缩写，也就是事务数&#x2F;秒。它是软件测试结果的测量单位。一个事务是指一个客户机向服务器发送请求然后服务器做出反应的过程。客户机在发送请求</p><p>时开始计时，收到服务器响应后结束计时，以此来计算使用的时间和完成的事务个数。</p><p>QPS vs TPS：QPS基本类似于TPS，但是不同的是，对于一个页面的一次访问，形成一个TPS；但一次页面请求，可能产生多次对服务器的请求，服务器对这些请求，就可计</p><p>入“QPS”之中。如，访问一个页面会请求服务器2次，一次访问，产生一个“T”，产生2个“Q”。</p><h3 id="RT（响应时间）"><a href="#RT（响应时间）" class="headerlink" title="RT（响应时间）"></a>RT（响应时间）</h3><p>响应时间：执行一个请求从开始到最后收到响应数据所花费的总体时间,即从客户端发起请求到收到服务器响应结果的时间。响应时间RT(Response-time)，是一个系统最重要的指标之</p><p>一，它的数值大小直接反应了系统的快慢。</p><h3 id="并发数"><a href="#并发数" class="headerlink" title="并发数"></a>并发数</h3><p>并发数是指系统同时能处理的请求数量，这个也是反应了系统的负载能力。</p><h3 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h3><p>系统的吞吐量（承压能力）与request对CPU的消耗、外部接口、IO等等紧密关联。单个request 对CPU消耗越高，外部系统接口、IO速度越慢，系统吞吐能力越低，反之越高。系统吞</p><p>吐量几个重要参数：QPS（TPS）、并发数、响应时间。</p><ul><li>QPS（TPS）：（Query Per Second）每秒钟request &#x2F; 事务 数量</li><li>并发数：系统同时处理的request &#x2F; 事务数</li><li>响应时间：一般取平均响应时间</li></ul><p>理解了上面三个要素的意义之后，就能推算出它们之间的关系：</p><ul><li>QPS（TPS）&#x3D; 并发数 &#x2F; 平均响应时间</li><li>并发数 &#x3D; QPS * 平均响应时间</li></ul><h3 id="实际举例"><a href="#实际举例" class="headerlink" title="实际举例"></a>实际举例</h3><p>我们通过一个实例来把上面几个概念串起来理解。按二八定律来看，如果每天 80% 的访问集中在 20% 的时间里，这 20% 时间就叫做峰值时间。</p><ul><li>公式：( 总PV数 * 80% ) &#x2F; ( 每天秒数 * 20% ) &#x3D; 峰值时间每秒请求数(QPS)</li><li>机器：峰值时间每秒QPS &#x2F; 单台机器的QPS &#x3D; 需要的机器</li></ul><p>1、每天 300w PV 的在单台机器上，这台机器需要多少QPS？</p><p>( 3000000 * 0.8 ) &#x2F; (86400 * 0.2 ) &#x3D; 139 (QPS)</p><p>2、如果一台机器的QPS是58，需要几台机器来支持？</p><p>139 &#x2F; 58 &#x3D; 3</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;计算-byte-和-bit-和-kb-的转换&quot;&gt;&lt;a href=&quot;#计算-byte-和-bit-和-kb-的转换&quot; class=&quot;</summary>
      
    
    
    
    <category term="计算机基础" scheme="https://blog.yahyav2rayssr.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="计算机基础" scheme="https://blog.yahyav2rayssr.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis XML 基础配置</title>
    <link href="https://blog.yahyav2rayssr.top/posts/f68be97c/"/>
    <id>https://blog.yahyav2rayssr.top/posts/f68be97c/</id>
    <published>2024-04-14T10:46:48.136Z</published>
    <updated>2024-04-14T10:46:48.136Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="MapperScannerConfigurer-多数据源配置"><a href="#MapperScannerConfigurer-多数据源配置" class="headerlink" title="MapperScannerConfigurer 多数据源配置"></a>MapperScannerConfigurer 多数据源配置</h2><blockquote><p>参考链接：<a href="https://blog.csdn.net/u014362882/article/details/114707718">https://blog.csdn.net/u014362882/article/details/114707718</a></p></blockquote><p>MapperScannerConfigurer 正常只有一个数据源，只有一个 sqlSessionFactory ，这样写没问题，但是有多个数据源，有 2 个 sqlSessionFactory 的时候这样写就不可以了，需要你使用 sqlSessionFactoryBeanName 或 sqlSessionTemplateBeanName 属性来设置正确的 bean 名 称来使用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tk.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;basePackage&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;org.mybatis.spring.sample.mapper1&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sqlSessionFactory1&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tk.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;basePackage&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;org.mybatis.spring.sample.mapper2&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sqlSessionFactory2&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 配置sqlSessionFactoryBean1 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 引用数据源组件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource1&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- 引用mybatis配置文件 中的配置 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configLocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 配置sqlSessionFactoryBean1 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 引用数据源组件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource2 &quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- 引用mybatis配置文件 中的配置 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configLocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 配置dataSource1 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;close&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;user&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;password&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 配置dataSource2 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;close&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;user&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;password&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;MapperScannerConfigurer-多数据源配置&quot;&gt;&lt;a href=&quot;#MapperScannerConfigurer</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.yahyav2rayssr.top/categories/Java/"/>
    
    <category term="mybatis" scheme="https://blog.yahyav2rayssr.top/categories/Java/mybatis/"/>
    
    
    <category term="mybatis" scheme="https://blog.yahyav2rayssr.top/tags/mybatis/"/>
    
    <category term="xml" scheme="https://blog.yahyav2rayssr.top/tags/xml/"/>
    
  </entry>
  
  <entry>
    <title>HTTP 其他</title>
    <link href="https://blog.yahyav2rayssr.top/posts/b5f628bf/"/>
    <id>https://blog.yahyav2rayssr.top/posts/b5f628bf/</id>
    <published>2024-04-14T10:46:48.135Z</published>
    <updated>2024-04-14T10:46:48.135Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="常用网站"><a href="#常用网站" class="headerlink" title="常用网站"></a>常用网站</h2><h3 id="ipv6-地址测试"><a href="#ipv6-地址测试" class="headerlink" title="ipv6 地址测试"></a>ipv6 地址测试</h3><p><a href="http://test-ipv6.com/">http://test-ipv6.com</a></p><h3 id="移动宽带配置"><a href="#移动宽带配置" class="headerlink" title="移动宽带配置"></a>移动宽带配置</h3><p><a href="https://zhuanlan.zhihu.com/p/146528034">https://zhuanlan.zhihu.com/p/146528034</a></p><p><a href="https://www.cxyzjd.com/article/COCO56/104362070">https://www.cxyzjd.com/article/COCO56/104362070</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;常用网站&quot;&gt;&lt;a href=&quot;#常用网站&quot; class=&quot;headerlink&quot; title=&quot;常用网站&quot;&gt;&lt;/a&gt;常用网站&lt;/h</summary>
      
    
    
    
    <category term="网络通讯" scheme="https://blog.yahyav2rayssr.top/categories/%E7%BD%91%E7%BB%9C%E9%80%9A%E8%AE%AF/"/>
    
    
    <category term="http" scheme="https://blog.yahyav2rayssr.top/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>Jetty 基础概念</title>
    <link href="https://blog.yahyav2rayssr.top/posts/849606ff/"/>
    <id>https://blog.yahyav2rayssr.top/posts/849606ff/</id>
    <published>2024-04-14T10:46:48.135Z</published>
    <updated>2024-04-14T10:46:48.135Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><table><thead><tr><th>目录名称</th><th>是否在用</th><th>用途</th></tr></thead><tbody><tr><td>bin</td><td>是</td><td>存放 Windows 和 linux 等系统中使用的 Jetty 启动脚本和相关文件</td></tr><tr><td>contexts</td><td></td><td>存放应用程序发布描述文件，里面有Jetty自带的示例文件</td></tr><tr><td>distribution</td><td></td><td>关于发行构建的代码，正式环境可删除</td></tr><tr><td>etc</td><td>是</td><td>Jetty 配置文件</td></tr><tr><td>examples</td><td></td><td>Jetty 示例程序源代码，正式环境可删除</td></tr><tr><td>extras</td><td></td><td>Jetty 相关程序源代码，正式环境可删除</td></tr><tr><td>javadoc</td><td></td><td>Jetty 核心代码的API文档，正式环境可删除</td></tr><tr><td>jxr</td><td></td><td>Jetty 其他相关程序API文档，正式环境可删除</td></tr><tr><td>LICENSES</td><td></td><td>发行协议说明</td></tr><tr><td>logs</td><td>是</td><td>日志目录</td></tr><tr><td>modules</td><td>是</td><td>Jetty 相关模块程序源代码，正式环境可删除</td></tr><tr><td>patches</td><td></td><td>jdk5 的补丁文件描述，正式环境可删除</td></tr><tr><td>project-website</td><td></td><td>maven 产生的项目站点文档目录</td></tr><tr><td>resources</td><td>是</td><td>如果存在该目录，jetty 启动时会将该目录加入类路径，默认存放 log4j 配置文件</td></tr><tr><td>webapps</td><td>是</td><td>存放 web 应用程序，默认情况下该目录下面的文件夹或者 war 文件将在 jetty 启动的时候被运行</td></tr><tr><td>start.jar</td><td></td><td>启动 Jetty 引导 java 程序，可以在各个操作系统中使用它启动 jetty 服务</td></tr><tr><td>start.ini</td><td>是</td><td>启动时被解析成命令行参数，jetty 必备配置文件</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;目录名称&lt;/th&gt;
&lt;th&gt;是否在用&lt;/th&gt;
&lt;th&gt;用途&lt;/th&gt;
&lt;/tr&gt;
&lt;/thea</summary>
      
    
    
    
    <category term="中间件" scheme="https://blog.yahyav2rayssr.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    <category term="容器" scheme="https://blog.yahyav2rayssr.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/%E5%AE%B9%E5%99%A8/"/>
    
    <category term="Jetty" scheme="https://blog.yahyav2rayssr.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/%E5%AE%B9%E5%99%A8/Jetty/"/>
    
    
    <category term="jetty" scheme="https://blog.yahyav2rayssr.top/tags/jetty/"/>
    
  </entry>
  
  <entry>
    <title>Gradle 常用配置</title>
    <link href="https://blog.yahyav2rayssr.top/posts/62a229e/"/>
    <id>https://blog.yahyav2rayssr.top/posts/62a229e/</id>
    <published>2024-04-14T10:46:48.134Z</published>
    <updated>2024-04-14T10:46:48.134Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="intellij-idea"><a href="#intellij-idea" class="headerlink" title="intellij idea"></a>intellij idea</h2><h3 id="Gradle-工具窗口说明"><a href="#Gradle-工具窗口说明" class="headerlink" title="Gradle 工具窗口说明"></a>Gradle 工具窗口说明</h3><img src="/posts/62a229e/1899339-0cb7c0cdcf484e84.webp" alt="img" style="zoom: 80%;"><h2 id="源文件"><a href="#源文件" class="headerlink" title="源文件"></a>源文件</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;intellij-idea&quot;&gt;&lt;a href=&quot;#intellij-idea&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.yahyav2rayssr.top/categories/Java/"/>
    
    <category term="gradle" scheme="https://blog.yahyav2rayssr.top/categories/Java/gradle/"/>
    
    
    <category term="gradle" scheme="https://blog.yahyav2rayssr.top/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title>Gradle 基础概念</title>
    <link href="https://blog.yahyav2rayssr.top/posts/884ca42/"/>
    <id>https://blog.yahyav2rayssr.top/posts/884ca42/</id>
    <published>2024-04-14T10:46:48.133Z</published>
    <updated>2024-04-14T10:46:48.133Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="文件说明"><a href="#文件说明" class="headerlink" title="文件说明"></a>文件说明</h2><blockquote><ol><li><p>解析 gradle&#x2F;wrapper&#x2F;gradle-wrapper.properties 文件，获取项目需要的 gradle 版本下载地址</p></li><li><p>判断本地用户目录下的 .&#x2F;gradle 目录下是否存在该版本，不存在该版本，走第3点，存在走第4点</p></li><li><p>下载 gradle-wrapper.properties 指定版本，并解压到用户目录的下 .&#x2F;gradle 文件下</p></li><li><p>利用 .&#x2F;gradle 目录下对应的版本的 gradle 进行相应自动编译操作</p></li></ol></blockquote><table><thead><tr><th>文件名</th><th>说明</th><th>类型</th><th>是否必须</th></tr></thead><tbody><tr><td>.gradle</td><td>gradle 项目产生文件（自动编译工具产生的文件）</td><td>目录</td><td>-</td></tr><tr><td>build</td><td>自动构建时生成文件的地方</td><td>目录</td><td>-</td></tr><tr><td>gradle</td><td>自动完成gradle环境支持文件夹</td><td>目录</td><td>否</td></tr><tr><td>gradlew</td><td>自动完成 gradle 环境的linux mac 脚本，配合 gradle 文件夹使用代替 gradle 命令实现自动完成 gradle 环境搭建，配合 gradle 文件夹的内容进行使用</td><td>文件</td><td>否</td></tr><tr><td>gradlew.bat</td><td>自动完成 gradle 环境的 windows 脚本，配合 gradle 文件夹使用</td><td>文件</td><td>否</td></tr><tr><td>build.gradle</td><td>gradle 项目自动编译的配置文件</td><td>文件</td><td>是</td></tr><tr><td>gradle.properties</td><td>gradle 运行环境配置文件</td><td>文件</td><td>是</td></tr><tr><td>setting.gradle</td><td>gradle 项目的子项目包含文件，多模块构建用</td><td>文件</td><td>是</td></tr></tbody></table><h2 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h2><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>compileOnly</td><td>gradle 2.12 之后版本新添加的，2.12 版本时期曾短暂的叫 provided，后续版本已经改成了compileOnly，由 java 插件提供,适用于编译期需要而不需要打包的情况。</td></tr><tr><td>providedCompile</td><td>war 插件提供的范围类型：与 compile 作用类似，但不会被添加到最终的war包中这是由于编译、测试阶段代码需要依赖此类 jar 包，而运行阶段容器已经提供了相应的支持，所以无需将这些文件打入到 war 包中了；例如 Servlet API 就是一个很明显的例子。</td></tr><tr><td>providedRuntime</td><td>同 proiveCompile 类似。</td></tr><tr><td>implementation</td><td>3.4 以后由 java-library 提供，当其他模块依赖此模块时，此模块使用 implementation 声明的依赖包只限于模块内部使用，不允许其他模块使用。</td></tr><tr><td>api</td><td>3.4 以后由 java-library 提供，当其他模块依赖于此模块时，此模块使用 api 声明的依赖包是可以被其他模块使用，等同于 compile。</td></tr><tr><td>compile</td><td>编译范围依赖在所有的 classpath 中可用，同时它们也会被打包。</td></tr><tr><td>runtime</td><td>runtime 依赖在运行和测试系统的时候需要，但在编译的时候不需要。比如，你可能在编译的时候只需要 JDBC API JAR，而只有在运行的时候才需要 JDBC 驱动实现。</td></tr><tr><td>testCompile</td><td>测试期编译需要的附加依赖。</td></tr><tr><td>testRuntime</td><td>测试运行期需要。</td></tr><tr><td>archives</td><td>-</td></tr><tr><td>default</td><td>配置默认依赖范围。</td></tr></tbody></table><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><h4 id="项目依赖"><a href="#项目依赖" class="headerlink" title="项目依赖"></a>项目依赖</h4><p>此类依赖多见于多模块项目，书写方式如下，其中<code>:</code>是基于跟项目的相对路径描述符。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">compile project(<span class="hljs-string">&#x27;:project-foo&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="文件依赖"><a href="#文件依赖" class="headerlink" title="文件依赖"></a>文件依赖</h4><p>依赖存在于本地文件系统中，举个栗子，如 oracle 的 OJDBC 驱动，中央仓库中没有又没有自建私服此时需要放到项目 lib 下进行手工加载那么便可采用此种方式，可以通过<a href="https://links.jianshu.com/go?to=https://docs.gradle.org/current/javadoc/org/gradle/api/file/FileCollection.html"><code>FileCollection</code></a>接口及其子接口提供的方法加载这些依赖(支持文件通配符)</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json">dependencies <span class="hljs-punctuation">&#123;</span><br>   <span class="hljs-comment">// 指定多个依赖</span><br>   compile files(&#x27;hibernate.jar&#x27;<span class="hljs-punctuation">,</span> &#x27;libs/spring.jar&#x27;)<br><br>   <span class="hljs-comment">// 读取lib文件夹下的全部文件作为项目依赖</span><br>   compile fileTree(&#x27;libs&#x27;)<br><br>   <span class="hljs-comment">// 根据指定基准目录\包含\排除条件加载依赖</span><br>   compile fileTree(dir<span class="hljs-punctuation">:</span>&#x27;libs&#x27;<span class="hljs-punctuation">,</span> include<span class="hljs-punctuation">:</span>&#x27;spring*.jar&#x27;<span class="hljs-punctuation">,</span> exclude<span class="hljs-punctuation">:</span>&#x27;hibernate*.jar&#x27;)<br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="传递依赖"><a href="#传递依赖" class="headerlink" title="传递依赖"></a>传递依赖</h4><p>传递依赖特性可以轻松地通过transitive参数进行开启或关闭，如果要忽略<a href="https://links.jianshu.com/go?to=http://com.android.support-v4">com.android.support-v4</a>的传递性依赖可以采用指定 transitive &#x3D; false 的方式来关闭依赖传递特性，也可以采用添加 @jar 的方式忽略该依赖的所有传递性依赖。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">compile(<span class="hljs-string">&#x27;com.android.support:support-v4:23.1.1&#x27;</span>) &#123; transitive = <span class="hljs-literal">false</span> &#125;<br> <br>compile <span class="hljs-string">&#x27;com.android.support:support-v4:23.1.1&#x27;</span>@jar<br></code></pre></td></tr></table></figure><p>当然,你也可以全局性的关闭依赖的传递特性。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">configurations.all <span class="hljs-punctuation">&#123;</span> transitive = <span class="hljs-literal"><span class="hljs-keyword">false</span></span> <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>或者，部分排除一些依赖，通过 exclude 的形式，举个例子：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">compile(&#x27;com.github.nanchen2251<span class="hljs-punctuation">:</span>CompressHelper<span class="hljs-punctuation">:</span><span class="hljs-number">1.0</span><span class="hljs-number">.5</span>&#x27;) <span class="hljs-punctuation">&#123;</span><br>exclude group<span class="hljs-punctuation">:</span> &#x27;com.android.support&#x27;<span class="hljs-comment">//排除组织依赖</span><br>exclude module<span class="hljs-punctuation">:</span> &#x27;appcompat-v7&#x27;<span class="hljs-comment">//排除模块依赖</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="强制使用指定版本"><a href="#强制使用指定版本" class="headerlink" title="强制使用指定版本"></a>强制使用指定版本</h5><p>当然，有时候你可能仅仅是需要强制使用某个统一的依赖版本，而不是排除他们，那么此时force就该登场了。指定force &#x3D; true属性可以冲突时优先使用该版本进行解决。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">compile(<span class="hljs-string">&#x27;com.github.nanchen2251:CompressHelper:1.0.5&#x27;</span>) &#123; force = <span class="hljs-literal">true</span> &#125;<br></code></pre></td></tr></table></figure><p>全局配置强制使用某个版本的依赖来解决依赖冲突中出现的依赖，有两种方式：</p><p>方式一：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">configurations.all <span class="hljs-punctuation">&#123;</span><br>   resolutionStrategy <span class="hljs-punctuation">&#123;</span><br>       force &#x27;com.github.nanchen2251<span class="hljs-punctuation">:</span>CompressHelper<span class="hljs-punctuation">:</span><span class="hljs-number">1.0</span><span class="hljs-number">.5</span>&#x27;<br>   <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>方式二：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// 解决冲突 同一版本</span><br>configurations.all <span class="hljs-punctuation">&#123;</span><br>    resolutionStrategy.eachDependency <span class="hljs-punctuation">&#123;</span> DependencyResolveDetails details -&gt;<br>        def requested = details.requested<br>        if (requested.group == &#x27;com.android.support&#x27;) <span class="hljs-punctuation">&#123;</span><br>            if (requested.name.startsWith(<span class="hljs-string">&quot;support-&quot;</span>)||<br>                    requested.name.startsWith(<span class="hljs-string">&quot;animated&quot;</span>)||<br>                    requested.name.startsWith(<span class="hljs-string">&quot;cardview&quot;</span>)||<br>                    requested.name.startsWith(<span class="hljs-string">&quot;design&quot;</span>)||<br>                    requested.name.startsWith(<span class="hljs-string">&quot;gridlayout&quot;</span>)||<br>                    requested.name.startsWith(<span class="hljs-string">&quot;recyclerview&quot;</span>)||<br>                    requested.name.startsWith(<span class="hljs-string">&quot;transition&quot;</span>)||<br>                    requested.name.startsWith(<span class="hljs-string">&quot;appcompat&quot;</span>)) <span class="hljs-punctuation">&#123;</span><br>                details.useVersion &#x27;<span class="hljs-number">25.0</span><span class="hljs-number">.0</span>&#x27;<br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="动态版本"><a href="#动态版本" class="headerlink" title="动态版本"></a>动态版本</h4><p>如果你想让你的工程始终采用最新依赖，那么 Gradle 提供了一种方式可以始终保证采用依赖的最新版本而无需每次手工检查修改版本。</p><p>使用加号+,可以让Gradle在每次执行构建时检查远程仓库是否存在该依赖的新版本，如果存在新版本则下载选用最新版本。当然也可以指定依赖某个大版本下的最新子版本，1.+表示始终采用该依赖最新的1.x版本的最新依赖。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json">compile &#x27;com.android.support<span class="hljs-punctuation">:</span>support-v4<span class="hljs-punctuation">:</span>+&#x27; <span class="hljs-comment">// 下载最新</span><br>compile &#x27;com.android.support<span class="hljs-punctuation">:</span>support-v4<span class="hljs-punctuation">:</span><span class="hljs-number">23</span>+&#x27; <span class="hljs-comment">// 基于23这个版本最新</span><br></code></pre></td></tr></table></figure><h4 id="强制更新依赖"><a href="#强制更新依赖" class="headerlink" title="强制更新依赖"></a>强制更新依赖</h4><p>在执行 build、compile 等任务时会解析项目配置的依赖并按照配置的仓库去搜寻下载这些依赖。默认情况下，Gradle 会依照 Gradle 缓存 -&gt; 你配置的仓库的顺序依次搜寻这些依赖，并且一旦找到就会停止搜索。如果想要忽略本地缓存每次都进行远程检索可以通过在执行命令时添加 <code>--refresh-dependencies</code> 参数来强制刷新依赖。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gradle build --refresh-dependencies<br></code></pre></td></tr></table></figure><p>当远程仓库上传了相同版本依赖时，有时需要为缓存指定一个时效去检查远程仓库的依赖笨版本，Gradle 提供了 cacheChangingModulesFor(int, java.util.concurrent.TimeUnit) , cacheDynamicVersionsFor(int, java.util.concurrent.TimeUnit) 两个方法来设置缓存的时效</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs json">configurations.all <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// 每隔24小时检查远程依赖是否存在更新</span><br>    resolutionStrategy.cacheChangingModulesFor <span class="hljs-number">24</span><span class="hljs-punctuation">,</span> &#x27;hours&#x27;<br>    <span class="hljs-comment">// 每隔10分钟..</span><br>    <span class="hljs-comment">// resolutionStrategy.cacheChangingModulesFor 10, &#x27;minutes&#x27;</span><br>    <span class="hljs-comment">// 采用动态版本声明的依赖缓存10分钟</span><br>    resolutionStrategy.cacheDynamicVersionsFor <span class="hljs-number">10</span>*<span class="hljs-number">60</span><span class="hljs-punctuation">,</span> &#x27;seconds&#x27;<br><span class="hljs-punctuation">&#125;</span><br><br>dependencies <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// 添加changing: true</span><br>    compile group<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;group&quot;</span><span class="hljs-punctuation">,</span> name<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;module&quot;</span><span class="hljs-punctuation">,</span> version<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.1-SNAPSHOT&quot;</span><span class="hljs-punctuation">,</span> changing<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>    <span class="hljs-comment">// 简写方式</span><br>    <span class="hljs-comment">// compile(&#x27;group:module:1.1-SNAPSHOT&#x27;) &#123; changing = true &#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="内置依赖"><a href="#内置依赖" class="headerlink" title="内置依赖"></a>内置依赖</h3><p>跟随 Gradle 发行包或者基于 Gradle API 的一些依赖，通常在插件开发时使用，当前提供了如下三种:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json"> dependencies <span class="hljs-punctuation">&#123;</span><br>   <span class="hljs-comment">// 加载Gradle自带的groovy作为依赖</span><br>   compile localGroovy()<br><br>   <span class="hljs-comment">// 使用Gradle API作为依赖</span><br>   compile gradleApi()<br><br>   <span class="hljs-comment">// 使用 Gradle test-kit API 作为依赖</span><br>   testCompile gradleTestKit()<br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="ext"><a href="#ext" class="headerlink" title="ext"></a>ext</h3><p>在 Gradle 领域模型中所有被增强的对象能够拥有自己定义的属性. 这包括，但不仅限于 projects, tasks, 还有 sourceSets .Project 对象可以添加，读取，更改扩展的属性. 另外，使用 ext 扩展块可以一次添加多个属性。</p><p>举个例子，以 build.gradle 为例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">ext <span class="hljs-punctuation">&#123;</span><br>    springVersion = <span class="hljs-string">&quot;3.1.0.RELEASE&quot;</span><br>    emailNotification = <span class="hljs-string">&quot;build@master.org&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h3><p>apply(options: Map&lt;String, ?&gt;) 我们通过该方法使用插件或者是其他脚本，options里主要选项有：</p><blockquote><p>from： 使用其他脚本，值可以为 Project.uri(Object) 支持的路径<br>plugin：使用其他插件，值可以为插件 id 或者是插件的具体实现类</p></blockquote><p>举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">apply plugin: <span class="hljs-string">&#x27;com.android.application&#x27;</span><br><span class="hljs-comment">// 使用插件，MyPluginImpl 就是一个Plugin接口的实现类</span><br>apply plugin: MyPluginImpl<br><br><span class="hljs-comment">// 引用其他gradle脚本，push.gradle就是另外一个gradle脚本文件</span><br>apply from: <span class="hljs-string">&#x27;./push.gradle&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="sourceSets"><a href="#sourceSets" class="headerlink" title="sourceSets"></a>sourceSets</h3><h3 id="archivesBaseName"><a href="#archivesBaseName" class="headerlink" title="archivesBaseName"></a>archivesBaseName</h3><p>配置生成包的名称</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;文件说明&quot;&gt;&lt;a href=&quot;#文件说明&quot; class=&quot;headerlink&quot; title=&quot;文件说明&quot;&gt;&lt;/a&gt;文件说明&lt;/h</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.yahyav2rayssr.top/categories/Java/"/>
    
    <category term="gradle" scheme="https://blog.yahyav2rayssr.top/categories/Java/gradle/"/>
    
    
    <category term="gradle" scheme="https://blog.yahyav2rayssr.top/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title>Gradle 安装配置</title>
    <link href="https://blog.yahyav2rayssr.top/posts/398308f9/"/>
    <id>https://blog.yahyav2rayssr.top/posts/398308f9/</id>
    <published>2024-04-14T10:46:48.133Z</published>
    <updated>2024-04-14T10:46:48.133Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="官网地址"><a href="#官网地址" class="headerlink" title="官网地址"></a>官网地址</h2><p><a href="https://gradle.org/releases">https://gradle.org/releases</a></p><h2 id="JDK-版本兼容性一览"><a href="#JDK-版本兼容性一览" class="headerlink" title="JDK 版本兼容性一览"></a>JDK 版本兼容性一览</h2><p>参考链接：<a href="https://docs.gradle.org/current/userguide/compatibility.html#compatibility">https://docs.gradle.org/current/userguide/compatibility.html#compatibility</a></p><table><thead><tr><th>Java version</th><th>First Gradle version to support it</th></tr></thead><tbody><tr><td>8</td><td>2.0</td></tr><tr><td>9</td><td>4.3</td></tr><tr><td>10</td><td>4.7</td></tr><tr><td>11</td><td>5.0</td></tr><tr><td>12</td><td>5.4</td></tr><tr><td>13</td><td>6.0</td></tr><tr><td>14</td><td>6.3</td></tr><tr><td>15</td><td>6.7</td></tr><tr><td>16</td><td>7.0</td></tr><tr><td>17</td><td>7.3</td></tr><tr><td>18</td><td>7.5</td></tr><tr><td>19</td><td>7.6</td></tr><tr><td>20</td><td>8.1 ⚠</td></tr></tbody></table><p>⚠: Indicates that the Java version can be used for compilation and tests, but not yet running Gradle itself.</p><h2 id="windows-安装"><a href="#windows-安装" class="headerlink" title="windows 安装"></a>windows 安装</h2><h2 id="linux-安装"><a href="#linux-安装" class="headerlink" title="linux 安装"></a>linux 安装</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;官网地址&quot;&gt;&lt;a href=&quot;#官网地址&quot; class=&quot;headerlink&quot; title=&quot;官网地址&quot;&gt;&lt;/a&gt;官网地址&lt;/h</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.yahyav2rayssr.top/categories/Java/"/>
    
    <category term="gradle" scheme="https://blog.yahyav2rayssr.top/categories/Java/gradle/"/>
    
    
    <category term="gradle" scheme="https://blog.yahyav2rayssr.top/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://blog.yahyav2rayssr.top/posts/0/"/>
    <id>https://blog.yahyav2rayssr.top/posts/0/</id>
    <published>2024-04-14T10:46:48.133Z</published>
    <updated>2024-04-14T10:46:48.133Z</updated>
    
    <content type="html"><![CDATA[<h2 id="后端工程"><a href="#后端工程" class="headerlink" title="后端工程"></a>后端工程</h2><h2 id="前端工程"><a href="#前端工程" class="headerlink" title="前端工程"></a>前端工程</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;后端工程&quot;&gt;&lt;a href=&quot;#后端工程&quot; class=&quot;headerlink&quot; title=&quot;后端工程&quot;&gt;&lt;/a&gt;后端工程&lt;/h2&gt;&lt;h2 id=&quot;前端工程&quot;&gt;&lt;a href=&quot;#前端工程&quot; class=&quot;headerlink&quot; title=&quot;前端工程&quot;&gt;&lt;/a</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>苹果软件 alfred 使用教程</title>
    <link href="https://blog.yahyav2rayssr.top/posts/28aa3ae1/"/>
    <id>https://blog.yahyav2rayssr.top/posts/28aa3ae1/</id>
    <published>2024-04-14T10:46:48.131Z</published>
    <updated>2024-04-14T10:46:48.131Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://sspai.com/post/32979">从零开始学习 Alfred：基础功能及设置</a></p><p><a href="https://v2ex.com/t/913194">Mac Everything 文件搜索工具，效率神器推荐</a></p><h2 id="视频教程"><a href="#视频教程" class="headerlink" title="视频教程"></a>视频教程</h2><p><a href="https://www.bilibili.com/video/BV1fK4y1H7kV/?spm_id_from=333.788&vd_source=3893b0277053b206b8f4177198a5e3ca">【macOS究极强化】全网最简单！Alfred快速上手</a></p><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><p><a href="https://blog.csdn.net/boildoctor/article/details/111473912">mac使用Alfred搜索外接移动硬盘失败的解决方法</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;参考链接&quot;&gt;&lt;a href=&quot;#参考链接&quot; class=&quot;headerlink&quot; title=&quot;参考链接&quot;&gt;&lt;/a&gt;参考链接&lt;/h</summary>
      
    
    
    
    <category term="黑苹果" scheme="https://blog.yahyav2rayssr.top/categories/%E9%BB%91%E8%8B%B9%E6%9E%9C/"/>
    
    
    <category term="黑苹果" scheme="https://blog.yahyav2rayssr.top/tags/%E9%BB%91%E8%8B%B9%E6%9E%9C/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://blog.yahyav2rayssr.top/posts/0/"/>
    <id>https://blog.yahyav2rayssr.top/posts/0/</id>
    <published>2024-04-14T10:46:48.131Z</published>
    <updated>2024-04-14T10:46:48.131Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="image-syncer-下载"><a href="#image-syncer-下载" class="headerlink" title="image-syncer 下载"></a>image-syncer 下载</h2><p>下载地址：<a href="https://github.com/AliyunContainerService/image-syncer/releases/tag/v1.3.1">https://github.com/AliyunContainerService/image-syncer/releases/tag/v1.3.1</a></p><p>命令行获取方式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://github.com/AliyunContainerService/image-syncer/releases/download/v1.3.1/image-syncer-v1.3.1-linux-amd64.tar.gz<br></code></pre></td></tr></table></figure><h2 id="顺丰云镜像地址解析"><a href="#顺丰云镜像地址解析" class="headerlink" title="顺丰云镜像地址解析"></a>顺丰云镜像地址解析</h2><p>一、vpc 网络（内网）pull镜像，请参考下面进行检查<br>（1）检测 DNS 解析：<code>ping cloudpricicd-sit.sf-express.com</code>，若解析 IP 不是 10.207.192.12，请追加以下配置到 hosts。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">10.207.192.12 cloudpricicd-sit.sf-express.com<br></code></pre></td></tr></table></figure><p>（2）检测网络：<code>telnet cloudpricicd-sit.sf-express.com 80/443</code>，若网络不通，请开墙至 10.207.192.12，端口 80，443。</p><h2 id="镜像同步编写规则"><a href="#镜像同步编写规则" class="headerlink" title="镜像同步编写规则"></a>镜像同步编写规则</h2><p>同步镜像规则字段，其中条规则包括一个源仓库（键）和一个目标仓库（值）</p><p>同步的最大单位是仓库（repo），不支持经过一条规则同步整个namespace以及registry</p><p>源仓库和目标仓库的格式与docker pull&#x2F;push命令使用的镜像url相似（registry&#x2F;namespace&#x2F;repository:tag）</p><p>源仓库和目标仓库（若是目标仓库不为空字符串）都至少包含registry&#x2F;namespace&#x2F;repository</p><p>源仓库字段不能为空，若是须要将一个源仓库同步到多个目标仓库须要配置多条规则</p><p>目标仓库名能够和源仓库名不一样（tag也能够不一样），此时同步功能相似于：<code>docker pull + docker tag + docker push</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">&quot;quay.io/coreos/kube-rbac-proxy&quot;: &quot;quay.io/ruohe/kube-rbac-proxy&quot;,<br>&quot;xxxx&quot;:&quot;xxxxx&quot;,<br>&quot;xxx/xxx/xx:tag1,tag2,tag3&quot;:&quot;xxx/xxx/xx&quot;<br></code></pre></td></tr></table></figure><p>当源仓库字段中不包含 tag 时，表示将该仓库全部 tag 同步到目标仓库，此时目标仓库不能包含tag</p><p>当源仓库字段中包含 tag 时，表示只同步源仓库中的一个 tag 到目标仓库，若是目标仓库中不包含tag，则默认使用源tag</p><p>源仓库字段中的 tag 能够同时包含多个（好比”a&#x2F;b&#x2F;c:1,2,3”），tag 之间经过”,”隔开，此时目标仓库不能包含 tag，而且默认使用原来的 tag</p><p>当目标仓库为空字符串时，会将源镜像同步到默认 registry 的默认 namespace 下，而且 repo 以及 tag 与源仓库相同，默认 registry 和默认 namespace 能够经过命令行参数以及环境变量配置</p><h2 id="命令使用"><a href="#命令使用" class="headerlink" title="命令使用"></a>命令使用</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./image-syncer --proc=10 --config=./harbor-to-acr.json --registry=registry.cn-beijing.aliyuncs.com --namespace=image-syncer --retries=10 --log=./log<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">./image-syncer <span class="hljs-attribute">--proc</span>=1 <span class="hljs-attribute">--auth</span>=./config.json <span class="hljs-attribute">--images</span>=./image-syncer.json <span class="hljs-attribute">--namespace</span>=xx1 <span class="hljs-attribute">--registry</span>=harbor2.xx.com<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;image-syncer-下载&quot;&gt;&lt;a href=&quot;#image-syncer-下载&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    
  </entry>
  
</feed>
