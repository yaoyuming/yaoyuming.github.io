<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yahya的博客</title>
  
  <subtitle>学习笔记</subtitle>
  <link href="https://blog.yahyav2rayssr.top/atom.xml" rel="self"/>
  
  <link href="https://blog.yahyav2rayssr.top/"/>
  <updated>2023-05-03T03:06:23.466Z</updated>
  <id>https://blog.yahyav2rayssr.top/</id>
  
  <author>
    <name>Yahya</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>黑苹果安装教程</title>
    <link href="https://blog.yahyav2rayssr.top/posts/479c48ec/"/>
    <id>https://blog.yahyav2rayssr.top/posts/479c48ec/</id>
    <published>2023-05-03T03:06:23.466Z</published>
    <updated>2023-05-03T03:06:23.466Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="镜像下载"><a href="#镜像下载" class="headerlink" title="镜像下载"></a>镜像下载</h2><p><a href="https://sysin.org/blog/macOS-Monterey/">macOS Monterey 12.6.3 (21G419) 正式版 ISO、IPSW、PKG 下载</a></p><h2 id="BIOS-设置"><a href="#BIOS-设置" class="headerlink" title="BIOS 设置"></a>BIOS 设置</h2><h3 id="官方建议"><a href="#官方建议" class="headerlink" title="官方建议"></a>官方建议</h3><p>OpenCore 官方建议的 10 代 CPU 架构的 BISO 调整如下：</p><p><strong>禁用</strong></p><ul><li>Fast Boot</li><li>Secure Boot</li><li>Serial&#x2F;COM Port</li><li>Parallel Port</li><li>VT-d (如果设置了 <code>DisableIoMapper</code> 为 YES，则可以打开这个选项)</li><li>CSM</li><li>Thunderbolt (建议关闭雷电，第一次安装可能出现玄学问题)</li><li>Intel SGX</li><li>Intel Platform Trust</li><li>CFG Lock</li></ul><p><strong>开启</strong></p><ul><li>VT-x</li><li>Above 4G decoding</li><li>Hyper-Threading</li><li>Execute Disable Bit</li><li>EHCI&#x2F;XHCI Hand-off</li><li>OS type: Windows 8.1&#x2F;10 UEFI Mode</li><li>DVMT Pre-Allocated(iGPU Memory): 64MB</li><li>SATA Mode: AHCI</li></ul><h3 id="ASUS-11th"><a href="#ASUS-11th" class="headerlink" title="ASUS-11th"></a>ASUS-11th</h3><ul><li>disable igpu（Otherwise, you will not be able to sleep normally）</li><li>disable Intel Rapid Storage Technology 最后需要按键盘上的<code>F10</code>键保存退出即可.</li></ul><h3 id="ASUS-10th"><a href="#ASUS-10th" class="headerlink" title="ASUS-10th"></a>ASUS-10th</h3><ul><li>Disabe</li><li>Fast Boot</li><li>VT-d</li><li>CSM</li><li>Intel SGX</li><li>CFG Lock</li><li>Enable</li><li>VT-x (no option in BIOS, it’s enabled by default)</li><li>Above 4G decoding</li><li>Hyper-Threading</li><li>EHCI&#x2F;XHCI Hand-off</li><li>OS type: Windows UEFI Mode (Clear Secure Boot Keys or choose <code>Other</code> type)</li><li>DVMT Pre-Allocated(iGPU Memory): 64MB 最后需要按键盘上的<code>F10</code>键保存退出即可.</li></ul><h3 id="MSI-10th"><a href="#MSI-10th" class="headerlink" title="MSI-10th"></a>MSI-10th</h3><ul><li>Boot – Fast Boot -&gt; Disabled</li><li>Advanced – PCH Sorage Configuration – SATA Mode Selection -&gt; AHCI</li><li>Boot – CSM(Compatibility Support Module) -&gt; Disabled</li><li>Ai Tweaker – Ai Overclock Tuner -&gt; XMP</li><li>Advanced – CPU configuration – Intel Virtualization Technology -&gt; Disabled</li><li>Advanced – System Agent (SA) Configuration – VT-D -&gt; Disabled</li><li>Advanced – System Agent (SA) Configuration – Above 4G Decoding -&gt; Disabled</li><li>Advanced – System Agent (SA) Configuration – Graphics Configuration – Primary Display -&gt; CPU Graphics 集成显卡配置1</li><li>Advanced – System Agent (SA) Configuration – Graphics Configuration – iGPU Multi-Monitor -&gt; Disabled 集成显卡配置2</li><li>Advanced – PCH configruation - IOAPIC 24-119 Entries -&gt; Enabled</li><li>Advanced – PCH-FW Configuration – TPM Device Selection -&gt; Discrete TPM</li><li>Advanced – APM Configuration – ErP Ready -&gt; Disabled</li><li>Advanced – Network Stack Configuration – Network Stack -&gt; Disabled</li><li>Boot – Secure Boot – OS Type – Other OS 最后需要按键盘上的<code>F10</code>键保存退出即可.</li></ul><h3 id="MSI-11th"><a href="#MSI-11th" class="headerlink" title="MSI-11th"></a>MSI-11th</h3><ul><li>Boot – Fast Boot -&gt; Disabled</li><li>Advanced – PCH Sorage Configuration – SATA Mode Selection -&gt; AHCI</li><li>Boot – CSM(Compatibility Support Module) -&gt; Disabled</li><li>Ai Tweaker – Ai Overclock Tuner -&gt; XMP</li><li>Advanced – CPU configuration – Intel Virtualization Technology -&gt; Disabled</li><li>Advanced – System Agent (SA) Configuration – VT-D -&gt; Disabled</li><li>Advanced – System Agent (SA) Configuration – Above 4G Decoding -&gt; Disabled</li><li>Advanced – System Agent (SA) Configuration – Graphics Configuration – Primary Display -&gt; PCIE 独立显卡配置 1</li><li>Advanced – System Agent (SA) Configuration – Graphics Configuration – iGPU Multi-Monitor -&gt; Enabled 独立显卡配置 2</li><li>Advanced – PCH configruation - IOAPIC 24-119 Entries -&gt; Enabled</li><li>Advanced – PCH-FW Configuration – TPM Device Selection -&gt; Discrete TPM</li><li>Advanced – APM Configuration – ErP Ready -&gt; Disabled</li><li>Advanced – Network Stack Configuration – Network Stack -&gt; Disabled</li><li>Boot – Secure Boot – OS Type – Other OS 最后需要按键盘上的<code>F10</code>键保存退出即可.</li></ul><h2 id="USB-定制"><a href="#USB-定制" class="headerlink" title="USB 定制"></a>USB 定制</h2><p>1、从仓库下载 「Windows.exe」到 Windows 平台，双击即可运行</p><p> <a href="https://github.com/Win10Q/hackintosh-with-B560-msi-asus/blob/main/img-storage/%E5%AE%9A%E5%88%B6-1.png"><img src="/posts/479c48ec/定制-1.png" alt="Image text" style="zoom:67%;"></a></p><p>2、输入<code>D</code>然后回车来探测电脑上的端口</p><p> <a href="https://github.com/Win10Q/hackintosh-with-B560-msi-asus/blob/main/img-storage/%E5%AE%9A%E5%88%B6-2.png"><img src="/posts/479c48ec/定制-2.png" alt="Image text" style="zoom:67%;"></a></p><p>3、分别在各个 USB 接口插入<code>USB2.0</code>和<code>USB 3.X</code>的设备，每插入一次停留<code> 5 秒钟</code>，如果有<code>Type-C</code>设备的话，正反都要分别插入记录都挨个插一遍后，输入<code> B</code> 回车即可返回主菜单</p><p> <a href="https://github.com/Win10Q/hackintosh-with-B560-msi-asus/blob/main/img-storage/%E5%AE%9A%E5%88%B6-3.png"><img src="/posts/479c48ec/定制-3.png" alt="Image text" style="zoom:67%;"></a></p><p>4、回到主菜单，输入<code>S</code>来查看端口探测的结果，此时结果查看感觉没问题的话，输入<code>K</code>回车，即可导出<code>UTBMap.kext</code>文件（一般情况下会保存在当前程序的同级目录下） <a href="https://user-images.githubusercontent.com/99300084/206326768-84ef300a-e64e-4978-9e30-9c955d537a28.png"><img src="/posts/479c48ec/206326768-84ef300a-e64e-4978-9e30-9c955d537a28.png" alt="image" style="zoom:67%;"></a></p><p>5、除了上述生成的<code>UTBMap.kext</code>文件以外，我们还需要配合<code>USBToolBox.kext</code>使用（仓库）将上述两个 Kext 放到 OC 的 Kexts 文件夹下面并加载，去除 usbport.kext</p><p> <a href="https://github.com/Win10Q/hackintosh-with-B560-msi-asus/blob/main/img-storage/%E5%AE%9A%E5%88%B6-5.png"><img src="/posts/479c48ec/定制-5.png" alt="Image text" style="zoom:67%;"></a></p><p>6、重启即可生效，至此你的 USB 基本上定制完了，尽情使用吧。</p><h2 id="蓝牙配置"><a href="#蓝牙配置" class="headerlink" title="蓝牙配置"></a>蓝牙配置</h2><blockquote><p>2021 年 6 月初的 WWDC2021 上，苹果发布了下一代 macOS，代号 Monterey（蒙特雷），大版本号 12.0。爱折腾爱尝鲜的黑苹果小伙伴们已经通过各种折腾安装上了新版 macOS。但是很快出现了各种各样的驱动问题，其中比较突出的是蓝牙掉驱动并且卡跑码问题。Monterey 大幅精简了蓝牙框架，原因是 macOS 12.0 砍掉了 2015 年之前机型的支持，另外可能也是为通用控制做准备。</p><p>很快，OC 团队做出反应添加了解决方案。说起来也简单，就是新加一个驱动：<a href="http://imacos.top/2021/03/18/brcmpatchram-kext/">BlueToolFixup.kext</a>，然后在 macOS 12.0 取消蓝牙 injector（注入器）的加载。</p><p>「注意」</p><ul><li>BlueToolFixup.kext 目前是 <a href="http://imacos.top/2021/03/18/brcmpatchram-kext/">BrcmPatchRAM</a> 文件包中的一部分，新版本发布会直接包括这个文件，英特尔蓝牙也需要这个驱动；</li><li>使用奋威 T919 或其它免驱动型网卡的，无需担心蓝牙兼容性问题，在 Monterey 里依旧无需任何驱动。</li></ul></blockquote><img src="/posts/479c48ec/61c9107ad91f44016.jpg_e1080.jpg" alt="BCM94360Z4 BCM94360Z3 黑苹果无线网卡驱动指南" style="zoom:50%;"><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ul><li>将 <a href="http://imacos.top/2019/07/02/1534/">Lilu</a> 升级到 1.5.7 及以上；</li><li>博通卡：将 <a href="http://imacos.top/2021/03/18/brcmpatchram-kext/">BrcmPatchRAM</a> 升级到 2.6.1 及以上；</li><li>英特尔：将 <a href="http://imacos.top/2020/03/07/intelbluetoothfirmware-kext/">IntelBluetoothFirmware</a> 升级到 2.0.1 及以上；</li><li>关闭 OpenCore 的 XhciPortLimit，位于 config → Kernel → Quirks 区域，在升级或安装 macOS Monterey 之前，建议定制好 USB 接口；</li><li>将 BlueToolFixup.kext 放到 Clover&#x2F;OpenCore 对应的 kext 目录<ul><li>OpenCore：&#x2F;EFI&#x2F;OC&#x2F;Kexts&#x2F;</li><li>Clover：&#x2F;EFI&#x2F;CLOVER&#x2F;Kexts&#x2F;Other&#x2F;</li></ul></li><li>最后，按照下一章节的说明修改 config.plist 文件。</li></ul><h4 id="Clover-方法"><a href="#Clover-方法" class="headerlink" title="Clover 方法"></a>Clover 方法</h4><p>Clover 使用文件夹名称来区别各个系统加载的 kext，所以可以这么操作：</p><ul><li>博通卡：把 BrcmBluetoothInjector.kext 从 &#x2F;EFI&#x2F;CLOVER&#x2F;Kexts&#x2F;Other&#x2F; 挪到 &#x2F;EFI&#x2F;CLOVER&#x2F;Kexts&#x2F;11.0&#x2F;，将 BlueToolFixup.kext 放到 &#x2F;EFI&#x2F;CLOVER&#x2F;Kexts&#x2F;12.0&#x2F;</li><li>英特尔：把 IntelBluetoothInjector.kext 从 &#x2F;EFI&#x2F;CLOVER&#x2F;Kexts&#x2F;Other&#x2F; 挪到 &#x2F;EFI&#x2F;CLOVER&#x2F;Kexts&#x2F;11.0&#x2F;，将 BlueToolFixup.kext 放到 &#x2F;EFI&#x2F;CLOVER&#x2F;Kexts&#x2F;12.0&#x2F;</li></ul><p>如果没有 11.0&#x2F;12.0 的文件夹，自己新建就可以。这样一来 Clover 在引导 11.0 时会加载 Injector，但是引导 12.0 时则不会加载 Injector，会加载 BlueToolFixup.kext 。其它 Kext 文件继续放在 Other 目录无影响。</p><p>「注意」以上方法如果不起作用，那么在迁移到 Monterey 时，需要手动从 Kext 目录移除 Injector 文件。「提示」如果你没有从 12.0 切换到低版本 macOS 的需求，xxxxInjector .kext 可以直接删除（无论博通和英特尔都一样），无需设置文件夹；</p><h4 id="OpenCore-方法"><a href="#OpenCore-方法" class="headerlink" title="OpenCore 方法"></a>OpenCore 方法</h4><p>OpenCore 用户推荐使用另一种方法，利用 OpenCore 的最小内核（MinKernel）和最大内核（MaxKernel）特性，给 injector 设置最大内核 20.99.99，也就是对应 macOS Big Sur 11.0，给 BlueToolFixup.kext 设置最小内核 21.0.0，对应 macOS Monterey 12.0。</p><p>「提示」如果你没有从 12.0 切换到低版本 macOS 的需求，xxxxInjector .kext 可以直接删除（无论博通和英特尔都一样），也无需设置最大最小内核；</p><p>可以直接看图操作：</p><h5 id="博通免驱网卡"><a href="#博通免驱网卡" class="headerlink" title="博通免驱网卡"></a>博通免驱网卡</h5><blockquote><p>升级 macos 12 方式：</p><p>使用 <code>BlueToolFixup.kext</code> 替代掉 <code>BrcmBluetoothInjector.kext</code> 即可。</p><p>最终使用驱动如下：</p><ul><li>BlueToolFixup.kext</li><li>BrcmFirmwareData.kext</li><li>BrcmPatchRAM3.kext</li></ul></blockquote><img src="/posts/479c48ec/1642342926-%E6%88%AA%E5%B1%8F2022-01-16-%E4%B8%8B%E5%8D%8810.08.25.jpg" class alt="img"><h5 id="Intel无线网卡"><a href="#Intel无线网卡" class="headerlink" title="Intel无线网卡"></a>Intel无线网卡</h5><blockquote><p>升级 macos 12 方式：</p><p>使用 <code>BlueToolFixup.kext</code> 替代掉 <code>IntelBluetoothInjector.kext</code> 即可。</p><p>BlueToolFixup.kext 可以从这里下载：<a href="https://github.com/acidanthera/BrcmPatchRAM/releases">https://github.com/acidanthera/BrcmPatchRAM/releases</a></p><p>最终使用驱动如下：</p><ul><li>BlueToolFixup.kext</li><li>IntelBluetoothFirmware.kext</li></ul></blockquote><img src="/posts/479c48ec/1642342990-%E6%88%AA%E5%B1%8F2022-01-16-%E4%B8%8B%E5%8D%8810.17.21.jpg" class alt="img"><p>完成后，记得保存然后重启，如果无效，请关机冷启动，清除 Kext 缓存，或尝试重置 NVRAM。</p><h2 id="设置启动参数"><a href="#设置启动参数" class="headerlink" title="设置启动参数"></a>设置启动参数</h2><blockquote><p>下面是 macOS 系统可以使用的启动参数列表，功能解释同时列出，使用要点有两个：</p><ul><li>参数之间以空格分隔开；</li><li>在一个参数中，- 和 &#x3D; 只会同时存在一个，例如：debug&#x3D;0x100，-xcpm。即：有了 &#x3D; 号就不会有 - 号，反之亦然，新手请务必牢记。</li></ul></blockquote><p>参数说明一览：</p><ul><li>* 代表推荐配置</li><li>&amp; 代表可选配置</li><li>空可选不常用配置</li></ul><table><thead><tr><th>常用</th><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>*</td><td>agdpmod&#x3D;pikera</td><td>Navi 核心避免黑屏使用，其它显卡如 RX 400&#x2F;500，Vega 56&#x2F;64 无需此参数</td></tr><tr><td>*</td><td>keepsyms&#x3D;1</td><td>辅助上一个参数</td></tr><tr><td>*</td><td>debug&#x3D;0x100 或 debug&#x3D;0x200</td><td>防止自动重启，禁用五国图直接输出错误信息</td></tr><tr><td>*</td><td>-v</td><td>用于安装前期启动时显示代码界面，在安装macOS时，应添加此参数以获取明确的错误信息。</td></tr><tr><td></td><td>-x</td><td>安全启动模式，类似 Windows 的安全模式。此模式下 macOS 会尽可能少的加载 Kext 文件。</td></tr><tr><td></td><td>-s</td><td>单用户模式。这一模式将会启动终端模式，可以用这种方式修复你的系统。</td></tr><tr><td></td><td>-f</td><td>关闭 Kext 缓存模式，等于强制重建 Kext 缓存。</td></tr><tr><td></td><td>-l</td><td>在系统日志中输出内存泄漏的相关记录。</td></tr><tr><td></td><td>arch&#x3D;x86_64</td><td>该参数会强制 macOS 以 64 位内核模式启动，在 10.15 及以上没有什么作用。对应的是 arch&#x3D;i386，将强制以 32 位模式启动。</td></tr><tr><td></td><td>iog&#x3D;0x0</td><td>此参数将强制 MacBook 机型在合盖后，接入外部显示器和键盘时系统保持开启状态；但同时，此参数会在接入外部显示器时关闭笔记本的内屏，这可能对保护屏幕以及省电有帮助。</td></tr><tr><td></td><td>platform&#x3D;X86PC</td><td>此参数将强制禁用 ACPI 电源管理。而 platform&#x3D;ACPI 将强制启用 ACPI 电源管理。</td></tr><tr><td></td><td>idlehalt&#x3D;1</td><td>强制 CPU 进入低功耗模式。</td></tr><tr><td></td><td>debug&#x3D;0x100</td><td>此参数用于禁用五国图，把 Kernel Panic（内核崩溃）的相关数据直接输出在屏幕上，可用于禁止发生内核崩溃时自动重启，这将对排查错误有助益，这一参数还可以用于 Core Dump。其它可用值还有：0x200，这可以在内核崩溃后使用快捷键（C 继续、R 重启、K 进入 KDB）；0x400 可用于触发内核崩溃后自动进行 Core Dump；0x2000 将只生成并发送 Kernel Panic 日志，不包括完整的 Core Dump。除此之外还有很多其他值，但一般以上几个已经足够安装 macOS 时使用。</td></tr><tr><td>*</td><td>keepsyms&#x3D;1</td><td>此参数可以为 debug&#x3D;0xN 提供更多错误信息。</td></tr><tr><td></td><td>dart&#x3D;0</td><td>此参数会关闭 64 位硬件上的系统 PCI 地址映射器（DART）。DART 在拥有 2GB 以上物理内存的机器上是必需的，在默认情况下 DART 都是加载的。当使用 Clover 引导系统且 BIOS 无法关闭 VT-d 时可尝试此参数。gg</td></tr><tr><td></td><td>darkwake&#x3D;0</td><td>在拥有完全定制好的 USB 接口时完全不必使用此参数，除非你真的需要操控 HID Tickle 行为。darkwake 是 XNU 的一部分，XNU 是一个混合内核，是 Darwin 系统的一部分（macOS 和 iOS 均使用了 Darwin ）。因启动参数仅用于按位计算，所以可能的值有 0、1、2、3、256、257、258、259 等等以此类推，也因此 darkwake&#x3D;8 实际等于 darkwake&#x3D;0；darkwake&#x3D;10 实际等于 darkwake&#x3D;2，XNU 自 2782.1.97 起删除了这两个值（8 和 10），故这两个值在 Yosemite 及更高版本 macOS 中已失效。黑苹果建议关闭电能小憩，使用 pmset 命令调试休眠。如果实在需要使用，可尝试 darkwake&#x3D;0 或 3。更多信息可参考<a href="https://heipg.cn/link/aHR0cHM6Ly93d3cuaW5zYW5lbHltYWMuY29tL2ZvcnVtL3RvcGljLzM0MjAwMi1kYXJrd2FrZS1vbi1tYWNvcy1jYXRhbGluYS1ib290LWFyZ3MtZGFya3dha2U4LWRhcmt3YWtlMTAtYXJlLW9ic29sZXRlLw==">外网这篇文章</a>。</td></tr><tr><td></td><td>nvda_drv&#x3D;1</td><td>用于启用英伟达显卡驱动，包括开启 NVIDIA Web Driver</td></tr><tr><td>*</td><td>nv_disable&#x3D;1</td><td>关闭英伟达显卡驱动，请勿与 nvda_drv&#x3D;1 同时使用。</td></tr><tr><td></td><td>-no_compat_check</td><td>用于禁用 macOS 兼容性检查。例如，macOS 11.0 BigSur 不再支持 iMac 2014 年之前推出的机型，此时可使用此参数以禁止兼容性检查，以达到安装目的。</td></tr><tr><td></td><td><del>kext-dev-mode&#x3D;1</del></td><td>开启 Kext 开发模式，将允许加载未签名的 Kext。在 Yosemite 及更高版本 macOS 中，默认情况下出于安全原因，只会加载已签名的 Kext。此参数可以在 Yosemite 更改此设置，允许加载未签名的 Kext。在比 Yosemite 更新的 macOS 版本（El Capitan）中，引入了另一种安全机制，即系统完整性保护（SIP，也称为 Rootless），该系统会防止修改系统文件，加载未签名的 Kext 等。SIP 可以通过注入正确的 CSR NVRAM 变量来禁用，也可以通过恢复分区运行命令行禁用它。总之，在 10.11 及以后的系统中，已无需此参数。</td></tr><tr><td></td><td>cpus&#x3D;1</td><td>CPU单核模式，用于限制系统中活动 CPU 的数量。苹果的开发者工具有一个选项用于启用或禁用系统中的一些 CPU，但你也可以通过这个参数指定要使用的 CPU 数量。在某些情况下，这也许有助于省电，或者你正在调试 X86 电源驱动。</td></tr><tr><td></td><td>-xcpm</td><td>用于强制开启 xcpm 以实现 CPU 原生电源管理，一般用于较老架构的 CPU，例如 Ivy Bridge。</td></tr><tr><td></td><td>-gux_no_idle</td><td>用于终止英特尔芯片的空闲模式（idle-mode）功能。</td></tr><tr><td></td><td>slide&#x3D;N</td><td>用于引导系统时分配系统内核在内存中的位置，Clover 在一排加号处卡住可以尝试 slide&#x3D;0，<a href="https://heipg.cn/tutorial/what-is-efi-file.html#%E5%85%B3%E4%BA%8E-slide-%E5%80%BC">其它参考：Slide 值的说明</a>。</td></tr><tr><td></td><td>rootless&#x3D;0</td><td>使用 Rootless 模式，请勿在 El Capitan 及更高版本的 macOS 上使用，因为从 El Capitan 起引入了 SIP（系统完整性保护）机制。一般情况下关闭 SIP 即可达成你的目的。</td></tr><tr><td></td><td><del>-disablegfxfirmware</del></td><td>在 WhateverGreen.kext 出现之前，该参数用于关闭苹果的 iGPU firmware 以正确驱动 Intel 核显，在 macOS 10.13 及更高版本中已不使用。</td></tr><tr><td>&amp;</td><td>npci&#x3D;0x2000 或 npci&#x3D;0x3000</td><td>AMD BIOS 系统没有开启 Above 4G Decoding 时使用；此参数会禁用某些与 kIOPCIConfiguratorPFM64 相关的 PCI 调试，另一个相似的选择是 npci&#x3D;0x3000，后者还会禁用与 gIOPCITunnelledKey 相关的调试。当 X299 卡在 PCI Start Configuration 时，应使用此参数，因为存在与 PCI 通道有关的 IRQ 冲突。</td></tr><tr><td>*</td><td>brcmfx-aspm</td><td>解决蓝牙连线问题，结合 AirportBrcmFixup.kext 使用</td></tr><tr><td></td><td>igfxonln&#x3D;1</td><td>使用 HDMI 接口每次开机&#x2F;重启都需要重新插拔才能显示的，添加启动参数 igfxonln&#x3D;1</td></tr><tr><td>*</td><td>-wegnoegpu</td><td>禁用独显（针对笔记本机型）</td></tr></tbody></table><p>切换到 NVRAM 选项卡，右侧找到 7C436110-AB2A-4BBB-A880-FE41995C9F82，启动参数即显示在右方面板，目前配置情况如下：</p><img src="/posts/479c48ec/image-20230319214910914.png" alt="image-20230319214910914" style="zoom:67%;"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">常规模式</span><br>agdpmod=pikera keepsms=1 brcmfx-aspm npci=0x2000<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">调试模式</span><br>agdpmod=pikera keepsms=1 brcmfx-aspm -v debug=0x100 keepsyms=1 npci=0x2000<br></code></pre></td></tr></table></figure><h2 id="设置默认启动项"><a href="#设置默认启动项" class="headerlink" title="设置默认启动项"></a>设置默认启动项</h2><ul><li><p><code>config.plist</code> 勾上仿冒苹果快捷键 <code>PollAppleHotKey</code>，在启动选择界面，先选中要启动的项，然后按键盘的 <code>Ctrl</code> + <code>Enter</code> 进入系统即可</p><img src="/posts/479c48ec/image-20230319214520473.png" alt="image-20230319214520473" style="zoom: 67%;"></li><li><p>也有看到说在 <code>设置</code>-<code>启动磁盘</code> 可选择默认启动项,修改后重启</p></li></ul><h2 id="更新-OC"><a href="#更新-OC" class="headerlink" title="更新 OC"></a>更新 OC</h2><ul><li>下载最新版本<code>OCAT</code>(<a href="https://github.com/ic005k/OCAuxiliaryTools/releases">https://github.com/ic005k/OCAuxiliaryTools/releases</a>)</li><li>挂载你的<code>efi</code>分区（也叫<code>esp</code>分区） [<img src="/posts/479c48ec/%E6%9B%B4%E6%96%B0oc-1.jpg" class alt="Image text"></li><li>挂载后先不要着急打开，先把<code>OCAT</code>（即<code>OCAuxiliaryTools</code>）同步一下再打开 [<img src="/posts/479c48ec/%E6%9B%B4%E6%96%B0oc-2.jpg" class alt="Image text"></li><li>然后再打开<code>Config.plist</code>。首先点击全选，然后<code>检查kext</code>更新，更新<code>kext</code>，后点击选择<code>opencore版本</code>，选择<code>最新版</code>，<code>获取opencore</code>，后点击<code>同步</code> <code>保存</code>即可 [<img src="/posts/479c48ec/%E6%9B%B4%E6%96%B0oc-3.jpg" class alt="Image text"></li></ul><h2 id="生成三码"><a href="#生成三码" class="headerlink" title="生成三码"></a>生成三码</h2><p>1、同步完不必急着关闭<code>OCAT</code>，切换到<code>PL</code>选项卡</p><p><a href="https://github.com/Win10Q/hackintosh-with-B560-msi-asus/blob/main/img-storage/%E4%B8%89%E7%A0%81-1.png"><img src="/posts/479c48ec/三码-1.png" alt="Image text" style="zoom:67%;"></a></p><p>2、首先点击<code>生成</code>生成<code>三码</code>，然后点击<code>生成</code>生成<code>rom</code>，<code>保存``重启</code>即可</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://heipg.cn/tutorial/what-is-boot-args.html">黑苹果启动参数都是做什么用的？如何添加或删除？</a></p><p><a href="https://imacos.top/2022/01/19/1022-4/">更新macOS Monterey后遇到的各种Bug及解决方法合集（持续更新）</a></p><p><a href="http://imacos.top/2022/01/16/0354/">黑苹果修复博通&#x2F;英特尔蓝牙在macOS Monterey 12.0 正式版中失效的方法</a></p><p><a href="https://apple.sqlsec.com/6-%E5%AE%9E%E7%94%A8%E5%A7%BF%E5%8A%BF/6-7.html">macOS 12 蓝牙</a></p><p><a href="https://heipg.cn/tutorial/patching-intel-igpu-opencore.html">驱动英特尔核显，让黑苹果流畅运行「OpenCore专门篇」</a></p><p><a href="https://apple.sqlsec.com/">国光黑苹果入门安装教程</a></p><p><a href="https://www.bilibili.com/video/BV1yq4y1o7cT/?vd_source=3893b0277053b206b8f4177198a5e3ca">【黑苹果】手把手黑苹果安装教程-基于 OpenCore（持续更新中）</a></p><p><a href="https://mp.weixin.qq.com/s/uF6B4wKNL2uG9pSmH8nZZw">【黑苹果】macOS 12 Monterey 原版 OC 引导安装教程</a></p><p><a href="https://www.sqlsec.com/2021/07/opencore.html#%E6%B7%BB%E5%8A%A0%E5%BC%95%E5%AF%BC">国光 2021 年中的黑苹果组装方案以及驱动分享</a></p><p><a href="https://blog.daliansky.net/minisforum-HX90G-and-HX99G-macOS-Ventura-Installation-Tutorial.html#more">minisforum HX80G&#x2F;HX90G&#x2F;HX99G兼Ventura安装教程</a></p><h2 id="EFI-下载"><a href="#EFI-下载" class="headerlink" title="EFI 下载"></a>EFI 下载</h2><p><a href="https://github.com/Win10Q/hackintosh-with-B560-msi-asus">hackintosh-with-B560-msi-asus</a></p><p><a href="https://github.com/Win10Q/hackintosh-with-B560-msi-asus">ASUS-MSI-10-11-HACKINTOSH-OPENCORE</a></p><p><a href="https://github.com/sqlsec/AsRock-Z490-Steel-Legend-i7-10700">AsRock-Z490-Steel-Legend-i7-10700</a></p><p><a href="https://www.bilibili.com/read/cv16866050">国光 3k 元不到的 i9 极致性能的 ITX 黑苹果方案分享</a></p><p><a href="https://www.sqlsec.com/2021/08/b560m.html">国光 微星 B560M Big Sur 黑苹果记录体验</a></p><p><a href="https://www.bilibili.com/video/BV1iL411j7oC/?buvid=Z249572524E5C6EB4BC0A3BC9E9B43B2059F&is_story_h5=false&mid=qb0Tc188BMlV3OF7U8HM9Q==&p=1&plat_id=114&share_from=ugc&share_medium=iphone&share_plat=ios&share_session_id=F187CBE7-405F-4DAA-90C8-61F585568AC8&share_source=COPY&share_tag=s_i&timestamp=1678448208&unique_k=0AwuEE5&up_id=33242224&vd_source=3893b0277053b206b8f4177198a5e3ca">10400 msi b560黑苹果</a></p><p><a href="https://www.yuque.com/qwetrz007sh/ptugso/ez5ttc">【黑苹果安装教程】i7 10700+微星B460M 迫击炮 WIFI</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;镜像下载&quot;&gt;&lt;a href=&quot;#镜像下载&quot; class=&quot;headerlink&quot; title=&quot;镜像下载&quot;&gt;&lt;/a&gt;镜像下载&lt;/h</summary>
      
    
    
    
    <category term="黑苹果" scheme="https://blog.yahyav2rayssr.top/categories/%E9%BB%91%E8%8B%B9%E6%9E%9C/"/>
    
    
    <category term="黑苹果" scheme="https://blog.yahyav2rayssr.top/tags/%E9%BB%91%E8%8B%B9%E6%9E%9C/"/>
    
  </entry>
  
  <entry>
    <title>黑苹果装机配置</title>
    <link href="https://blog.yahyav2rayssr.top/posts/f0e37cbf/"/>
    <id>https://blog.yahyav2rayssr.top/posts/f0e37cbf/</id>
    <published>2023-05-03T03:06:23.466Z</published>
    <updated>2023-05-03T03:06:23.466Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="电脑配置"><a href="#电脑配置" class="headerlink" title="电脑配置"></a>电脑配置</h2><table><thead><tr><th>类型</th><th>型号</th><th>价格</th><th>渠道</th></tr></thead><tbody><tr><td>网卡</td><td>T919 BCM94360CD</td><td>150</td><td>闲鱼</td></tr><tr><td>显卡</td><td>蓝宝石 RX 460 4GB 超白金版</td><td>229</td><td>闲鱼</td></tr><tr><td>显卡</td><td>蓝宝石 RX 5700XT 8G 超白金 OC</td><td>800</td><td>闲鱼</td></tr><tr><td>内存条</td><td>镁光 3200 DDR4 32G</td><td>790</td><td>闲鱼</td></tr><tr><td>散热</td><td>雅浚 B3 PRO 4 热管 ARGB 神光同步</td><td>74.01</td><td>闲鱼</td></tr><tr><td>SSD 固态硬盘</td><td>西数 SN570 1T</td><td>350</td><td>闲鱼</td></tr><tr><td>HDD 机械硬盘</td><td>西数 16T HC550 16T</td><td>919</td><td>闲鱼</td></tr><tr><td>主板</td><td>MSI MAG-B560M-MORTAR-WIFI</td><td>580</td><td>闲鱼</td></tr><tr><td>机箱</td><td>爱国者 T9 机箱</td><td>83.6</td><td>闲鱼</td></tr><tr><td>电源</td><td>爱国者 G7 全模组 700W</td><td>238</td><td>闲鱼</td></tr><tr><td>风扇</td><td>爱国者 冰魄彩虹 V1 * 6</td><td>56</td><td>闲鱼</td></tr><tr><td>CPU</td><td>i7-10700</td><td>1091</td><td>淘宝</td></tr><tr><td>螺丝</td><td>风扇铁黑&#x2F;镀镍螺丝</td><td>3.43</td><td>淘宝</td></tr><tr><td>转接线</td><td>pcie1 延长线 10cm</td><td>22.42</td><td>闲鱼</td></tr><tr><td>转接线</td><td>大 4 pin 一分五扩展线</td><td>12.99</td><td>淘宝</td></tr><tr><td>转接线</td><td>大 4 pin 转 6 pin，显卡用</td><td>5.79</td><td>淘宝</td></tr><tr><td>转接线</td><td>单 8 pin 转 双 8 pin，显卡用</td><td>0</td><td>闲鱼</td></tr><tr><td>硅脂</td><td>信越 7921 导热硅脂</td><td>20.90</td><td>淘宝</td></tr><tr><td><strong>合计</strong></td><td></td><td>5217.14</td><td></td></tr></tbody></table><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.bilibili.com/video/BV1Sb411e78a/?spm_id_from=333.337.search-card.all.click&vd_source=1696fd296900bc9f809f262000c4b785">台式装机全程攻略</a></p><p><a href="https://heipg.cn/tutorial/gpu-support-for-hackintosh.html">2022年黑苹果macOS Big Sur&#x2F;Monterey显卡支持列表，持续更新中。</a></p><p><a href="https://heipg.cn/tutorial/wifi-bluetooth-card-for-hackintosh.html">黑苹果无线网卡购买&amp;安装&amp;使用指南2022年版</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;电脑配置&quot;&gt;&lt;a href=&quot;#电脑配置&quot; class=&quot;headerlink&quot; title=&quot;电脑配置&quot;&gt;&lt;/a&gt;电脑配置&lt;/h</summary>
      
    
    
    
    <category term="黑苹果" scheme="https://blog.yahyav2rayssr.top/categories/%E9%BB%91%E8%8B%B9%E6%9E%9C/"/>
    
    
    <category term="黑苹果" scheme="https://blog.yahyav2rayssr.top/tags/%E9%BB%91%E8%8B%B9%E6%9E%9C/"/>
    
  </entry>
  
  <entry>
    <title>苹果关闭动画特效</title>
    <link href="https://blog.yahyav2rayssr.top/posts/71eea9a3/"/>
    <id>https://blog.yahyav2rayssr.top/posts/71eea9a3/</id>
    <published>2023-05-03T03:06:23.465Z</published>
    <updated>2023-05-03T03:06:23.465Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>不带任何动画效果不是更好吗？就像过去那样清清爽爽也不错。接下来将介绍如何在OS X操作系统里关闭大部分的视觉动画效果。</p><h2 id="减弱-macOS-动态效果"><a href="#减弱-macOS-动态效果" class="headerlink" title="减弱 macOS 动态效果"></a>减弱 macOS 动态效果</h2><p>1.开启macOS系统偏好设定，找到设定内的「辅助使用」功能。</p><img src="/posts/71eea9a3/2df74669d93442ceac90399170f381f5.jpeg" class alt="img"><p>2.从左侧点选「显示器」后勾选右上角的「减少动态效果」，设定后就能发现不同，试着切换到不同桌面、应用程式或接收通知，可以看到动态效果几乎没有了，取而代之的是淡入淡出效果。</p><img src="/posts/71eea9a3/d83f82807ab045fa9ec52435ef45141a.jpeg" class alt="img"><p>如果使用上不习惯，想要改回原有的动态效果，只要进行相同的操作步骤即可返回。</p><h2 id="窗口和对话框弹出的动画特效"><a href="#窗口和对话框弹出的动画特效" class="headerlink" title="窗口和对话框弹出的动画特效"></a>窗口和对话框弹出的动画特效</h2><p>打开终端窗口（Finder-应用程序-实用工具-终端）并运行下面的命令，就能取消对话框和窗口在屏幕中央位置弹出的效果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">defaults write -g NSAutomaticWindowAnimationEnabled -bool FALSE<br></code></pre></td></tr></table></figure><p>然后注销并重新登录系统使更改生效。<br>如果想恢复这个特效的话，可以打开终端窗口并运行下面的命令。同样地，需要注销并重新登录使更改生效：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">defaults delete -g NSAutomaticWindowAnimationEnabled<br></code></pre></td></tr></table></figure><h2 id="快速查看的动画特效"><a href="#快速查看的动画特效" class="headerlink" title="快速查看的动画特效"></a>快速查看的动画特效</h2><p>当你选中某个文件并敲下《Space》键时会弹出快速查看窗口。它显示文件内容的预览画面。你可以在终端窗口里运行下面的命令，停用“快速查看”窗口从当前文件位置向外扩张的动画效果（这样做也会同时停用快速查看窗口缩回当前文件位置时的动画效果）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">defaults write com.apple.finder QLPanelAnimationDuration -int 0; killall Finder<br></code></pre></td></tr></table></figure><p>命令运行后立即生效。如果想恢复这个动态效果，请打开终端窗口并运行以下命令（同理，这个更改也是立即生效）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">defaults delete com.apple.finder QLPanelAnimationDuration; killall Finder<br></code></pre></td></tr></table></figure><h2 id="Mission-Control-的动画特效"><a href="#Mission-Control-的动画特效" class="headerlink" title="Mission Control 的动画特效"></a>Mission Control 的动画特效</h2><p>在终端窗口里运行下面的命令，可以关闭当用户使用或退出Mission Control功能时所出现的动画缩放效果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">defaults write com.apple.dock expose-animation -duration -int 0; killall Dock<br></code></pre></td></tr></table></figure><p>更改在命令运行后立即生效。要注意这样也会关闭在使用“显示桌面”（Show Desktop）特效时，窗口向四周急速分散的动画效果。“显示桌面”特效通常是在触控板上用多个手指同时张开的手势来启用的。<br>如果想要恢复Mission Control功能的默认动画效果，可以打开终端窗口并运行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">defaults delete com.apple.dock expose-animation -duration; killall Dock<br></code></pre></td></tr></table></figure><h2 id="文件保存和打印对话框的动画效果"><a href="#文件保存和打印对话框的动画效果" class="headerlink" title="文件保存和打印对话框的动画效果"></a>文件保存和打印对话框的动画效果</h2><p>每当保存或打印文件时，程序的标题栏位置会向下滑出对话框。要关闭这一动画效果，可打开终端窗口并运行下面的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">defaults write -g NSWindowResizeTime -float 0.01<br></code></pre></td></tr></table></figure><p>你需要注销后再登录系统来使更改生效。<br>如果你希望再次看到这个视觉特效的话，可以运行下面的命令，之后同样要注销再登录系统使更改生效：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">defaults delete -g NSWindowResizeTime<br></code></pre></td></tr></table></figure><h2 id="Launchpad-界面动画效果"><a href="#Launchpad-界面动画效果" class="headerlink" title="Launchpad 界面动画效果"></a>Launchpad 界面动画效果</h2><p>更改一个隐藏的设置就可以使Launchpad界面立刻出现或消失。打开终端窗口并键入下面两行命令，再按下《Return》键就可以了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">defaults write com.apple.dock springboard-show-duration -int 0 defaults write com.apple.dock springboard-hide-duration -int 0; killall Dock<br></code></pre></td></tr></table></figure><p>更改会立即生效。如果你要恢复之前的动画效果，可以再次打开终端窗口并运行下面的两行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">defaults delete com.apple.dock springboard-show-duration defaults delete com.apple.dock springboard-hide-duration; killall Dock<br></code></pre></td></tr></table></figure><p>在Launchpad界面里的应用程序页面划动时，如果你想立刻切换到下一页面而不带动画过渡从而减少页面切换所需的时间，那么可以打开终端窗口并键入下面的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">defaults write com.apple.dock springboard-page-duration -int 0; killall Dock<br></code></pre></td></tr></table></figure><p>运行后更改会立即生效。如果需要恢复默认状态，请打开终端窗口并键入以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">defaults delete com.apple.dock springboard-page-duration; killall Dock<br></code></pre></td></tr></table></figure><h2 id="Dock-栏的动画效果"><a href="#Dock-栏的动画效果" class="headerlink" title="Dock 栏的动画效果"></a>Dock 栏的动画效果</h2><p>Dock栏可以启动隐藏功能，以便在它用不到的时候会自动滑出屏幕。这样可以为屏幕腾出一些空间。把鼠标移到Dock栏平常所在的位置的边缘时可以让它重新进入屏幕中。右击Dock栏上的应用程序图标和栈之间的虚线，然后就可以选择是否启动隐藏功能。<br>如果想让Dock栏在需要用到的时候立刻跳入到屏幕里，而不是滑进屏幕，可以在打开的终端窗口里输入以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">defaults write com.apple.dock autohide-time-moidifier -int 0; killall Dock<br></code></pre></td></tr></table></figure><p>如果想要恢复默认的滑动效果，可以打开终端窗口并运行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">defaults write com.apple.dock autohide-time-moidifier -int 0; killall Dock<br></code></pre></td></tr></table></figure><h2 id="command-i-的动画"><a href="#command-i-的动画" class="headerlink" title="command + i 的动画"></a>command + i 的动画</h2><p>Disable animation when opening the Info window in Finder (cmd⌘ + i)，暂时没怎么用这个快捷键。</p><p>关闭动画</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">defaults write com.apple.finder DisableAllAnimations -bool true<br></code></pre></td></tr></table></figure><p>恢复动画</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">defaults write com.apple.finder DisableAllAnimations -bool false<br></code></pre></td></tr></table></figure><h2 id="窗口动画"><a href="#窗口动画" class="headerlink" title="窗口动画"></a>窗口动画</h2><p>MacOS 系统中可以通过以下步骤关闭窗口动画：</p><ol><li>打开「系统偏好设置」。</li><li>选择「Dock」。</li><li>取消勾选「打开和关闭窗口时使用动画效果」。</li><li>关闭「系统偏好设置」。</li></ol><p>更改后，在 MacOS 中打开和关闭窗口时将不再出现动画效果。</p><h2 id="Dock-新开程序图标跳动动画"><a href="#Dock-新开程序图标跳动动画" class="headerlink" title="Dock 新开程序图标跳动动画"></a>Dock 新开程序图标跳动动画</h2><p>当我们首次点击 Dock 上某程序图标时，这个图标会跳动一下然后打开，略显调皮，如果你不喜欢，也可以如下操作禁用。</p><p>执行指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo defaults write com.apple.dock launchanim -boolean false; killall Dock;<br></code></pre></td></tr></table></figure><p>还原指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo defaults write com.apple.dock launchanim -boolean true; killall Dock;<br></code></pre></td></tr></table></figure><h2 id="Dock-自动隐藏动画"><a href="#Dock-自动隐藏动画" class="headerlink" title="Dock 自动隐藏动画"></a>Dock 自动隐藏动画</h2><p>Dock 栏可以开启自动隐藏功能，然后通过鼠标指针撞击边缘的方式唤出，出现和隐藏都会有对应的动画，可以禁用之。</p><p>执行指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo defaults write com.apple.dock autohide-time-modifier -float 0; killall Dock;<br></code></pre></td></tr></table></figure><p>还原指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo defaults write com.apple.dock autohide-time-modifier -float 0.7; killall Dock;<br></code></pre></td></tr></table></figure><p>另外，鼠标唤起的触发有一个延迟时间设置，当然也可以通过指令禁用，达到实时弹出的效果。</p><p>关闭指令：（无延迟感）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo defaults write com.apple.Dock autohide-delay -float 0; killall Dock;<br></code></pre></td></tr></table></figure><p>还原指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo defaults delete com.apple.Dock autohide-delay; killall Dock;<br></code></pre></td></tr></table></figure><h2 id="Mission-Control-动画"><a href="#Mission-Control-动画" class="headerlink" title="Mission Control 动画"></a>Mission Control 动画</h2><p>如之前在「你无法拒绝的 Mac 触发角」一文中介绍过鼠标指针撞击屏幕四角来触发 Mission Control 的方法，这个过程会有平滑的动画交互，同样也可以禁用来加速。</p><blockquote><p>注：可以通过键盘上的 F3 键或者 四指上扫的手势 快速触发 Mission Control</p></blockquote><p>执行指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo defaults write com.apple.dock expose-animation-duration -int 0; killall Dock;<br></code></pre></td></tr></table></figure><p>还原指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo defaults delete com.apple.dock expose-animation-duration; killall Dock;<br></code></pre></td></tr></table></figure><h2 id="字体粗细调整"><a href="#字体粗细调整" class="headerlink" title="字体粗细调整"></a>字体粗细调整</h2><p>可以根据自己的需要，自行在 -int 后面选择不同的数字来调整字体的粗细，0 是最细，1 是中等，2 是恢复原始的粗细。</p><p>输入完成后，关掉终端并退出登录，再次回到桌面后即可生效。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">defaults -currentHost write -g AppleFontSmoothing -int 0<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;p&gt;不带任何动画效果不是更好吗？就像过去那样清清爽爽也不错。接下来将介绍如何在OS X操作系统里关闭大部分的视觉动画效果。&lt;/p&gt;
&lt;h2 id</summary>
      
    
    
    
    <category term="黑苹果" scheme="https://blog.yahyav2rayssr.top/categories/%E9%BB%91%E8%8B%B9%E6%9E%9C/"/>
    
    
    <category term="黑苹果" scheme="https://blog.yahyav2rayssr.top/tags/%E9%BB%91%E8%8B%B9%E6%9E%9C/"/>
    
  </entry>
  
  <entry>
    <title>Charles 抓包教程</title>
    <link href="https://blog.yahyav2rayssr.top/posts/9ad99481/"/>
    <id>https://blog.yahyav2rayssr.top/posts/9ad99481/</id>
    <published>2023-05-03T03:06:23.465Z</published>
    <updated>2023-05-03T03:06:23.465Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="内容清单"><a href="#内容清单" class="headerlink" title="内容清单"></a>内容清单</h2><ul><li>Charles 的简介</li><li>安装 Charles</li><li>Charles 初始化设置</li><li>过滤网络请求</li><li>截取HTTP&#x2F;HTTPS数据</li><li>模拟弱网环境</li><li>修改网络请求</li><li>修改服务器返回内容</li><li>服务器压力测试</li><li>反向代理</li><li>解决与翻墙软件的冲突</li></ul><h2 id="Charles-的简介"><a href="#Charles-的简介" class="headerlink" title="Charles 的简介"></a>Charles 的简介</h2><p><strong>Charles</strong> 是目前最主流的网络调试工具（Charles、Fiddler、Wireshark…）之一，对于一个开发者来说与网络打交道是日常需求，因此很多时候我们需要调试参数、返回的数据结构、查看网络请求的各种头信息、协议、响应时间等等。所以了解  Charles 并使用它</p><p>Charles 通过将自己设置为系统的网络访问代理服务器，这样所有的网络请求都会通过它，从而实现了网路请求的截获和分析。</p><p>Chareles 不仅可以分析电脑本机的网络请求（HTTP 和 HTTPS），还可以分析移动端设备的网络请求。</p><p>Charles 是收费软件，作者开发出这样一个方便开发者使用的伟大工具，我们鼓励使用正版软件，但是对于一些囊中羞涩或者学生来说，有破解版的更好，别担心，这些我都准备好了，下一个 section 会讲解如何下载安装。</p><h2 id="安装-Charles"><a href="#安装-Charles" class="headerlink" title="安装 Charles"></a>安装 Charles</h2><ul><li>方式1：<a href="https://link.juejin.cn/?target=https://www.charlesproxy.com/download/"> Charles 官网地址</a>，根据你的电脑操作系统选择合适的下载方式。此时下载下来的是需要收费的，不差钱的同学当然可以直接购买。<a href="https://link.juejin.cn/?target=https://www.charlesproxy.com/buy/">购买链接</a></li><li>方式2:按照方式1的方式去官网下载，然后下载相应 **<a href="https://link.juejin.cn/?target=https://raw.githubusercontent.com/FantasticLBP/knowledge-kit/master/assets/charles.jar">JAR包</a>**。这里以 MAC 为例，打 <strong>Finder</strong>，选择应用程序，选中 Charles，右击并选择“显示包内容”，看到 <strong>Contents</strong> 目录，点击进去选择 <strong>Java</strong> 文件夹，将下载下来的 <strong>JAR包</strong> 拖进去替换。至此，完成了 Charles 的破解。</li></ul><h2 id="Charles-初始化设置"><a href="#Charles-初始化设置" class="headerlink" title="Charles 初始化设置"></a>Charles 初始化设置</h2><p>Charles 的工作原理是将自身设置为系统的代理服务器来捕获所有的网络请求。所以使用 Charles ，我们必须设置 Charles 为系统的代理服务器。</p><p>打开 Charles，当第一次启动的时候如果没有购买或者没有破解，会有倒计时，之后会看到软件的主界面，然后会请求你赋予它为系统代理的权限。点击授权会让你输入当前系统用户的密码。当然你也可以忽略或者拒绝该请求，然后等想要抓包的时候将它设置为系统的代理服务器。步骤：<strong>选择菜单中的“Proxy” -&gt; “Mac OS X Proxy”。</strong>如下图：</p><img src="/posts/9ad99481/170951a867075658tplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="Charles在MAC的初始化"><p>之后你的电脑上的任何网络请求都可以在 Charles 的请求面板中看到</p><p>看看 Charles 的主界面</p><img src="/posts/9ad99481/170951edabefc5eatplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="Structure模式查看网络请求"><img src="/posts/9ad99481/1709520a2b7e19c4tplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="Sequence模式查看网络请求"><ul><li>图上红色圈1:这里代表所有网络请求的展示方式。分别名为 “Structure” 和 “Sequence”。<ul><li>Structure 将所有的网络请求按照域名划分并展示</li><li>Sequence 将所有的网络请求按照时间排序并展示</li></ul></li><li>图上红色圈2：一些的网络请求设置比如 HTTPS 以及端口等信息都在这个菜单栏设置</li><li>图上红色圈3：证书设置都在这里进行</li></ul><h2 id="过滤网络请求"><a href="#过滤网络请求" class="headerlink" title="过滤网络请求"></a>过滤网络请求</h2><p>由于 Charles 可以将电脑或者设置过的手机的所有网络请求捕获到，而且我们分析网络传输应该是针对某个特定的网络下的抓包分析，为了清楚明显地看到我们感兴趣的网络请求通常会用到 Charles 的<strong>“过滤网络请求的功能”</strong>。</p><ul><li><p>方法1:在 Charles 主面板的左侧所有网络请求的下方可以看到看到一个 <strong>”Filter“</strong> 输入栏，在这里你可以输入关键词来筛选出自己感兴趣的网络请求。比如我想分析的网络请求来自于”<a href="http://www.baidu.com/">www.baidu.com</a>“ 下，你可以在下面输入”baidu”即可。</p><img src="/posts/9ad99481/170952012cbfb90etplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="Filter 过滤网络请求"></li><li><p>方法2:在 Charles 菜单栏的顶部会看到 “Proxy” 的选项，点击菜单栏选择 “Proxy” -&gt; “Recording Settings” 。选择 “include”。看到面板上面有一个 “Add” 按钮，点击后在弹出的面板里面设置好我们需要分析的网络请求的<strong>协议、主机名、端口、路径、参数</strong>，当然你也可以只设置一些主要的信息，比如协议和主机名的组合。</p><img src="/posts/9ad99481/170951a870141a7dtplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="Recording Settings 过滤网络请求"></li><li><p>方法3:一般打开 Charles 并设置好配置信息后（比如电脑本机或者设置过代理的手机）所有的网络请求都将在 Charles 的面板上显示，同时我们感兴趣的网络请求如果也在面板上显示的话，<strong>“Structure”模式下</strong>可以选中需要分析的网络请求，鼠标右击选择<strong>“Focus”</strong>。<strong>“Sequence”模式下</strong>可以在面板的网络请求显示面板的右下角看到一个<strong>Focus</strong>按钮，点击勾选后 Charles 只会显示你感兴趣的网络请求。</p><img src="/posts/9ad99481/2018-07-23%20%E4%B8%8A%E5%8D%889.22.39.png" class alt="Structure模式下Focus过滤网络请求"><img src="/posts/9ad99481/170951a86dda16bdtplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="Sequence模式下Focus过滤网络请求"><h2 id="截取HTTP-x2F-HTTPS数据"><a href="#截取HTTP-x2F-HTTPS数据" class="headerlink" title="截取HTTP&#x2F;HTTPS数据"></a>截取HTTP&#x2F;HTTPS数据</h2><h3 id="截取-HTTP-请求"><a href="#截取-HTTP-请求" class="headerlink" title="截取 HTTP 请求"></a>截取 HTTP 请求</h3><p>Charles 的主要目的是抓取捕获网络请求，这里以 iPhone 的抓包为例讲解。</p><h4 id="Charles-的设置"><a href="#Charles-的设置" class="headerlink" title="Charles 的设置"></a>Charles 的设置</h4><p>要截获 iPhone 的网络请求就需要为 Charles 开启代理功能。在菜单栏选择<strong>“Proxy” -&gt;”Proxy Settings”<strong>。填写代理的端口号并将</strong>“Enable transparent HTTP proxying”</strong>勾选上。</p><img src="/posts/9ad99481/170951aca8c70173tplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="抓取手机网络请求的电脑端设置"><h3 id="iPhone-上的设置"><a href="#iPhone-上的设置" class="headerlink" title="iPhone 上的设置"></a>iPhone 上的设置</h3><p>在电脑“系统偏好设置”中心打开网络查看本机 IP 地址，打开手机“设置”-&gt;“无线局域网”，进入当前使用的网络，点击进入当前 WIFI 的详情页（可以看到当前 WIFI 的基本信息，包括子网掩码、端口、IP地址、路由器），在最下角可以看到<strong>“DNS”和“HTTP代理”</strong>2个section。我们点击<strong>“配置代理”</strong>，设置 HTTP 代理选中“手动”。服务器处填写电脑ip地址，端口写8888。设置好后，我们打开 iPhone 上的任意需要网络请求的应用，就可以看到 Charles 弹出请求的确认菜单，单击”Allow”按钮，即可完成设置。</p><img src="/posts/9ad99481/1709520a2f20087etplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" alt="抓取手机网络请求的手机端设置" style="zoom: 33%;"><h3 id="截取-HTTPS-请求"><a href="#截取-HTTPS-请求" class="headerlink" title="截取 HTTPS 请求"></a>截取 HTTPS 请求</h3><p>如果你需要捕获 HTTPS 协议的网络请求，那么则需要安装 Charles 的 CA 证书。步骤如下；</p><ul><li><p>首先需要在 MAC 上安装证书。点击 Charles 顶部的菜单栏，选择 **“Help” -&gt; “SSL Proxying” -&gt; “Install Charles Root Certificate”**。</p><img src="/posts/9ad99481/170951ad3329fcfdtplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="HTTPS抓包电脑端证书安装"></li><li><p>在 keychain 处将新安装的证书设置为永久信任</p><img src="/posts/9ad99481/170951ae9ac46109tplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="HTTPS抓包电脑端证书信任"></li><li><p>即使安装了 CA 证书，Charles 默认是不捕获 HTTPS 协议的网络请求，所以我们需要对某个主机下的网络请求抓包分析的话，选中该网络请求右击选中 <strong>“SSL Proxying Enabled”</strong>。这样就可以看到我们感兴趣的HTTPS 网络请求了。</p><img src="/posts/9ad99481/2018-07-23%20%E4%B8%8A%E5%8D%889.47.09.png" class alt="Charles确认开启抓取HTTPS"></li></ul><p>如果你需要捕获移动设备的 HTTPS 网络请求，则需要在移动设备上安装证书并作简单的设置</p><ul><li><p>选择 Charles 顶部菜单栏选择 **“Help” -&gt;”Install Charles Root Certificate on a Mobile Device or Remote Browser”**。然后就可以看到 Charles 弹出的安装说明了。</p><img src="/posts/9ad99481/170951ad674e8dd4tplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="Charles提示手机端安装CA证书"></li><li><p>在手机设置好 Charles 代理的情况下，在手机浏览器输入 <strong>“chls.pro&#x2F;ssl”</strong>。安装提示下载好<strong>CA证书</strong>。</p></li><li><p>验证刚刚安装的 CA证书</p><img src="/posts/9ad99481/170951af8476267btplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="描述文件的验证"></li><li><p>iPhone 打开设置 -&gt; 通用 -&gt; 关于本机 -&gt; 证书信任设置 -&gt; 开启开关</p><img src="/posts/9ad99481/170951b1fbcae3a9tplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="手机端CA证书的信任"></li><li><p>在 Charles 菜单栏 Proxy -&gt; SSL Proxying Setting -&gt; 点击 Add 按钮 -&gt; 在弹出的对对话框设置需要监听的 HTTPS 域（*:代表通配符）</p><img src="/posts/9ad99481/170951b416c491f5tplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="HTTPS抓包端口和主机设置"></li><li><p>设置完毕，尽情抓取你想要的 HTTPS 网络请求吧。</p><img src="/posts/9ad99481/17095232b0307812tplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="抓取京东HTTPS数据"></li></ul></li></ul><h2 id="模拟弱网环境"><a href="#模拟弱网环境" class="headerlink" title="模拟弱网环境"></a>模拟弱网环境</h2><p>在平时开发的时候我们经常需要模拟弱网环境，并作弱网环境下的适配工作。Charles 为我们提供了这个服务。</p><p>在 Charles 菜单栏选择 **“Proxy” -&gt; “Throttle Settings”**。在弹出的面板上设置网络请求的参数（上行，下行带宽、利用率、可靠性等等信息）。如下图所示。</p><img src="/posts/9ad99481/2018-07-23%20%E4%B8%8A%E5%8D%8810.27.22.png" class alt="模拟弱网环境"><p>如果你想对<strong>指定主机</strong>进行弱网环境下的测试，可以点击上图的“Add”按钮，在弹出的面板上设置协议、主机、端口来对指定的主机进行弱网设置。</p><img src="/posts/9ad99481/170951b81597ac17tplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="设置指定网络请求的弱网模拟"><h2 id="修改网络请求"><a href="#修改网络请求" class="headerlink" title="修改网络请求"></a>修改网络请求</h2><p>对于捕获的网络请求，我们经常需要修改网络请求的cookie、Headers、Url等信息。Charles 提供了对网络请求的编辑和重发功能。只需要选中需要修改编辑的网络请求，在对应的右上角看到有一个“钢笔”的按钮，点击后就可以对选中的网络请求进行编辑了，编辑好后可以在右下角看到 <strong>Execute</strong> 按钮。这样我们编辑后的网络请求就可以被执行了。</p><img src="/posts/9ad99481/170951b4ad922261tplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="修改网络请求"><h2 id="修改服务器返回内容"><a href="#修改服务器返回内容" class="headerlink" title="修改服务器返回内容"></a>修改服务器返回内容</h2><p>很多时候为了方便调试代码，我们会有这种需求，修改接口返回的数据节点或者内容、甚至是状态码。比如数据为空、数据异常、请求失败、多页数据的情况。 Charles 为我们提供了超实用的功能，<strong>“Map（Map Local、Map Remote）功能”、Rewrite功能、Breakpoints功能</strong> ，都可以实现修改服务端返回数据的功能。但是有区别和适用场景：</p><ul><li>Map 功能适合长期地将某一请求重定向到另一个指定的网络地址或者本地 JSON 文件</li><li>Rewrite 功能适合对网络请求进行一些正则替换</li><li>Breakpoints 功能适合对网络请求进行一些临时性的修改（类似于我们开发的断点作用）</li></ul><h3 id="Map-功能"><a href="#Map-功能" class="headerlink" title="Map 功能"></a>Map 功能</h3><p>Map 功能分为 Map Local（将某个网络请求重定向到本地 JSON 文件） 和 Map Remote 功能（将网络请求重定向到另一个网络接口）。</p><p>在 Charles 菜单栏选择 <strong>“Tools” -&gt; “Map Remote” 或 “Map Local”</strong> 即可进入相应的功能模块。</p><h4 id="Map-Remote-功能"><a href="#Map-Remote-功能" class="headerlink" title="Map Remote 功能"></a>Map Remote 功能</h4><p>适合于切换线上到本地、测试服务到正式服务的场景。比如下图从正式服务切换到测试服务</p><img src="/posts/9ad99481/170951d4fa0df2cbtplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="Map Remote"><h4 id="Map-Local-功能"><a href="#Map-Local-功能" class="headerlink" title="Map Local 功能"></a>Map Local 功能</h4><p>我们需要填写重定向的原地址信息和本地目标文件。我们可以先将某个接口的响应内容保存下来（选择对应的网络请求，右击点击 <strong>Save Response</strong> ）成为 data.json 文件。然后我们编辑里面的 status 、message、data 等信息为我们想要的目标映射文件。</p><img src="/posts/9ad99481/2018-07-23%20%E4%B8%8A%E5%8D%8811.37.44.png" class alt="Save Response"><p>如下所示，我将一个网络请求的内容映射到我本地的一个 JSON 文件。之后这个请求的内容都从网络变为返回我本地的数据了。</p><img src="/posts/9ad99481/170951dccd4432e6tplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="Map Local"><p>Map Local 可能会存在一个小缺陷，其返回的 HTTP Response Header 与正常的网络请求不一样，如果程序设置了校验 Header 信息，此时 Map Local 就会失败，解决办法是同时使用 <strong>Rewrite功能</strong>将相关的HTTP 头部信息 rewrite 成我们需要的信息</p><h4 id="Rewrite-功能"><a href="#Rewrite-功能" class="headerlink" title="Rewrite 功能"></a>Rewrite 功能</h4><p>Rewrite 适合对某个网络请求进行正则替换，以达到修改结果的目的。</p><p>假如我的 App 的界面上的显示的功能模块及其点击事件是根据接口来完成的，我想实现替换功能模块的名称的目的。步骤：点击顶部菜单栏的**“Tools” -&gt; “Rewrite”**。在弹出的面板上勾选 <strong>“Enable Rewrite”</strong>。点击左下角的 <strong>Add按钮</strong>，在右上角的 <strong>Name：</strong>处写好本次配置的名称（如果有多个 Rewrite，为了后期容易区分）。</p><ul><li>可以针对特定的网络请求进行 Rewrite。可以点击右上角 <strong>Location</strong> 面板下面的 <strong>Add按钮</strong>。在弹出的面板上设置网络请求配置信息。注意此时需要同时设置 Protocol、Port、Host、Path信息（我测试加了 Protocol、Host、Port这3个是无效的）</li></ul><img src="/posts/9ad99481/170951b9a52b981ftplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="Rewrite 针对特定网络请求的设置"><ul><li><p>然后对指定的 <strong>Type</strong> 和 <strong>Action</strong> 进行 Rewrite。</p><p>Type 主要有 Add Header、Modify Header、Remove Header、Host、Path等等。</p><p>Where 可以选择 Request 和 Response。指的是下面的修改是针对 Request 还是 Response</p><img src="/posts/9ad99481/1709520146937450tplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="Rewrite 设置范围"></li><li><p>完成设置后点击 <strong>Apply</strong> 按钮，即可生效。下次继续请求该网络，返回的内容就是我们刚刚设置的内容。比如当前的“政策法规”要变成“哈哈哈，我是假的政策法规”。这时候就可以使用 Rewrite 功能</p><img src="/posts/9ad99481/170951bc3b09e889tplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="Rewrite 测试结果"></li></ul><h4 id="Breakpoints-功能"><a href="#Breakpoints-功能" class="headerlink" title="Breakpoints 功能"></a>Breakpoints 功能</h4><p>Breakpoints 相比于其他几个修改网络请求的特点是只是针对当前的网络请求，Breakpoints 只存在于设置过的当前的网络请求，Charles 关闭后下次打开 Breakpoints 消失了。想要修改网络请求 Breakpoints 步骤最简单，跟我们调试工具里面设置的断点一样方便。</p><p>对于我们设置了 Breakpoints 的网络请求， Charles 会在下次继续访问该请求的时候停止掉，就跟 debug 一样。此时我们可以 <strong>Edit Request</strong>，修改过 Request 之后点击右下角的 <strong>Execute</strong> 按钮。然后等到服务端返回的时候继续是断点状态，此时可以 <strong>Edit Response</strong>。步骤： <strong>选中某个网络请求 -&gt; 右击 -&gt; 点击“Breakpoints”。</strong></p><p>如下图：对该接口设置了 Breakpoints。请求网络后 Edit Response，点击 execute 后服务端返回的结果就是我们编辑的内容了。</p><img src="/posts/9ad99481/170951e80273c1actplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="对指定的网路请求设置断点"><img src="/posts/9ad99481/170951d5081e41bdtplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="在Reponse的时候修改返回的数据"><img src="/posts/9ad99481/170951dcd437f787tplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="再次请求该接口返回的数据为我们设置过的"><h2 id="服务器压力测试"><a href="#服务器压力测试" class="headerlink" title="服务器压力测试"></a>服务器压力测试</h2><p>我们可以使用 Charles 的 <strong>Repeat</strong> 功能地对服务器进行并发访问进行压力测试。步骤：<strong>选中某个网络请求 -&gt; 右击 -&gt; Repeat Advanced -&gt; 在弹出的面板里面设置总共的迭代次数（Iterations）、并发数（Concurrency） -&gt; 点击“OK” 。</strong>开始执行可以看到以设置的并发数的规模，进行总共达设置的总共迭代次数的访问。（专业的压力测试工具：<strong>Load Runner</strong>）</p><img src="/posts/9ad99481/170951bdd4bd43ddtplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="简单压力测试"><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><p>Charles 的反向代理功能允许我们将本地指定端口的请求映射到远程的另一个端口上。设置：<strong>点击顶部菜单栏 Proxy -&gt; 点击 Reverse Proxies</strong>。</p><p>如下所示，我将本地的 8080 端口映射到远程的 80 端口上，点击 OK 生效后，当我继续访问本地的 80 端口，实际返回的就是远程 80 端口的提供的内容了。</p><img src="/posts/9ad99481/170951d51285cacatplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="反向代理设置"><h2 id="解决与翻墙软件的冲突"><a href="#解决与翻墙软件的冲突" class="headerlink" title="解决与翻墙软件的冲突"></a>解决与翻墙软件的冲突</h2><p>Charles 的工作原理是把自己设置为系统的代理服务器，但是我们开发者经常会利用 VPN 翻墙访问谷歌查找资料（这些翻墙软件的工作原理也是把自己设置成为系统的代理服务器），为了2者和平共处。我们可以在 Charles 的 External Proxy Settings 中将翻墙的代理端口等信息填写。同时我们需要关闭翻墙软件的自动设置，更改为<strong>“手动模式”</strong>。（使其不主动修改系统代理）</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Charles 功能强大、界面简洁，读完这篇文章并做出练习，相信你能很快掌握它，“工欲善其事，必先利其器” ，掌握了它，相信可以为你大大提高开发中调试网络的效率。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;内容清单&quot;&gt;&lt;a href=&quot;#内容清单&quot; class=&quot;headerlink&quot; title=&quot;内容清单&quot;&gt;&lt;/a&gt;内容清单&lt;/h</summary>
      
    
    
    
    <category term="研发工具" scheme="https://blog.yahyav2rayssr.top/categories/%E7%A0%94%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    <category term="抓包" scheme="https://blog.yahyav2rayssr.top/categories/%E7%A0%94%E5%8F%91%E5%B7%A5%E5%85%B7/%E6%8A%93%E5%8C%85/"/>
    
    
    <category term="抓包" scheme="https://blog.yahyav2rayssr.top/tags/%E6%8A%93%E5%8C%85/"/>
    
    <category term="charles" scheme="https://blog.yahyav2rayssr.top/tags/charles/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7 修改 root 密码</title>
    <link href="https://blog.yahyav2rayssr.top/posts/1f71be40/"/>
    <id>https://blog.yahyav2rayssr.top/posts/1f71be40/</id>
    <published>2023-05-03T03:06:23.465Z</published>
    <updated>2023-05-03T03:06:23.465Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h2><p>在启动引导主页上按e进入内核编辑</p><img src="/posts/1f71be40/20190808185726128.png" class alt="在这里插入图片描述"><img src="/posts/1f71be40/20190808185752580.png" class alt="在这里插入图片描述"><p>找到 Linux16 这一段，在末尾处添加 rd.break，按下组合键 CTRL+X 运行内核程序进入紧急救援模式</p><img src="/posts/1f71be40/2019080818581670.png" class alt="在这里插入图片描述"><p>在这个模式下依次输入以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">mount -o remount,rw /sysroot<br>chroot /sysroot<br>passwd # 注意：到这里的时候会提示输入两次需要重置的密码，输入完成之后回车即可<br>touch /.autorelabel # 如果已经开启了SElinux，则需要输入此命令<br>reboot<br></code></pre></td></tr></table></figure><img src="/posts/1f71be40/20190808185904739.png" class alt="在这里插入图片描述"><p>重新进入系统输入刚刚重置的密码即可登陆root账户</p><h2 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h2><p>前面操作和方式一样</p><p>在linux16 这一段的最后添加上 <code>init=/bin/sh</code></p><img src="/posts/1f71be40/20190808190135395.png" class alt="在这里插入图片描述"><img src="/posts/1f71be40/2019080819042667.png" class alt="在这里插入图片描述"><p>进来上图界面后输入以命令<br>1、挂载根目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mount -o remount, rw /<br></code></pre></td></tr></table></figure><p>2、选择要修改密码的用户名，这里选择root用户进行修改，可以更换为你要修改的用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">passwd<br></code></pre></td></tr></table></figure><p>3、输入2次一样的新密码，注意输入密码的时候屏幕上不会有字符出现。<br>如果输入的密码太简单，会提示警告（BAD PASSWORD：The password fails the dictionary check - it is too simplistic&#x2F;systematic），可以无视它，继续输入密码，不过建议还是设置比较复杂一些的密码，以保证安全性<br>4、如果已经开启了SElinux，则需要输入以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">touch /.autorelabel<br></code></pre></td></tr></table></figure><p>5、最后输入以下命令重启系统即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">exec /sbin/init<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">或</span><br>exec /sbin/reboot<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;方式一&quot;&gt;&lt;a href=&quot;#方式一&quot; class=&quot;headerlink&quot; title=&quot;方式一&quot;&gt;&lt;/a&gt;方式一&lt;/h2&gt;&lt;p</summary>
      
    
    
    
    <category term="运维" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/"/>
    
    <category term="CentOS7" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/CentOS7/"/>
    
    
    <category term="centos7" scheme="https://blog.yahyav2rayssr.top/tags/centos7/"/>
    
  </entry>
  
  <entry>
    <title>vmware 网络配置</title>
    <link href="https://blog.yahyav2rayssr.top/posts/da1888d/"/>
    <id>https://blog.yahyav2rayssr.top/posts/da1888d/</id>
    <published>2023-05-03T03:06:23.465Z</published>
    <updated>2023-05-03T03:06:23.465Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="网卡配置"><a href="#网卡配置" class="headerlink" title="网卡配置"></a>网卡配置</h2><h3 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h3><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://blog.csdn.net/qiuqurenkong/article/details/78598650">Mac VMware fusion10 Centos7网络配置</a></p><p><a href="https://blog.csdn.net/kakuma_chen/article/details/71425620">如何使VMware ip与本机ip处于同一网段</a></p><p><a href="https://blog.csdn.net/masson32/article/details/48105793">CentOS 7 在vmware中的网络设置</a></p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p><a href="https://www.cnblogs.com/pandana/p/15220589.html">NAT模式物理机ping不通虚拟机</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;网卡配置&quot;&gt;&lt;a href=&quot;#网卡配置&quot; class=&quot;headerlink&quot; title=&quot;网卡配置&quot;&gt;&lt;/a&gt;网卡配置&lt;/h</summary>
      
    
    
    
    <category term="运维" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/"/>
    
    <category term="vmware" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/vmware/"/>
    
    
    <category term="vmware" scheme="https://blog.yahyav2rayssr.top/tags/vmware/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://blog.yahyav2rayssr.top/posts/0/"/>
    <id>https://blog.yahyav2rayssr.top/posts/0/</id>
    <published>2023-05-03T03:06:23.463Z</published>
    <updated>2023-05-03T03:06:23.463Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Java 常用命令</title>
    <link href="https://blog.yahyav2rayssr.top/posts/a3b6ed09/"/>
    <id>https://blog.yahyav2rayssr.top/posts/a3b6ed09/</id>
    <published>2023-05-03T03:06:23.463Z</published>
    <updated>2023-05-03T03:06:23.463Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="查看java应用的信息"><a href="#查看java应用的信息" class="headerlink" title="查看java应用的信息"></a>查看java应用的信息</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">jps -mlvV<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;查看java应用的信息&quot;&gt;&lt;a href=&quot;#查看java应用的信息&quot; class=&quot;headerlink&quot; title=&quot;查看j</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.yahyav2rayssr.top/categories/Java/"/>
    
    
    <category term="java" scheme="https://blog.yahyav2rayssr.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Intellij IDEA 常用配置</title>
    <link href="https://blog.yahyav2rayssr.top/posts/4a9b2d4f/"/>
    <id>https://blog.yahyav2rayssr.top/posts/4a9b2d4f/</id>
    <published>2023-05-03T03:06:23.463Z</published>
    <updated>2023-05-03T03:06:23.463Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="右键增加-Open-Folder-as-IntelliJ-IDEA-Project"><a href="#右键增加-Open-Folder-as-IntelliJ-IDEA-Project" class="headerlink" title="右键增加 Open Folder as IntelliJ IDEA Project"></a>右键增加 Open Folder as IntelliJ IDEA Project</h2><p>1、先<code>win+R</code>打开运行窗口，输入<code>regedit</code>，进入到<a href="https://so.csdn.net/so/search?q=%E6%B3%A8%E5%86%8C%E8%A1%A8&spm=1001.2101.3001.7020">注册表</a>编辑器中，然后进入到下面的目录 <code>计算机\HKEY_CLASSES_ROOT\Directory\Background\shell</code></p><p>新建项，取名为 Intellij IDEA，如下图所示：</p><ol><li><p>修改 Intellij IDEA 项下的默认的数值数据为 Open Folder as IntelliJ IDEA Project</p></li><li><p>新建一个字符串值，名字为 Icon，数值为 idea64.exe 所在目录的绝对路径</p></li></ol><img src="/posts/4a9b2d4f/image-20220529112715786.png" alt="image-20220529112715786" style="zoom:67%;"><p>然后在左边的 Intellij IDEA 的项上右击，选择新建 &gt; 项,项名为 command，修改默认的数值数据为 “idea64.exe所在目录的绝对路径” + “%V”，如下图所示：</p><img src="/posts/4a9b2d4f/image-20220529113557732.png" alt="image-20220529113557732" style="zoom:67%;"><p>然后重启电脑，就可以看到下面的效果了，如下图所示：</p><img src="/posts/4a9b2d4f/image-20220529113916555.png" alt="image-20220529113916555" style="zoom:67%;"><h2 id="关闭自动弹出-Documentation"><a href="#关闭自动弹出-Documentation" class="headerlink" title="关闭自动弹出 Documentation"></a>关闭自动弹出 Documentation</h2><p>取消勾选即可。</p><img src="/posts/4a9b2d4f/image-20220926003143123.png" alt="image-20220926003143123" style="zoom: 67%;"><h2 id="代码行宽度超出限制时不自动换行"><a href="#代码行宽度超出限制时不自动换行" class="headerlink" title="代码行宽度超出限制时不自动换行"></a><strong>代码行宽度超出限制时不自动换行</strong></h2><p>打开 Settings &gt; Editor &gt; Code Style &gt; Java</p><p>设置 <code>Hard Wrap at</code> 的值，默认为120，或者将 <code>Wrap on typing</code> 设置为 false，如下所示：</p><img src="/posts/4a9b2d4f/image-20221103094718687.png" alt="image-20221103094718687" style="zoom:67%;"><h2 id="IntelliJ-IDEA-修改配置文件位置"><a href="#IntelliJ-IDEA-修改配置文件位置" class="headerlink" title="IntelliJ IDEA 修改配置文件位置"></a>IntelliJ IDEA 修改配置文件位置</h2><p>找到 idea.properties 文件的位置，这里找下的位置如下：</p><p>C:\Program Files\JetBrains\IntelliJ IDEA 2021.1.3\bin\idea.properties</p><p><strong>修改配置文件位置：</strong></p><blockquote><p>注意：不要修改为Idea的安装目录，因为这样会导致自动更新失败。错误示例： </p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">idea.config.path</span>=<span class="hljs-string">C:\Program Files\JetBrains\IntelliJ IDEA 2021.1.3\config</span><br><span class="hljs-attr">idea.system.path</span>=<span class="hljs-string">C:\Program Files\JetBrains\IntelliJ IDEA 2021.1.3\system</span><br></code></pre></td></tr></table></figure></blockquote><p>修改前：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># idea.config.path=$&#123;user.home&#125;/.IntelliJIdea/config</span><br><span class="hljs-comment"># idea.system.path=$&#123;user.home&#125;/.IntelliJIdea/system</span><br></code></pre></td></tr></table></figure><p>修改后：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">idea.config.path</span>=<span class="hljs-string">D:\IntelliJIdea\config</span><br><span class="hljs-attr">idea.system.path</span>=<span class="hljs-string">D:\IntelliJIdea\system</span><br></code></pre></td></tr></table></figure><blockquote><p>注意：Idea启动时，依旧会从默认位置中的 idea64.exe.vmoptions 中读配置。其他配置会从上面修改后的指定的路径中去读。所以：默认的路径下要保留 idea64.exe.vmoptions，其他可以删除。</p></blockquote><p>最后重启 idea 即可生效。</p><h2 id="IntelliJ-IDEA-修改内存大小"><a href="#IntelliJ-IDEA-修改内存大小" class="headerlink" title="IntelliJ IDEA 修改内存大小"></a>IntelliJ IDEA 修改内存大小</h2><p>找到 <code>idea64.exe.vmoptions</code> 的位置，默认是位于 C:\Program Files\JetBrains\IntelliJ IDEA 2021.1.3\bin\ 目录下，如果修改配置文件的位置，则在 D:\IntelliJIdea\config 目录下会有一份额外的同名配置文件，配置文件主要调整前三个参数，整体参数配置参考如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">-Xms1024m # 最小内存<br>-Xmx4096m # 最大内存<br>-XX:ReservedCodeCacheSize=512m # 预留代码缓存的大小<br>-XX:+UseG1GC<br>-XX:SoftRefLRUPolicyMSPerMB=50<br>-XX:CICompilerCount=2<br>-XX:+HeapDumpOnOutOfMemoryError<br>-XX:-OmitStackTraceInFastThrow<br>-ea<br>-Dsun.io.useCanonCaches=false<br>-Djdk.http.auth.tunneling.disabledSchemes=&quot;&quot;<br>-Djdk.attach.allowAttachSelf=true<br>-Djdk.module.illegalAccess.silent=true<br>-Dkotlinx.coroutines.debug=off<br></code></pre></td></tr></table></figure><p>控制内存使用显示状态的打开方式参考下图：</p><img src="/posts/4a9b2d4f/image-20221110005020304.png" alt="image-20221110005020304" style="zoom:67%;"><p>最后在 idea 中打开 Edit Custom VM Options 配置：</p><img src="/posts/4a9b2d4f/image-20221110005150838.png" alt="image-20221110005150838" style="zoom:67%;"><p>配置内容和上面的 <code>idea64.exe.vmoptions</code> 保持一致，重启 idea 即可生效。</p><h2 id="编译-spring-configuration-metadata-json-文件"><a href="#编译-spring-configuration-metadata-json-文件" class="headerlink" title="编译 spring-configuration-metadata.json 文件"></a>编译 spring-configuration-metadata.json 文件</h2><p>在idea设置中搜索 Annotation Processors，接下来勾住 Enable annonation processing 就完成了。</p><p>我们可以在编译后的文件中看到自动生成的 spring-configuration-metadata.json，配置效果如下：</p><img src="/posts/4a9b2d4f/image-20221111152028395.png" alt="image-20221111152028395" style="zoom:67%;"><img src="/posts/4a9b2d4f/image-20221111152144742.png" alt="image-20221111152144742" style="zoom:67%;"><h2 id="IDEA-设置-SQL-格式化-关键字大写"><a href="#IDEA-设置-SQL-格式化-关键字大写" class="headerlink" title="IDEA 设置 SQL 格式化(关键字大写)"></a>IDEA 设置 SQL 格式化(关键字大写)</h2><p>设置 settsings(Ctrl+Alt+S) –&gt; Editor –&gt; Code Style –&gt; SQL 将 keywords 设置为大写(To upper)</p><p>如下图所示：</p><img src="/posts/4a9b2d4f/image-20221208113752621.png" alt="image-20221208113752621" style="zoom:67%;"><h2 id="设置作者注释"><a href="#设置作者注释" class="headerlink" title="设置作者注释"></a>设置作者注释</h2><p><strong>File and Code Templates 配置</strong></p><p>点击 File -&gt; Settings -&gt; Editor -&gt; File And Code Templates，在右侧的 File Header 中填入以下信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: $&#123;NAME&#125;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: yahya</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@email</span>: yahya@sf-express.com</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: $&#123;YEAR&#125;/$&#123;MONTH&#125;/$&#123;DAY&#125; $&#123;HOUR&#125;:$&#123;MINUTE&#125;</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><p><strong>Live Templates 配置</strong></p><p>点击 File -&gt; Settings -&gt; Editor -&gt; Live Templates，点击右侧的 + 号按钮新建一个 Template Group，命名为 Description。</p><p>然后在名为 Description 的 Template Group 上面在新建一个 Live Template，内容填充如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: $description$</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: $user$</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@email</span>: $email$</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: $date$ $time$</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><p>整体配置效果图如下所示：</p><img src="/posts/4a9b2d4f/image-20221222150438908.png" class alt="image-20221222150438908"><p>然后再点击 Edit Variables 按钮，为每个变量设置值，效果如下：</p><img src="/posts/4a9b2d4f/image-20221222150522109.png" alt="image-20221222150522109" style="zoom:67%;"><p>常用内置变量定义如下：</p><ul><li>${PACKAGE_NAME} - 将在其中创建新类或接口的目标包的名称</li><li>${PROJECT_NAME} - 当前项目的名称</li><li>${FILE_NAME} - 将要创建的文件的名称</li><li>${NAME} - 您在创建文件的过程中，在 “新建文件” 对话框中指定的新文件的名称</li><li>${USER} - 当前用户的登录名</li><li>${DATE} - 当前系统日期</li><li>${TIME} - 当前系统时间</li><li>${YEAR} - 本年度</li><li>${MONTH} - 本月</li><li>${DAY} - 当月的当前日期</li><li>${HOUR} - 当前时间</li><li>${MINUTE} - 当前分钟。</li><li>${PRODUCT_NAME} - 将在其中创建文件的 IDE 的名称。</li><li>${MONTH_NAME_SHORT} - 月份名称的前3个字母。示例：1月，2月等。</li><li>${MONTH_NAME_FULL} - 一个月的全名。示例：1月，2月等</li></ul><h2 id="去除-Usage-提示"><a href="#去除-Usage-提示" class="headerlink" title="去除 Usage 提示"></a>去除 Usage 提示</h2><p>点击 Settings -&gt; Editor -&gt; Inlay Hints，在 Code vision 栏取消 Usages 的勾选项，如下图所示：</p><img src="/posts/4a9b2d4f/image-20230131110248142.png" alt="image-20230131110248142" style="zoom:80%;"><h2 id="取消-indexing"><a href="#取消-indexing" class="headerlink" title="取消 indexing"></a>取消 indexing</h2><p>File -&gt; Settings 中直接搜索 index</p><img src="/posts/4a9b2d4f/image-20230228164823678.png" alt="image-20230228164823678" style="zoom:67%;"><p>然后旁边两个选项都选择 Ask before download</p><h2 id="关闭页面显示的浏览器图标"><a href="#关闭页面显示的浏览器图标" class="headerlink" title="关闭页面显示的浏览器图标"></a>关闭页面显示的浏览器图标</h2><p>依次点击 File -&gt; Settings -&gt; Tools -&gt; Web Browsers and Preview，将多余的勾选项全部取消勾选，最终效果如下：</p><img src="/posts/4a9b2d4f/image-20230404103115943.png" alt="image-20230404103115943" style="zoom:67%;"><h2 id="设置默认换行符"><a href="#设置默认换行符" class="headerlink" title="设置默认换行符"></a>设置默认换行符</h2><p>依次展开 File -&gt; Settings -&gt; Editor -&gt; Code Style，可以看到，默认是 System-Dependent，这个其实还是很牛叉的，根据系统自动配置，但是你是 windows 系统，默认是 CRLF，服务器是 Linux，默认效果如下图所示：</p><img src="/posts/4a9b2d4f/image-20230422233552207.png" alt="image-20230422233552207" style="zoom: 67%;">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;右键增加-Open-Folder-as-IntelliJ-IDEA-Project&quot;&gt;&lt;a href=&quot;#右键增加-Open-Fo</summary>
      
    
    
    
    <category term="研发工具" scheme="https://blog.yahyav2rayssr.top/categories/%E7%A0%94%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    <category term="Intellij IDEA" scheme="https://blog.yahyav2rayssr.top/categories/%E7%A0%94%E5%8F%91%E5%B7%A5%E5%85%B7/Intellij-IDEA/"/>
    
    
    <category term="intellij idea" scheme="https://blog.yahyav2rayssr.top/tags/intellij-idea/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://blog.yahyav2rayssr.top/posts/0/"/>
    <id>https://blog.yahyav2rayssr.top/posts/0/</id>
    <published>2023-05-03T03:06:23.462Z</published>
    <updated>2023-05-03T03:06:23.462Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="image-syncer-下载"><a href="#image-syncer-下载" class="headerlink" title="image-syncer 下载"></a>image-syncer 下载</h2><p>下载地址：<a href="https://github.com/AliyunContainerService/image-syncer/releases/tag/v1.3.1">https://github.com/AliyunContainerService/image-syncer/releases/tag/v1.3.1</a></p><p>命令行获取方式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://github.com/AliyunContainerService/image-syncer/releases/download/v1.3.1/image-syncer-v1.3.1-linux-amd64.tar.gz<br></code></pre></td></tr></table></figure><h2 id="顺丰云镜像地址解析"><a href="#顺丰云镜像地址解析" class="headerlink" title="顺丰云镜像地址解析"></a>顺丰云镜像地址解析</h2><p>一、vpc 网络（内网）pull镜像，请参考下面进行检查<br>（1）检测 DNS 解析：<code>ping cloudpricicd-sit.sf-express.com</code>，若解析 IP 不是 10.207.192.12，请追加以下配置到 hosts。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">10.207.192.12 cloudpricicd-sit.sf-express.com<br></code></pre></td></tr></table></figure><p>（2）检测网络：<code>telnet cloudpricicd-sit.sf-express.com 80/443</code>，若网络不通，请开墙至 10.207.192.12，端口 80，443。</p><h2 id="镜像同步编写规则"><a href="#镜像同步编写规则" class="headerlink" title="镜像同步编写规则"></a>镜像同步编写规则</h2><p>同步镜像规则字段，其中条规则包括一个源仓库（键）和一个目标仓库（值）</p><p>同步的最大单位是仓库（repo），不支持经过一条规则同步整个namespace以及registry</p><p>源仓库和目标仓库的格式与docker pull&#x2F;push命令使用的镜像url相似（registry&#x2F;namespace&#x2F;repository:tag）</p><p>源仓库和目标仓库（若是目标仓库不为空字符串）都至少包含registry&#x2F;namespace&#x2F;repository</p><p>源仓库字段不能为空，若是须要将一个源仓库同步到多个目标仓库须要配置多条规则</p><p>目标仓库名能够和源仓库名不一样（tag也能够不一样），此时同步功能相似于：<code>docker pull + docker tag + docker push</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">&quot;quay.io/coreos/kube-rbac-proxy&quot;: &quot;quay.io/ruohe/kube-rbac-proxy&quot;,<br>&quot;xxxx&quot;:&quot;xxxxx&quot;,<br>&quot;xxx/xxx/xx:tag1,tag2,tag3&quot;:&quot;xxx/xxx/xx&quot;<br></code></pre></td></tr></table></figure><p>当源仓库字段中不包含 tag 时，表示将该仓库全部 tag 同步到目标仓库，此时目标仓库不能包含tag</p><p>当源仓库字段中包含 tag 时，表示只同步源仓库中的一个 tag 到目标仓库，若是目标仓库中不包含tag，则默认使用源tag</p><p>源仓库字段中的 tag 能够同时包含多个（好比”a&#x2F;b&#x2F;c:1,2,3”），tag 之间经过”,”隔开，此时目标仓库不能包含 tag，而且默认使用原来的 tag</p><p>当目标仓库为空字符串时，会将源镜像同步到默认 registry 的默认 namespace 下，而且 repo 以及 tag 与源仓库相同，默认 registry 和默认 namespace 能够经过命令行参数以及环境变量配置</p><h2 id="命令使用"><a href="#命令使用" class="headerlink" title="命令使用"></a>命令使用</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./image-syncer --proc=10 --config=./harbor-to-acr.json --registry=registry.cn-beijing.aliyuncs.com --namespace=image-syncer --retries=10 --log=./log<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">./image-syncer <span class="hljs-attribute">--proc</span>=1 <span class="hljs-attribute">--auth</span>=./config.json <span class="hljs-attribute">--images</span>=./image-syncer.json <span class="hljs-attribute">--namespace</span>=xx1 <span class="hljs-attribute">--registry</span>=harbor2.xx.com<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;image-syncer-下载&quot;&gt;&lt;a href=&quot;#image-syncer-下载&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>hexo 安装</title>
    <link href="https://blog.yahyav2rayssr.top/posts/9d95a809/"/>
    <id>https://blog.yahyav2rayssr.top/posts/9d95a809/</id>
    <published>2023-04-20T00:06:11.270Z</published>
    <updated>2023-04-20T00:06:11.270Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="yum-源配置"><a href="#yum-源配置" class="headerlink" title="yum 源配置"></a>yum 源配置</h2><p>将 yun 源设置成阿里云的，可以大大提高安装速度，推荐使用，所需命令如下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">rm -rf /etc/yum.repos.d/*  # 删除本地repo文件<br><br>curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo  ## 下载阿里云centos7镜像源<br><br>yum clean all; yum makecache # 清理缓存、建立缓存<br></code></pre></td></tr></table></figure><p>如果担心中途出其他问题先考虑先把原有 <code>/etc/yum.repos.d</code> 目录下的文件做一次备份方便还原。</p><h2 id="git-安装"><a href="#git-安装" class="headerlink" title="git 安装"></a>git 安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y git<br></code></pre></td></tr></table></figure><h2 id="nodejs-安装"><a href="#nodejs-安装" class="headerlink" title="nodejs 安装"></a>nodejs 安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://nodejs.org/dist/v16.14.2/node-v16.14.2-linux-x64.tar.xz<br><br>tar -vxf node-v16.14.2-linux-x64.tar.xz   # 解压node.js软件压缩软件包<br>mv node-v16.14.2-linux-x64 /usr/local/bin # 移动node到/usr/local/bin目录下<br><br>cd /usr/local/bin/ # 进入/usr/local/bin<br><br>mv node-v16.14.2-linux-x64/ node # 修改node-v16.14.2-linux-x64 名称为 node<br></code></pre></td></tr></table></figure><p>然后修改 <code>/etc/profile</code> 文件，增加以下配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">export N_PREFIX=/usr/local/bin/node  # 设置node软件家目录的环境变量<br>export PATH=$PATH:$N_PREFIX/bin  # 设置node软件到bin目录下环境变量  实现bin目录下命令的全局使用<br></code></pre></td></tr></table></figure><p>最后执行 <code>source /etc/profile</code> 使配置生效，用以下命令验证确认 nodejs 已经安装成功。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">node -v<br><br>npm -v<br></code></pre></td></tr></table></figure><h3 id="n-安装"><a href="#n-安装" class="headerlink" title="n 安装"></a>n 安装</h3><p>使用 n 可以对 nodejs 进行多版本管理，推荐使用 n 来切换管理 nodejs 版本，安装命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g n<br></code></pre></td></tr></table></figure><p>常用命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">n stable # 安装最新的稳定版<br><br>n lts # 安装最新的 LTS 版<br><br>n &lt;version&gt; # 安装指定的 node 版本<br></code></pre></td></tr></table></figure><h2 id="hexo-安装"><a href="#hexo-安装" class="headerlink" title="hexo 安装"></a>hexo 安装</h2><p>hexo 的安装比较简单，直接按照<a href="https://hexo.io/zh-cn/">官网</a>的说明步骤安装即可。首先是基础软件 nodejs 以及 git，这两个都是常用基础软件所以就不介绍细节了，官网直接安装即可。 按照使用了 npm 这个 nodejs 库管理软件，由于默认源在国外经常连接超时，所以首先需要修改成国内的镜像源，这里是改成了淘宝的镜像源。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm config set registry https://registry.npm.taobao.org<br></code></pre></td></tr></table></figure><p>接下来就是使用 <code>npm</code> 命令安装 hexo，推荐使用 cnpm</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g cnpm --registry=https://registry.npm.taobao.org<br><br>cnpm install -g hexo-cli<br></code></pre></td></tr></table></figure><h2 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl stop firewalld; systemctl disable firewalld<br></code></pre></td></tr></table></figure><h2 id="关闭-selinux"><a href="#关闭-selinux" class="headerlink" title="关闭 selinux"></a>关闭 selinux</h2><h3 id="临时关闭"><a href="#临时关闭" class="headerlink" title="临时关闭"></a>临时关闭</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">0: Permissive</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">1: Enforcing</span><br><br>setenforce 0<br></code></pre></td></tr></table></figure><h3 id="永久关闭"><a href="#永久关闭" class="headerlink" title="永久关闭"></a>永久关闭</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">vim /etc/selinux/config</span><br><br>SELINUX=disabled<br></code></pre></td></tr></table></figure><h2 id="hexo-初始化"><a href="#hexo-初始化" class="headerlink" title="hexo 初始化"></a>hexo 初始化</h2><blockquote><ul><li>站点配置文件：站点目录下的<code>_config.yml</code>，路径为<code>&lt;folder&gt;\_config.yml</code></li><li>主题配置文件：站点目录下的<code>themes</code>文件夹下的，主题文件夹下的<code>_config.yml</code>，路径为<code>&lt;folder&gt;\themes\&lt;主题文件夹&gt;\_config.yml</code></li></ul></blockquote><p>新建一个目录，作为统一存放 markdown 文件的目录，然后进入到该目录下执行以下命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo init<br></code></pre></td></tr></table></figure><h2 id="markdown-菜单目录生成"><a href="#markdown-菜单目录生成" class="headerlink" title="markdown 菜单目录生成"></a>markdown 菜单目录生成</h2><p>hexo 文件首部加上 <code>toc: true</code>，就可以在文章左侧生成目录，且可以正常跳转。因此你只用简单的加上<code>toc: true</code>即可，任何其他的操作都是不必要的。</p><p><strong>如果你装了hexo的toc插件，请你删除它，它会影响你目录的跳转！使用下面的语句删除toc插件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm remove hexo-toc --save<br></code></pre></td></tr></table></figure><h2 id="图片相对路径配置"><a href="#图片相对路径配置" class="headerlink" title="图片相对路径配置"></a>图片相对路径配置</h2><blockquote><p><a href="https://github.com/hexojs/hexo-renderer-marked">hexo-renderer-marked</a> 3.1.0 引入了一个新的选项，其允许你无需使用 <code>asset_img</code> 标签插件就可以在 markdown 中嵌入图片，如需启用，编辑 _config.yml，添加以下配置：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">post_asset_folder: true<br>marked:<br>  prependRoot: true<br>  postAsset: true<br></code></pre></td></tr></table></figure><p>安装以下依赖：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install https://github.com/7ym0n/hexo-asset-image --save # 解决 &lt;img /&gt; 图片标签相对路径问题<br><br>npm install hexo-simple-image --save # 解决 ![]() 图片标签相对路径问题<br></code></pre></td></tr></table></figure><p>最终效果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">├── hexo-asset-image@0.0.3 (git+ssh://git@github.com/7ym0n/hexo-asset-image.git#6c88c98214765112d148850a646ddca379fcdcfe)<br>├── hexo-simple-image@1.0.4<br></code></pre></td></tr></table></figure><p>这样子以 <code>&lt;img /&gt;</code> 和 <code>![]()</code> 包裹的相对路径图片都可以正常显示了。</p><h2 id="创建自定义-about-页"><a href="#创建自定义-about-页" class="headerlink" title="创建自定义 about 页"></a>创建自定义 about 页</h2><p>博客是用的<code>hexo</code>，打算增加一个<code>about</code>页。</p><p>根据文档，当然非常简单，只需要：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo new page &quot;about&quot;<br></code></pre></td></tr></table></figure><p>然后修改所用主题目录下的<code>_config.yml</code>文件，将<code>menu</code>中<code>about</code>前的注释去掉。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">menu</span>:<br>  <span class="hljs-attr">home</span>:  / || home<br>  <span class="hljs-attr">about</span>:  <span class="hljs-regexp">/about/</span> || user<br>  <span class="hljs-attr">tags</span>:  <span class="hljs-regexp">/tags/</span> || tags<br>  ...<br></code></pre></td></tr></table></figure><p>然后修改<code>source/about/</code>目录中的<code>index.md</code>文件即可。</p><p>但是，我想要在页面中显示表格，而且不用<code>markdown</code>格式的表格。</p><p>经谷歌，可以直接在<code>index.md</code>中写<code>html</code>代码，这太好了。</p><p>可是，写好代码，<code>hexo g</code>之后，怪异的现象出现了，<code>about</code>页面中，页顶标题下是许多空白行，表格要下拉到页面最底部才可见。</p><p>又搜索之后，找到了答案，将 <code>index.md</code> 改名为 <code>index.html</code>，修改之后，马上显示正常了。</p><h2 id="主题方案"><a href="#主题方案" class="headerlink" title="主题方案"></a>主题方案</h2><h3 id="fluid"><a href="#fluid" class="headerlink" title="fluid"></a>fluid</h3><p>代码高亮主题选择方案：<a href="https://highlightjs.org/static/demo/">https://highlightjs.org/static/demo/</a></p><p>使用手册：<a href="https://hexo.fluid-dev.com/docs/start/#%E4%B8%BB%E9%A2%98%E7%AE%80%E4%BB%8B">https://hexo.fluid-dev.com/docs/start/#%E4%B8%BB%E9%A2%98%E7%AE%80%E4%BB%8B</a></p><h4 id="隐藏文章"><a href="#隐藏文章" class="headerlink" title="隐藏文章"></a>隐藏文章</h4><blockquote><p>TIP</p><p>隐藏会使文章在分类和标签类里都不显示</p><p>隐藏后依然可以通过文章链接访问</p></blockquote><p>如果想把某些文章隐藏起来，不在首页和其他分类里展示，可以在文章开头 <a href="https://hexo.io/zh-cn/docs/front-matter">Front-matter (opens new window)</a> 中配置 <code>hide: true</code> 属性。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">文章标题</span><br><span class="hljs-attr">index_img:</span> <span class="hljs-string">/example.jpg</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2019-10-10 10:00:00</span><br><span class="hljs-attr">hide:</span> <span class="hljs-literal">true</span><br><span class="hljs-meta">---</span><br><span class="hljs-string">以下是文章内容</span><br></code></pre></td></tr></table></figure><h3 id="next"><a href="#next" class="headerlink" title="next"></a>next</h3><blockquote><p>参考配置：<a href="https://blog.csdn.net/as480133937/article/details/100138838">https://blog.csdn.net/as480133937/article/details/100138838</a></p></blockquote><h4 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h4><p>NexT 主题自带了一个搜索功能 <a href="https://github.com/next-theme/hexo-generator-searchdb">Local Search</a>，即在编译文件时本地生成一个数据库，放在网站根目录下，用户借助此数据库进行搜索查询。 安装：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-generator-searchdb <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>在 NexT 的配置文件中打开：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">local_search:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h4 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Vanilla JavaScript plugin for lazyloading images.</span><br><span class="hljs-comment"># For more information: https://github.com/ApoorvSaxena/lozad.js</span><br><span class="hljs-attr">lazyload:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h3 id="yilia-plus"><a href="#yilia-plus" class="headerlink" title="yilia-plus"></a>yilia-plus</h3><blockquote><p>参考配置：<a href="https://gitee.com/nate-lin/yilia-plus">https://gitee.com/nate-lin/yilia-plus</a></p></blockquote><h3 id="butterfly"><a href="#butterfly" class="headerlink" title="butterfly"></a>butterfly</h3><p>必装以下依赖，否则启动会报错。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-renderer-pug hexo-renderer-stylus --save<br></code></pre></td></tr></table></figure><h2 id="远程发布"><a href="#远程发布" class="headerlink" title="远程发布"></a>远程发布</h2><h3 id="github"><a href="#github" class="headerlink" title="github"></a>github</h3><h4 id="免密关联"><a href="#免密关联" class="headerlink" title="免密关联"></a>免密关联</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh-keygen<br></code></pre></td></tr></table></figure><p>然后将生成的 <code>id_rsa.pub</code> 文件内容关联到 github 的 SSH and GPG Keys 菜单的下的 ssh key 列表</p><img src="/posts/9d95a809/image-20230408234337544.png" class alt="image-20230408234337544"><h4 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h4><p>仓库名称格式 <strong>&lt;你的 GitHub 用户名&gt;.github.io</strong> ，站点会通过这个名称实现域名访问</p><blockquote><p>注意：仓库的访问权限需要设置为 public，否则无法通过 .github.io 域名的形式进行访问。</p></blockquote><img src="/posts/9d95a809/image-20230408235308117.png" alt="image-20230408235308117" style="zoom: 67%;"><h4 id="github-page-暴露"><a href="#github-page-暴露" class="headerlink" title="github page 暴露"></a>github page 暴露</h4><blockquote><p>参考链接：<a href="https://docs.github.com/en/pages/quickstart">https://docs.github.com/en/pages/quickstart</a></p></blockquote><p>默认情况下新建的仓库在 github page 是不关联任何分支的，即为 None，所以需要调整 Pages 配置为以下图示效果：</p><img src="/posts/9d95a809/image-20230409000036606.png" alt="image-20230409000036606"><h4 id="cloudflare-加速"><a href="#cloudflare-加速" class="headerlink" title="cloudflare 加速"></a>cloudflare 加速</h4><p>经实测 githubpage 在国内很容易被墙，所以决定在现有的 cloudflare 网站上做一层 CNAME 域名重定向访问到 github page 上，解决国内无法直接访问 github page 的问题，操作步骤如下：</p><p>创建 CNAME DNS 解析记录，最终访问域名为 <a href="https://blog.yahyav2rayssr.top,cloudflare/">https://blog.yahyav2rayssr.top，cloudflare</a> 配置如下：</p><img src="/posts/9d95a809/image-20230409003317201.png" class alt="image-20230409003317201"><p>另外还需要在 github 上面设置自定义域名，填写位置如下：</p><img src="/posts/9d95a809/image-20230409003825608.png" alt="image-20230409003825608"><h4 id="hexo-远程仓库配置"><a href="#hexo-远程仓库配置" class="headerlink" title="hexo 远程仓库配置"></a>hexo 远程仓库配置</h4><h5 id="安装发布插件"><a href="#安装发布插件" class="headerlink" title="安装发布插件"></a>安装发布插件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cnpm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><h5 id="修改-hexo-配置"><a href="#修改-hexo-配置" class="headerlink" title="修改 hexo 配置"></a>修改 hexo 配置</h5><p>增加 github 相关配置，内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">Deployment</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># Docs: https://hexo.io/docs/one-command-deployment</span></span><br>deploy:<br>  type: git<br>  repo: git@github.com:yaoyuming/yaoyuming.github.io.git<br>  branch: master<br></code></pre></td></tr></table></figure><h2 id="文件压缩"><a href="#文件压缩" class="headerlink" title="文件压缩"></a>文件压缩</h2><h3 id="hexo-neat"><a href="#hexo-neat" class="headerlink" title="hexo-neat"></a>hexo-neat</h3><blockquote><p>hexo-neat 主要用来压缩 html，css 以及 js 文件。</p></blockquote><h4 id="安装-hexo-neat"><a href="#安装-hexo-neat" class="headerlink" title="安装 hexo-neat"></a>安装 hexo-neat</h4><p>在站点根目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-neat --save<br></code></pre></td></tr></table></figure><h4 id="添加相关配置"><a href="#添加相关配置" class="headerlink" title="添加相关配置"></a>添加相关配置</h4><p>在站点配置文件 <code>_config.yml</code> 添加相关配置，直接添加到站点配置文件的末尾就可以。可以安装自己的需求去自定义配置，配置内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># hexo-neat</span><br><span class="hljs-comment"># 博文压缩</span><br><span class="hljs-attr">neat_enable:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment"># 压缩html</span><br><span class="hljs-attr">neat_html:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">exclude:</span><br><span class="hljs-comment"># 压缩css  </span><br><span class="hljs-attr">neat_css:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">exclude:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;**/*.min.css&#x27;</span><br><span class="hljs-comment"># 压缩js</span><br><span class="hljs-attr">neat_js:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">mangle:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">output:</span><br>  <span class="hljs-attr">compress:</span><br>  <span class="hljs-attr">exclude:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;**/*.min.js&#x27;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;**/jquery.fancybox.pack.js&#x27;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;**/index.js&#x27;</span>  <br></code></pre></td></tr></table></figure><h4 id="hexo-neat-插件注意事项"><a href="#hexo-neat-插件注意事项" class="headerlink" title="hexo-neat 插件注意事项"></a>hexo-neat 插件注意事项</h4><p>在使用hexo-neat插件时，可以在命令窗口中看到各个文件的压缩率，于是可以通过跳过一些文件让效率更高。</p><p><strong>跳过压缩文件的正确配置方式</strong></p><blockquote><p>压缩 html 时不要跳过 .md 文件和 .swig 文件</p><p>.md 文件就是 markdown 文件，如果跳过压缩 .md 文件，而又刚好在文章中使用到了 tab 标签，那么当 hexo 在生成静态页面时就会发生解析错误。这会导致使用到了 tab 标签的页面生成失败而无法访问。</p><p>.swig 文件是模板引擎文件，也就是 hexo 可以通过这些文件来生成对应的页面。如果跳过这些文件，所有页面完全没有起到压缩的效果，页面源代码里依然存在着一大堆空白。</p></blockquote><p>如果按照官方插件的文档说明来配置exclude，会发现完全不起作用。这是因为配置的文件路径不对，压缩时找不到你配置的文件，自然也就无法跳过了。于是需要给这些文件指定正确的路径，万能的配置方式如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">neat_css:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">exclude:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;**/*.min.css&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="gulp"><a href="#gulp" class="headerlink" title="gulp"></a>gulp</h3><blockquote><p>gulp 主要用来压缩图片。</p></blockquote><h4 id="安装-gulp"><a href="#安装-gulp" class="headerlink" title="安装 gulp"></a>安装 gulp</h4><p>gulp 全局安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install --global gulp-cli<br></code></pre></td></tr></table></figure><p>gulp 局部安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install gulp --save<br><br>npm install gulp-babel babel-preset-env babel-preset-mobx --save<br>npm install -D @babel/core @babel/preset-react @babel/preset-env --save<br></code></pre></td></tr></table></figure><p>图片压缩安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install gulp-imagemin --save<br></code></pre></td></tr></table></figure><p>最终生成的 package.json 新增内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;compile&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;hexo clean &amp;&amp; hexo generate &amp;&amp; gulp minify-images&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;dependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;babel-preset-env&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^1.7.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;babel-preset-mobx&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^2.0.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;gulp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^4.0.2&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;gulp-babel&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^8.0.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;gulp-imagemin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^7.1.0&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;devDependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;@babel/core&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^7.8.4&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;@babel/preset-env&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^7.8.4&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;@babel/preset-react&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^7.8.3&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="gulpfile-js-配置"><a href="#gulpfile-js-配置" class="headerlink" title="gulpfile.js 配置"></a>gulpfile.js 配置</h4><p>新增 gulpfile.js，内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 引入需要的模块</span><br><span class="hljs-keyword">var</span> gulp = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp&#x27;</span>);<br><span class="hljs-keyword">var</span> imagemin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-imagemin&#x27;</span>);<br><br><span class="hljs-comment">// 压缩图片</span><br>gulp.<span class="hljs-title function_">task</span>(<span class="hljs-string">&#x27;minify-images&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> gulp.<span class="hljs-title function_">src</span>([<span class="hljs-string">&#x27;./public/**/*.png&#x27;</span>, <span class="hljs-string">&#x27;./public/**/*.jpg&#x27;</span>, <span class="hljs-string">&#x27;./public/**/*.gif&#x27;</span>])<br>        .<span class="hljs-title function_">pipe</span>(<span class="hljs-title function_">imagemin</span>(<br>            [imagemin.<span class="hljs-title function_">gifsicle</span>(&#123; <span class="hljs-string">&#x27;optimizationLevel&#x27;</span>: <span class="hljs-number">3</span> &#125;),<br>            imagemin.<span class="hljs-title function_">mozjpeg</span>(&#123; <span class="hljs-string">&#x27;progressive&#x27;</span>: <span class="hljs-literal">true</span> &#125;),<br>            imagemin.<span class="hljs-title function_">optipng</span>(&#123; <span class="hljs-string">&#x27;optimizationLevel&#x27;</span>: <span class="hljs-number">5</span> &#125;),<br>            imagemin.<span class="hljs-title function_">svgo</span>()],<br>            &#123; <span class="hljs-string">&#x27;verbose&#x27;</span>: <span class="hljs-literal">true</span> &#125;))<br>        .<span class="hljs-title function_">pipe</span>(gulp.<span class="hljs-title function_">dest</span>(<span class="hljs-string">&#x27;./public&#x27;</span>))<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="制作永久链接"><a href="#制作永久链接" class="headerlink" title="制作永久链接"></a>制作永久链接</h2><p>hexo 预设永久连结是依照日期，但是这个很容易改动，又不希望永久连结内使用文章标题（因为是中文也有可能改动），所以有必要对链接路径做自定义配置。</p><h3 id="安装-abbrlink"><a href="#安装-abbrlink" class="headerlink" title="安装 abbrlink"></a>安装 abbrlink</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-abbrlink --save<br></code></pre></td></tr></table></figure><h3 id="设定"><a href="#设定" class="headerlink" title="设定"></a>设定</h3><h4 id="预设设定"><a href="#预设设定" class="headerlink" title="预设设定"></a>预设设定</h4><p>hexo的站点配置文件(_config.yml)中</p><p>使用 <code>permalink: :year/:month/:day/:title/</code> 当作永久连结的设定</p><p>也就是说文章的永久连接最后会是 <code>年/月/日/标题</code> 这样的格式，详情可以看 <a href="https://hexo.io/zh-cn/docs/permalinks.html">hexo永久连结文档</a></p><p>而稍微底下一点有</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">permalink_defaults:</span><br></code></pre></td></tr></table></figure><p>这个是可以设定自己的参数的。</p><h4 id="自定义设定"><a href="#自定义设定" class="headerlink" title="自定义设定"></a>自定义设定</h4><p>我使用 <a href="https://github.com/Rozbo/hexo-abbrlink">hexo-abbrlink</a> 对每篇文章生出一个编号</p><p>设定 hexo-abbrlink<br>在主题配置文件加上</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">abbrlink:</span><br>  <span class="hljs-attr">alg:</span> <span class="hljs-string">crc32</span>  <span class="hljs-comment"># support crc16(default) and crc32  </span><br>  <span class="hljs-attr">rep:</span> <span class="hljs-string">hex</span>    <span class="hljs-comment"># support dec(default) and hex</span><br><br>  <span class="hljs-comment"># crc16/crc32: 差别在于编号个数的极限，crc16可以生出65535个</span><br>  <span class="hljs-comment"># dec/hex:     差别在于编号生出来是十进制还是十六进制</span><br></code></pre></td></tr></table></figure><h4 id="自定义永久连结格式"><a href="#自定义永久连结格式" class="headerlink" title="自定义永久连结格式"></a>自定义永久连结格式</h4><p>我想要以作者名字为主，再加上编号来形成永久连结</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">permalink_defaults:</span><br>  <span class="hljs-attr">author_name:</span> <span class="hljs-string">yahya</span>   <span class="hljs-comment"># 新增一个作者名字的参数</span><br><br><span class="hljs-attr">permalink:</span> <span class="hljs-string">:author_name/:abbrlink/</span>    <span class="hljs-comment"># 结果是：网域/作者名字/abbrlink生成编号</span><br></code></pre></td></tr></table></figure><h2 id="私人文章隐藏"><a href="#私人文章隐藏" class="headerlink" title="私人文章隐藏"></a>私人文章隐藏</h2><p>当一篇文章被设置为「隐藏」时，它不会出现在任何列表中（包括首页、存档、分类页面、标签页面、Feed、站点地图等），也不会被搜索引擎索引（前提是搜索引擎遵守 noindex 标签）。</p><p>只有知道文章链接的人才可以访问被隐藏的文章。</p><p>Github 地址：<a href="https://github.com/printempw/hexo-hide-posts">https://github.com/printempw/hexo-hide-posts</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>在站点根目录下执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-hide-posts --save<br></code></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>在站点目录下的<code>_config.yml</code>中如下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># hexo-hide-posts</span><br><span class="hljs-attr">hide_posts:</span><br>  <span class="hljs-comment"># 可以改成其他你喜欢的名字</span><br>  <span class="hljs-attr">filter:</span> <span class="hljs-string">hidden</span><br>  <span class="hljs-comment"># 指定你想要传递隐藏文章的位置，比如让所有隐藏文章在存档页面可见</span><br>  <span class="hljs-comment"># 常见的位置有：index, tag, category, archive, sitemap, feed, etc.</span><br>  <span class="hljs-comment"># 留空则默认全部隐藏</span><br>  <span class="hljs-attr">public_generators:</span> []<br>  <span class="hljs-comment"># 为隐藏的文章添加 noindex meta 标签，阻止搜索引擎收录</span><br>  <span class="hljs-attr">noindex:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>举个栗子：设置 <code>filter: secret</code> 之后，你就可以在 front-matter 中使用 <code>secret: true</code> 来隐藏文章了。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>在文章的属性中定义 <code>hidden: true</code> 即可隐藏文章。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">&#x27;Hidden Post&#x27;</span><br><span class="hljs-attr">date:</span> <span class="hljs-string">&#x27;2021/03/05 21:45:14&#x27;</span><br><span class="hljs-attr">hidden:</span> <span class="hljs-literal">true</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>虽然首页上被隐藏了，但你仍然可以通过 <code>https://hexo.test/lorem-ipsum/</code> 链接访问它。</p><p>你可以在命令行运行 <code>hexo hidden:list</code> 来获取当前所有的已隐藏文章列表。</p><p>插件也在 <a href="https://hexo.io/api/locals">Local Variables</a> 中添加了 <code>all_posts</code> 和 <code>hidden_posts</code> 变量，供自定义主题使用。</p><h2 id="推荐主题"><a href="#推荐主题" class="headerlink" title="推荐主题"></a>推荐主题</h2><p><a href="https://github.com/fluid-dev/hexo-theme-fluid">hexo-theme-fluid</a></p><p><a href="https://github.com/theme-next/hexo-theme-next">hexo-theme-next</a></p><p><a href="https://github.com/cofess/hexo-theme-pure">hexo-theme-pure</a></p><p><a href="https://github.com/JoeyBling/hexo-theme-yilia-plus">hexo-theme-yilia-plus</a></p><p><a href="https://github.com/yelog/hexo-theme-3-hexo">hexo-theme-3-hexo</a></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://home.ustc.edu.cn/~liujunyan/blog/hexo-next-theme-config/#hexo-%E5%AE%89%E8%A3%85">Hexo 博客 NexT 主题的安装使用</a></p><p><a href="https://bbs.huaweicloud.com/blogs/348180">centos7系统部署hexo博客新手入门</a></p><p><a href="https://monkeywie.cn/2020/08/20/fast-github-page-with-cloudflare/">使用cloudflare免费加速github page</a></p><p><a href="https://www.voidking.com/dev-hexo-gulp/">Hexo使用Gulp压缩静态资源</a></p><p><a href="https://blog.csdn.net/GerZhouGengCheng/article/details/106074545">使用Gulp压缩Hexo博客静态资源</a></p><p><a href="https://www.jb51.net/article/98153.htm">node.js版本管理工具n无效的原理和解决方法</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;yum-源配置&quot;&gt;&lt;a href=&quot;#yum-源配置&quot; class=&quot;headerlink&quot; title=&quot;yum 源配置&quot;&gt;&lt;/</summary>
      
    
    
    
    <category term="运维" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/"/>
    
    <category term="常用安装" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/%E5%B8%B8%E7%94%A8%E5%AE%89%E8%A3%85/"/>
    
    
    <category term="hexo" scheme="https://blog.yahyav2rayssr.top/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7 基础知识</title>
    <link href="https://blog.yahyav2rayssr.top/posts/70711607/"/>
    <id>https://blog.yahyav2rayssr.top/posts/70711607/</id>
    <published>2023-04-18T15:31:33.476Z</published>
    <updated>2023-04-18T15:31:33.478Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux系统的7个运行级别-runlevel"><a href="#Linux系统的7个运行级别-runlevel" class="headerlink" title="Linux系统的7个运行级别(runlevel)"></a>Linux系统的7个运行级别(runlevel)</h1><p><strong>运行级别分为以下6种：</strong></p><p>0：系统停机状态，系统默认运行级别不能设为0，否则不能正常启动</p><p>1：单用户工作状态，root权限，用于系统维护，禁止远程登陆</p><p>2：多用户状态(没有NFS)</p><p>3：完全的多用户状态(有NFS)，登陆后进入控制台命令行模式</p><p>4：系统未使用，保留</p><p>5：X11控制台，登陆后进入图形GUI模式</p><p>6：系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动</p><blockquote><p><strong>运行级别的原理：</strong></p><ol><li>在目录&#x2F;etc&#x2F;rc.d&#x2F;init.d下有许多服务器脚本程序，一般称为服务(service)</li><li>在&#x2F;etc&#x2F;rc.d下有7个名为rcN.d的<strong>目录</strong>，对应系统的7个运行级别</li><li>rcN.d目录下都是一些符号链接文件，这些链接文件都指向init.d目录下的service脚本文件，命名规则为K+nn+服务名或S+nn+服务名，其中nn为两位数字。</li><li>系统会根据指定的运行级别进入对应的rcN.d目录，并按照文件名顺序检索目录下的链接文件<br>   对于以K开头的文件，系统将终止对应的服务<br>   对于以S开头的文件，系统将启动对应的服务</li><li>另外 init 0 为关机，init 6 为重启系统</li></ol></blockquote><h2 id="查看当前运行级别"><a href="#查看当前运行级别" class="headerlink" title="查看当前运行级别"></a>查看当前运行级别</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">runlevel<br></code></pre></td></tr></table></figure><h2 id="进入其它运行级别"><a href="#进入其它运行级别" class="headerlink" title="进入其它运行级别"></a>进入其它运行级别</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">init [级别]<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Linux系统的7个运行级别-runlevel&quot;&gt;&lt;a href=&quot;#Linux系统的7个运行级别-runlevel&quot; class=&quot;headerlink&quot; title=&quot;Linux系统的7个运行级别(runlevel)&quot;&gt;&lt;/a&gt;Linux系统的7个运行级别(r</summary>
      
    
    
    
    <category term="运维" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/"/>
    
    <category term="CentOS7" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/CentOS7/"/>
    
    
    <category term="centos7" scheme="https://blog.yahyav2rayssr.top/tags/centos7/"/>
    
  </entry>
  
  <entry>
    <title>Maven 常用命令</title>
    <link href="https://blog.yahyav2rayssr.top/posts/c718cdb9/"/>
    <id>https://blog.yahyav2rayssr.top/posts/c718cdb9/</id>
    <published>2023-04-18T15:31:33.414Z</published>
    <updated>2023-04-18T15:31:33.415Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="查看依赖树"><a href="#查看依赖树" class="headerlink" title="查看依赖树"></a>查看依赖树</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn dependency:tree<br></code></pre></td></tr></table></figure><p><strong>重定向到文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn dependency:tree &gt; tree.txt<br></code></pre></td></tr></table></figure><p><strong>使用verbose参数可以看冲突和重复的具体情况：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn dependency:tree -Dverbose &gt;tree.txt<br></code></pre></td></tr></table></figure><p>全是全了，但显示出来的东西太多，头晕目眩，有没有好法呢？当然有了，加上 <code>Dincludes</code> 或者 <code>Dexcludes</code> 说出你喜欢或讨厌，<code>dependency:tree</code> 就会帮你过滤出来，例如：</p><p><strong>方式一：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">语法</span><br>mvn dependency:tree -Dverbose -Dincludes=&lt;groudId&gt;:&lt;artifactId&gt;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">示例</span><br>mvn dependency:tree -Dverbose -Dincludes=com.alipay.common:tracer<br></code></pre></td></tr></table></figure><p><strong>方式二：</strong></p><p>也可以用这种方式来输入命令排查，会保留历史记录，下次排查直接使用历史命令即可</p><img src="/posts/c718cdb9/1cfb5b4398b45009351c383cdbca4693.png" alt="image.png" style="zoom:67%;"><h2 id="检测那些声明了但是没被使用的依赖"><a href="#检测那些声明了但是没被使用的依赖" class="headerlink" title="检测那些声明了但是没被使用的依赖"></a>检测那些声明了但是没被使用的依赖</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn dependency:analyze-only<br></code></pre></td></tr></table></figure><h2 id="分析重复定义的依赖"><a href="#分析重复定义的依赖" class="headerlink" title="分析重复定义的依赖"></a>分析重复定义的依赖</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn dependency:analyze-duplicate<br></code></pre></td></tr></table></figure><h2 id="下载指定依赖-jar-包"><a href="#下载指定依赖-jar-包" class="headerlink" title="下载指定依赖 jar 包"></a>下载指定依赖 jar 包</h2><p>命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn dependency:get -Dartifact=groupId:artifactId:version:jar:sources<br></code></pre></td></tr></table></figure><p>示例:</p><ul><li><p>下载jar包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn dependency:get -Dartifact=junit:junit:4.12:jar<br></code></pre></td></tr></table></figure></li><li><p>下载源码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn dependency:get -Dartifact=junit:junit:4.12:jar:sources<br></code></pre></td></tr></table></figure></li></ul><h2 id="指定配置文件"><a href="#指定配置文件" class="headerlink" title="指定配置文件"></a>指定配置文件</h2><p>命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn install --settings &lt;SETTINGS_FILE_LOCATION&gt;<br></code></pre></td></tr></table></figure><p>示例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shelll">mvn install --settings D:\Apache\apache-maven-3.6.3\conf\settings.xml<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;查看依赖树&quot;&gt;&lt;a href=&quot;#查看依赖树&quot; class=&quot;headerlink&quot; title=&quot;查看依赖树&quot;&gt;&lt;/a&gt;查看依赖</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.yahyav2rayssr.top/categories/Java/"/>
    
    <category term="maven" scheme="https://blog.yahyav2rayssr.top/categories/Java/maven/"/>
    
    
    <category term="maven" scheme="https://blog.yahyav2rayssr.top/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>Java 多线程设计模式</title>
    <link href="https://blog.yahyav2rayssr.top/posts/4b405cfc/"/>
    <id>https://blog.yahyav2rayssr.top/posts/4b405cfc/</id>
    <published>2023-04-18T15:31:33.363Z</published>
    <updated>2023-04-18T15:31:33.365Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多线程设计模式"><a href="#多线程设计模式" class="headerlink" title="多线程设计模式"></a>多线程设计模式</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="线程的终止"><a href="#线程的终止" class="headerlink" title="线程的终止"></a>线程的终止</h3><p>Java程序的终止是指除守护进程以外的线程全部终止。</p><h3 id="竞态条件"><a href="#竞态条件" class="headerlink" title="竞态条件"></a>竞态条件</h3><p>线程之间由于相互竞争而引起的与预期相反的情况称为数据竞争（data race）或竞态条件（race condition）。</p><h3 id="监视"><a href="#监视" class="headerlink" title="监视"></a>监视</h3><p>线程的互斥机制称为<strong>监视</strong>（monitor）。另外，获取锁有时也叫做“拥有监视”或“持有锁”。</p><p>当前线程是否已获取某一对象的锁可以通过Thread.holdsLock方法来确认。当前线程已获取对象obj的锁时，可使用assert来像下面表示出来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">assert</span> Thread.holdsLock(obj)<br></code></pre></td></tr></table></figure><h2 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h2><p>HashTable中的所有方法都采用Single Threaded Execution模式，而ConcurrentHashMap则将内部数据结构分成多段，针对各段操作的线程互不相干，因而也就无需针对其他线程执行互斥处理。这样看来，HashTable更容易发生线程冲突。</p><p><strong><code>java.util.concurrent.CocurrentHashMap</code>接口是通过分割内部数据结构防止线程冲突的Map。</strong></p><h2 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h2><p>Semaphore是一种基于计数的信号量。它可以设定一个阈值，基于此，多个线程竞争获取许可信号，做完自己的申请后归还，超过阈值后，线程申请许可信号将会被阻塞。Semaphore可以用来构建一些对象池，资源池之类的，比如数据库连接池，我们也可以创建计数为1的Semaphore，将其作为一种类似互斥锁的机制，这也叫二元信号量，表示两种互斥状态。</p><p>资源的许可个数（permits）将通过Semaphore的构造函数来确定。</p><ul><li>Semaphore的acquire方法用于确保存在可用资源。</li><li>Semephore的release方法用户释放资源。</li></ul><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Log</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printLn</span><span class="hljs-params">(String s)</span> &#123;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;: &quot;</span> + s);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BoundedResource</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Semaphore semaphore;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-keyword">permits</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>(<span class="hljs-number">314159</span>);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BoundedResource</span><span class="hljs-params">(<span class="hljs-type">int</span> <span class="hljs-keyword">permits</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.semaphore = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Semaphore</span>(<span class="hljs-keyword">permits</span>);<br>        <span class="hljs-built_in">this</span>.<span class="hljs-keyword">permits</span> = <span class="hljs-keyword">permits</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">use</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        semaphore.acquire();<br>        <span class="hljs-keyword">try</span> &#123;<br>            doUse();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            semaphore.release();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doUse</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        Log.printLn(<span class="hljs-string">&quot;BEGIN: used = &quot;</span> + (<span class="hljs-keyword">permits</span> - semaphore.availablePermits()));<br>        Thread.sleep(random.nextInt(<span class="hljs-number">500</span>));<br>        Log.printLn(<span class="hljs-string">&quot;END: used = &quot;</span> + (<span class="hljs-keyword">permits</span> - semaphore.availablePermits()));<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>(<span class="hljs-number">26344</span>);<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> BoundedResource resource;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserThread</span><span class="hljs-params">(BoundedResource resource)</span> &#123;<br>        <span class="hljs-built_in">this</span>.resource = resource;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                resource.use();<br>                Thread.sleep(random.nextInt(<span class="hljs-number">3000</span>));<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">BoundedResource</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BoundedResource</span>(<span class="hljs-number">3</span>);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserThread</span>(resource).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Before-x2F-After模式"><a href="#Before-x2F-After模式" class="headerlink" title="Before&#x2F;After模式"></a>Before&#x2F;After模式</h2><p>before&#x2F;After模式主要在于finally的引入。</p><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span> &#123;<br>    lock();<br>    <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">//业务逻辑</span><br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        unlock();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ThreadFactory"><a href="#ThreadFactory" class="headerlink" title="ThreadFactory"></a>ThreadFactory</h2><p>ThreadFactory翻译过来是线程工厂，顾名思义，就是用来创建线程的，它用到了工厂模式的思想。它通常和线程池一起使用，主要用来控制创建新线程时的一些行为，比如设置线程的优先级，名字等等。</p><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ThreadFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> Executors.defaultThreadFactory();<br>        factory.newThread(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Printer</span>(<span class="hljs-string">&quot;Nice!&quot;</span>)).start();<br>        factory.newThread(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Printer</span>(<span class="hljs-string">&quot;Bitch!&quot;</span>)).start();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Good&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>单线程程序中使用synchronized方法并不会破坏程序的安全性。但是，调用synchronized方法要比调用一般方法花费时间，这会稍微降低程序性能。</p></blockquote><blockquote><p>long，double的赋值和引用操作并不是原子的。总结如下：</p><ul><li>基本类型、引用类型的赋值和引用是原子操作。</li><li>long和double的赋值和引用是非原子操作。</li><li>long或double在线程间共享时，需要将其放入synchronized中操作，或者声明为volatile。</li></ul></blockquote><blockquote><p>字符串和实例表达式通过运算符“+”连接时，程序会自动调用实例表达式的toString()方法。</p></blockquote><blockquote><p>Thread.yield并不会释放锁。</p></blockquote><h2 id="Single-Threaded-Execution模式"><a href="#Single-Threaded-Execution模式" class="headerlink" title="Single Threaded Execution模式"></a>Single Threaded Execution模式</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>Single Threaded Execution模式主要是用于确保同一时间内只能让一个线程执行处理，说通俗点就是对synchronized的标准化使用方式，这是比较基础的。</p><h3 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h3><p>Single Threaded Execution 模式的角色如下：</p><p>SharedResource(共享资源)参与者<br> SharedResource就是多线线程会同时访问的资源类，该类通常具有2类方法：<br> ①SafeMethod——从多个线程同时调用也不会发生问题的方法<br> ②UnsafeMethod——从多个线程同时调用会发生问题，这类方法需要加以防护，指定只能由单线程访问区域，即临界区（critical section）。</p><img src="/posts/4b405cfc/37.jpg" style="zoom:67%;"><h2 id="Immutable模式"><a href="#Immutable模式" class="headerlink" title="Immutable模式"></a>Immutable模式</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>Immutable是“永恒的”“不会改变”的意思。在Immutable Patttern中，有着能够保证实例状态绝不会改变的类（immutable 类）。因为访问这个实例时，可以省去使用共享互斥机制所会浪费的时间，提高系统性能。java.lang.String就是一个Immutable的类。</p><p><strong>模式讲解</strong></p><ul><li>Immutable(不变的)参与者<br>Immutable参与者是一个字段值无法更改的类，也没有任何用来更改字段值的方法。当Immutable参与者的实例建立后，状态就完全不再变化。</li></ul><img src="/posts/4b405cfc/38.jpg" style="zoom: 80%;"><blockquote><p>即便字段是final字段，且不存在setter方法，也有可能不是不可变的。因为即使字段的值不会发生变化，字段引用的实例也有可能会发生变化。</p></blockquote><p>Java标准类库中用到immutable模式</p><ul><li>java.lang.String</li><li>java.math.BigInteger 和 java.math.BigDecimal。（BigInterger表示所有精度的整数，BigDecimal表示所有精度的数）</li><li>java.util.regex.Pattern 正则表达式</li><li>java.lang.Integer等基本类型的包装类</li><li>java.awt.Color</li></ul><blockquote><p>java.lang.Void类不同于其他的包装类，它无法创建实例。该类用于保存表示基本类型void的Class类的实例，用在反射和序列化中。</p></blockquote><h2 id="Guarded-Suspension模式"><a href="#Guarded-Suspension模式" class="headerlink" title="Guarded Suspension模式"></a>Guarded Suspension模式</h2><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><p>guarded是“被保护着的”、“被防卫着的”意思，suspension则是“暂停”的意思。当现在并不适合马上执行某个操作时，就要求想要执行该操作的线程等待。</p><h3 id="模式讲解"><a href="#模式讲解" class="headerlink" title="模式讲解"></a>模式讲解</h3><p>角色：<br> Guarded Suspension Pattern 的角色如下：</p><ul><li>GuardedObject  (被防卫的对象)参与者<br> GuardedObject 参与者是一个拥有被防卫的方法（guardedMethod）的类。当线程执行guardedMethod时，只要满足警戒条件，就能继续执行，否则线程会进入wait  set区等待。警戒条件是否成立随着GuardedObject的状态而变化。<br> GuardedObject 参与者除了guardedMethod外，可能还有用来更改实例状态的的方法stateChangingMethod。</li></ul><p>在Java语言中，是使用while语句和wait方法来实现guardedMethod的；使用notify&#x2F;notifyAll方法实现stateChangingMethod。如案例中的RequestQueue 类。</p><img src="/posts/4b405cfc/39.jpg" style="zoom:67%;"><h2 id="Balking模式"><a href="#Balking模式" class="headerlink" title="Balking模式"></a>Balking模式</h2><h3 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h3><ol><li>我正坐在餐馆中，合计着吃点什么。想好之后，我举起手示意服务员点菜。于是，看到我举手的服务员就向我走来点菜。这时，另一位服务员也看到我举手示意了，但他看到已经有一位服务员走向了我，所以就没有再过来。</li><li>如果现在不适合执行这个操作，或者没必要执行这个操作，就停止处理，直接返回——这就是Balking模式。</li><li>所谓Balk，就是 “停止并返回” 的意思。</li><li>Balking 模式与Guarded Suspension模式一样，也存在守护条件。在Balking模式中，如果守护条件不成立，则立即中断处理。这与Guarded Suspension模式有所不同，因为Guarded Suspension模式是一直等待至可以运行。</li></ol><h3 id="模式详解"><a href="#模式详解" class="headerlink" title="模式详解"></a>模式详解</h3><p>角色：</p><p>GuardedObject（被防护的对象）</p><ol><li>GuardedObject角色是一个拥有被防护的方法（guardedMethod）的类。当线程执行guardedMethod方法时，若守护条件成立，则执行实际的处理。而当守护条件不成立时，则不执行实际的处理，直接返回。守护条件的成立与否，会随着GuardedObject角色的状态变化而发生变化。</li><li>除了guardedMethod之外，GuardedObject角色还有可能有其他来改变状态的方法（stateChangingMethod）。</li></ol><p>类图：</p><img src="/posts/4b405cfc/46.png" style="zoom: 67%;"><img src="/posts/4b405cfc/47.jpg" class><blockquote><p>状态仅变化一次的变量，我们通常称为闭锁（latch，门闩）。这个门闩一旦插上，就再也打不开了</p></blockquote><p>在守护条件成立之前等待一段时间，如果到时条件还未成立，则直接balk。我们将这种处理称为guarded timed 或timeout。</p><p>在java中，我们使用if来检查守护条件。balk处理的执行则是使用return从方法中退出，或者使用throw抛出异常。守护条件的检查处理则是使用synchronized放在临界区中。</p><h3 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileWriter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.Writer;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Data</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String filename;<br>    <span class="hljs-keyword">private</span> String content;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> changed;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Data</span><span class="hljs-params">(String filename, String content)</span> &#123;<br>        <span class="hljs-built_in">this</span>.filename = filename;<br>        <span class="hljs-built_in">this</span>.content = content;<br>        <span class="hljs-built_in">this</span>.changed = <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//修改了数据内容</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">change</span><span class="hljs-params">(String newContent)</span> &#123;<br>        content = newContent;<br>        changed = <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//若数据修改过，则保存到文件中</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-keyword">if</span> (!changed) &#123;<br>            <span class="hljs-comment">//如果没有修改，就不保存了</span><br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        doSave();<br>        changed = <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//将数据内容保存到文件中</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSave</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; calls doSave, content =&quot;</span> + content);<br>        <span class="hljs-type">Writer</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(filename);<br>        writer.write(content);<br>        writer.close();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChangerThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Data data;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ChangerThread</span><span class="hljs-params">(String name, Data data)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name);<br>        <span class="hljs-built_in">this</span>.data = data;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-literal">true</span>; i++) &#123;<br>                data.change(<span class="hljs-string">&quot;NO.&quot;</span> + i);<span class="hljs-comment">//修改数据</span><br>                Thread.sleep(random.nextInt(<span class="hljs-number">1000</span>));<span class="hljs-comment">//执行其他操作</span><br>                data.save();<span class="hljs-comment">//显示的保存,用户自己点击保存</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SaverThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Data data;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SaverThread</span><span class="hljs-params">(String name, Data data)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name);<br>        <span class="hljs-built_in">this</span>.data = data;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                data.save();<span class="hljs-comment">//要求保存数据</span><br>                Thread.sleep(<span class="hljs-number">1000</span>);<span class="hljs-comment">//休眠约一秒</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Data</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Data</span>(<span class="hljs-string">&quot;data.txt&quot;</span>, <span class="hljs-string">&quot;(empty)&quot;</span>);<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangerThread</span>(<span class="hljs-string">&quot;ChangeThread&quot;</span>, data).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">SaverThread</span>(<span class="hljs-string">&quot;SaverThread&quot;</span>, data).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="java-util-cocurrent中的超时"><a href="#java-util-cocurrent中的超时" class="headerlink" title="java.util.cocurrent中的超时"></a>java.util.cocurrent中的超时</h3><h4 id="通过异常通知超时"><a href="#通过异常通知超时" class="headerlink" title="通过异常通知超时"></a>通过异常通知超时</h4><p>当发生超时抛出异常时，返回值并不适合用于表示超时，需要使用java.util.concurrent.TimeoutException异常。</p><ul><li><strong>java.util.concurrent.Future接口的get方法</strong></li><li><strong>java.util.concurrent.Exchanger类的exchange方法</strong></li><li><strong>java.util.concurrent.Cyclicarrier类的await方法</strong></li><li><strong>java.util.concurrent.CountDownLatch类的await方法</strong></li></ul><h4 id="通过返回值通知超时"><a href="#通过返回值通知超时" class="headerlink" title="通过返回值通知超时"></a>通过返回值通知超时</h4><p>当执行多次try时，则不使用异常，而是使用返回值来表示超时。</p><ul><li><p><strong>java.util.concurrent.BlockingQueue接口</strong></p><p>当offer方法的返回值为false，或poll方法的返回值为null时，表示发生了超时。</p></li><li><p><strong>java.util.concurrent.Semaphore类</strong></p><p>当tryAcquire方法的返回值为false时，表示发生了超时。</p></li><li><p><strong>java.util.concurrent.locks.lock接口</strong></p><p>当tryLock方法的返回值为false时，表示发生了超时。</p></li></ul><h2 id="Producer-Consumer模式"><a href="#Producer-Consumer模式" class="headerlink" title="Producer-Consumer模式"></a>Producer-Consumer模式</h2><h3 id="定义-4"><a href="#定义-4" class="headerlink" title="定义"></a>定义</h3><p>Producer-Consumer Pattern就是生产者-消费者模式。<br>生产者和消费者在为不同的处理线程，生产者必须将数据安全地交给消费者，消费者进行消费时，如果生产者还没有建立数据，则消费者需要等待。<br>一般来说，可能存在多个生产者和消费者，不过也有可能生产者和消费者都只有一个，当双方都只有一个时，我们也称之为Pipe模式。</p><h3 id="模式讲解-1"><a href="#模式讲解-1" class="headerlink" title="模式讲解"></a>模式讲解</h3><p>Producer-Consumer模式的角色如下：</p><ul><li>Data(数据)参与者<br>Data代表了实际生产或消费的数据。</li><li>Producer(生产者)参与者<br>Producer会创建Data，然后传递给Channel参与者。</li><li>Consumer(消费者)参与者<br>Consumer从Channel参与者获取Data数据，进行处理。</li><li>Channel(通道)参与者<br>Channel从Producer参与者处接受Data参与者，并保管起来，并应Consumer参与者的要求，将Data参与者传送出去。为确保安全性，Producer参与者与Consumer参与者要对访问共享互斥。</li></ul><img src="/posts/4b405cfc/48.jpg" class><blockquote><p>在Swing（JFC）框架中，事件处理部分使用的就是这种方法（多个Producer角色对应一个Comsumer角色）。执行Swing事件处理的线程称为事件分发线程。这个线程相当于从Channel角色的事件队列取出事件并进行处理的Comsumer角色。事件分发线程只有一个。</p></blockquote><h3 id="示例代码-2"><a href="#示例代码-2" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">concurrent</span>.<span class="hljs-property">ArrayBlockingQueue</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用 queue</span><br><span class="hljs-comment"> */</span><br>public <span class="hljs-keyword">class</span> <span class="hljs-title class_">BlockingQueueTable</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">ArrayBlockingQueue</span>&lt;<span class="hljs-title class_">String</span>&gt; &#123;<br><br>    public <span class="hljs-title class_">BlockingQueueTable</span>(int size) &#123;<br>        <span class="hljs-variable language_">super</span>(size);<br>    &#125;<br><br>    public <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span>(final <span class="hljs-title class_">String</span> cakeName) throws <span class="hljs-title class_">InterruptedException</span> &#123;<br>        <span class="hljs-variable language_">super</span>.<span class="hljs-title function_">put</span>(cakeName);<br>    &#125;<br><br>    public <span class="hljs-title class_">String</span> <span class="hljs-title function_">take</span>() throws <span class="hljs-title class_">InterruptedException</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">super</span>.<span class="hljs-title function_">take</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> BlockingQueueTable 可以被这个替换</span><br><span class="hljs-comment"> */</span><br>public <span class="hljs-keyword">class</span> <span class="hljs-title class_">Table</span> &#123;<br><br>    private <span class="hljs-title class_">String</span>[] cakeArray;<br><br>    private int head;<br><br>    private int tail;<br><br>    private int count;<br><br>    private final int size;<br><br>    public <span class="hljs-title class_">Table</span>(int size) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">size</span> = size;<br>        cakeArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[size];<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">tail</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span> = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    public synchronized <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span>(final <span class="hljs-title class_">String</span> cakeName) throws <span class="hljs-title class_">InterruptedException</span> &#123;<br>        <span class="hljs-keyword">while</span> (count &gt;= size) &#123;<br>            <span class="hljs-title function_">wait</span>();<br>        &#125;<br><br>        cakeArray[tail] = cakeName;<br>        count++;<br>        tail = (tail + <span class="hljs-number">1</span>) % size;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-title class_">Thread</span>.<span class="hljs-title function_">currentThread</span>().<span class="hljs-title function_">getName</span>() + <span class="hljs-string">&quot; put cake &quot;</span> + cakeName);<br><br>        <span class="hljs-title function_">notifyAll</span>();<br>    &#125;<br><br>    public synchronized <span class="hljs-title class_">String</span> <span class="hljs-title function_">take</span>() throws <span class="hljs-title class_">InterruptedException</span> &#123;<br>        <span class="hljs-keyword">while</span> (count &lt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-title function_">wait</span>();<br>        &#125;<br><br>        <span class="hljs-title class_">String</span> result = cakeArray[head];<br>        head = (head + <span class="hljs-number">1</span>) % size;<br>        count--;<br><br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-title class_">Thread</span>.<span class="hljs-title function_">currentThread</span>().<span class="hljs-title function_">getName</span>() + <span class="hljs-string">&quot; take cake &quot;</span> + result);<br>        <span class="hljs-title function_">notifyAll</span>();<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">Random</span>;<br><br>public <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConsumerCakeThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Thread</span> &#123;<br><br>    private <span class="hljs-title class_">String</span> name;<br><br>    private final <span class="hljs-title class_">Table</span> table;<br><br>    public <span class="hljs-title class_">ConsumerCakeThread</span>(<span class="hljs-title class_">String</span> name, <span class="hljs-title class_">Table</span> table) &#123;<br>        <span class="hljs-variable language_">super</span>(name);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">table</span> = table;<br>    &#125;<br><br>    @<span class="hljs-title class_">Override</span><br>    public <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title class_">Random</span> random = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>(1000L);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-title class_">Thread</span>.<span class="hljs-title function_">sleep</span>(random.<span class="hljs-title function_">nextInt</span>(<span class="hljs-number">1000</span>));<br>                table.<span class="hljs-title function_">take</span>();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">InterruptedException</span> e) &#123;<br>            e.<span class="hljs-title function_">printStackTrace</span>();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">Random</span>;<br><br>public <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProducerCakeThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Thread</span> &#123;<br><br>    private final <span class="hljs-title class_">Table</span> table;<br><br>    private <span class="hljs-keyword">static</span> int id = <span class="hljs-number">0</span>;<br><br>    public <span class="hljs-title class_">ProducerCakeThread</span>(<span class="hljs-title class_">String</span> name, <span class="hljs-title class_">Table</span> table) &#123;<br>        <span class="hljs-variable language_">super</span>(name);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">table</span> = table;<br>    &#125;<br><br>    @<span class="hljs-title class_">Override</span><br>    public <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title class_">Random</span> random = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>(1000L);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-title class_">String</span> cakeName = <span class="hljs-title function_">getName</span>() + <span class="hljs-string">&quot;-&quot;</span> + <span class="hljs-title function_">genId</span>();<br>                <span class="hljs-title class_">Thread</span>.<span class="hljs-title function_">sleep</span>(random.<span class="hljs-title function_">nextInt</span>(<span class="hljs-number">1000</span>));<br>                table.<span class="hljs-title function_">put</span>(cakeName);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">InterruptedException</span> e) &#123;<br>            e.<span class="hljs-title function_">printStackTrace</span>();<br>        &#125;<br>    &#125;<br><br>    private <span class="hljs-keyword">static</span> synchronized int <span class="hljs-title function_">genId</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> id++;<br>    &#125;<br>&#125;<br><br>public <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br><br>    public <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>) &#123;<br>        <span class="hljs-title class_">Table</span> table = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Table</span>(<span class="hljs-number">3</span>);<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConsumerCakeThread</span>(<span class="hljs-string">&quot;ConsumerCake&quot;</span>, table).<span class="hljs-title function_">start</span>();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProducerCakeThread</span>(<span class="hljs-string">&quot;ProducerCake&quot;</span>, table).<span class="hljs-title function_">start</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Read-Write-Lock模式"><a href="#Read-Write-Lock模式" class="headerlink" title="Read-Write Lock模式"></a>Read-Write Lock模式</h2><h3 id="定义-5"><a href="#定义-5" class="headerlink" title="定义"></a>定义</h3><p>Read-Write Lock Pattern将读取与写入分开处理，在读取数据之前必须获取用来读取的锁定，而写入的时候必须获取用来写入的锁定。因为读取时实例的状态不会改变，所以多个线程可以同时读取；但是，写入会改变实例的状态，所以当有一个线程写入的时候，其它线程既不能读取与不能写入。</p><h3 id="模式详解-1"><a href="#模式详解-1" class="headerlink" title="模式详解"></a>模式详解</h3><p>Read-Write Lock模式的角色如下：</p><ul><li><strong>Reader(读取者)参与者</strong><br>Reader参与者会对SharedResource进行读。</li><li><strong>Writer(写入者)参与者</strong><br>Writer参与者会对SharedResource进行写。</li><li><strong>SharedResource(共享资源)参与者</strong><br>SharedResource代表Reader和Writer所共享的资源对象，SharedResource提供不改变内部状态的read操作，以及会改变内部状态的write操作。</li><li><strong>ReadWriteLock(读写锁)参与者</strong><br>ReadWriteLock提供了对SharedResource参与者进行read操作和write操作时需要的锁定。</li></ul><img src="/posts/4b405cfc/49.jpg" class><img src="/posts/4b405cfc/50.jpg" class><p>总结<br>SharedResource角色提供了read和write两个操作。read不会改变其状态，而write会，当Reader角色在read时，Writer角色必须等，而当Writer角色正在write时，Reader角色和其他Writer角色也必须等待。于是引入了ReadWriteLock角色，该角色提供分别用于read和write的锁，来执行上述的互斥处理，这样，确保了SharedResource角色的安全性，当read操作特别繁重时，程序性能能大大提高，在实现时，必须充分考虑执行互斥处理时采用的Guarded Suspension模式的守护条件。使用finally防止忘记释放锁，这就是Read Write Lock模式。</p><h3 id="示例代码-3"><a href="#示例代码-3" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Data</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">char</span>[] buffer;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantReadWriteLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantReadWriteLock</span>(<span class="hljs-literal">true</span>); <span class="hljs-comment">//这个其实是java.util.concurrent.locks写好的读写锁类,可以直接调用 不用自己写啦.</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Lock</span> <span class="hljs-variable">readLock</span> <span class="hljs-operator">=</span> lock.readLock(); <span class="hljs-comment">// 读锁</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Lock</span> <span class="hljs-variable">writeLock</span> <span class="hljs-operator">=</span> lock.writeLock(); <span class="hljs-comment">// 写锁</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ReadWriteLock</span> <span class="hljs-variable">readWriteLock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReadWriteLock</span>();<span class="hljs-comment">//我们自己实现的读写锁类</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Data</span><span class="hljs-params">(<span class="hljs-type">int</span> size)</span> &#123;<br>        <span class="hljs-built_in">this</span>.buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[size];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; buffer.length; i++) &#123;<br>            buffer[i] = <span class="hljs-string">&#x27;*&#x27;</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">char</span>[] read() <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        readWriteLock.readLock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> doRead();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            readWriteLock.unReadLock();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(<span class="hljs-type">char</span> c)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        readWriteLock.writeLock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            doWrite(c);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            readWriteLock.unWriteLock();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">char</span>[] doRead() &#123;<br>        <span class="hljs-type">char</span>[] newbuf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[buffer.length];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; newbuf.length; i++) &#123;<br>            newbuf[i] = buffer[i];<br>        &#125;<br>        slowly();<br>        <span class="hljs-keyword">return</span> newbuf;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">slowly</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">50</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            <span class="hljs-comment">// TODO Auto-generated catch block</span><br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doWrite</span><span class="hljs-params">(<span class="hljs-type">char</span> c)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; buffer.length; i++) &#123;<br>            buffer[i] = c;<br>            slowly();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReaderThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Data data;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ReaderThread</span><span class="hljs-params">(Data data)</span> &#123;<br>        <span class="hljs-built_in">this</span>.data = data;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-type">char</span>[] read = data.read();<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; reads &quot;</span> + String.valueOf(read));<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> handle exception</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WriterThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Data data;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String filler;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">WriterThread</span><span class="hljs-params">(Data data, String filler)</span> &#123;<br>        <span class="hljs-built_in">this</span>.data = data;<br>        <span class="hljs-built_in">this</span>.filler = filler;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> nextchar();<br>                data.write(c);<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; write &quot;</span> + c);<br>                Thread.sleep(random.nextInt(<span class="hljs-number">3000</span>));<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> handle exception</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">char</span> <span class="hljs-title function_">nextchar</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> filler.charAt(index);<br>        index++;<br>        <span class="hljs-keyword">if</span> (index &gt;= filler.length()) &#123;<br>            index = <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> c;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReadWriteLock</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">readingReaders</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 正在读取的线程数量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">writingWriters</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 正在写入的线程数量</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readLock</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">while</span> (writingWriters &gt; <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 如果有线程在执行写入,等待.</span><br>            wait();<br>        &#125;<br>        readingReaders++;  <span class="hljs-comment">// 实际在读取的线程+1</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unReadLock</span><span class="hljs-params">()</span> &#123;<br>        readingReaders--;  <span class="hljs-comment">// 实际读取线程-1</span><br>        notifyAll();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeLock</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">while</span> (writingWriters &gt; <span class="hljs-number">0</span> || readingReaders &gt; <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 如果有线程正在写入,或者在读取 等待</span><br>            wait();<br>        &#125;<br>        writingWriters++; <span class="hljs-comment">// 正在写入的线程+1</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unWriteLock</span><span class="hljs-params">()</span> &#123;<br>        writingWriters--; <span class="hljs-comment">// 正在写入的线程-1</span><br>        notifyAll();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Data</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Data</span>(<span class="hljs-number">10</span>);<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReaderThread</span>(data).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReaderThread</span>(data).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReaderThread</span>(data).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReaderThread</span>(data).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReaderThread</span>(data).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReaderThread</span>(data).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">WriterThread</span>(data, <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">WriterThread</span>(data, <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="ReentrantReadWriteLock特点"><a href="#ReentrantReadWriteLock特点" class="headerlink" title="ReentrantReadWriteLock特点"></a><strong>ReentrantReadWriteLock特点</strong></h3><ul><li><p>公平性</p><p>当创建ReentrantReadWriteLock类的实例时，我们可以选择锁的获取顺序是否要设为公平的。如果创建的实例是公平的，那么等待时间久的线程可以优先获取锁。</p></li><li><p>可重入性</p><p>ReentrantReadWriteLock类的锁是可重入的。也就是说，Reader角色的线程可以获取“用于写入的锁”，Writer角色的线程也可以获取“用于读取的锁”。</p></li><li><p>锁降级</p><p>ReentrantReadwriteLock类可以按如下顺序将“用于写入的锁”降级为“用于读取的锁”。</p><ul><li><p>获取用于写入的锁</p></li><li><p>获取用于读取的锁</p></li><li><p>释放用于写入的锁</p></li></ul><p>但是，“用于读取的锁”不可以升级为“用户写入的锁”。</p></li><li><p>便携方法</p><p>ReentrantReadWriteLock类提供了获取等待中的线程的个数的方法getQueueLength，以及检查是否获取了用于写入的锁的方法isWriteLocked等便携方法。</p></li></ul><h2 id="Thread-per-Message模式"><a href="#Thread-per-Message模式" class="headerlink" title="Thread-per-Message模式"></a>Thread-per-Message模式</h2><h3 id="定义-6"><a href="#定义-6" class="headerlink" title="定义"></a>定义</h3><p>Thread-Per-Message模式是说为每个请求都分配一个线程，由这个线程来执行处理，使得消息能够并发（但是注意：线程的创建是有限的，可以使用线程池来处理，超过数量则加入等待队列），这里包含两个角色，请求的提交线程和请求的执行线程。</p><h3 id="模式详解-2"><a href="#模式详解-2" class="headerlink" title="模式详解"></a>模式详解</h3><ul><li>Client（委托人）<br>Client角色会向Host角色发出请求（request），但是并不知道Host角色是如何实现该请求的。</li><li>Host<br>Host角色收到Client角色的请求（request）之后，会新创建并启动一个线程。新创建的线程将使用Helper角色来 “处理”（handle）请求。</li><li>Helper（助手）<br>Helper角色为Host角色提供请求处理的功能。Host角色创建的新线程会利用Helper角色。</li></ul><img src="/posts/4b405cfc/53.png"><img src="/posts/4b405cfc/54.jpg" style="zoom: 80%;"><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li><strong>提高响应性，缩短延迟时间</strong><br>Thread-Per-Message模式能够提高与Client角色对应的Host角色的响应性，降低延迟时间。尤其是当handle操作非常耗时，或者handle操作需要等待输入&#x2F;输出时，效果非常明显。<br>在Thread-Per-Message模式下，Host角色会启动新的线程。由于启动线程也会花费时间，所以想要提高响应性时，是否使用Thread-Per-Message模式取决于 “handle操作花费的时间” 和 “线程启动花费的时间” 之间的均衡。</li><li><strong>适用于操作顺序没有要求时</strong><br>在Thread-Per-Message模式中，handle方法并不一定是按request方法的调用顺序来执行的。因此，当操作要按某种顺序执行时，Thread-Per-Message模式并不适用。</li><li><strong>适用于不需要返回值时</strong><br>在Thread-Per-Message模式中，request方法并不会等待handle方法执行结束。所以request得不到handle的运行结果。因此，Thread-Per-Message模式适用于不需要获取返回值的情况。例如通知某个事件时。</li><li><strong>应用于服务器</strong><br>为了使服务器可以处理多个请求，我们可以使用Thread-Per-Message模式。服务器本身的线程接收客户端的请求，而这些请求的实际处理则交由其他线程来执行，服务器本身的线程则返回，去等待客户端的其他请求。</li></ol><h3 id="Factory-Method模式"><a href="#Factory-Method模式" class="headerlink" title="Factory Method模式"></a><strong>Factory Method模式</strong></h3><p>使用new创建Thread实例时，代码依赖于java.lang.Thread类。这时，我们无法控制创建线程的部分，可复用性较低。假如我们用字段threadFactory来保存ThreadFactory对象，用threadFactory.newThread(…)来替代new Thread(…)。这样一来，只要替换赋给threadFactory的ThreadFactory对象，我们便可以控制线程创建了。这就是Factory Method模式。</p><p><strong>示例代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Helper</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(<span class="hljs-type">int</span> count, <span class="hljs-type">char</span> c)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;handle begin&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; count; i++) &#123;<br>            slowly();<br>            System.out.print(c);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;handle end&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">slowly</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">100</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            <span class="hljs-comment">// TODO Auto-generated catch block</span><br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Host</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Helper</span> <span class="hljs-variable">helper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Helper</span>();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ThreadFactory threadFactory;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Host</span><span class="hljs-params">()</span> &#123;<br>        threadFactory = <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Host</span><span class="hljs-params">(ThreadFactory threadFactory)</span> &#123;<br>        <span class="hljs-built_in">this</span>.threadFactory = threadFactory;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">request</span><span class="hljs-params">(<span class="hljs-keyword">final</span> <span class="hljs-type">int</span> count, <span class="hljs-keyword">final</span> <span class="hljs-type">char</span> c)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;request begin [&quot;</span> + count + <span class="hljs-string">&quot;, &quot;</span> + c + <span class="hljs-string">&quot;] begin&quot;</span>);<br>        threadFactory.newThread(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                helper.handle(count, c);<br>            &#125;<br>        &#125;).start();<br>        System.out.println(<span class="hljs-string">&quot;request begin [&quot;</span> + count + <span class="hljs-string">&quot;, &quot;</span> + c + <span class="hljs-string">&quot;] end&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;main begin&quot;</span>);<br><br>        <span class="hljs-type">ThreadFactory</span> <span class="hljs-variable">threadFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadFactory</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Thread <span class="hljs-title function_">newThread</span><span class="hljs-params">(Runnable r)</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r);<br>            &#125;<br>        &#125;;<br>        <span class="hljs-type">Host</span> <span class="hljs-variable">host</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Host</span>(threadFactory);<br>        host.request(<span class="hljs-number">10</span>, <span class="hljs-string">&#x27;A&#x27;</span>);<br>        host.request(<span class="hljs-number">20</span>, <span class="hljs-string">&#x27;B&#x27;</span>);<br>        host.request(<span class="hljs-number">30</span>, <span class="hljs-string">&#x27;C&#x27;</span>);<br>        System.out.println(<span class="hljs-string">&quot;main End&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="java-util-concurrent-Executor接口"><a href="#java-util-concurrent-Executor接口" class="headerlink" title="java.util.concurrent.Executor接口"></a><strong>java.util.concurrent.Executor接口</strong></h3><p>Executor接口将某些“处理的执行”抽象化了，参数传入的Runnable对象表示“执行的处理”的内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Helper</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(<span class="hljs-type">int</span> count, <span class="hljs-type">char</span> c)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;handle begin&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; count; i++) &#123;<br>            slowly();<br>            System.out.print(c);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;handle end&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">slowly</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">100</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            <span class="hljs-comment">// TODO Auto-generated catch block</span><br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Host</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Helper</span> <span class="hljs-variable">helper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Helper</span>();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Executor executor;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Host</span><span class="hljs-params">(Executor executor)</span> &#123;<br>        <span class="hljs-built_in">this</span>.executor = executor;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">request</span><span class="hljs-params">(<span class="hljs-keyword">final</span> <span class="hljs-type">int</span> count, <span class="hljs-keyword">final</span> <span class="hljs-type">char</span> c)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;request begin [&quot;</span> + count + <span class="hljs-string">&quot;, &quot;</span> + c + <span class="hljs-string">&quot;] begin&quot;</span>);<br>        executor.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                helper.handle(count, c);<br>            &#125;<br>        &#125;);<br>        System.out.println(<span class="hljs-string">&quot;request begin [&quot;</span> + count + <span class="hljs-string">&quot;, &quot;</span> + c + <span class="hljs-string">&quot;] end&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;main begin&quot;</span>);<br>        <span class="hljs-type">Executor</span> <span class="hljs-variable">executor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Executor</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">(Runnable r)</span> &#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r).start();<br>            &#125;<br>        &#125;;<br>        <span class="hljs-type">Host</span> <span class="hljs-variable">host</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Host</span>(executor);<br>        host.request(<span class="hljs-number">10</span>, <span class="hljs-string">&#x27;A&#x27;</span>);<br>        host.request(<span class="hljs-number">20</span>, <span class="hljs-string">&#x27;B&#x27;</span>);<br>        host.request(<span class="hljs-number">30</span>, <span class="hljs-string">&#x27;C&#x27;</span>);<br>        System.out.println(<span class="hljs-string">&quot;main End&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="java-util-concurrent-ExecutorService接口"><a href="#java-util-concurrent-ExecutorService接口" class="headerlink" title="java.util.concurrent.ExecutorService接口"></a><strong>java.util.concurrent.ExecutorService接口</strong></h4><p>ExecutorService接口对可以反复execute的服务进行了抽象化。线程一直在后台运行着，每当调用execute方式时，在ExecutorService接口后面，线程是一直在运行着，所以ExecutorService接口<strong>提供了shutdown方法</strong>来结束服务。</p><p><strong>示例代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;main begin&quot;</span>);<br>        <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">executorService</span> <span class="hljs-operator">=</span> Executors.newCachedThreadPool();<br>        <span class="hljs-type">Host</span> <span class="hljs-variable">host</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Host</span>(executorService);<br>        <span class="hljs-keyword">try</span> &#123;<br>            host.request(<span class="hljs-number">10</span>, <span class="hljs-string">&#x27;A&#x27;</span>);<br>            host.request(<span class="hljs-number">20</span>, <span class="hljs-string">&#x27;B&#x27;</span>);<br>            host.request(<span class="hljs-number">30</span>, <span class="hljs-string">&#x27;C&#x27;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            executorService.shutdown();<br>            System.out.println(<span class="hljs-string">&quot;main End&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>java.util.concurrent.ScheduledExecutorService类</strong></p><p>java.util.concurrent.ScheduledExecutorService接口是ExecutorService的子接口，用于推迟操作的执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Helper</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(<span class="hljs-type">int</span> count, <span class="hljs-type">char</span> c)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;handle begin&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; count; i++) &#123;<br>            slowly();<br>            System.out.print(c);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;handle end&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">slowly</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">100</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            <span class="hljs-comment">// TODO Auto-generated catch block</span><br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Host</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Helper</span> <span class="hljs-variable">helper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Helper</span>();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ScheduledExecutorService scheduledExecutorService;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Host</span><span class="hljs-params">(ScheduledExecutorService scheduledExecutorService)</span> &#123;<br>        <span class="hljs-built_in">this</span>.scheduledExecutorService = scheduledExecutorService;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">request</span><span class="hljs-params">(<span class="hljs-keyword">final</span> <span class="hljs-type">int</span> count, <span class="hljs-keyword">final</span> <span class="hljs-type">char</span> c)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;request begin [&quot;</span> + count + <span class="hljs-string">&quot;, &quot;</span> + c + <span class="hljs-string">&quot;] begin&quot;</span>);<br>        scheduledExecutorService.schedule(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                helper.handle(count, c);<br>            &#125;<br>        &#125;, <span class="hljs-number">3L</span>, TimeUnit.SECONDS);<br>        System.out.println(<span class="hljs-string">&quot;request begin [&quot;</span> + count + <span class="hljs-string">&quot;, &quot;</span> + c + <span class="hljs-string">&quot;] end&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;main begin&quot;</span>);<br>        <span class="hljs-type">ScheduledExecutorService</span> <span class="hljs-variable">scheduledExecutorService</span> <span class="hljs-operator">=</span> Executors.newScheduledThreadPool(<span class="hljs-number">5</span>);<br>        <span class="hljs-type">Host</span> <span class="hljs-variable">host</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Host</span>(scheduledExecutorService);<br>        <span class="hljs-keyword">try</span> &#123;<br>            host.request(<span class="hljs-number">10</span>, <span class="hljs-string">&#x27;A&#x27;</span>);<br>            host.request(<span class="hljs-number">20</span>, <span class="hljs-string">&#x27;B&#x27;</span>);<br>            host.request(<span class="hljs-number">30</span>, <span class="hljs-string">&#x27;C&#x27;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            scheduledExecutorService.shutdown();<br>            System.out.println(<span class="hljs-string">&quot;main End&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/posts/4b405cfc/55.png" style="zoom: 50%;"><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Client 角色调用Host角色的request方法发来的请求，该请求的实际处理则交给Helper的handle去执行，然而，如果Client直接从request中调用handle方法，那么直到实际操作结束之前，都无法从handle方法返回（request返回），这样一来request的响应性能就下降了，因此，Host角色会启动用于处理来自Client角色请求的新线程，并让该线程来调用handle，这样一来发出请求的线程便可以立即从handle中返回。这就是Thread-Per-Message模式。</p><h2 id="Worker-Thread模式"><a href="#Worker-Thread模式" class="headerlink" title="Worker Thread模式"></a>Worker Thread模式</h2><h3 id="定义-7"><a href="#定义-7" class="headerlink" title="定义"></a>定义</h3><p>Worker的意思是工作的人、劳动者。在Worker Thread模式中，工人线程会逐个取回工作并进行处理。当所有工作全部完成后，工人线程会等待新的工作到来。</p><p>Worker Thread模式也被称为Background Thread（背景线程）模式。另外，如果从“保存多个工人线程的场所”这一点来看，我们也可以称这种模式为Thread Pool（线程池）模式。</p><h3 id="模式详解-3"><a href="#模式详解-3" class="headerlink" title="模式详解"></a>模式详解</h3><img src="/posts/4b405cfc/57.png" style="zoom:50%;"><img src="/posts/4b405cfc/56.png" style="zoom: 50%;"><img src="/posts/4b405cfc/58.png" style="zoom:50%;"><p><strong>角色</strong></p><ul><li><p>Client（委托者）</p><p>Client角色创建表示工作请求的Request角色并将其传递给Channel角色。在示例程序中，由ClientThread类扮演此角色。</p></li><li><p>Channel（通信线路）</p><p>Channel角色接受来自于Client角色的Request角色，并将其传递给Worker角色。在示例程序中，由Channel类扮演此角色。</p></li><li><p>Worker（工人）</p><p>Worker角色从Channel角色中获取Request角色，并进行工作。当一项工作完成后，它会继续去获取另外的Channel角色。在示例程序中，由WorkerThread类扮演此角色。</p></li><li><p>Request（请求）</p><p>Request角色是表示工作的角色。Request角色中保存了进行工作所必需的信息。在示例程序中，由Request角色扮演此角色。</p></li></ul><img src="/posts/4b405cfc/59.png" style="zoom:50%;"><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ul><li><p><strong>提高响应速度</strong></p><p>调用和执行分离。执行完调用处理的一方可以先继续执行其他处理，这样就可以提高响应速度。</p></li><li><p><strong>控制执行顺序（调度）</strong></p><p>如果调用和执行不可分离，那么在调用后就必须开始执行。</p><p>但是如果将调用和执行分离，执行就可以不再受调用调用顺序的制约。我们可以通过<strong>设置Request角色的优先级，并控制Channel角色将Request角色传递给Worker角色的顺序来实现上述处理。这种处理称为请求调度（scheduling）</strong>。</p></li><li><p><strong>可以取消和反复执行</strong></p><p>将调用和执行分离后，还可以实现“即使调用了也可以被取消执行”这种功能。</p><p>由于调用的是Request对象，所以既可以将Request角色保存，又可以反复的执行。</p></li><li><p><strong>通往分布式之路</strong></p><p>将调用和执行分离后，可以将负责调用的计算机与负责执行的计算机分离开来，然后通过网络将扮演Request角色的对象从一台计算机传递至另外一台计算机。</p></li></ul><h2 id="Future模式"><a href="#Future模式" class="headerlink" title="Future模式"></a>Future模式</h2><h3 id="定义-8"><a href="#定义-8" class="headerlink" title="定义"></a>定义</h3><p>Future模式是多线程开发中非常常见的一种设计模式。它的核心思想是异步调用。当我们需要调用一个函数方法时。如果这个函数执行很慢,那么我们就要进行等待。但有时候,我们可能并不急着要结果。因此,我们可以让被调用者立即返回,让他在后台慢慢处理这个请求。对于调用者来说,则可以先处理一些其他任务,在真正需要数据的场合再去尝试获取需要的数据。</p><blockquote><p>由于Future角色是”只能被赋值一次的变量“，所以可以把它看作一种闭锁（latch）。</p></blockquote><h3 id="模式详解-4"><a href="#模式详解-4" class="headerlink" title="模式详解"></a>模式详解</h3><table><thead><tr><th>名字</th><th>说明</th></tr></thead><tbody><tr><td>Main</td><td>向Host发出请求并获取数据的类</td></tr><tr><td>Host</td><td>向请求返回FutureData的实例的类</td></tr><tr><td>Data</td><td>表示访问数据的方法的接口。由FutureData和RealData实现该接口</td></tr><tr><td>FutureData</td><td>表示RealData的“提货单”的类。其他线程会创建RealData的实例。</td></tr><tr><td>RealData</td><td>表示实际数据的类。构造函数的处理会花费很长时间</td></tr></tbody></table><p><strong>类图</strong></p><img src="/posts/4b405cfc/60.png" style="zoom:50%;"><p><strong>时序图</strong></p><img src="/posts/4b405cfc/61.png" style="zoom:50%;"><p><strong>角色</strong></p><ul><li><p>Client（请求者）</p><p>Client角色向Host角色发出，并会立即接收到请求的处理结果——VirtualData角色。</p></li><li><p>Host</p><p>Host角色会创建新的线程，并开始在新线程中创建RealData角色。同时，它会将Future角色（当做VirtualData角色）返回给Client角色。</p></li><li><p>VirtualData</p><p>VirtualData角色是让Future角色和RealData角色具有一致性的角色。</p></li><li><p>RealData</p><p>RealData角色是表示真实数据的角色。</p></li><li><p>Future</p><p>Future角色是RealData角色的”提货单“，由Host角色传递给Client角色。</p></li></ul><h3 id="示例代码-4"><a href="#示例代码-4" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Data</span> &#123;<br>    String <span class="hljs-title function_">getContent</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FutureData</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Data</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">RealData</span> <span class="hljs-variable">realData</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">ready</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRealData</span><span class="hljs-params">(RealData realData)</span> &#123;<br>        <span class="hljs-keyword">if</span> (ready) &#123;<br>            <span class="hljs-keyword">return</span>; <span class="hljs-comment">// balk</span><br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;setting content = &quot;</span>+ realData.getContent());<br>        <span class="hljs-built_in">this</span>.realData = realData;<br>        <span class="hljs-built_in">this</span>.ready = <span class="hljs-literal">true</span>;<br>        notifyAll();<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getContent</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (!ready) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                wait();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> realData.getContent();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RealData</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Data</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String content;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">RealData</span><span class="hljs-params">(<span class="hljs-type">int</span> count, <span class="hljs-type">char</span> c)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;    making RealData(&quot;</span> + count + <span class="hljs-string">&quot;, &quot;</span> + c + <span class="hljs-string">&quot;) BEGIN&quot;</span>);<br>        <span class="hljs-type">char</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[count];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; count; i++) &#123;<br>            buffer[i] = c;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">100</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;    making RealData(&quot;</span> + count + <span class="hljs-string">&quot;, &quot;</span> + c + <span class="hljs-string">&quot;) END&quot;</span>);<br>        <span class="hljs-built_in">this</span>.content = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buffer);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getContent</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> content;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Host</span> &#123;<br>    <span class="hljs-keyword">public</span> Data <span class="hljs-title function_">request</span><span class="hljs-params">(<span class="hljs-keyword">final</span> <span class="hljs-type">int</span> count, <span class="hljs-keyword">final</span> <span class="hljs-type">char</span> c)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;    request(&quot;</span> + count + <span class="hljs-string">&quot;, &quot;</span> + c + <span class="hljs-string">&quot;) BEGIN&quot;</span>);<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">FutureData</span> <span class="hljs-variable">future</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureData</span>();<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-type">RealData</span> <span class="hljs-variable">realData</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RealData</span>(count, c);<br>                future.setRealData(realData);<br>            &#125;<br>        &#125;).start();<br><br>        System.out.println(<span class="hljs-string">&quot;    request(&quot;</span> + count + <span class="hljs-string">&quot;, &quot;</span> + c + <span class="hljs-string">&quot;) END&quot;</span>);<br>        <span class="hljs-keyword">return</span> future;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;main BEGIN&quot;</span>);<br>        <span class="hljs-type">Host</span> <span class="hljs-variable">host</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Host</span>();<br>        <span class="hljs-type">Data</span> <span class="hljs-variable">data1</span> <span class="hljs-operator">=</span> host.request(<span class="hljs-number">10</span>, <span class="hljs-string">&#x27;A&#x27;</span>);<br>        <span class="hljs-type">Data</span> <span class="hljs-variable">data2</span> <span class="hljs-operator">=</span> host.request(<span class="hljs-number">20</span>, <span class="hljs-string">&#x27;B&#x27;</span>);<br>        <span class="hljs-type">Data</span> <span class="hljs-variable">data3</span> <span class="hljs-operator">=</span> host.request(<span class="hljs-number">30</span>, <span class="hljs-string">&#x27;C&#x27;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;main otherJob BEGIN&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">5000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;main otherJob END&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;data1 = &quot;</span> + data1.getContent());<br>        System.out.println(<span class="hljs-string">&quot;data2 = &quot;</span> + data2.getContent());<br>        System.out.println(<span class="hljs-string">&quot;data3 = &quot;</span> + data3.getContent());<br>        System.out.println(<span class="hljs-string">&quot;main END&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="java-util-concurrent-示例程序"><a href="#java-util-concurrent-示例程序" class="headerlink" title="java.util.concurrent 示例程序"></a>java.util.concurrent 示例程序</h3><p><strong>Callable、Future、FutureTask的类图</strong></p><img src="/posts/4b405cfc/62.png" style="zoom: 67%;"><p><strong>示例程序时序图</strong></p><img src="/posts/4b405cfc/63.png" alt="image-20200705214631291" style="zoom: 50%;"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Data</span> &#123;<br>    String <span class="hljs-title function_">getContent</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FutureData</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FutureTask</span>&lt;RealData&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Data</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">FutureData</span><span class="hljs-params">(Callable&lt;RealData&gt; callable)</span> &#123;<br>        <span class="hljs-built_in">super</span>(callable);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getContent</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">string</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            get().getContent();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (ExecutionException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> string;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RealData</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Data</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String content;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">RealData</span><span class="hljs-params">(<span class="hljs-type">int</span> count, <span class="hljs-type">char</span> c)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;    making RealData(&quot;</span> + count + <span class="hljs-string">&quot;, &quot;</span> + c + <span class="hljs-string">&quot;) BEGIN&quot;</span>);<br>        <span class="hljs-type">char</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[count];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; count; i++) &#123;<br>            buffer[i] = c;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">100</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;    making RealData(&quot;</span> + count + <span class="hljs-string">&quot;, &quot;</span> + c + <span class="hljs-string">&quot;) END&quot;</span>);<br>        <span class="hljs-built_in">this</span>.content = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buffer);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getContent</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> content;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Host</span> &#123;<br>    <span class="hljs-keyword">public</span> FutureData <span class="hljs-title function_">request</span><span class="hljs-params">(<span class="hljs-keyword">final</span> <span class="hljs-type">int</span> count, <span class="hljs-keyword">final</span> <span class="hljs-type">char</span> c)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;    request(&quot;</span> + count + <span class="hljs-string">&quot;, &quot;</span> + c + <span class="hljs-string">&quot;) BEGIN&quot;</span>);<br><br>        <span class="hljs-type">FutureData</span> <span class="hljs-variable">future</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureData</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Callable</span>&lt;RealData&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> RealData <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RealData</span>(count, c);<br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-comment">// 启动一个新线程，用于创建RealData的实例。</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(future).start();<br><br>        System.out.println(<span class="hljs-string">&quot;    request(&quot;</span> + count + <span class="hljs-string">&quot;, &quot;</span> + c + <span class="hljs-string">&quot;) END&quot;</span>);<br>        <span class="hljs-keyword">return</span> future;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;main BEGIN&quot;</span>);<br>        <span class="hljs-type">Host</span> <span class="hljs-variable">host</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Host</span>();<br>        <span class="hljs-type">FutureData</span> <span class="hljs-variable">data1</span> <span class="hljs-operator">=</span> host.request(<span class="hljs-number">10</span>, <span class="hljs-string">&#x27;A&#x27;</span>);<br>        <span class="hljs-type">FutureData</span> <span class="hljs-variable">data2</span> <span class="hljs-operator">=</span> host.request(<span class="hljs-number">20</span>, <span class="hljs-string">&#x27;B&#x27;</span>);<br>        <span class="hljs-type">FutureData</span> <span class="hljs-variable">data3</span> <span class="hljs-operator">=</span> host.request(<span class="hljs-number">30</span>, <span class="hljs-string">&#x27;C&#x27;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;main otherJob BEGIN&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">5000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;main otherJob END&quot;</span>);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;data1 = &quot;</span> + data1.get().getContent());<br>            System.out.println(<span class="hljs-string">&quot;data2 = &quot;</span> + data2.get().getContent());<br>            System.out.println(<span class="hljs-string">&quot;data3 = &quot;</span> + data3.get().getContent());<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (ExecutionException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;main END&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Two-Phase-Termination模式"><a href="#Two-Phase-Termination模式" class="headerlink" title="Two-Phase Termination模式"></a>Two-Phase Termination模式</h2><h3 id="定义-9"><a href="#定义-9" class="headerlink" title="定义"></a>定义</h3><p>该模式的名字直译是“分两阶段终止”的意思，它是一种先执行完终止处理再终止线程的模式。</p><img src="/posts/4b405cfc/64.jpg" class><p>我们称线程在进行正常处理时的状态为“操作中”，在要停止该线程时，会发出“终止请求”，这样，线程不会突然终止，而是会先开始进行“打扫工作”，称为“终止处理中”，是线程终止的第一阶段。</p><p>在“终止处理中”状态下，线程不会在进行正常操作，它虽然仍在运行，但是只会进行终止处理，终止处理完成后，就会真正地终止线程，是线程终止的第二阶段。</p><p>该模式的要点如下。</p><ul><li>安全的终止线程。</li><li>必定会进行终止处理。</li><li>发出终止请求后尽快进行终止处理。</li></ul><h3 id="模式详解-5"><a href="#模式详解-5" class="headerlink" title="模式详解"></a>模式详解</h3><ul><li><p>TerminationRequester（终止请求发出者）<br>TerminationRequester角色负责向Terminator角色发出终止请求，是示例程序中的Main类。</p></li><li><p>Terminator（终止者）<br>Terminator负责接收终止请求，并实际执行终止处理，提供了表示终止请求的shutdownRequest方法。</p><p>当shutdownRequest方法被调用后，Terminator角色会在考虑了安全性的基础上，进入“终止处理中”状态，接着，当终止处理结束后，Terminator角色就会终止自己。</p></li></ul><p>Two-Phase Termination模式的类图</p><img src="/posts/4b405cfc/67.jpg" style="zoom:150%;"><blockquote><p><strong>NIO与多线程</strong></p><p>java.nio.channels.Channel接口以及实现了该接口的类群的设计中考虑了多线程的问题。</p><p>例如，当一个线程在Channel上发生I&#x2F;O阻塞的时候，其他线程可以close该Channel。这时，发生I&#x2F;O阻塞的线程会接收到AsynchronousCloseException异常。</p><p>另外，当一个线程在Channel上发生I&#x2F;O阻塞的时候，其他线程还可以interrupt该线程。这时，发生I&#x2F;O阻塞的线程会接收到ClosedByInterruptException异常。</p></blockquote><h3 id="示例代码-5"><a href="#示例代码-5" class="headerlink" title="示例代码"></a>示例代码</h3><p><strong>类图</strong></p><img src="/posts/4b405cfc/65.png" style="zoom: 50%;"><p><strong>时序图</strong></p><img src="/posts/4b405cfc/66.png" alt="image-20200705220252139" style="zoom: 50%;"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CountupThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * counter字段表示当前的计数器</span><br><span class="hljs-comment">     * shutdownRequested字段是表示是否已经发出终止请求的标志，该字段的值用于判断线程是否进入“终止处理中”状态</span><br><span class="hljs-comment">     * shutdownRequest方法是表示线程终止请求的方法，当要终止CountupThread的线程时，程序会调用该方法</span><br><span class="hljs-comment">     * 注意，shutdownRequest还调用了interrupt方法，这是为了确保程序在sleep和wait时也会被终止</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">//计数值</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> <span class="hljs-variable">counter</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">//发出终止请求后变为ture</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">shutdownRequested</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-comment">//终止请求</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shutdownRequest</span><span class="hljs-params">()</span> &#123;<br>        shutdownRequested = <span class="hljs-literal">true</span>;<br>        interrupt();<br>    &#125;<br><br>    <span class="hljs-comment">//检查是否发出了终止请求</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isShutdownRequested</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> shutdownRequested;<br>    &#125;<br><br>    <span class="hljs-comment">//线程体</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span> (!isShutdownRequested()) &#123;<br>                doWork();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            doShutdown();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//操作</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doWork</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        counter++;<br>        System.out.println(<span class="hljs-string">&quot;doWork: counter = &quot;</span> + counter);<br>        Thread.sleep(<span class="hljs-number">500</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//终止处理</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doShutdown</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;doShutdown: counter = &quot;</span> + counter);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 启动CountupThread的线程，大约10s后终止该线程</span><br><span class="hljs-comment">     * Thread类的join方法是用户等待线程终止的方法，在指定的线程终止前，join方法不会返回。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> args</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;main: Begin&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//启动线程</span><br>            <span class="hljs-type">CountupThread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CountupThread</span>();<br>            t.start();<br><br>            <span class="hljs-comment">//稍微间隔一段时间</span><br>            Thread.sleep(<span class="hljs-number">10000</span>);<br><br>            <span class="hljs-comment">//线程的终止请求</span><br>            System.out.println(<span class="hljs-string">&quot;main: shutdownRequest&quot;</span>);<br>            t.shutdownRequest();<br><br>            System.out.println(<span class="hljs-string">&quot;main: join&quot;</span>);<br><br>            <span class="hljs-comment">//等待线程终止</span><br>            t.join();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;main: End&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>java.util.concurrent.ExecutorService接口与Two-phase Termination模式</strong></p><p>ExecutorService使用了Two-phase Termination模式</p><table><thead><tr><th></th><th>isShutdown方法</th><th>isTerminated方法</th></tr></thead><tbody><tr><td>【操作中】</td><td>false</td><td>false</td></tr><tr><td>【终止处理中】</td><td>true</td><td>false</td></tr><tr><td>【终止】</td><td>true</td><td>true</td></tr></tbody></table><h3 id="捕获程序整体的终止"><a href="#捕获程序整体的终止" class="headerlink" title="捕获程序整体的终止"></a>捕获程序整体的终止</h3><h4 id="退出钩子"><a href="#退出钩子" class="headerlink" title="退出钩子"></a>退出钩子</h4><p>退出钩子是指在Java虚拟机退出时启动的线程。”java虚拟机退出时“指的是System.exit()被调用或是全部非守护线程终止时。这时，我们可以使用退出钩子来编写程序完全终止时的终止处理。</p><p>示例程序执行了以下处理：</p><ul><li>设置未捕获的异常的处理器</li><li>设置退出钩子</li><li>大约3秒后启动执行”整数除零计算“的线程</li></ul><p>执行整数除零计算后，程序会抛出java.lang.ArithmeticException异常。由于在示例程序中我们并没有捕获ArithmeticExeception，所以程序会终止。在终止前，”为捕获的异常的处理器“和”退出钩子“会被依次调用。</p><h4 id="未捕获的异常的处理器"><a href="#未捕获的异常的处理器" class="headerlink" title="未捕获的异常的处理器"></a>未捕获的异常的处理器</h4><h4 id="示例代码-6"><a href="#示例代码-6" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;main:BEGIN&quot;</span>);<br><br>        <span class="hljs-comment">// 设置未捕获的异常的处理器</span><br>        Thread.setDefaultUncaughtExceptionHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>.UncaughtExceptionHandler() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">uncaughtException</span><span class="hljs-params">(Thread t, Throwable e)</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;\n***********&quot;</span>);<br>                System.out.println(<span class="hljs-string">&quot;UncaughtExceptionHandler:BEGIN&quot;</span>);<br>                System.out.println(<span class="hljs-string">&quot;currentThread = &quot;</span> + Thread.currentThread());<br>                System.out.println(<span class="hljs-string">&quot;thread = &quot;</span> + t);<br>                System.out.println(<span class="hljs-string">&quot;exception = &quot;</span> + e);<br>                System.out.println(<span class="hljs-string">&quot;UncaughtExceptionHandler:END&quot;</span>);<br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-comment">// 设置退出钩子</span><br>        Runtime.getRuntime().addShutdownHook(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><br>                System.out.println(<span class="hljs-string">&quot;\n*************&quot;</span>);<br>                System.out.println(<span class="hljs-string">&quot;shutdown hook:BEGIN&quot;</span>);<br>                System.out.println(<span class="hljs-string">&quot;currentThread = &quot;</span> + Thread.currentThread());<br>                System.out.println(<span class="hljs-string">&quot;shutdown hook:END&quot;</span>);<br>            &#125;<br>        &#125;));<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;MyThread:BEGIN&quot;</span>);<br>                System.out.println(<span class="hljs-string">&quot;MyThread:SLEEP...&quot;</span>);<br><br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">3000</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br><br>                <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> / <span class="hljs-number">0</span>;<br><br>            <span class="hljs-comment">//    不会来到这里</span><br>                System.out.println(<span class="hljs-string">&quot;MyThread:END&quot;</span>);<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;MyThread&quot;</span>).start();<br><br>        System.out.println(<span class="hljs-string">&quot;main:END&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><ul><li><p><strong>Multiphase Cancellation 模式</strong></p><p>使用Multiphase Cancellation模式停止线程时，如果在一定时间内线程没有停止，那么程序会逐渐发出更加强硬的终止请求。</p></li><li><p><strong>Multi-Phase StartUp 模式</strong></p><p>使用Two-Phase Termination模式时，在接收到终止请求后，程序并不立即终止线程，而是先进入”终止处理中“阶段，然后安全的终止线程。</p><p>而使用Multi-Phase StartUp模式时，如果存在多个子系统，则程序会经过多个阶段启动全部系统。在该模式下，系统会定义一个整数值的运行级锁，用来表示当前哪个运行级别正处于启动中状态。</p><p>Java的Applet也使用了该模式，不过它将Multi-Phase StartUp模式缩减至了三步（即创建实例 → 调用init方法 → 调用start方法）。</p></li></ul></blockquote><h3 id="java-util-concurrent-CountDownLatch类"><a href="#java-util-concurrent-CountDownLatch类" class="headerlink" title="java.util.concurrent.CountDownLatch类"></a>java.util.concurrent.CountDownLatch类</h3><p>当我们想让某个线程等待指定的线程终止时，可以使用java.lang.Thread类的join方法。但是，由于join方法可以等待的只是”线程终止“这个一次性的操作，所以我们无法使用它实现”等待指定次数的某种操作发生“。</p><p>使用java.util.concurrent.CountDownLatch类可以实现”等待指定次数的CountDown方法被调用“这一功能。</p><h4 id="示例代码-7"><a href="#示例代码-7" class="headerlink" title="示例代码"></a><strong>示例代码</strong></h4><ul><li>准备一个进行工作的ExecutorService对象（service）</li><li>创建一个CountDownLatch类的实例（doneLatch）。在创建时将初始值TASKS传入CountDownLatch类的构造函数</li><li>调用execute方法执行（在内部启动线程）TASKS 个 MyTask</li><li><strong>调用await方法</strong>等待doneLatch的计数值变为0</li><li><strong>调用shutdown方法终止service</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTask</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> CountDownLatch doneLatch;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> context;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>(<span class="hljs-number">321234</span>);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyTask</span><span class="hljs-params">(CountDownLatch doneLatch, <span class="hljs-type">int</span> context)</span> &#123;<br>        <span class="hljs-built_in">this</span>.doneLatch = doneLatch;<br>        <span class="hljs-built_in">this</span>.context = context;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        doTask();<br>        doneLatch.countDown();<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doTask</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> Thread.currentThread().getName();<br>        System.out.println(name + <span class="hljs-string">&quot;:MyTask:BEGIN:context = &quot;</span> + context);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(random.nextInt(<span class="hljs-number">3000</span>));<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        System.out.println(name + <span class="hljs-string">&quot;:MyTask:END:context = &quot;</span> + context);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">TASKS</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>; <span class="hljs-comment">// 工作的个数</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;BEGIN&quot;</span>);<br>        <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">5</span>);<br>        <span class="hljs-type">CountDownLatch</span> <span class="hljs-variable">doneLatch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CountDownLatch</span>(TASKS);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 开始工作</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; TASKS; i++) &#123;<br>                service.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyTask</span>(doneLatch, i));<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;AWAIT&quot;</span>);<br>            <span class="hljs-comment">// 等待工作结束</span><br>            doneLatch.await();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            service.shutdown();<br>            System.out.println(<span class="hljs-string">&quot;END&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a><strong>时序图</strong></h4><img src="/posts/4b405cfc/68.png" style="zoom:50%;"><h3 id="java-util-concurrent-CyclicBarrier类"><a href="#java-util-concurrent-CyclicBarrier类" class="headerlink" title="java.util.concurrent.CyclicBarrier类"></a>java.util.concurrent.CyclicBarrier类</h3><p>CyclicBarrier可以周期性的创建出屏障。在屏障解除之前，碰到屏障的线程是无法继续前进的。屏障的解除条件是到达屏障处的线程个数达到了构造函数指定的个数。也就是说，当指定个数的线程到达屏障处后，屏障就会被解除，然后这些线程就会像听到了”预备，走“一样一起冲出去。</p><p><strong>在创建CyclicBarrier的实例时，可以指定Runnable对象。这个对象被称作”屏障操作“。每次屏障被解除后，该屏障操作都会被执行。</strong></p><h4 id="示例代码-8"><a href="#示例代码-8" class="headerlink" title="示例代码"></a>示例代码</h4><ul><li>调用doPhase(phase)方法进行第phase阶段的工作</li><li>调用await方法表示自己已经完成了第phase阶段的工作</li><li>当其他所有线程都完成了”第phase阶段的工作“后，run方法从await方法中返回并进入下个阶段的工作</li><li>当所有阶段的工作都完成后，使用doneLatch向主线程发送”工作结束“的消息。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTask</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">PHASE</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> CyclicBarrier phaseBarrier;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> CountDownLatch doneLatch;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> context;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>(<span class="hljs-number">32143</span>);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyTask</span><span class="hljs-params">(CyclicBarrier phaseBarrier, CountDownLatch doneLatch, <span class="hljs-type">int</span> context)</span> &#123;<br>        <span class="hljs-built_in">this</span>.phaseBarrier = phaseBarrier;<br>        <span class="hljs-built_in">this</span>.doneLatch = doneLatch;<br>        <span class="hljs-built_in">this</span>.context = context;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">phase</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; phase &lt; PHASE; phase++) &#123;<br>            doPhase(phase);<br>            <span class="hljs-keyword">try</span> &#123;<br>                phaseBarrier.await();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">catch</span> (BrokenBarrierException e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                doneLatch.countDown();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPhase</span><span class="hljs-params">(<span class="hljs-type">int</span> phase)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> Thread.currentThread().getName();<br>        System.out.println(name + <span class="hljs-string">&quot;:MyTask:BEGIN:context = &quot;</span> + context + <span class="hljs-string">&quot;, phase = &quot;</span> + phase);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(random.nextInt(<span class="hljs-number">3000</span>));<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        System.out.println(name + <span class="hljs-string">&quot;:MyTask:END:context = &quot;</span> + context + <span class="hljs-string">&quot;, phase = &quot;</span> + phase);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">THREADS</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>; <span class="hljs-comment">// 线程的个数</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;BEGIN&quot;</span>);<br><br>        <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(THREADS);<br><br>        <span class="hljs-comment">// 屏障被解除时的操作</span><br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">barrierAction</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;Barrier Action!&quot;</span>);<br>            &#125;<br>        &#125;;<br><br>        <span class="hljs-comment">// CyclicBarrier用于使线程步骤一致</span><br>        <span class="hljs-type">CyclicBarrier</span> <span class="hljs-variable">phaseBarrier</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CyclicBarrier</span>(THREADS, barrierAction);<br><br>        <span class="hljs-comment">// CountDownLatch用于确认工作是否结束</span><br>        <span class="hljs-type">CountDownLatch</span> <span class="hljs-variable">doneLatch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CountDownLatch</span>(THREADS);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; THREADS; i++) &#123;<br>                service.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyTask</span>(phaseBarrier, doneLatch, i));<br>            &#125;<br><br>            <span class="hljs-comment">// 等待工作结束</span><br>            System.out.println(<span class="hljs-string">&quot;AWAIT&quot;</span>);<br>            doneLatch.await();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            service.shutdown();<br>            System.out.println(<span class="hljs-string">&quot;END&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="时序图-1"><a href="#时序图-1" class="headerlink" title="时序图"></a>时序图</h4><img src="/posts/4b405cfc/69.png" alt="image-20200706000509173" style="zoom:50%;"><h2 id="Thread-Specific-Storage"><a href="#Thread-Specific-Storage" class="headerlink" title="Thread-Specific Storage"></a>Thread-Specific Storage</h2><h3 id="定义-10"><a href="#定义-10" class="headerlink" title="定义"></a>定义</h3><p>Thread-Specific Storage就是“线程独有的存储库”，该模式会对每个线程提供独有的内存空间。<br>java.lang.ThreadLocal类提供了该模式的实现，ThreadLocal的实例是一种集合（collection）架构，该实例管理了很多对象，可以想象成一个保管有大量保险箱的房间。</p><p>java.lang.ThreadLocal类的方法：</p><ul><li><p>public void set()<br>该方法会检查当前调用线程，默认以该线程的Thread.currentThread()值作为键，来保存指定的值。</p></li><li><p>public Object get()<br>该方法会检查当前调用线程，默认以该线程的Thread.currentThread()值作为键，获取保存指定的值。</p></li></ul><p>Thread-Specific Storage模式还有以下名称。</p><ul><li>Per-Thread Attribute（线程各自的属性）</li><li>Thread-Specific Data（线程特有的数据）</li><li>Thread-Specific Field（线程特有的字段）</li><li>Thread-Local Storage（线程中的局部存储空间）</li></ul><h3 id="模式详解-6"><a href="#模式详解-6" class="headerlink" title="模式详解"></a>模式详解</h3><p>java.lang.ThreadLocal是一个泛型类，可以通过参数的类型来指定要存储的对象的类型。ThreadLocal类的声明大致如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadLocal</span>&lt;T&gt; &#123;<br><span class="hljs-comment">// 存储</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(T value)</span> &#123;<br>...<br>&#125;<br><br><span class="hljs-comment">// 获取</span><br><span class="hljs-keyword">public</span> T <span class="hljs-title function_">get</span><span class="hljs-params">()</span> &#123;<br>...<br>&#125;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th>名字</th><th>说明</th></tr></thead><tbody><tr><td>TSLog</td><td>创建日志的类（实例属于各个线程所有）</td></tr><tr><td>Log</td><td>创建日志的类（分配各个线程）</td></tr><tr><td>java.lang.ThreadLocal</td><td>分配线程持有的存储空间的类</td></tr><tr><td>ClientThread</td><td>表示调用Log的线程的类</td></tr><tr><td>Main</td><td>测试程序行为的类</td></tr></tbody></table><p><strong>角色</strong></p><ul><li><p>Client（委托者）</p><p>Client角色将处理委托给TSObjectProxy角色。一个TSObjectProxy角色会被多个Client角色使用。</p></li><li><p>TSObjectProxy（线程特有的对象的代理人）</p><p>TSObjectProxy角色使用TSObjectCollection角色获取与Client角色对应的TSObject角色。接着，它将处理委托给TSObject角色。</p></li><li><p>TSObjectCollection（线程持有的对象的集合）</p><p>TSObjectCollection角色有一张Client角色与TSObject角色之间的对应表。</p></li><li><p>TSObject（线程特有的对象）</p><p>TSObject角色中保存着线程特有的信息。</p><p>TSObject角色有TSObjectCollection角色管理。<strong>TSObject角色的方法只会被单线程调用</strong>。</p></li></ul><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><img src="/posts/4b405cfc/72.png" alt="image-20200706205505663" style="zoom:50%;"><h3 id="时序图-2"><a href="#时序图-2" class="headerlink" title="时序图"></a>时序图</h3><p><strong>新创建TSObject角色</strong></p><img src="/posts/4b405cfc/73.png" alt="image-20200706205538651" style="zoom:50%;"><p><strong>多个client角色访问各自的TSObject角色</strong></p><img src="/posts/4b405cfc/74.png" alt="image-20200706205843433" style="zoom:50%;"><p><strong>示例程序类图</strong></p><img src="/posts/4b405cfc/70.png" alt="image-20200706202151734" style="zoom: 67%;"><p><strong>示例程序TimeThreads图</strong></p><img src="/posts/4b405cfc/71.png" alt="image-20200706204459127" style="zoom:50%;"><h3 id="示例代码-9"><a href="#示例代码-9" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TSLog</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-comment">// 初始化writer字段</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TSLog</span><span class="hljs-params">(String filename)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            writer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(filename));<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 写日志</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">println</span><span class="hljs-params">(String s)</span> &#123;<br>        writer.println(s);<br>    &#125;<br><br>    <span class="hljs-comment">// 关闭日志</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span> <span class="hljs-params">()</span> &#123;<br>        writer.println(<span class="hljs-string">&quot;=== Enf of log ===&quot;</span>);<br>        writer.close();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Log</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ThreadLocal&lt;TSLog&gt; tsLogCollection = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;&gt;();<br><br>    <span class="hljs-comment">// 写日志</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">println</span><span class="hljs-params">(String s)</span> &#123;<br>        getTsLog().println(s);<br>    &#125;<br><br>    <span class="hljs-comment">// 关闭日志</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> &#123;<br>        getTsLog().close();<br>    &#125;<br><br>    <span class="hljs-comment">// 获取线程持有的日志</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> TSLog <span class="hljs-title function_">getTsLog</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">TSLog</span> <span class="hljs-variable">tsLog</span> <span class="hljs-operator">=</span> tsLogCollection.get();<br><br>        <span class="hljs-keyword">if</span> (tsLog == <span class="hljs-literal">null</span>) &#123;<br>            tsLog = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TSLog</span>(Thread.currentThread().getName() + <span class="hljs-string">&quot;-log.txt&quot;</span>);<br>            tsLogCollection.set(tsLog);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> tsLog;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClientThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ClientThread</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(getName() + <span class="hljs-string">&quot; BEGIN&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            Log.println(<span class="hljs-string">&quot;i= &quot;</span> + i);<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">100</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            Log.close();<br>        &#125;<br>        System.out.println(getName() + <span class="hljs-string">&quot; END&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClientThread</span>(<span class="hljs-string">&quot;Alice&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClientThread</span>(<span class="hljs-string">&quot;Bobby&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClientThread</span>(<span class="hljs-string">&quot;Chris&quot;</span>).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>保存线程特有信息的位置</p><p>线程特有的信息”保存位置“有以下两种：</p><ul><li><p>线程外</p><p>类似于ThreadLocal这种将线程特有的信息保存在线程外部的方法称为”线程外“。</p></li><li><p>线程内</p><p>如果在线程中声明字段，该字段就是线程特有的信息。这就是在线程内保存线程特有的信息。</p></li></ul></blockquote><h3 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h3><p>与强调吞吐量相比，Thread-Specific Storage模式更看重如下所示的可复用性。</p><ol><li>不改变结构即可实现程序</li><li>没有显式地执行互斥处理，所以编程时犯错的可能性较小</li></ol><blockquote><p><strong>Thread-Specific Storage与Worker Thread模式不能结合使用。</strong></p><p>如果不能确保所有的任务都由不同的线程执行，Thread-Specific Storage模式可能就无法正确工作。这是使用java.lang.ThreadLocal时的一个重要制约条件。</p></blockquote><blockquote><p>在设计多线程角色时，根据以 [ 主体 ] 为主还是以 [ 客体 ] 为主的不同产生了以下两种方式。</p><ul><li><p>基于角色：以主体为主</p><p>所谓基于角色，一言以蔽之即”线程最伟大“的方式。</p><p>基于角色的方式即在表示线程的实例中保存进行工作所必需的信息（上下文、状态）。这样可以减少和减轻线程之间的交互信息量。一个线程会使用从其他线程接收到的信息来执行处理，改变自己的内部状态。通常，我们称这样的线程为角色。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Actor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>角色的内部状态<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>循环地从外部接收并执行任务，改变内部状态<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>基于任务：以客体为主</p><p>所谓基于任务，一言以蔽之即”任务最伟大“的方式。</p><p>基于任务的方式不在线程中保存信息（上下文、状态）。在这种方式下，这些信息不保存在线程中，而是保存在线程交互的实例中。而且，不仅是数据，连用于执行请求的方法都定义在其中。像这样在线程之交互的实例可以称为消息、请求或是命令。这里我们暂且称其为任务。由于任务中保存了足够的信息，所以任何线程执行该任务都没有问题。可以说，这是一种富任务往来于轻线程之间的方式。</p><p>使用该方式的一个典型的模式是Worker Thread模式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Task</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>进行工作所必需的信息<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>工作的处理内容<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>基于任务的示例</p><p>java.util.TimerTask是一个基于任务的类。该类实现了java.lang.Runnable，它会被java.util.Timer类调用。如果要定义一项在一定时间后进行的工作或者定期进行的工作，可以使用java.util.TimerTask类。</p><p>java.util.concurrent.FutureTask类也是一个基于任务的类。该类是Future模式的组成部分，它也实现了java.lang.Runnable。</p></blockquote><h2 id="Active-Object模式"><a href="#Active-Object模式" class="headerlink" title="Active Object模式"></a>Active Object模式</h2><h3 id="定义-11"><a href="#定义-11" class="headerlink" title="定义"></a>定义</h3><p>Active是主动的意思，因此ActiveObject就是主动对象的意思。所谓主动一般指有自己特有的线程，举例来说，java.lang.Thread类的实例就是一种主动对象。</p><p>不过，在Active Object模式中出厂的主动对象可不仅仅有自己特有的线程，它同时还具备可以从外部接收和处理异步消息并根据需要返回处理结果的特征。Active Object模式中的主动对象会通过自己特有的线程在合适的时机处理从外部接收到的异步消息。</p><p>在Active Object中，组成主动对象与许多自然人组成法人类似，即使是java语言这样没有异步消息的编程语言，也可以使用Active Object模式组成实际上能够处理异步消息的主动对象。</p><blockquote><p>在Java中，有一种与Active Object模式相关的技术叫做Remote Method Invocation（远程方法调用，RMI）。RMI是一种可以在本地调用方法，然后网络远端的计算机上执行方法的技术。为了能够在网络间传输对象，RMI使用了Java的序列化（serialization）技术。</p></blockquote><h3 id="模式详解-7"><a href="#模式详解-7" class="headerlink" title="模式详解"></a>模式详解</h3><p><strong>成员一览（粗体字为activeObject包中的public的类和接口）</strong></p><table><thead><tr><th>包</th><th>名字</th><th>说明</th></tr></thead><tbody><tr><td>无名</td><td>Main</td><td>测试程序行为的类</td></tr><tr><td>无名</td><td>MakeClientThread</td><td>发出”生成字符串“请求的线程</td></tr><tr><td>无名</td><td>DisplayClientThread</td><td>发出”显示字符串“请求的线程</td></tr><tr><td>activeObject</td><td><strong>ActiveObject</strong></td><td>定义”主动对象“的接口（API）的接口</td></tr><tr><td>activeObject</td><td><strong>ActiveObjectFactory</strong></td><td>创建”主动对象“的类</td></tr><tr><td>activeObject</td><td>Proxy</td><td>将方法调用转换为MethodRequest对象的类（实现了ActiveObject）的接口</td></tr><tr><td>activeObject</td><td>SchedulerThread</td><td>调用execute方法处理MethodRequest对象的类</td></tr><tr><td>activeObject</td><td>ActivationQueue</td><td>按顺序保存MethodRequest对象的类</td></tr><tr><td>activeObject</td><td>MethodRequest</td><td>表示请求的抽象类</td></tr><tr><td>activeObject</td><td>MakeStringRequest</td><td>makeString方法（生成字符串）对应的类。MethodRequest类的子类</td></tr><tr><td>activeObject</td><td>DisplayStringRequest</td><td>displayString方法（显示字符串）对应的类。MethodRequest类的子类</td></tr><tr><td>activeObject</td><td>Result</td><td>表示执行结果的抽象类</td></tr><tr><td>activeObject</td><td>FutureResult</td><td>在Future模式中表示执行结果的类</td></tr><tr><td>activeObject</td><td>RealResult</td><td>表示实际的执行结果的类</td></tr><tr><td>activeObject</td><td>Servant</td><td>执行实际处理的类（实现了ActiveObject接口）</td></tr></tbody></table><h4 id="角色-1"><a href="#角色-1" class="headerlink" title="角色"></a><strong>角色</strong></h4><ul><li><p>Client（委托者）</p><p>Client角色调用ActiveObject角色的方法来委托处理，它能调用的只有ActiveObject角色提供的方法。调用这些方法后，（如果ActivationQueue角色没有满）程序控制权会立即返回。</p><p>虽然client只知道ActiveObject角色，但它实际上调用的是Proxy角色。</p><p>Client角色在获取处理结果时，会调用VirtualResult角色的getResultValue方法。这里使用了Future模式模式。</p><p>在示例程序1中，由MakerClientThread类和DisplayClientThread类扮演此角色。</p></li><li><p>ActiveObject角色</p><p>ActiveObject角色定义了主动对象向Client角色提供的接口。</p><p>在示例1程序中，由ActiveObject接口扮演此角色。</p></li><li><p>Proxy（代理人）</p><p>Proxy角色负责将方法调用转换为MethodRequest角色的对象。转换后的MethodRequest角色会被传递给Scheduler角色。</p><p>Proxy角色实现了ActiveObject角色提供的接口。</p><p>调用Proxy角色的方法的是Client角色。将方法调用转换为MethodRequest角色，并传递给Scheduler角色的操作都是使用Client角色的线程进行的。</p><p>在示例1程序中，由Proxy类扮演此角色。</p></li><li><p>Scheduler</p><p>Scheduler角色负责将Proxy角色传递过来的MethodRequest角色传递给ActivationQueue角色，以及从ActivationQueue角色去除并执行MethodRequest角色这两项工作。</p><p>Client角色负责将MethodRequest角色传递给ActivationQueue角色。</p><p>而从ActivationQueue角色中取出并执行MethodRequest角色这项工作则是使用Scheduler角色自己的线程进行的。在ActiveObject模式中，<strong>只有使用Client角色和Scheduler角色时才会启动新线程。</strong></p><p>Scheduler角色会把MethodRequest角色放入ActivationQueue角色或者从ActivationQueue角色取出MethodRequest角色。因此，Scheduler角色可以判断下次要执行哪个请求。<strong>如果想实现请求调度的判断逻辑，可以将它们实现在Scheduler角色中。</strong>也正是因为如此，我们才将其命名为Scheduler。</p><p>在示例程序1中，由SchedulerThread类扮演此角色。SchedulerThread并没有进行特殊的调度，而只是执行FIFO（First In First Out）处理。</p></li><li><p>MethodRequest</p><p>MethodRequest角色是来自Client角色的请求对应的角色。MethodRequest定义了负责执行处理的Servant角色，以及负责设置返回值的Future角色和负责执行请求的方法（execute）。</p><p>MethodRequest角色为主动对象的接口赋予了对象的表象形式。</p><p>在示例程序1中，由MethodRequest类扮演此角色。</p></li><li><p>ConcreteMethodRequest</p><p>ConcreteMethodRequest角色是使MethodRequest角色与具体的方法相对应的角色。对于ActiveObject角色中定义的每个方法，会有各个类与之对应。比如MethodAlphaRequest、MethodBetaRequest…。</p><p>在示例程序1中，由MakeStringRequest类和DisplayStringRequest类扮演此角色。其中，MakeStringRequest类对应makeString方法，DisplayStringRequest类对应displayString方法。</p></li><li><p>Servant（仆人）</p><p>Servant角色负责实际地处理请求。</p><p>调用Servant角色的是Scheduler角色的线程。Scheduler角色会从ActivationQueue角色取出一个MethodRequest角色（实际上是ConcreteMethodRequest角色）并执行它。此时，Scheduler角色调用的就是Servant角色的方法。</p><p>Servant角色实现了ActiveObject角色定义的接口。</p><p>Proxy角色会将请求转换为MethodRequest角色，而Servant角色则会实际地执行该请求。Scheduler角色介于Proxy角色和Servant角色之间，负责管理按照什么顺序执行请求。</p><p>在示例程序1中，由Servant类扮演此角色。</p></li><li><p>ActivationQueue（主动队列）</p><p>ActivationQueue角色是保存MethodRequest角色的类。</p><p>调用putRequest方法的是Client角色的线程，而调用takeRequest方法的是Scheduler角色的线程。这里使用了Producer-Consumer模式。</p></li><li><p>VirtualResult（虚拟结果）</p><p>VirtualResult角色与Future角色、RealResult角色共同构成了Future模式。</p><p>Client角色在获取处理结果时会调用VirtualResult角色（实际上是Future角色）的getResultValue方法。</p><p>在示例程序1中，由Result类扮演此角色。</p></li><li><p>Future（期货）</p><p>Future角色是Client角色在获取处理时实际调用的角色。当处理结果还没有出来的时候，它会使用Guarded Suspension模式让Client角色的线程等待结果出来。</p><p>在示例程序1中，由FutureResult类扮演此角色。</p></li><li><p>RealResult（真实结果）</p><p>RealResult角色是表示处理结果的角色。Servant角色会创建一个RealResult角色作为处理结果，然后调用Future角色的setRealResult方法将其设置到Future角色中。</p><p>在示例程序1中，由RealResult类扮演此角色</p></li></ul><h4 id="示例程序1类图"><a href="#示例程序1类图" class="headerlink" title="示例程序1类图"></a><strong>示例程序1类图</strong></h4><img src="/posts/4b405cfc/75.png" style="zoom:67%;"><h4 id="示例程序1时序图"><a href="#示例程序1时序图" class="headerlink" title="示例程序1时序图"></a><strong>示例程序1时序图</strong></h4><img src="/posts/4b405cfc/76.png" style="zoom:67%;"><h4 id="示例1代码"><a href="#示例1代码" class="headerlink" title="示例1代码"></a>示例1代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ActivationQueue</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAX_METHOD_REQUEST</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> MethodRequest[] requestQueue;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> tail; <span class="hljs-comment">// 下次putRequest的位置</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> head; <span class="hljs-comment">// 下次taskRequest的位置</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> count; <span class="hljs-comment">// MethodRequest的数量</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ActivationQueue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.requestQueue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MethodRequest</span>[MAX_METHOD_REQUEST];<br>        <span class="hljs-built_in">this</span>.tail = tail;<br>        <span class="hljs-built_in">this</span>.head = head;<br>        <span class="hljs-built_in">this</span>.count = count;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">putRequest</span><span class="hljs-params">(MethodRequest request)</span> &#123;<br>        <span class="hljs-keyword">while</span> (count &gt;= requestQueue.length) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                wait();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        requestQueue[tail] = request;<br>        tail = (tail + <span class="hljs-number">1</span>) % requestQueue.length;<br>        count++;<br>        notifyAll();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> MethodRequest <span class="hljs-title function_">takeRequest</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (count &lt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                wait();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">MethodRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> requestQueue[head];<br>        head = (head + <span class="hljs-number">1</span>) % requestQueue.length;<br>        count --;<br>        notifyAll();<br>        <span class="hljs-keyword">return</span> request;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ActiveObject</span> &#123;<br>    Result&lt;String&gt; <span class="hljs-title function_">makeString</span><span class="hljs-params">(<span class="hljs-type">int</span> count, <span class="hljs-type">char</span> fillchar)</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">displayString</span><span class="hljs-params">(String string)</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ActiveObjectFactory</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ActiveObject <span class="hljs-title function_">createActiveObject</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Servant</span> <span class="hljs-variable">servant</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Servant</span>();<br>        <span class="hljs-type">ActivationQueue</span> <span class="hljs-variable">queue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActivationQueue</span>();<br>        <span class="hljs-type">SchedulerThread</span> <span class="hljs-variable">scheduler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SchedulerThread</span>(queue);<br>        <span class="hljs-type">Proxy</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(scheduler, servant);<br>        scheduler.start();<br>        <span class="hljs-keyword">return</span> proxy;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DisplayClientThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ActiveObject activeObject;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DisplayClientThread</span><span class="hljs-params">(String name, ActiveObject activeObject)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name);<br>        <span class="hljs-built_in">this</span>.activeObject = activeObject;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-literal">true</span>; i++) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">string</span> <span class="hljs-operator">=</span> Thread.currentThread().getName() + <span class="hljs-string">&quot; &quot;</span> + i;<br>                activeObject.displayString(string);<br>                Thread.sleep(<span class="hljs-number">200</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DisplayStringRequest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MethodRequest</span>&lt;Object&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String string;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DisplayStringRequest</span><span class="hljs-params">(Servant servant, String string)</span> &#123;<br>        <span class="hljs-built_in">super</span>(servant, <span class="hljs-literal">null</span>);<br>        <span class="hljs-built_in">this</span>.string = string;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">()</span> &#123;<br>        servant.displayString(string);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FutureResult</span>&lt;T&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Result</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">private</span> Result&lt;T&gt; result;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">ready</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setResult</span><span class="hljs-params">(Result&lt;T&gt; result)</span> &#123;<br>        <span class="hljs-built_in">this</span>.result = result;<br>        <span class="hljs-built_in">this</span>.ready = <span class="hljs-literal">true</span>;<br>        notifyAll();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> T <span class="hljs-title function_">getResultValue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (!ready) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                wait();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result.getResultValue();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ActiveObject</span> <span class="hljs-variable">activeObject</span> <span class="hljs-operator">=</span> ActiveObjectFactory.createActiveObject();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">MakeClientThread</span>(<span class="hljs-string">&quot;Alice&quot;</span>, activeObject).start();;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">MakeClientThread</span>(<span class="hljs-string">&quot;Bobby&quot;</span>, activeObject).start();;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">DisplayClientThread</span>(<span class="hljs-string">&quot;Chris&quot;</span>, activeObject).start();;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MakeClientThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ActiveObject activeObject;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">char</span> fillchar;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MakeClientThread</span><span class="hljs-params">(String name, ActiveObject activeObject)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name);<br>        <span class="hljs-built_in">this</span>.activeObject = activeObject;<br>        <span class="hljs-built_in">this</span>.fillchar = name.charAt(<span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-literal">true</span>; i++) &#123;<br>                Result&lt;String&gt; result = activeObject.makeString(i, fillchar);<br>                Thread.sleep(<span class="hljs-number">10</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> result.getResultValue();<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;: value = &quot;</span> + value);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MakeStringRequest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MethodRequest</span>&lt;String&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> count;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">char</span> fillchar;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MakeStringRequest</span><span class="hljs-params">(Servant servant, FutureResult&lt;String&gt; future, <span class="hljs-type">int</span> count, <span class="hljs-type">char</span> fillchar)</span> &#123;<br>        <span class="hljs-built_in">super</span>(servant, future);<br>        <span class="hljs-built_in">this</span>.count = count;<br>        <span class="hljs-built_in">this</span>.fillchar = fillchar;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">()</span> &#123;<br>        Result&lt;String&gt; result = servant.makeString(count, fillchar);<br>        future.setResult(result);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodRequest</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> Servant servant;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> FutureResult&lt;T&gt; future;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-title function_">MethodRequest</span><span class="hljs-params">(Servant servant, FutureResult&lt;T&gt; future)</span> &#123;<br>        <span class="hljs-built_in">this</span>.servant = servant;<br>        <span class="hljs-built_in">this</span>.future = future;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Proxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ActiveObject</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> SchedulerThread scheduler;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Servant servant;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Proxy</span><span class="hljs-params">(SchedulerThread scheduler, Servant servant)</span> &#123;<br>        <span class="hljs-built_in">this</span>.scheduler = scheduler;<br>        <span class="hljs-built_in">this</span>.servant = servant;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result&lt;String&gt; <span class="hljs-title function_">makeString</span><span class="hljs-params">(<span class="hljs-type">int</span> count, <span class="hljs-type">char</span> fillchar)</span> &#123;<br>        FutureResult&lt;String&gt; future = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureResult</span>&lt;&gt;();<br>        scheduler.invoke(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MakeStringRequest</span>(servant, future, count, fillchar));<br>        <span class="hljs-keyword">return</span> future;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">displayString</span><span class="hljs-params">(String string)</span> &#123;<br>        scheduler.invoke(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DisplayStringRequest</span>(servant, string));<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RealResult</span>&lt;T&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Result</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> T resultValue;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">RealResult</span><span class="hljs-params">(T result)</span> &#123;<br>        <span class="hljs-built_in">this</span>.resultValue = result;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">getResultValue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> resultValue;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Result</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> T <span class="hljs-title function_">getResultValue</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SchedulerThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ActivationQueue queue;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SchedulerThread</span><span class="hljs-params">(ActivationQueue queue)</span> &#123;<br>        <span class="hljs-built_in">this</span>.queue = queue;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invoke</span><span class="hljs-params">(MethodRequest request)</span> &#123;<br>        queue.putRequest(request);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-type">MethodRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> queue.takeRequest();<br>            request.execute();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Servant</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ActiveObject</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result&lt;String&gt; <span class="hljs-title function_">makeString</span><span class="hljs-params">(<span class="hljs-type">int</span> count, <span class="hljs-type">char</span> fillchar)</span> &#123;<br>        <span class="hljs-type">char</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[count];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; count; i++) &#123;<br>            buffer[i] = fillchar;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">100</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; make count = &quot;</span> + count + <span class="hljs-string">&quot;, fillchar = &quot;</span> + fillchar + <span class="hljs-string">&quot; complete&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RealResult</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buffer));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">displayString</span><span class="hljs-params">(String string)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;displayString: &quot;</span> + string);<br>            Thread.sleep(<span class="hljs-number">100</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="类图-1"><a href="#类图-1" class="headerlink" title="类图"></a>类图</h3><img src="/posts/4b405cfc/77.png" alt="20200707213425" style="zoom: 67%;"><h3 id="时序图-3"><a href="#时序图-3" class="headerlink" title="时序图"></a>时序图</h3><img src="/posts/4b405cfc/78.png" alt="11111" style="zoom: 67%;"><h3 id="TimeThreads图"><a href="#TimeThreads图" class="headerlink" title="TimeThreads图"></a>TimeThreads图</h3><img src="/posts/4b405cfc/79.png" alt="2222" style="zoom: 67%;"><h3 id="java-uti-concurrent包于Active-Object模式"><a href="#java-uti-concurrent包于Active-Object模式" class="headerlink" title="java.uti.concurrent包于Active Object模式"></a>java.uti.concurrent包于Active Object模式</h3><p><strong>类和接口一览</strong></p><table><thead><tr><th>包</th><th>类和接口</th><th>内容</th></tr></thead><tbody><tr><td>无名</td><td>Main</td><td>测试程序行为的类</td></tr><tr><td>无名</td><td>MakerClientThread</td><td>委托ActiveObject来生成字符串的线程</td></tr><tr><td>无名</td><td>DisplayClientThread</td><td>委托ACtiveObject来显示字符串的线程</td></tr><tr><td>activeObject</td><td>ActiveObject</td><td>定义主动对象的接口的接口</td></tr><tr><td>activeObject</td><td>ActiveObjectFactory</td><td>创建主动对象的类</td></tr><tr><td>activeObject</td><td>ActiveObjectImpl</td><td>实现了ActiveObject接口的类</td></tr><tr><td>activeObject</td><td>MakeStringRequest</td><td>对应makeString方法（生成字符串）的类</td></tr><tr><td>activeObject</td><td>DisplayStringRequest</td><td>对应DisplayString方法（显示字符串）的类</td></tr></tbody></table><p><strong>使用到的标准类库</strong></p><table><thead><tr><th>类和接口</th><th>内容</th></tr></thead><tbody><tr><td>java.util.concurrent.Executors</td><td>用于获取ExecutorService的工具类</td></tr><tr><td>java.util.concurrent.ExecutorService</td><td>用于提交（submit）请求的接口（替换示例程序中1中的SchedulerThread、ActivationQueue）</td></tr><tr><td>java.util.concurrent.Callable</td><td>将获取返回值的调用（call）抽象化后的接口（替代示例程序1中的MethodRequest）</td></tr><tr><td>java.util.Runnable</td><td>将不获取返回值的调用（run）抽象化后的接口（替代示例程序1中的MethodRequest）</td></tr><tr><td>java.util.concurrent.Future</td><td>表示返回值的接口（替代示例程序1中的Result、FutureResult、RealResult）</td></tr></tbody></table><h4 id="示例程序2的类图"><a href="#示例程序2的类图" class="headerlink" title="示例程序2的类图"></a><strong>示例程序2的类图</strong></h4><img src="/posts/4b405cfc/80.png" alt="3333" style="zoom:67%;"><h4 id="角色-2"><a href="#角色-2" class="headerlink" title="角色"></a><strong>角色</strong></h4><ul><li><p>Main类</p><p>用于测试程序行为的类。与示例1不同的是可以通过shutdown方法终止。</p></li><li><p>MakerClientThread类<br>MakeClientThread类是调用ActiveObject对象的makeString方法（生成字符串）的线程。<br>于示例程序1不同时，makeString方法的返回值类型是Future&lt;String&gt;。</p></li><li><p>DisplayClientThread类<br>DisplayClientThread类与MakerClientThread类一样，也是表示调用ActiveObject对象的线程的类。</p></li><li><p>ActiveObject接口<br>ActiveObject接口定义了主动对象的接口。<br>与示例程序1不同的是，makeString的返回值类行为Future&lt;String&gt;，而且也增加了shutdown方法。</p></li><li><p>ActiveObjectFactory类<br>ActiveObjectFactory类是用于构成ACtiveObject对象的类。</p><p>于示例程序1不同的是，这里不会组建多个对象，而是仅仅返回ActiveObjectImpl类的实例。这是因为，使用java.util.concurrent包后，类的结构变简单了。</p></li><li><p>ActiveObjectImpl类</p><p>ActiveObjectImpl类是实现了ActiveObject接口的类，它可以进行很多工作。该类与示例程序1中的Proxy和Servant相对应。</p><p>servant字段中保存的是通过Executors.newSingleThreadExecutor方法获取的ExecutorService对象。这样可以确保在这个ExecutorService对象中的背后只有一个线程（通过newSingleThreadExecutor则个名字我们也可以看出来）。</p><p>ExecutorService对象相当于示例程序1中的SchedulerThread类的实例。另外，虽然从表面上看不出来，但是ExecutorService对象的内部保存着一个线程安全的队列，该队列相当于示例程序1中的ActivationQueue类的实例。</p><p>shutdown方法是用于关闭service字段中保存的ExecutorService对象的方法。这样一来，ExecutorService对象就不会再接受新的请求了。</p><p>makeString方法会创建MakeStringRequest类的实例，并submit给ExecutorService对象。</p><p>displayString方法会创建DisplayStringRequest类的实例，并在ExecutorService中execute。</p><p>可以submit和execute的是Callable对象和Runnable对象。MakeStringRequest类实现了Callable接口，而DisplayStringRequest类实现了Runnable接口。</p><h4 id="示例2代码"><a href="#示例2代码" class="headerlink" title="示例2代码"></a>示例2代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ActiveObject</span> &#123;<br>    Future&lt;String&gt; <span class="hljs-title function_">makeString</span><span class="hljs-params">(<span class="hljs-type">int</span> count, <span class="hljs-type">char</span> fillchar)</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">displayString</span><span class="hljs-params">(String string)</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">shutdown</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ActiveObjectFactory</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ActiveObject <span class="hljs-title function_">createActiveObject</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActiveObjectImpl</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ActiveObjectImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ActiveObject</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> Executors.newSingleThreadExecutor();<br><br>    <span class="hljs-comment">// 有返回值的调用</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Future&lt;String&gt; <span class="hljs-title function_">makeString</span><span class="hljs-params">(<span class="hljs-type">int</span> count, <span class="hljs-type">char</span> fillchar)</span> &#123;<br>        <span class="hljs-keyword">class</span> <span class="hljs-title class_">MakeStringRequest</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Callable</span>&lt;String&gt; &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> String <span class="hljs-title function_">call</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-type">char</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[count];<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; count; i++) &#123;<br>                        buffer[i] = fillchar;<br>                        Thread.sleep(<span class="hljs-number">100</span>);<br>                    &#125;<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buffer);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 发出请求</span><br>        <span class="hljs-keyword">return</span> service.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MakeStringRequest</span>());<br>    &#125;<br><br>    <span class="hljs-comment">// 没有返回值的调用</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">displayString</span><span class="hljs-params">(String string)</span> &#123;<br>        <span class="hljs-keyword">class</span> <span class="hljs-title class_">DisplayStringRequest</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    System.out.println(<span class="hljs-string">&quot;displayString: &quot;</span> + string);<br>                    Thread.sleep(<span class="hljs-number">10</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 发出请求</span><br>        service.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DisplayStringRequest</span>());<br>    &#125;<br><br>    <span class="hljs-comment">// 终止服务</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shutdown</span><span class="hljs-params">()</span> &#123;<br>        service.shutdown();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DisplayClientThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ActiveObject activeObject;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DisplayClientThread</span><span class="hljs-params">(String name, ActiveObject activeObject)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name);<br>        <span class="hljs-built_in">this</span>.activeObject = activeObject;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-literal">true</span>; i++) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">string</span> <span class="hljs-operator">=</span> Thread.currentThread().getName() + <span class="hljs-string">&quot; &quot;</span> + i;<br>                activeObject.displayString(string);<br>                Thread.sleep(<span class="hljs-number">200</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (RejectedExecutionException e) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;:&quot;</span> + e);<br>        &#125; <span class="hljs-keyword">catch</span> (CancellationException e) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;:&quot;</span> + e);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;:&quot;</span> + e);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MakerClientThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ActiveObject activeObject;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">char</span> fillchar;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MakerClientThread</span><span class="hljs-params">(String name, ActiveObject activeObject)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name);<br>        <span class="hljs-built_in">this</span>.activeObject = activeObject;<br>        <span class="hljs-built_in">this</span>.fillchar = name.charAt(<span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-literal">true</span>; i++) &#123;<br>                Future&lt;String&gt; future = activeObject.makeString(i, fillchar);<br>                Thread.sleep(<span class="hljs-number">10</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> future.get();<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;: value = &quot;</span> + value);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (RejectedExecutionException e) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;:&quot;</span> + e);<br>        &#125; <span class="hljs-keyword">catch</span> (CancellationException e) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;:&quot;</span> + e);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;:&quot;</span> + e);<br>        &#125; <span class="hljs-keyword">catch</span> (ExecutionException e) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;:&quot;</span> + e);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ActiveObject</span> <span class="hljs-variable">activeObject</span> <span class="hljs-operator">=</span> ActiveObjectFactory.createActiveObject();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">MakerClientThread</span>(<span class="hljs-string">&quot;Alice&quot;</span>, activeObject).start();<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">MakerClientThread</span>(<span class="hljs-string">&quot;Bobby&quot;</span>, activeObject).start();<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">DisplayClientThread</span>(<span class="hljs-string">&quot;Chris&quot;</span>, activeObject).start();<br>            Thread.sleep(<span class="hljs-number">10000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;**** shutdown ****&quot;</span>);<br>            activeObject.shutdown();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;多线程设计模式&quot;&gt;&lt;a href=&quot;#多线程设计模式&quot; class=&quot;headerlink&quot; title=&quot;多线程设计模式&quot;&gt;&lt;/a&gt;多线程设计模式&lt;/h1&gt;&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.yahyav2rayssr.top/categories/Java/"/>
    
    <category term="多线程" scheme="https://blog.yahyav2rayssr.top/categories/Java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
    <category term="多线程" scheme="https://blog.yahyav2rayssr.top/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    <category term="设计" scheme="https://blog.yahyav2rayssr.top/tags/%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>Spring 单元测试</title>
    <link href="https://blog.yahyav2rayssr.top/posts/fac11a47/"/>
    <id>https://blog.yahyav2rayssr.top/posts/fac11a47/</id>
    <published>2023-04-18T15:31:33.304Z</published>
    <updated>2023-04-18T15:31:33.305Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="Juni4"><a href="#Juni4" class="headerlink" title="Juni4"></a>Juni4</h2><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomerServiceTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> CustomerServiceI customerService;<br><br><br>    <span class="hljs-meta">@Before</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUp</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCustomerAddSuccess</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//1.prepare</span><br>        <span class="hljs-type">CustomerAddCmd</span> <span class="hljs-variable">customerAddCmd</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomerAddCmd</span>();<br>        <span class="hljs-type">CustomerDTO</span> <span class="hljs-variable">customerDTO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomerDTO</span>();<br>        customerDTO.setCompanyName(<span class="hljs-string">&quot;NormalName&quot;</span>);<br>        customerAddCmd.setCustomerDTO(customerDTO);<br><br>        <span class="hljs-comment">//2.execute</span><br>        <span class="hljs-type">Response</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> customerService.addCustomer(customerAddCmd);<br><br>        <span class="hljs-comment">//3.assert</span><br>        Assert.assertTrue(response.isSuccess());<br>    &#125;<br><br>    <span class="hljs-meta">@Test(expected = BizException.class)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCustomerAddCompanyNameConflict</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//1.prepare</span><br>        <span class="hljs-type">CustomerAddCmd</span> <span class="hljs-variable">customerAddCmd</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomerAddCmd</span>();<br>        <span class="hljs-type">CustomerDTO</span> <span class="hljs-variable">customerDTO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomerDTO</span>();<br>        customerDTO.setCompanyName(<span class="hljs-string">&quot;ConflictCompanyName&quot;</span>);<br>        customerAddCmd.setCustomerDTO(customerDTO);<br><br>        <span class="hljs-comment">//2.execute</span><br>        <span class="hljs-type">Response</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> customerService.addCustomer(customerAddCmd);<br><br>        <span class="hljs-comment">//3.Exception</span><br>        <span class="hljs-comment">//Assert.assertEquals(ErrorCode.B_CUSTOMER_companyNameConflict.getErrCode(), response.getErrCode());</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="JUnit5"><a href="#JUnit5" class="headerlink" title="JUnit5"></a>JUnit5</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;Juni4&quot;&gt;&lt;a href=&quot;#Juni4&quot; class=&quot;headerlink&quot; title=&quot;Juni4&quot;&gt;&lt;/a&gt;Juni</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.yahyav2rayssr.top/categories/Java/"/>
    
    <category term="Spring" scheme="https://blog.yahyav2rayssr.top/categories/Java/Spring/"/>
    
    
    <category term="spring" scheme="https://blog.yahyav2rayssr.top/tags/spring/"/>
    
    <category term="单元测试" scheme="https://blog.yahyav2rayssr.top/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>运维常用命令-常用配置篇</title>
    <link href="https://blog.yahyav2rayssr.top/posts/c3218428/"/>
    <id>https://blog.yahyav2rayssr.top/posts/c3218428/</id>
    <published>2023-04-18T15:31:33.252Z</published>
    <updated>2023-04-18T15:31:33.253Z</updated>
    
    <content type="html"><![CDATA[<h1 id="禁止ping"><a href="#禁止ping" class="headerlink" title="禁止ping"></a>禁止ping</h1><p>Linux默认是允许Ping响应的，系统是否允许Ping由2个因素决定的：A、内核参数，B、防火墙，需要2个因素同时允许才能允许Ping，2个因素有任意一个禁Ping就无法Ping。</p><h2 id="内核参数设置"><a href="#内核参数设置" class="headerlink" title="内核参数设置"></a>内核参数设置</h2><h3 id="允许PING设置"><a href="#允许PING设置" class="headerlink" title="允许PING设置"></a>允许PING设置</h3><ul><li><p>临时允许PING操作的命令为：<code>echo 0 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all</code></p></li><li><p>永久允许PING配置方法。</p><p><strong>&#x2F;etc&#x2F;sysctl.conf</strong> 中增加一行</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">net.ipv4.icmp_echo_ignore_all=0<br></code></pre></td></tr></table></figure></li></ul><p>如果已经有<code>net.ipv4.icmp_echo_ignore_all</code>这一行了，直接修改&#x3D;号后面的值即可的（0表示允许，1表示禁止）。</p><p>修改完成后执行以下命令，使新配置生效。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sysctl -p<br></code></pre></td></tr></table></figure><h2 id="防火墙设置"><a href="#防火墙设置" class="headerlink" title="防火墙设置"></a>防火墙设置</h2><blockquote><p>注：此处的方法的前提是内核配置是默认值，也就是没有禁止Ping。</p></blockquote><p>以Iptables防火墙为例</p><h3 id="允许PING设置-1"><a href="#允许PING设置-1" class="headerlink" title="允许PING设置"></a>允许PING设置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">iptables -A INPUT -p icmp --icmp-type echo-request -j ACCEPT<br><br>iptables -A OUTPUT -p icmp --icmp-type echo-reply -j ACCEPT<br></code></pre></td></tr></table></figure><p>或者也可以临时停止防火墙操作的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">service iptables stop<br></code></pre></td></tr></table></figure><h3 id="禁止PING设置"><a href="#禁止PING设置" class="headerlink" title="禁止PING设置"></a>禁止PING设置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">iptables -A INPUT -p icmp --icmp-type 8 -s 0/0 -j DROP<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;禁止ping&quot;&gt;&lt;a href=&quot;#禁止ping&quot; class=&quot;headerlink&quot; title=&quot;禁止ping&quot;&gt;&lt;/a&gt;禁止ping&lt;/h1&gt;&lt;p&gt;Linux默认是允许Ping响应的，系统是否允许Ping由2个因素决定的：A、内核参数，B、防火墙，需要2个</summary>
      
    
    
    
    <category term="运维" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/"/>
    
    <category term="常用命令" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
    
    <category term="运维配置" scheme="https://blog.yahyav2rayssr.top/tags/%E8%BF%90%E7%BB%B4%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>大数据安装部署（高可用版）</title>
    <link href="https://blog.yahyav2rayssr.top/posts/3ee3db16/"/>
    <id>https://blog.yahyav2rayssr.top/posts/3ee3db16/</id>
    <published>2023-04-18T15:31:33.200Z</published>
    <updated>2023-04-18T15:31:33.201Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><blockquote><p>Hadoop运行模式包括：本地模式、伪分布式模式以及完全分布式模式。(这里使用完全分布式模式)。</p></blockquote><p>准备3台虚拟机，最低要求：内存4G，硬盘40G，这里准备的虚拟机是4G，硬盘40G的配置。</p><p>机器配置如下：</p><table><thead><tr><th>hostname</th><th>ip</th><th>内存</th><th>cpu</th><th>磁盘</th></tr></thead><tbody><tr><td>node1</td><td>192.168.50.246</td><td>4G</td><td>2c</td><td>40G</td></tr><tr><td>node2</td><td>192.168.50.247</td><td>4G</td><td>2c</td><td>40G</td></tr><tr><td>node3</td><td>192.168.50.248</td><td>4G</td><td>2c</td><td>40G</td></tr></tbody></table><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>所有节点都需要配置。</p><blockquote><p>注意：安装 centos7 的时候如果是最小化安装（默认的选择就是最小化安装），是不安装 psmisc 包，此时 hadoop 的 HA 无法正常切换，需要安装 <code>yum install psmisc -y</code> 包后，重启。</p><p>说明一下：psmisc 工具包含了 pstree、killall、fuser</p><ul><li><p>pstree：以树状图显示程序。</p></li><li><p>killall：用于kill指定名称的进程。</p></li><li><p>fuser：用来显示所有正在使用着指定的file, file system 或者 sockets的进程信息。</p></li></ul></blockquote><h3 id="创建hadoop用户"><a href="#创建hadoop用户" class="headerlink" title="创建hadoop用户"></a>创建hadoop用户</h3><blockquote><p>后续操作都使用hadoop用户，不使用root用户进行操作。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">useradd hadoop<br>passwd hadoop<br></code></pre></td></tr></table></figure><p>然后配置用户具有root权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/sudoers<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># Allow root to run any commands anywhere</span></span><br>root  ALL=(ALL)     ALL<br>hadoop   ALL=(ALL)     ALL<br></code></pre></td></tr></table></figure><h3 id="机器时间同步"><a href="#机器时间同步" class="headerlink" title="机器时间同步"></a>机器时间同步</h3><p>安装依赖：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo yum install -y epel-release<br>sudo yum install -y psmisc nc net-tools rsync vim lrzsz ntp libzstd openssl-static<br></code></pre></td></tr></table></figure><p>时间同步（每台机器都要执行）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl start ntpd<br></code></pre></td></tr></table></figure><p>时间同步停止命令（不用执行）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl stop ntpd<br></code></pre></td></tr></table></figure><h3 id="修改主机名"><a href="#修改主机名" class="headerlink" title="修改主机名"></a>修改主机名</h3><p>每台机器设置各自的 hostname</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">node1</span><br>sudo hostnamectl --static set-hostname node1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">node2</span><br>sudo hostnamectl --static set-hostname node2<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">node3</span><br>sudo hostnamectl --static set-hostname node3<br></code></pre></td></tr></table></figure><h3 id="设置host文件"><a href="#设置host文件" class="headerlink" title="设置host文件"></a>设置host文件</h3><p>所有机器都设置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo vim /etc/hosts<br><br>192.168.50.246   node1<br>192.168.50.247   node2<br>192.168.50.248   node3<br></code></pre></td></tr></table></figure><h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo systemctl stop firewalld<br>sudo systemctl disable firewalld<br></code></pre></td></tr></table></figure><h3 id="创建文件夹并授权给hadoop用户"><a href="#创建文件夹并授权给hadoop用户" class="headerlink" title="创建文件夹并授权给hadoop用户"></a>创建文件夹并授权给hadoop用户</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo mkdir /app<br>sudo chown -R hadoop:hadoop /app<br></code></pre></td></tr></table></figure><h3 id="SSH免密登录配置"><a href="#SSH免密登录配置" class="headerlink" title="SSH免密登录配置"></a>SSH免密登录配置</h3><p>参考文章5</p><h3 id="JDK安装"><a href="#JDK安装" class="headerlink" title="JDK安装"></a>JDK安装</h3><blockquote><p>所有节点都要安装。</p></blockquote><p>参考文章2</p><h3 id="Zookeeper安装"><a href="#Zookeeper安装" class="headerlink" title="Zookeeper安装"></a>Zookeeper安装</h3><p>参考文章7</p><h3 id="Hadoop安装"><a href="#Hadoop安装" class="headerlink" title="Hadoop安装"></a>Hadoop安装</h3><blockquote><p>所有节点都要安装。</p></blockquote><p>参考文章3</p><h2 id="集群配置"><a href="#集群配置" class="headerlink" title="集群配置"></a>集群配置</h2><h3 id="机器规划"><a href="#机器规划" class="headerlink" title="机器规划"></a>机器规划</h3><table><thead><tr><th>服务</th><th>node1</th><th>node2</th><th>node3</th></tr></thead><tbody><tr><td>HDFS</td><td>NameNode</td><td>NameNode（active节点）</td><td>NameNode</td></tr><tr><td>HDFS</td><td>-</td><td>-</td><td>SecondaryNameNode</td></tr><tr><td>HDFS</td><td>DataNode</td><td>DateNode</td><td>DateNode</td></tr><tr><td>HDFS</td><td>JournalNode</td><td>JournalNode</td><td>JournalNode</td></tr><tr><td>YARN</td><td>ResourceManager</td><td>ResourceManager</td><td>-</td></tr><tr><td>YARN</td><td>NodeManager</td><td>NodeManager</td><td>NodeManager</td></tr></tbody></table><h3 id="WEB-端口信息"><a href="#WEB-端口信息" class="headerlink" title="WEB 端口信息"></a>WEB 端口信息</h3><table><thead><tr><th>服务</th><th>类型</th><th>访问地址</th></tr></thead><tbody><tr><td>HDFS</td><td>NameNode</td><td><a href="http://node1:9870/">http://node1:9870</a>, <a href="http://node2:9870/">http://node2:9870</a>, <a href="http://node3:9870/">http://node3:9870</a></td></tr><tr><td>HDFS</td><td>SecondaryNameNode</td><td><a href="http://node3:9868/">http://node3:9868</a></td></tr><tr><td>YARN</td><td>jobhistory</td><td><a href="http://node3:19888/">http://node3:19888</a></td></tr><tr><td>YARN</td><td>ResourceManager</td><td><a href="http://node1:8088/">http://node1:8088</a>, <a href="http://node2:8088/">http://node2:8088</a></td></tr></tbody></table><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><blockquote><p>参考链接：<a href="https://blog.csdn.net/wjt199866/article/details/106473174">https://blog.csdn.net/wjt199866/article/details/106473174</a></p><p>更多配置参数信息，请参考官方网址查询</p><ul><li><a href="https://link.zhihu.com/?target=http://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-common/core-default.xml">http://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-common/core-default.xml</a></li><li><a href="https://link.zhihu.com/?target=http://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-hdfs/hdfs-default.xml">http://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-hdfs/hdfs-default.xml</a></li><li><a href="https://link.zhihu.com/?target=http://hadoop.apache.org/docs/current/hadoop-mapreduce-client/hadoop-mapreduce-client-core/mapred-default.xml">http://hadoop.apache.org/docs/current/hadoop-mapreduce-client/hadoop-mapreduce-client-core/mapred-default.xml</a></li><li><a href="https://link.zhihu.com/?target=http://hadoop.apache.org/docs/current/hadoop-yarn/hadoop-yarn-common/yarn-default.xml">http://hadoop.apache.org/docs/current/hadoop-yarn/hadoop-yarn-common/yarn-default.xml</a></li></ul><p>通过这些网址，可以了解最新的全部的hadoop 配置信息，而且包括一些过时的定义标识，从而更好地维护您的集群。</p></blockquote><p>所有的配置文件都在 &#x2F;app&#x2F;hadoop-3.2.3&#x2F;etc&#x2F;hadoop 目录下，主要需要修改的配置文件如下：</p><h4 id="配置workers"><a href="#配置workers" class="headerlink" title="配置workers"></a>配置workers</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /app/hadoop-3.2.3/etc/hadoop/workers<br><br>node1<br>node2<br>node3<br></code></pre></td></tr></table></figure><h4 id="hadoop-env-sh"><a href="#hadoop-env-sh" class="headerlink" title="hadoop-env.sh"></a>hadoop-env.sh</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">The java implementation to use. By default, this environment</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">variable is REQUIRED on ALL platforms except OS X!</span><br>export JAVA_HOME=/app/jdk1.8.0_212<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># To prevent accidents, shell commands be (superficially) locked</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">to only allow certain <span class="hljs-built_in">users</span> to execute certain subcommands.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">It uses the format of (<span class="hljs-built_in">command</span>)_(subcommand)_USER.</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># For example, to limit who can execute the namenode command,</span></span><br>export HDFS_NAMENODE_USER=&quot;hadoop&quot;<br>export HDFS_SECONDARYNAMENODE_USER=&quot;hadoop&quot;<br>export HDFS_DATANODE_USER=&quot;hadoop&quot;<br>export HDFS_JOURNALNODE_USER=&quot;hadoop&quot;<br>export HDFS_ZKFC_USER=&quot;hadoop&quot;<br>export YARN_RESOURCEMANAGER_USER=&quot;hadoop&quot;<br>export YARN_NODEMANAGER_USER=&quot;hadoop&quot;<br>export HADOOP_PID_DIR=/app/hadoop-3.2.3/tmp/hadoop-hadoop-datanode.pid<br></code></pre></td></tr></table></figure><h4 id="core-site-xml"><a href="#core-site-xml" class="headerlink" title="core-site.xml"></a>core-site.xml</h4><blockquote><p>集群全局参数。</p><p>用于定义系统级别的参数，如 HDFS URL、Hadoop 的临时目录等。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;?xml-stylesheet type=<span class="hljs-string">&quot;text/xsl&quot;</span> href=<span class="hljs-string">&quot;configuration.xsl&quot;</span>?&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 配置 hdfs 的地址，统一通信地址 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>fs.defaultFS<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hdfs://vmcluster<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 整合 Zookeeper --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>ha.zookeeper.quorum<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node1:2181,node2:2181,node3:2181<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 配置 hadoop 的数据目录 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hadoop.data.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>/app/hadoop-3.2.3/data<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 配置 hadoop 的临时目录 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hadoop.tmp.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>/app/hadoop-3.2.3/tmp<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 配置读写缓存大小 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>io.file.buffer.size<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>131072<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 代理用户配置 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hadoop.proxyuser.hadoop.hosts<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hadoop.proxyuser.hadoop.groups<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- hdfs界面设置操作文件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hadoop.http.staticuser.user<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hadoop<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.permissions.enabled<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="hdfs-site-xml"><a href="#hdfs-site-xml" class="headerlink" title="hdfs-site.xml"></a>hdfs-site.xml</h4><blockquote><p>HDFS 参数。</p><p>如名称节点和数据节点的存放位置、文件副本的个数、文件读取权限等</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;?xml-stylesheet type=<span class="hljs-string">&quot;text/xsl&quot;</span> href=<span class="hljs-string">&quot;configuration.xsl&quot;</span>?&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.name.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>file://$&#123;hadoop.data.dir&#125;/dfs/nn<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.datanode.data.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>file://$&#123;hadoop.data.dir&#125;/dfs/dn<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.checkpoint.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>file://$&#123;hadoop.data.dir&#125;/namesecondary<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.client.datanode-restart.timeout<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node3:9868<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.http-address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node1:50070<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 对照clickhouse，可以理解为给整个集群起的一个识别名字 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.nameservices<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>vmcluster<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- Currently, only a maximum of two NameNodes may be configured per nameservice. --&gt;</span><br>    <span class="hljs-comment">&lt;!-- unique identifiers for each NameNode in the nameservice --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 目前为止，一个集群里面只能最多有两个NameNodes 注意了 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.ha.namenodes.vmcluster<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>nn1,nn2,nn3<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- the fully-qualified RPC address for each NameNode to listen on --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.rpc-address.vmcluster.nn1<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node1:8020<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.rpc-address.vmcluster.nn2<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node2:8020<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.rpc-address.vmcluster.nn3<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node3:8020<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- the fully-qualified HTTP address for each NameNode to listen on --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.http-address.vmcluster.nn1<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node1:9870<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.http-address.vmcluster.nn2<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node2:9870<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.http-address.vmcluster.nn3<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node3:9870<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- the URI which identifies the group of JNs where the NameNodes will write/read edits --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.shared.edits.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>qjournal://node1:8485;node2:8485;node3:8485/vmcluster<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- the Java class that HDFS clients use to contact the Active NameNode --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.client.failover.proxy.provider.vmcluster<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- a list of scripts or Java classes which will be used to fence the Active NameNode during a failover --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 为了确保任何时候都只有一个NameNode在工作，failover的时候可能需要强制杀死一个NameNode，有两种方法，ssh或者shell，一般选择ssh --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.ha.fencing.methods<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>sshfence<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.ha.fencing.ssh.private-key-files<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>/home/hadoop/.ssh/id_rsa<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.ha.fencing.ssh.connect-timeout<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>30000<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.handler.count<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>100<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.safemode.threshold.pct<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.journalnode.edits.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>/app/hadoop-3.2.3/data/jn<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 启用自动故障转移 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.ha.automatic-failover.enabled<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.replication<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.permissions.enabled<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.blocksize<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>67108864<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="mapred-site-xml"><a href="#mapred-site-xml" class="headerlink" title="mapred-site.xml"></a>mapred-site.xml</h4><blockquote><p>Mapreduce 参数。</p><p>包括 JobHistory Server 和应用程序参数两部分，如 reduce 任务的默认个数、任务所能够使用内存的默认上下限等。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;?xml-stylesheet type=<span class="hljs-string">&quot;text/xsl&quot;</span> href=<span class="hljs-string">&quot;configuration.xsl&quot;</span>?&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.framework.name<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>yarn<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 历史服务器端地址 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.jobhistory.address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node3:10020<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 历史服务器web端地址 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node3:19888<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.app.mapreduce.am.env<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>HADOOP_MAPRED_HOME=/app/hadoop-3.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.map.env<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>HADOOP_MAPRED_HOME=/app/hadoop-3.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.reduce.env<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>HADOOP_MAPRED_HOME=/app/hadoop-3.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.application.classpath<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>$HADOOP_MAPRED_HOME/share/hadoop/mapreduce/*,$HADOOP_MAPRED_HOME/share/hadoop/mapreduce/lib/*<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="yarn-site-xml"><a href="#yarn-site-xml" class="headerlink" title="yarn-site.xml"></a>yarn-site.xml</h4><blockquote><p>集群资源管理系统参数。</p><p>配置 ResourceManager，NodeManager 的通信端口，web监控端口等。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;?xml-stylesheet type=<span class="hljs-string">&quot;text/xsl&quot;</span> href=<span class="hljs-string">&quot;configuration.xsl&quot;</span>?&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.ha.enabled<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.cluster-id<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>yarnCluster<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.ha.automatic-failover.enabled<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.ha.automatic-failover.embedded<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.connect.retry-interval.ms<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>2000<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.ha.rm-ids<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>rm1,rm2<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.hostname.rm1<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.hostname.rm2<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node2<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.webapp.address.rm1<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node1:8088<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.webapp.address.rm2<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node2:8088<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.address.rm1<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node1:8032<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.address.rm2<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node2:8032<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.scheduler.address.rm1<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node1:8030<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.scheduler.address.rm2<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node2:8030<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 整合 Zookeeper --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.zk-address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node1:2181,node2:2181,node3:2181<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>mapreduce_shuffle<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.nodemanager.aux-services.mapreduce_shuffle.class<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>org.apache.hadoop.mapred.ShuffleHandler<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node2<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.nodemanager.env-whitelist<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>JAVA_HOME,HADOOP_COMMON_HOME,HADOOP_HDFS_HOME,HADOOP_CONF_DIR,CLASSPATH_PREPEND_DISTCACHE,HADOOP_YARN_HOME,HADOOP_MAPRED_HOME<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 日志采集 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.log-aggregation-enable<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.log.server.url<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>http://node3:19888/jobhistory/logs<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.log-aggregation.retain-seconds<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>604800<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.scheduler.class<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair.FairScheduler<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.recovery.enabled<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.store.class<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>org.apache.hadoop.yarn.server.resourcemanager.recovery.ZKRMStateStore<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 整合 Zookeeper --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.zk.state-store.address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node1:2181,node2:2181,node3:2181<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.application.classpath<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span><br>            $HADOOP_CONF_DIR,<br>            $HADOOP_COMMON_HOME/share/hadoop/common/*,<br>            $HADOOP_COMMON_HOME/share/hadoop/common/lib/*,<br>            $HADOOP_HDFS_HOME/share/hadoop/hdfs/*,<br>            $HADOOP_HDFS_HOME/share/hadoop/hdfs/lib/*,<br>            $HADOOP_YARN_HOME/share/hadoop/yarn/*,<br>            $HADOOP_YARN_HOME/share/hadoop/yarn/lib/*<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.nodemanager.pmem-check-enabled<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.nodemanager.vmem-check-enabled<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapred.job.queue.name<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hadoop.myqueue<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="分发配置文件"><a href="#分发配置文件" class="headerlink" title="分发配置文件"></a>分发配置文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">xsync /app/hadoop-3.2.3/etc/hadoop<br></code></pre></td></tr></table></figure><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><h3 id="zk-初始化"><a href="#zk-初始化" class="headerlink" title="zk 初始化"></a>zk 初始化</h3><p>在 node1 上格式化 zookeeper，第33行的日志表示创建成功。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hdfs zkfc -formatZK<br></code></pre></td></tr></table></figure><p>验证 zkfc 是否格式化成功，如果多了一个 hadoop-ha 包就是成功了，如下所示：</p><img src="/posts/3ee3db16/image-20221016231450173.png" alt="image-20221016231450173" style="zoom:67%;"><h3 id="启动-JournalNode-集群"><a href="#启动-JournalNode-集群" class="headerlink" title="启动 JournalNode 集群"></a>启动 JournalNode 集群</h3><p>依次在 node1, node2, node3 上面执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hdfs --daemon start journalnode<br></code></pre></td></tr></table></figure><h3 id="NameNode-集群初始化"><a href="#NameNode-集群初始化" class="headerlink" title="NameNode 集群初始化"></a>NameNode 集群初始化</h3><p>格式化集群的一个NameNode（node1），有两种方法，我使用的是第一种：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hdfs namenode –format<br></code></pre></td></tr></table></figure><p>在 node1 上启动刚才格式化的 namenode：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hdfs --daemon start namenode<br></code></pre></td></tr></table></figure><p>在 node1 机器上，将 node1 的数据复制到 node2 上来,在 node 2 上执行（node3 同理）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hdfs namenode –bootstrapStandby<br></code></pre></td></tr></table></figure><p>启动 node2 和 node3 的 namenode：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hdfs --daemon start namenode<br></code></pre></td></tr></table></figure><h3 id="DataNode-启动"><a href="#DataNode-启动" class="headerlink" title="DataNode 启动"></a>DataNode 启动</h3><p>启动所有的datanode，在 node1 上执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hdfs --daemon start datanode<br></code></pre></td></tr></table></figure><h3 id="Yarn-启动"><a href="#Yarn-启动" class="headerlink" title="Yarn 启动"></a>Yarn 启动</h3><p>启动yarn，在 node1 上执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">start-yarn.sh<br></code></pre></td></tr></table></figure><h3 id="测试-HDFS-是否可用"><a href="#测试-HDFS-是否可用" class="headerlink" title="测试 HDFS 是否可用"></a>测试 HDFS 是否可用</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hdfs dfs -ls /<br></code></pre></td></tr></table></figure><h2 id="一键启动"><a href="#一键启动" class="headerlink" title="一键启动"></a>一键启动</h2><p>在 node1 机器下的 <code>/app/hadoop-3.2.3/sbin</code> 目录下执行一键启动命令（需提前启动好 zookeeper 集群）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">start-all.sh<br></code></pre></td></tr></table></figure><h2 id="历史服务器配置"><a href="#历史服务器配置" class="headerlink" title="历史服务器配置"></a>历史服务器配置</h2><p>主要对应配置文件 mapred-site.xml，增加如下配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">&lt;!-- 历史服务器端地址 --&gt;<br>&lt;property&gt;<br>    &lt;name&gt;mapreduce.jobhistory.address&lt;/name&gt;<br>    &lt;value&gt;node3:10020&lt;/value&gt;<br>&lt;/property&gt;<br><br>&lt;!-- 历史服务器web端地址 --&gt;<br>&lt;property&gt;<br>    &lt;name&gt;mapreduce.jobhistory.webapp.address&lt;/name&gt;<br>    &lt;value&gt;node3:19888&lt;/value&gt;<br>&lt;/property&gt;<br></code></pre></td></tr></table></figure><p>启动停止（node3 机器执行）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">启动</span><br>./bin/mapred --daemon start historyserver<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">停止</span><br>./bin/mapred --daemon stop historyserver<br></code></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://blog.51cto.com/mapengfei/4778140">YARN &amp;&amp; Hadoop 集群环境准备</a></p><p><a href="http://liangfan.tech/2019/03/15/Hadoop%E4%B9%8B4-HDFS%E9%AB%98%E5%8F%AF%E7%94%A8%E9%85%8D%E7%BD%AE/">Hadoop之4-HDFS HA配置</a></p><p><a href="https://blog.csdn.net/qq_35029061/article/details/125810621">Hadoop HA 高可用集群搭建</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h</summary>
      
    
    
    
    <category term="大数据" scheme="https://blog.yahyav2rayssr.top/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    <category term="安装部署" scheme="https://blog.yahyav2rayssr.top/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
    
    
    <category term="大数据" scheme="https://blog.yahyav2rayssr.top/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>Spring Validation 校验</title>
    <link href="https://blog.yahyav2rayssr.top/posts/698a4e8e/"/>
    <id>https://blog.yahyav2rayssr.top/posts/698a4e8e/</id>
    <published>2023-04-18T15:31:33.153Z</published>
    <updated>2023-04-18T15:31:33.154Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="NotNull-和-NotEmpty-和-NotBlank-区别"><a href="#NotNull-和-NotEmpty-和-NotBlank-区别" class="headerlink" title="@NotNull 和 @NotEmpty 和 @NotBlank 区别"></a><code>@NotNull</code> 和 <code>@NotEmpty</code> 和 <code>@NotBlank</code> 区别</h2><ul><li><p>@NotNull：不能为null，但可以为empty</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure">(<span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot; &quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;   &quot;</span>)<br></code></pre></td></tr></table></figure></li><li><p>@NotEmpty：不能为null，而且长度必须大于0</p><p>其本质是CharSequence, Collection, Map, or Array的size或者length不能为0</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure">(<span class="hljs-string">&quot; &quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;  &quot;</span>)<br></code></pre></td></tr></table></figure></li><li><p>@NotBlank：只能作用在String上，不能为null，而且调用trim()后，长度必须大于0</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">(<span class="hljs-string">&quot;test&quot;</span>)    即：必须有实际字符<br></code></pre></td></tr></table></figure></li><li><p>@NonNull</p><p>@NotNull 是 JSR303（Bean的校验框架）的注解，用于运行时检查一个属性是否为空，如果为空则不合法。<br>@NonNull 是JSR 305（缺陷检查框架）的注解，是告诉编译器这个域不可能为空，当代码检查有空值时会给出一个风险警告，目前这个注解只有IDEA支持。</p></li></ul><h2 id="Validated-和-Valid-的区别"><a href="#Validated-和-Valid-的区别" class="headerlink" title="@Validated 和 @Valid 的区别"></a><code>@Validated</code> 和 <code>@Valid</code> 的区别</h2><h3 id="1-分组"><a href="#1-分组" class="headerlink" title="1. 分组"></a><strong>1. 分组</strong></h3><p>@Validated：提供了一个分组功能，可以在入参验证时，根据不同的分组采用不同的验证机制，这个网上也有资料，不详述。</p><p>@Valid：作为标准JSR-303规范，还没有吸收分组的功能。</p><p><strong>分组校验支撑继承归类分组</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ValidationGroups</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Common</span> &#123;<br>        <br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Insert</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Common</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Update</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Common</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">List</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Common</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Export</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Common</span> &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-注解地方"><a href="#2-注解地方" class="headerlink" title="2. 注解地方"></a><strong>2. 注解地方</strong></h3><p>@Validated：可以用在类型、方法和方法参数上。但是不能用在成员属性（字段）上</p><p>@Valid：可以用在方法、构造函数、方法参数和成员属性（字段）上</p><p>两者是否能用于成员属性（字段）上直接影响能否提供嵌套验证的功能。</p><blockquote><p>嵌套验证必须用@Valid</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Item</span> &#123;<br><br>    <span class="hljs-meta">@NotNull(message = &quot;id不能为空&quot;)</span><br>    <span class="hljs-meta">@Min(value = 1, message = &quot;id必须为正整数&quot;)</span><br>    <span class="hljs-keyword">private</span> Long id;<br><br>    <span class="hljs-meta">@Valid</span> <span class="hljs-comment">// 嵌套验证必须用@Valid</span><br>    <span class="hljs-meta">@NotNull(message = &quot;props不能为空&quot;)</span><br>    <span class="hljs-meta">@Size(min = 1, message = &quot;props至少要有一个自定义属性&quot;)</span><br>    <span class="hljs-keyword">private</span> List&lt;Prop&gt; props;<br>&#125;<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@NotEmpty</span><br><span class="hljs-keyword">private</span> List&lt;<span class="hljs-meta">@NotNull</span> <span class="hljs-meta">@Valid</span> UserInfo&gt; parents;<br></code></pre></td></tr></table></figure><p><strong>总结一下 @Validated 和 @Valid 在嵌套验证功能上的区别：</strong></p><p><strong>@Validated：</strong> 用在方法入参上无法单独提供嵌套验证功能。不能用在成员属性（字段）上，也无法提示框架进行嵌套验证。能配合嵌套验证注解@Valid进行嵌套验证。</p><p><strong>@Valid：</strong> 用在方法入参上无法单独提供嵌套验证功能。能够用在成员属性（字段）上，提示验证框架进行嵌套验证。能配合嵌套验证注解@Valid进行嵌套验证。</p><table><thead><tr><th>注解</th><th>含义</th></tr></thead><tbody><tr><td>@AssertFalse</td><td>验证注解的元素值是false</td></tr><tr><td>@AssertTrue</td><td>验证注解的元素值是true</td></tr><tr><td>@DecimalMax(value)</td><td>不大于value的数值</td></tr><tr><td>@DecimalMin(value)</td><td>不小于value的数值</td></tr><tr><td>@Digits(integer,fraction)</td><td>整数部分不超过integer,小数部分不超过fraction</td></tr><tr><td>@Future</td><td>将来的日期</td></tr><tr><td>@Past</td><td>过去的日期</td></tr><tr><td>@Max(value)</td><td>不大于value的数值</td></tr><tr><td>@Min(value)</td><td>不小于value的数值</td></tr><tr><td>@Pattern(value)</td><td>满足指定正则表达式</td></tr><tr><td>@Size(max,min)</td><td>长度在min到max之间，用法同@Length，不过@Length是Hibernate的，推荐用@Size</td></tr></tbody></table><h2 id="BindingResult-校验模式"><a href="#BindingResult-校验模式" class="headerlink" title="BindingResult 校验模式"></a><code>BindingResult</code> 校验模式</h2><p>我们使用<code>BindingResult</code>验证不通过的结果集合，但是通常按顺序验证到第一个字段不符合验证要求时，就可以直接拒绝请求了。</p><p>这就涉及到两种<strong>校验模式</strong>的配置：</p><ol><li>普通模式（默认是这个模式）: 会校验完所有的属性，然后返回所有的验证失败信息</li><li>快速失败模式: 只要有一个验证失败，则返回<br>如果想要配置第二种模式，需要添加如下配置类：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.hibernate.validator.HibernateValidator;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> javax.validation.Validation;<br><span class="hljs-keyword">import</span> javax.validation.Validator;<br><span class="hljs-keyword">import</span> javax.validation.ValidatorFactory;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ValidatorConf</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Validator <span class="hljs-title function_">validator</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">ValidatorFactory</span> <span class="hljs-variable">validatorFactory</span> <span class="hljs-operator">=</span> Validation.byProvider( HibernateValidator.class )<br>                .configure()<br>                .failFast( <span class="hljs-literal">true</span> )<br>                .buildValidatorFactory();<br>        <span class="hljs-type">Validator</span> <span class="hljs-variable">validator</span> <span class="hljs-operator">=</span> validatorFactory.getValidator();<br><br>        <span class="hljs-keyword">return</span> validator;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="自定义校验注解"><a href="#自定义校验注解" class="headerlink" title="自定义校验注解"></a>自定义校验注解</h2><p>定义<code>@ListNotHasNull</code>注解， 用于校验 List 集合中是否有null 元素</p><blockquote><p>注意：message、groups、payload属性都需要定义在参数校验注解中不能缺省</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(&#123;ElementType.ANNOTATION_TYPE, ElementType.METHOD, ElementType.FIELD&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-comment">//此处指定了注解的实现类为ListNotHasNullValidatorImpl</span><br><span class="hljs-meta">@Constraint(validatedBy = ListNotHasNullValidatorImpl.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> ListNotHasNull &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加value属性，可以作为校验时的条件,若不需要，可去掉此处定义</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">value</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>;<br><br>    String <span class="hljs-title function_">message</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;List集合中不能含有null元素&quot;</span>;<br><br>    Class&lt;?&gt;[] groups() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>    Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Payload</span>&gt;[] payload() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 定义List，为了让Bean的一个属性上可以添加多套规则</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Target(&#123;ElementType.METHOD, ElementType.FIELD, ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR, ElementType.PARAMETER&#125;)</span><br>    <span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br>    <span class="hljs-meta">@Documented</span><br>    <span class="hljs-meta">@interface</span> List &#123;<br>        ListNotHasNull[] value();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="注解实现类"><a href="#注解实现类" class="headerlink" title="注解实现类"></a>注解实现类</h3><p>该类需要实现<code>ConstraintValidator</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> javax.validation.ConstraintValidator;<br><span class="hljs-keyword">import</span> javax.validation.ConstraintValidatorContext;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ListNotHasNullValidatorImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ConstraintValidator</span>&lt;ListNotHasNull, List&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> value;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initialize</span><span class="hljs-params">(ListNotHasNull constraintAnnotation)</span> &#123;<br>        <span class="hljs-comment">//传入value 值，可以在校验中使用</span><br>        <span class="hljs-built_in">this</span>.value = constraintAnnotation.value();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isValid</span><span class="hljs-params">(List list, ConstraintValidatorContext constraintValidatorContext)</span> &#123;<br>        <span class="hljs-keyword">for</span> (Object object : list) &#123;<br>            <span class="hljs-keyword">if</span> (object == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">//如果List集合中含有Null元素，校验失败</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后我们就能在之前的例子中使用该注解了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@NotEmpty</span><br><span class="hljs-meta">@ListNotHasNull</span><br><span class="hljs-keyword">private</span> List&lt;<span class="hljs-meta">@Valid</span> UserInfo&gt; parents;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;NotNull-和-NotEmpty-和-NotBlank-区别&quot;&gt;&lt;a href=&quot;#NotNull-和-NotEmpty-和-</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.yahyav2rayssr.top/categories/Java/"/>
    
    <category term="Spring" scheme="https://blog.yahyav2rayssr.top/categories/Java/Spring/"/>
    
    
    <category term="spring" scheme="https://blog.yahyav2rayssr.top/tags/spring/"/>
    
    <category term="validation" scheme="https://blog.yahyav2rayssr.top/tags/validation/"/>
    
  </entry>
  
  <entry>
    <title>Vim 基本命令</title>
    <link href="https://blog.yahyav2rayssr.top/posts/154baef/"/>
    <id>https://blog.yahyav2rayssr.top/posts/154baef/</id>
    <published>2023-04-18T15:31:33.093Z</published>
    <updated>2023-04-18T15:31:33.094Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="跳至行首-x2F-行尾"><a href="#跳至行首-x2F-行尾" class="headerlink" title="跳至行首&#x2F;行尾"></a>跳至行首&#x2F;行尾</h2><p>跳至当前行行首</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">shift</span>+4命令可以敲出$字母</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"></span><br><span class="language-bash"></span><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">或者数字0</span><br>0<br></code></pre></td></tr></table></figure><p>跳至当前行行尾</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">大写的A</span><br>A<br></code></pre></td></tr></table></figure><p></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;跳至行首-x2F-行尾&quot;&gt;&lt;a href=&quot;#跳至行首-x2F-行尾&quot; class=&quot;headerlink&quot; title=&quot;跳至行</summary>
      
    
    
    
    <category term="Vim" scheme="https://blog.yahyav2rayssr.top/categories/Vim/"/>
    
    
    <category term="vim" scheme="https://blog.yahyav2rayssr.top/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>运维常用命令-常用篇</title>
    <link href="https://blog.yahyav2rayssr.top/posts/e9ae7850/"/>
    <id>https://blog.yahyav2rayssr.top/posts/e9ae7850/</id>
    <published>2023-04-18T15:31:33.049Z</published>
    <updated>2023-04-18T15:31:33.050Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-ls-系列"><a href="#1-ls-系列" class="headerlink" title="1. ls 系列"></a>1. ls 系列</h1><blockquote><p>-F：根据文件、目录等信息在文件名或目录名最后给予附加数据结构</p><ol><li>*  代表可执行文件；</li><li>&#x2F;  代表目录</li><li>&#x3D;  代表socket文件</li><li>|  代表FIFO文件</li><li>@  代表连接文件</li></ol></blockquote><h2 id="1-只显示文件类型，排除目录"><a href="#1-只显示文件类型，排除目录" class="headerlink" title="1. 只显示文件类型，排除目录"></a>1. 只显示文件类型，排除目录</h2><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><blockquote><p>^[^d] 是一个正则表达式，[^d] 表示字符串含有一个不是 d 的字符， ^d 表示以 d 开头，^[^d] 表示不以 d 开头</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ls -l | grep ^[^d]<br></code></pre></td></tr></table></figure><p>所以只显示文件夹的写法为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ls -l | grep ^d<br></code></pre></td></tr></table></figure><h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ls -l | grep -v ^d<br></code></pre></td></tr></table></figure><p>如果文件名包含空格，可以用下面命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ls -l | grep -v [/$]<br></code></pre></td></tr></table></figure><hr><h1 id="2-sed-系列"><a href="#2-sed-系列" class="headerlink" title="2. sed 系列"></a>2. sed 系列</h1><h2 id="1-替换字符串"><a href="#1-替换字符串" class="headerlink" title="1. 替换字符串"></a>1. 替换字符串</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sed &#x27;s/old/new/g&#x27;<br></code></pre></td></tr></table></figure><h1 id="3-rm-系列"><a href="#3-rm-系列" class="headerlink" title="3. rm 系列"></a>3. rm 系列</h1><h2 id="1-删除带有指定字符串的文件"><a href="#1-删除带有指定字符串的文件" class="headerlink" title="1. 删除带有指定字符串的文件"></a>1. 删除带有指定字符串的文件</h2><h3 id="方法一：-1"><a href="#方法一：-1" class="headerlink" title="方法一："></a>方法一：</h3><blockquote><p>注意字符串如果含有特殊字符，必须做转义处理，否则默认会删除当前目录下的所有文件。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rm -f *字符串*<br></code></pre></td></tr></table></figure><h3 id="方法二：-1"><a href="#方法二：-1" class="headerlink" title="方法二："></a>方法二：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">find -type f -name &#x27;*字符串*&#x27; -delete<br></code></pre></td></tr></table></figure><h1 id="4-awk-系列"><a href="#4-awk-系列" class="headerlink" title="4. awk 系列"></a>4. awk 系列</h1><h2 id="1-获取某一行中指定字符后的内容"><a href="#1-获取某一行中指定字符后的内容" class="headerlink" title="1. 获取某一行中指定字符后的内容"></a>1. 获取某一行中指定字符后的内容</h2><p>比如有个xxx.txt文件，里面有很多行内容，其中有行内容为ro.xxx&#x3D;123，要想获取到123这个值，可以如下处理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br>NAME=`cat xxx.txt | grep &#x27;ro.xxx&#x27; | awk -F &#x27;=&#x27; &#x27;&#123;print $2&#125;&#x27;`<br>echo $NAME<br></code></pre></td></tr></table></figure><h1 id="5-cd-dirname-0-pwd"><a href="#5-cd-dirname-0-pwd" class="headerlink" title="5. $(cd dirname $0;pwd)"></a>5. $(cd <code>dirname $0</code>;pwd)</h1><p><code>cd &quot;$(dirname &quot;$0&quot;)&quot;;pwd</code> 等同于 <code>$(dirname $(readlink -f &quot;$0&quot;))</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">在/home/admin/test/下新建test.sh内容如下：</span><br>cd `dirname $0`<br>echo `pwd`<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">然后返回到/home/admin/执行</span><br>sh test/test.sh<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">运行结果:</span><br>/home/admin/test<br></code></pre></td></tr></table></figure><h1 id="6-basename"><a href="#6-basename" class="headerlink" title="6. basename"></a>6. basename</h1><h2 id="1-basename"><a href="#1-basename" class="headerlink" title="1. basename"></a>1. basename</h2><p>打印除上层路径外的基础文件名；当文件名后存在后缀时，除去后面的后缀，如 # basename include&#x2F;stdio.h .h 只会打印出 stdio</p><h2 id="2-basename-s"><a href="#2-basename-s" class="headerlink" title="2. basename -s"></a>2. basename -s</h2><p>-s参数后面指定要去除的后缀字符，即：# basename -s .h include&#x2F;stdio.h 同 # basename include&#x2F;stdio.h .h 一样只会打印出 stdio</p><h2 id="3-basename-a"><a href="#3-basename-a" class="headerlink" title="3. basename -a"></a>3. basename -a</h2><p>-a参数可追加执行多个文件路径，取每一个路径的基础文件名并打印。用法如下图：</p><h1 id="7-pwd"><a href="#7-pwd" class="headerlink" title="7. pwd"></a>7. pwd</h1><h2 id="1-pwd-L"><a href="#1-pwd-L" class="headerlink" title="1. pwd -L"></a>1. pwd -L</h2><p>打印出环境变量 $PWD 的值，如果 PWD 赋值为当前工作路径，pwd 默认同 pwd -L</p><h2 id="2-pwd-P"><a href="#2-pwd-P" class="headerlink" title="2. pwd -P"></a>2. pwd -P</h2><p>打印真实路径，不打印链接的路径，区别如图：</p><h1 id="8-watch"><a href="#8-watch" class="headerlink" title="8. watch"></a>8. watch</h1><p><strong>命令参数</strong>：</p><p>-n 或 –interval watch 缺省每2秒运行一下程序，可以用 -n 或 -interval 来指定间隔的时间。</p><p>-d 或 –differences 用 -d 或 –differences 选项 watch 会高亮显示变化的区域。 而 -d&#x3D;cumulative 选项会把变动过的地方(不管最近的那次有没有变动)都高亮显示出来。</p><p>-t 或-no-title 会关闭watch命令在顶部的时间间隔,命令，当前时间的输出。</p><p><strong>示例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">watch -n 1 -d &quot;&lt;command&gt;&quot;<br></code></pre></td></tr></table></figure><h1 id="9-grep"><a href="#9-grep" class="headerlink" title="9. grep"></a>9. grep</h1><table><thead><tr><th>元字符</th><th>功能</th><th>例子</th><th>匹配什么</th></tr></thead><tbody><tr><td>^</td><td>锚定行的开始</td><td>&#x2F;^love&#x2F;</td><td>匹配所有以love开头的行</td></tr><tr><td>$</td><td>锚定行的结束</td><td>&#x2F;love$&#x2F;</td><td>匹配所有以love 结束的行</td></tr><tr><td>.</td><td>匹配一个字符</td><td>&#x2F;l..e&#x2F;</td><td>匹配这样的行，这些行包含这样的字符：第一个字符是l,紧跟着两个字符，然后是e</td></tr><tr><td>*</td><td>代表0个或多个先前字符</td><td>&#x2F;*love&#x2F;</td><td>匹配所有这样的行，有0个或多个空格，空格后跟着love</td></tr><tr><td>[]</td><td>匹配字符组中的一个字符</td><td>&#x2F;[Ll]ove&#x2F;</td><td>匹配所有包含love或者Love的行</td></tr><tr><td>[^]</td><td>匹配一个不在范围内的字符</td><td>&#x2F;[^A-Z]ove&#x2F;</td><td></td></tr><tr><td>&lt;</td><td>锚定单词的开始</td><td>&lt;love</td><td>匹配所有这样的行，这些行包含以love开头的单词（vi和grep支持这个功能）</td></tr><tr><td>&gt;</td><td>锚定单词的结束</td><td>Love&gt;</td><td>匹配所有这样的行，这些行包含以love结束的单词（vi和grep支持这个功能）</td></tr><tr><td>(..)</td><td>标记后面用到的匹配字符</td><td>&#x2F;(love)able1rs&#x2F;</td><td>最多可以使用9个标签。第一个标签是模板最左边的部分。在本例子中，模板love保存的标签为1，后面的1指得就是love；本例子搜索的是这样的行，这些行包含这样的字符，在Loveabel后面跟着lovers</td></tr><tr><td>x{m}</td><td>M次复制字符x</td><td></td><td></td></tr><tr><td>x{m,}</td><td>至少m次复制字符x</td><td></td><td></td></tr><tr><td>x{m,n}</td><td>至少m次，至多n次复制字x</td><td></td><td></td></tr><tr><td>w</td><td>文字和数字字符，[A-Za-z0-9]</td><td>Lw*e</td><td>匹配一个l字符，紧跟着0个或多个文字或数字字符，然后是e</td></tr><tr><td>W</td><td>同上</td><td></td><td></td></tr><tr><td>b</td><td>单词分界线</td><td>bloveb</td><td>仅仅匹配单词love</td></tr></tbody></table><h2 id="递归查找某个文本内容"><a href="#递归查找某个文本内容" class="headerlink" title="递归查找某个文本内容"></a>递归查找某个文本内容</h2><ul><li>R 表示递归，就是在当前目录找不到就去子目录找 </li><li>E 表示把文件名也打印出来 </li><li>n 打印此行在文件中的位置。</li></ul><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">这句可以显示在哪个文件里包含3306</span><br>grep -Rl &quot;3306&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">可以显现文件名，行数</span><br>grep -REn &quot;3306&quot;<br></code></pre></td></tr></table></figure><h3 id="查找替换内容"><a href="#查找替换内容" class="headerlink" title="查找替换内容"></a>查找替换内容</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">sed -i <span class="hljs-string">&quot;s/[原字符串]/[新字符串]/g&quot;</span> `grep <span class="hljs-string">&#x27;[原字符串]&#x27;</span> -rl /opt/kubernetes`</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">示例：替换/opt/kubernetes下所有文件内容为242的换成245</span><br>sed -i &quot;s/242/245/g&quot; `grep &#x27;242&#x27; -rl /opt/kubernetes`<br></code></pre></td></tr></table></figure><h1 id="10-查看端口占用"><a href="#10-查看端口占用" class="headerlink" title="10. 查看端口占用"></a>10. 查看端口占用</h1><h2 id="查看那些程序使用tcp的80端口"><a href="#查看那些程序使用tcp的80端口" class="headerlink" title="查看那些程序使用tcp的80端口"></a>查看那些程序使用tcp的80端口</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$</span><span class="language-bash">fuser -v -n tcp 80</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">fuser -v 80/tcp</span>  <br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-ls-系列&quot;&gt;&lt;a href=&quot;#1-ls-系列&quot; class=&quot;headerlink&quot; title=&quot;1. ls 系列&quot;&gt;&lt;/a&gt;1. ls 系列&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;-F：根据文件、目录等信息在文件名或目录名最后给予附加数据结构&lt;/p&gt;</summary>
      
    
    
    
    <category term="运维" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/"/>
    
    <category term="常用命令" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
    
    <category term="命令" scheme="https://blog.yahyav2rayssr.top/tags/%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
</feed>
