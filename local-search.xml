<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>gitlab 安装</title>
    <link href="/posts/fc8249c5/"/>
    <url>/posts/fc8249c5/</url>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>gitlab 运行需要较大内存，建议将虚拟机内存设置为 4GB 以上，并保证相关端口不被其他进行占用。</p></blockquote><h3 id="安装相关依赖"><a href="#安装相关依赖" class="headerlink" title="安装相关依赖"></a>安装相关依赖</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum -y install policycoreutils openssh-server openssh-clients postfix<br></code></pre></td></tr></table></figure><h3 id="设置-postfix"><a href="#设置-postfix" class="headerlink" title="设置 postfix"></a>设置 postfix</h3><blockquote><p>设置 postfix 为开机自启动，目的：支持 gitlab 邮件发送。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl enable postfix &amp;&amp; systemctl start postfix<br></code></pre></td></tr></table></figure><h3 id="rpm-包安装"><a href="#rpm-包安装" class="headerlink" title="rpm 包安装"></a>rpm 包安装</h3><p>官方参考链接：<a href="https://packages.gitlab.com/gitlab/gitlab-ce/install#bash-rpm">https://packages.gitlab.com/gitlab/gitlab-ce/install#bash-rpm</a></p><p>使用以下命令进行快速安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -s https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash<br></code></pre></td></tr></table></figure><blockquote><p>EL 是 Red Hat Enterprise Linux 的简写 </p><ul><li>EL6 软件包用于在 Red Hat 6.x, CentOS 6.x, and CloudLinux 6.x 的安装。</li><li>EL5 软件包用于在 Red Hat 5.x, CentOS 5.x, CloudLinux 5.x 的安装。</li><li>EL7 软件包用于在 Red Hat 7.x, CentOS 7.x, and CloudLinux 7.x 的安装。</li></ul></blockquote><p>所以这里我们采用安装 EL7 的模式，安装命令如下：</p><p>官方参考链接：<a href="https://packages.gitlab.com/gitlab/gitlab-ce/packages/el/7/gitlab-ce-15.8.5-ce.0.el7.x86_64.rpm">https://packages.gitlab.com/gitlab/gitlab-ce/packages/el/7/gitlab-ce-15.8.5-ce.0.el7.x86_64.rpm</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo yum -y install gitlab-ce-15.8.5-ce.0.el7.x86_64<br></code></pre></td></tr></table></figure><p>安装完毕后的主体文件都在 <code>/opt/gitlab/</code> 目录下，可自行翻阅按需修改。</p><h2 id="修改-root-密码"><a href="#修改-root-密码" class="headerlink" title="修改 root 密码"></a>修改 root 密码</h2><p>官方修改密码：(<a href="https://link.jianshu.com/?t=http://docs.gitlab.com/ce/security/reset_root_password.html">http://docs.gitlab.com/ce/security/reset_root_password.html</a>)</p><p>在root用户下，执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">老版命令</span><br>gitlab-rails console production<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">新版命令</span><br>gitlab-rails console -e production<br></code></pre></td></tr></table></figure><p>获得用户数据，修改用户密码</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs ruby">[root<span class="hljs-variable">@svr34</span> bin]<span class="hljs-comment"># gitlab-rails console production</span><br><span class="hljs-title class_">Loading</span> production environment (<span class="hljs-title class_">Rails</span> <span class="hljs-number">4.2</span>.<span class="hljs-number">5.2</span>)<br><br><span class="hljs-meta prompt_">irb(main):001:0&gt;</span> user = <span class="hljs-title class_">User</span>.where(<span class="hljs-symbol">id:</span> <span class="hljs-number">1</span>).first<br>=&gt; #&lt;User id:1 @root&gt;<br><br><span class="hljs-meta prompt_">irb(main):002:0&gt;</span> user.password=<span class="hljs-string">&quot;7613302589&quot;</span><br>=&gt; <span class="hljs-string">&quot;12345678&quot;</span><br><br><span class="hljs-meta prompt_">irb(main):003:0&gt;</span> user.password_confirmation=<span class="hljs-string">&quot;7613302589&quot;</span><br>=&gt; <span class="hljs-string">&quot;12345678&quot;</span><br><br><span class="hljs-meta prompt_">irb(main):004:0&gt;</span> user.save!<br>=&gt; <span class="hljs-literal">true</span><br><br><span class="hljs-meta prompt_">irb(main):005:0&gt;</span> quit<br></code></pre></td></tr></table></figure><h2 id="修改访问-URL"><a href="#修改访问-URL" class="headerlink" title="修改访问 URL"></a>修改访问 URL</h2><p>编辑 gitlab.rb 文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">vim /etc/gitlab/gitlab.rb</span><br><br>external_url &#x27;http://192.168.50.245:8138&#x27;<br></code></pre></td></tr></table></figure><blockquote><p>此处注意别使用已被占用的端口！（如8080）</p></blockquote><img src="/posts/fc8249c5/image-20230402104707147.png" alt="image-20230402104707147" style="zoom:50%;"><h2 id="重置并启动-Gitlab"><a href="#重置并启动-Gitlab" class="headerlink" title="重置并启动 Gitlab"></a>重置并启动 Gitlab</h2><p>重置：</p><blockquote><p><em>注：第一次预计需要几分钟</em></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gitlab-ctl reconfigure<br></code></pre></td></tr></table></figure><p>启动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gitlab-ctl restart<br></code></pre></td></tr></table></figure><h2 id="端口用途一览"><a href="#端口用途一览" class="headerlink" title="端口用途一览"></a>端口用途一览</h2><img src="/posts/fc8249c5/image-20230402124422358.png" alt="image-20230402124422358" style="zoom: 67%;"><table><thead><tr><th>端口号</th><th>归类</th><th>用途</th></tr></thead><tbody><tr><td>8060</td><td>Nginx</td><td>用途不明</td></tr><tr><td>8138</td><td>Nginx</td><td>第二个 nginx 的端口，就是 gitlab 实例的主端口，所有外部访问的 http 均通过 gitlab 内置的 nginx 服务器处理，并使用该端口，当然暴露地址为外网0.0.0.0</td></tr><tr><td>9121</td><td>Redis</td><td>redis_exporter 的 9121，是 gitlab 内置 redis 数据库，只向本机暴露</td></tr><tr><td>9090</td><td>Prometheus</td><td>向本机暴露，用途应该是创建和管理时间序列事件的触发，如通知那些功能</td></tr><tr><td>9187</td><td>PostgreSQL</td><td>postgres_expoter 的9187，是 gitlab 内置的 postegres 数据库，向本机暴露</td></tr><tr><td>9093</td><td>Ruby</td><td>config.ru 的 9093，gitlab 使用 ruby 的 unicorn 作为 app server 运行，管理 worker 等功能，比较重要，默认为 8080，由于 8080 比较受欢迎，这个端口基本上都得改，暴露可自行设定；</td></tr><tr><td>9168</td><td>Ruby</td><td>用途不明</td></tr><tr><td>9100</td><td>NodeJS</td><td>node_exporter 的 9100，一个 nodejs 进程，用于实现测量所在的机器的资源状态比如cpu、内存、硬盘等数据的功能</td></tr><tr><td>9229</td><td>Go</td><td>gitlab-workhors 的 9229，一个是用 go 语言写的组件，是 gitlab 发展途中添加进来的用于优化 git over http 的组件，具体历史可以查看<a href="https://www.oschina.net/translate/a-brief-history-of-gitlab-workhorse">这里</a>了解gitlab-workhors的由来</td></tr><tr><td>8082</td><td>其他</td><td>sidekiq 的 8082，是一种多线程后台处理系统，用于实现 gitlab 异步运行任务</td></tr><tr><td>9236</td><td>其他</td><td>gitaly 的9236，是一个能够提供访问 git 仓库的 RPC 远程调用功能的服务，属于 gitlab 的一个托管组件<br>gitlab 的配置文件位于<code>/etc/gitlab/gitlab/gitlab.rb</code>，使用vim等工具可以直接修改，各种参数配置修改可以参考<a href="https://docs.gitlab.com/">官方文档</a></td></tr></tbody></table><h2 id="nginx-代理"><a href="#nginx-代理" class="headerlink" title="nginx 代理"></a>nginx 代理</h2><h3 id="关闭-selinux"><a href="#关闭-selinux" class="headerlink" title="关闭 selinux"></a>关闭 selinux</h3><blockquote><p><strong>什么是selinux ？</strong></p><p>SELinux：即安全增强型 Linux（Security-Enhanced Linux）</p><p>它是一个 Linux 内核模块，也是 Linux 的一个安全子系统</p><p>它主要由美国国家安全局开发，主要作用是最大限度地减小系统中服务进程可访问的资源（最小权限原则）</p><p><strong>为什么要关闭 selinux ？</strong></p><p>有的软件对于 selinux 的安全规则支持不够好，就会建议在安装前把 selinux 先关闭，例如 k8s，本次在启动 nginx 的过程中发现 gitlab 会报 502 的错误，经由使用 <code>journalctl -xe</code>  命令发现有 selinux 的相关错误信息，所以需要把 selinux 做一次人工的手动禁用。</p><p>selinux 常用命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看审计日志</span><br>cat /var/log/audit/audit.log<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">分析一个文件</span><br>sealert -a /var/log/audit/audit.log<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查询系统中的布尔型规则及其状态</span><br>getsebool -a<br></code></pre></td></tr></table></figure></blockquote><p>selinux的三种运行模式:</p><ul><li>enforcing: 强制模式，SELinux 正在运行中，已经在限制 domain&#x2F;type</li><li>permissive: 宽容模式：SELinux 正在运行中，但仅发出警告信息,并不会实际限制 domain&#x2F;type 的存取（permissive模式可以用在测试环境中供调试规则时使用）</li><li>disabled: 关闭，SELinux 没有实际运行。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sestatus -v # 查看当前信息<br>getenforce # 查看当前运行模式<br></code></pre></td></tr></table></figure><h4 id="临时关闭"><a href="#临时关闭" class="headerlink" title="临时关闭"></a>临时关闭</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">0: Permissive</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">1: Enforcing</span><br><br>setenforce 0<br></code></pre></td></tr></table></figure><h4 id="永久关闭"><a href="#永久关闭" class="headerlink" title="永久关闭"></a>永久关闭</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">vim /etc/selinux/config</span><br><br>SELINUX=disabled<br></code></pre></td></tr></table></figure><h3 id="外部-nginx-安装"><a href="#外部-nginx-安装" class="headerlink" title="外部 nginx 安装"></a>外部 nginx 安装</h3><p>添加 Nginx 到 YUM 源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm<br></code></pre></td></tr></table></figure><p>安装 nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo yum install -y nginx<br></code></pre></td></tr></table></figure><p>启用 nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo systemctl enable nginx.service &amp;&amp; sudo systemctl start nginx.service<br></code></pre></td></tr></table></figure><p>Nginx 常用配置目录如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">资源文件目录</span><br>/usr/share/nginx/html/<br>├── 50x.html<br>└── index.html<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">配置文件主目录</span><br>/etc/nginx/<br>├── conf.d<br>│   ├── default.conf<br>│   └── gitlab.conf # gitlab 配置文件<br>├── fastcgi_params<br>├── mime.types<br>├── modules<br>├── nginx.conf # nginx 根目录配置文件<br>├── scgi_params<br>└── uwsgi_params<br></code></pre></td></tr></table></figure><h3 id="代理-gitlab-内部-nginx"><a href="#代理-gitlab-内部-nginx" class="headerlink" title="代理 gitlab 内部 nginx"></a>代理 gitlab 内部 nginx</h3><p>gitlab 服务器主体框架如下：</p><img src="/posts/fc8249c5/gitlab-frame.png" class alt="gitlab服务器框架"><h4 id="nginx-配置文件"><a href="#nginx-配置文件" class="headerlink" title="nginx 配置文件"></a>nginx 配置文件</h4><p>gitlab.conf 配置文件内容如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 主访问入口</span><br><span class="hljs-section">server</span> &#123;<br>  <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>  <span class="hljs-attribute">server_name</span> gitlab.yahya.top;<br><br>  <span class="hljs-comment"># 入口反向代理</span><br>  <span class="hljs-section">location</span> / &#123;<br>    <span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$host</span>;<br>    <span class="hljs-attribute">proxy_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>    <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>    <span class="hljs-attribute">proxy_redirect</span> <span class="hljs-literal">off</span>;<br>    <span class="hljs-comment"># 配置反向代理地址</span><br>    <span class="hljs-attribute">proxy_pass</span> http://192.168.50.245:8138;<br>    <span class="hljs-attribute">proxy_http_version</span> <span class="hljs-number">1</span>.<span class="hljs-number">1</span>;<br>    <span class="hljs-comment"># 一定记得要配置 body_size</span><br>    <span class="hljs-attribute">client_max_body_size</span> <span class="hljs-number">1024m</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>修改 gitlab.rb 文件</p><blockquote><p>external_url 的配置直接影响到 gitlab 系统中所有 http 入口的地址，比如 git 仓库的 http 地址，gitlab 访问页面的地址，注册回调的地址，邮件验证的地址等。</p></blockquote><p>编辑 gitlab.rb 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/gitlab/gitlab.rb<br></code></pre></td></tr></table></figure><h4 id="配置域名"><a href="#配置域名" class="headerlink" title="配置域名"></a>配置域名</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">external_url &#x27;http://gitlab.yahya.top&#x27;<br></code></pre></td></tr></table></figure><h4 id="修改对外主端口"><a href="#修改对外主端口" class="headerlink" title="修改对外主端口"></a>修改对外主端口</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nginx[&#x27;listen_port&#x27;] = 8138<br></code></pre></td></tr></table></figure><h4 id="max-body-size-配置"><a href="#max-body-size-配置" class="headerlink" title="max_body_size 配置"></a>max_body_size 配置</h4><p>gitlab 是可以使用 http 和 ssh 两种方式来进行git操作的，当使用 http 时，是通过post请求发送内容，若 nginx 在代理时没有设置 body_size 时将会收到：413 Request Entity Too Large 的错误，push 不了代码，内外部的 nginx 都需要配置，在 gitlab.rb 中添加：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nginx[&#x27;client_max_body_size&#x27;] = &#x27;1024m&#x27;<br></code></pre></td></tr></table></figure><h2 id="认证普通用户"><a href="#认证普通用户" class="headerlink" title="认证普通用户"></a>认证普通用户</h2><blockquote><p>默认情况下注册的用户是需要进行审批，否则在没有审批的情况下登录会报以下的错误：</p><p>Your account is pending approval from your GitLab administrator and hence bl</p></blockquote><p>登录 root 用户，点击头像这里</p><img src="/posts/fc8249c5/image-20230402122006519.png" alt="image-20230402122006519"><p>点击 Overview -&gt; Users -&gt; Pending approval，审批需要注册的用户即可。</p><img src="/posts/fc8249c5/image-20230402122531351.png" class alt="image-20230402122531351"><h2 id="临时关闭分支保护"><a href="#临时关闭分支保护" class="headerlink" title="临时关闭分支保护"></a>临时关闭分支保护</h2><blockquote><p>git push 报错 pre-receive hook declined，原因为 master 为受保护分支，无法强推代码到 master 分支上。使用 Owner 以及 Admin 角色账号推送都无法成功。</p></blockquote><p>Settings -&gt; Repository -&gt; Protected Branches 临时 Unprotect master 分支(强推成功后一定要重新添加为受保护的分支)</p><img src="/posts/fc8249c5/image-20230402131743121.png" alt="image-20230402131743121" style="zoom:67%;"><p><strong>关于 GitLab 访问权限</strong></p><p>访问权限 - Visibility Level：</p><p>这个是在建立项目时就需要选定的，主要用于决定哪些人可以访问此项目，包含 3 种：</p><ul><li><strong>Private - 私有</strong>，只有属于该项目成员才有看到</li><li><strong>Internal - 内部</strong>，用 GitLab 账号的人都看到</li><li><strong>Public - 公开</strong>，任何人可以看到</li></ul><p>开源项目和组设置的是 Internal。</p><p>行为权限：</p><p>在满足行为权限之前，必须具备访问权限（如果没有访问权限，那就无所谓行为权限了），行为权限是指对该项目进行某些操作，比如提交、创建问题、创建新分支、删除分支、创建标签、删除标签等角色。</p><blockquote><p>官方权限解释文档：<a href="https://docs.gitlab.com/ee/user/permissions.html#project-members-permissions">https://docs.gitlab.com/ee/user/permissions.html#project-members-permissions</a></p></blockquote><ul><li><p><strong>Guest - 访客</strong></p><p>可以创建 issue、发表评论，不能读写版本库。</p></li><li><p><strong>Reporter  - 报告者</strong></p><p>可以理解为测试员、产品经理等，一般负责提交 issue 等<br> 可以克隆代码，不能提交，QA、PM 可以赋予这个权限。</p></li><li><p><strong>Developer - 开发者</strong></p><p>可以克隆代码、开发、提交、push，RD 可以赋予这个权限。</p></li><li><p><strong>Master - 主人</strong></p><p>可以创建项目、添加 tag、保护分支、添加项目成员、编辑项目，核心 RD 负责人可以赋予这个权限。</p></li><li><p><strong>Owner - 拥有者</strong></p><p>可以设置项目访问权限 - Visibility Level、删除项目、迁移项目、管理组成员，开发组 Leader 可以赋予这个权限。</p></li><li><p><strong>Maintainer - 维护者</strong></p><p>权限与 Owner 差不多，但无删除项目等权限。</p></li></ul><h2 id="参见错误"><a href="#参见错误" class="headerlink" title="参见错误"></a>参见错误</h2><p>502 错误：</p><p>首先保证Gitlab可用运行内存大于 <strong>4G</strong>，端口未被占用</p><p>再赋予<strong>权限</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod -R 755 /var/log/gitlab<br></code></pre></td></tr></table></figure><p>再重置重启，访问后仍然可能遇到502，不过我刷新2次就一切ok了。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://blog.hobairiku.site/2018/02/26/gitlab-setup/#1-%E5%87%86%E5%A4%87">使用Nginx搭建并代理GitLab服务器</a></p><p><a href="https://blog.csdn.net/Abysscarry/article/details/79402695">Centos7 搭建Gitlab服务器并配置项目全过程</a></p><p><a href="https://cloud.tencent.com/developer/article/1918458?from=15425&areaSource=102001.1&traceId=ENuxuOXF_A89HJy85bkR3">gitlab配置域名并https访问</a></p><p><a href="https://www.cnblogs.com/architectforest/p/12987499.html">linux(centos8):禁用selinux(临时关闭&#x2F;永久关闭)</a></p>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
      <category>常用安装</category>
      
    </categories>
    
    
    <tags>
      
      <tag>gitlab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo 安装</title>
    <link href="/posts/9d95a809/"/>
    <url>/posts/9d95a809/</url>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="yum-源配置"><a href="#yum-源配置" class="headerlink" title="yum 源配置"></a>yum 源配置</h2><p>将 yun 源设置成阿里云的，可以大大提高安装速度，推荐使用，所需命令如下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">rm -rf /etc/yum.repos.d/*  # 删除本地repo文件<br><br>curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo  ## 下载阿里云centos7镜像源<br><br>yum clean all; yum makecache # 清理缓存、建立缓存<br></code></pre></td></tr></table></figure><p>如果担心中途出其他问题先考虑先把原有 <code>/etc/yum.repos.d</code> 目录下的文件做一次备份方便还原。</p><h2 id="git-安装"><a href="#git-安装" class="headerlink" title="git 安装"></a>git 安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y git<br></code></pre></td></tr></table></figure><h2 id="nodejs-安装"><a href="#nodejs-安装" class="headerlink" title="nodejs 安装"></a>nodejs 安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://nodejs.org/dist/v16.14.2/node-v16.14.2-linux-x64.tar.xz<br><br>tar -vxf node-v16.14.2-linux-x64.tar.xz   # 解压node.js软件压缩软件包<br>mv node-v16.14.2-linux-x64 /usr/local/bin # 移动node到/usr/local/bin目录下<br><br>cd /usr/local/bin/ # 进入/usr/local/bin<br><br>mv node-v16.14.2-linux-x64/ node # 修改node-v16.14.2-linux-x64 名称为 node<br></code></pre></td></tr></table></figure><p>然后修改 <code>/etc/profile</code> 文件，增加以下配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">export N_PREFIX=/usr/local/bin/node  # 设置node软件家目录的环境变量<br>export PATH=$PATH:$N_PREFIX/bin  # 设置node软件到bin目录下环境变量  实现bin目录下命令的全局使用<br></code></pre></td></tr></table></figure><p>最后执行 <code>source /etc/profile</code> 使配置生效，用以下命令验证确认 nodejs 已经安装成功。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">node -v<br><br>npm -v<br></code></pre></td></tr></table></figure><h3 id="n-安装"><a href="#n-安装" class="headerlink" title="n 安装"></a>n 安装</h3><p>使用 n 可以对 nodejs 进行多版本管理，推荐使用 n 来切换管理 nodejs 版本，安装命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g n<br></code></pre></td></tr></table></figure><p>常用命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">n stable # 安装最新的稳定版<br><br>n lts # 安装最新的 LTS 版<br><br>n &lt;version&gt; # 安装指定的 node 版本<br></code></pre></td></tr></table></figure><h2 id="hexo-安装"><a href="#hexo-安装" class="headerlink" title="hexo 安装"></a>hexo 安装</h2><p>hexo 的安装比较简单，直接按照<a href="https://hexo.io/zh-cn/">官网</a>的说明步骤安装即可。首先是基础软件 nodejs 以及 git，这两个都是常用基础软件所以就不介绍细节了，官网直接安装即可。 按照使用了 npm 这个 nodejs 库管理软件，由于默认源在国外经常连接超时，所以首先需要修改成国内的镜像源，这里是改成了淘宝的镜像源。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm config set registry https://registry.npm.taobao.org<br></code></pre></td></tr></table></figure><p>接下来就是使用 <code>npm</code> 命令安装 hexo，推荐使用 cnpm</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g cnpm --registry=https://registry.npm.taobao.org<br><br>cnpm install -g hexo-cli<br></code></pre></td></tr></table></figure><h2 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl stop firewalld; systemctl disable firewalld<br></code></pre></td></tr></table></figure><h2 id="关闭-selinux"><a href="#关闭-selinux" class="headerlink" title="关闭 selinux"></a>关闭 selinux</h2><h3 id="临时关闭"><a href="#临时关闭" class="headerlink" title="临时关闭"></a>临时关闭</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">0: Permissive</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">1: Enforcing</span><br><br>setenforce 0<br></code></pre></td></tr></table></figure><h3 id="永久关闭"><a href="#永久关闭" class="headerlink" title="永久关闭"></a>永久关闭</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">vim /etc/selinux/config</span><br><br>SELINUX=disabled<br></code></pre></td></tr></table></figure><h2 id="hexo-初始化"><a href="#hexo-初始化" class="headerlink" title="hexo 初始化"></a>hexo 初始化</h2><blockquote><ul><li>站点配置文件：站点目录下的<code>_config.yml</code>，路径为<code>&lt;folder&gt;\_config.yml</code></li><li>主题配置文件：站点目录下的<code>themes</code>文件夹下的，主题文件夹下的<code>_config.yml</code>，路径为<code>&lt;folder&gt;\themes\&lt;主题文件夹&gt;\_config.yml</code></li></ul></blockquote><p>新建一个目录，作为统一存放 markdown 文件的目录，然后进入到该目录下执行以下命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo init<br></code></pre></td></tr></table></figure><h2 id="markdown-菜单目录生成"><a href="#markdown-菜单目录生成" class="headerlink" title="markdown 菜单目录生成"></a>markdown 菜单目录生成</h2><p>hexo 文件首部加上 <code>toc: true</code>，就可以在文章左侧生成目录，且可以正常跳转。因此你只用简单的加上<code>toc: true</code>即可，任何其他的操作都是不必要的。</p><p><strong>如果你装了hexo的toc插件，请你删除它，它会影响你目录的跳转！使用下面的语句删除toc插件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm remove hexo-toc --save<br></code></pre></td></tr></table></figure><h2 id="图片相对路径配置"><a href="#图片相对路径配置" class="headerlink" title="图片相对路径配置"></a>图片相对路径配置</h2><blockquote><p><a href="https://github.com/hexojs/hexo-renderer-marked">hexo-renderer-marked</a> 3.1.0 引入了一个新的选项，其允许你无需使用 <code>asset_img</code> 标签插件就可以在 markdown 中嵌入图片，如需启用，编辑 _config.yml，添加以下配置：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">post_asset_folder: true<br>marked:<br>  prependRoot: true<br>  postAsset: true<br></code></pre></td></tr></table></figure><p>安装以下依赖：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install https://github.com/7ym0n/hexo-asset-image --save # 解决 &lt;img /&gt; 图片标签相对路径问题<br><br>npm install hexo-simple-image --save # 解决 ![]() 图片标签相对路径问题<br></code></pre></td></tr></table></figure><p>最终效果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">├── hexo-asset-image@0.0.3 (git+ssh://git@github.com/7ym0n/hexo-asset-image.git#6c88c98214765112d148850a646ddca379fcdcfe)<br>├── hexo-simple-image@1.0.4<br></code></pre></td></tr></table></figure><p>这样子以 <code>&lt;img /&gt;</code> 和 <code>![]()</code> 包裹的相对路径图片都可以正常显示了。</p><h2 id="创建自定义-about-页"><a href="#创建自定义-about-页" class="headerlink" title="创建自定义 about 页"></a>创建自定义 about 页</h2><p>博客是用的<code>hexo</code>，打算增加一个<code>about</code>页。</p><p>根据文档，当然非常简单，只需要：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo new page &quot;about&quot;<br></code></pre></td></tr></table></figure><p>然后修改所用主题目录下的<code>_config.yml</code>文件，将<code>menu</code>中<code>about</code>前的注释去掉。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">menu</span>:<br>  <span class="hljs-attr">home</span>:  / || home<br>  <span class="hljs-attr">about</span>:  <span class="hljs-regexp">/about/</span> || user<br>  <span class="hljs-attr">tags</span>:  <span class="hljs-regexp">/tags/</span> || tags<br>  ...<br></code></pre></td></tr></table></figure><p>然后修改<code>source/about/</code>目录中的<code>index.md</code>文件即可。</p><p>但是，我想要在页面中显示表格，而且不用<code>markdown</code>格式的表格。</p><p>经谷歌，可以直接在<code>index.md</code>中写<code>html</code>代码，这太好了。</p><p>可是，写好代码，<code>hexo g</code>之后，怪异的现象出现了，<code>about</code>页面中，页顶标题下是许多空白行，表格要下拉到页面最底部才可见。</p><p>又搜索之后，找到了答案，将 <code>index.md</code> 改名为 <code>index.html</code>，修改之后，马上显示正常了。</p><h2 id="主题方案"><a href="#主题方案" class="headerlink" title="主题方案"></a>主题方案</h2><h3 id="fluid"><a href="#fluid" class="headerlink" title="fluid"></a>fluid</h3><p>代码高亮主题选择方案：<a href="https://highlightjs.org/static/demo/">https://highlightjs.org/static/demo/</a></p><p>使用手册：<a href="https://hexo.fluid-dev.com/docs/start/#%E4%B8%BB%E9%A2%98%E7%AE%80%E4%BB%8B">https://hexo.fluid-dev.com/docs/start/#%E4%B8%BB%E9%A2%98%E7%AE%80%E4%BB%8B</a></p><h4 id="隐藏文章"><a href="#隐藏文章" class="headerlink" title="隐藏文章"></a>隐藏文章</h4><blockquote><p>TIP</p><p>隐藏会使文章在分类和标签类里都不显示</p><p>隐藏后依然可以通过文章链接访问</p></blockquote><p>如果想把某些文章隐藏起来，不在首页和其他分类里展示，可以在文章开头 <a href="https://hexo.io/zh-cn/docs/front-matter">Front-matter (opens new window)</a> 中配置 <code>hide: true</code> 属性。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">文章标题</span><br><span class="hljs-attr">index_img:</span> <span class="hljs-string">/img/example.jpg</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2019-10-10 10:00:00</span><br><span class="hljs-attr">hide:</span> <span class="hljs-literal">true</span><br><span class="hljs-meta">---</span><br><span class="hljs-string">以下是文章内容</span><br></code></pre></td></tr></table></figure><h3 id="next"><a href="#next" class="headerlink" title="next"></a>next</h3><blockquote><p>参考配置：<a href="https://blog.csdn.net/as480133937/article/details/100138838">https://blog.csdn.net/as480133937/article/details/100138838</a></p></blockquote><h4 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h4><p>NexT 主题自带了一个搜索功能 <a href="https://github.com/next-theme/hexo-generator-searchdb">Local Search</a>，即在编译文件时本地生成一个数据库，放在网站根目录下，用户借助此数据库进行搜索查询。 安装：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-generator-searchdb <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>在 NexT 的配置文件中打开：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">local_search:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h4 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Vanilla JavaScript plugin for lazyloading images.</span><br><span class="hljs-comment"># For more information: https://github.com/ApoorvSaxena/lozad.js</span><br><span class="hljs-attr">lazyload:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h3 id="yilia-plus"><a href="#yilia-plus" class="headerlink" title="yilia-plus"></a>yilia-plus</h3><blockquote><p>参考配置：<a href="https://gitee.com/nate-lin/yilia-plus">https://gitee.com/nate-lin/yilia-plus</a></p></blockquote><h2 id="远程发布"><a href="#远程发布" class="headerlink" title="远程发布"></a>远程发布</h2><h3 id="github"><a href="#github" class="headerlink" title="github"></a>github</h3><h4 id="免密关联"><a href="#免密关联" class="headerlink" title="免密关联"></a>免密关联</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh-keygen<br></code></pre></td></tr></table></figure><p>然后将生成的 <code>id_rsa.pub</code> 文件内容关联到 github 的 SSH and GPG Keys 菜单的下的 ssh key 列表</p><img src="/posts/9d95a809/image-20230408234337544.png" class alt="image-20230408234337544"><h4 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h4><p>仓库名称格式 <strong>&lt;你的 GitHub 用户名&gt;.github.io</strong> ，站点会通过这个名称实现域名访问</p><blockquote><p>注意：仓库的访问权限需要设置为 public，否则无法通过 .github.io 域名的形式进行访问。</p></blockquote><img src="/posts/9d95a809/image-20230408235308117.png" alt="image-20230408235308117" style="zoom: 67%;"><h4 id="github-page-暴露"><a href="#github-page-暴露" class="headerlink" title="github page 暴露"></a>github page 暴露</h4><blockquote><p>参考链接：<a href="https://docs.github.com/en/pages/quickstart">https://docs.github.com/en/pages/quickstart</a></p></blockquote><p>默认情况下新建的仓库在 github page 是不关联任何分支的，即为 None，所以需要调整 Pages 配置为以下图示效果：</p><img src="/posts/9d95a809/image-20230409000036606.png" alt="image-20230409000036606"><h4 id="cloudflare-加速"><a href="#cloudflare-加速" class="headerlink" title="cloudflare 加速"></a>cloudflare 加速</h4><p>经实测 githubpage 在国内很容易被墙，所以决定在现有的 cloudflare 网站上做一层 CNAME 域名重定向访问到 github page 上，解决国内无法直接访问 github page 的问题，操作步骤如下：</p><p>创建 CNAME DNS 解析记录，最终访问域名为 <a href="https://blog.yahyav2rayssr.top,cloudflare/">https://blog.yahyav2rayssr.top，cloudflare</a> 配置如下：</p><img src="/posts/9d95a809/image-20230409003317201.png" class alt="image-20230409003317201"><p>另外还需要在 github 上面设置自定义域名，填写位置如下：</p><img src="/posts/9d95a809/image-20230409003825608.png" alt="image-20230409003825608"><h4 id="hexo-远程仓库配置"><a href="#hexo-远程仓库配置" class="headerlink" title="hexo 远程仓库配置"></a>hexo 远程仓库配置</h4><h5 id="安装发布插件"><a href="#安装发布插件" class="headerlink" title="安装发布插件"></a>安装发布插件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cnpm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><h5 id="修改-hexo-配置"><a href="#修改-hexo-配置" class="headerlink" title="修改 hexo 配置"></a>修改 hexo 配置</h5><p>增加 github 相关配置，内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">Deployment</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># Docs: https://hexo.io/docs/one-command-deployment</span></span><br>deploy:<br>  type: git<br>  repo: git@github.com:yaoyuming/yaoyuming.github.io.git<br>  branch: master<br></code></pre></td></tr></table></figure><h2 id="文件压缩"><a href="#文件压缩" class="headerlink" title="文件压缩"></a>文件压缩</h2><h3 id="hexo-neat"><a href="#hexo-neat" class="headerlink" title="hexo-neat"></a>hexo-neat</h3><blockquote><p>hexo-neat 主要用来压缩 html，css 以及 js 文件。</p></blockquote><h4 id="安装-hexo-neat"><a href="#安装-hexo-neat" class="headerlink" title="安装 hexo-neat"></a>安装 hexo-neat</h4><p>在站点根目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-neat --save<br></code></pre></td></tr></table></figure><h4 id="添加相关配置"><a href="#添加相关配置" class="headerlink" title="添加相关配置"></a>添加相关配置</h4><p>在站点配置文件 <code>_config.yml</code> 添加相关配置，直接添加到站点配置文件的末尾就可以。可以安装自己的需求去自定义配置，配置内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># hexo-neat</span><br><span class="hljs-comment"># 博文压缩</span><br><span class="hljs-attr">neat_enable:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment"># 压缩html</span><br><span class="hljs-attr">neat_html:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">exclude:</span><br><span class="hljs-comment"># 压缩css  </span><br><span class="hljs-attr">neat_css:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">exclude:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;**/*.min.css&#x27;</span><br><span class="hljs-comment"># 压缩js</span><br><span class="hljs-attr">neat_js:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">mangle:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">output:</span><br>  <span class="hljs-attr">compress:</span><br>  <span class="hljs-attr">exclude:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;**/*.min.js&#x27;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;**/jquery.fancybox.pack.js&#x27;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;**/index.js&#x27;</span>  <br></code></pre></td></tr></table></figure><h4 id="hexo-neat-插件注意事项"><a href="#hexo-neat-插件注意事项" class="headerlink" title="hexo-neat 插件注意事项"></a>hexo-neat 插件注意事项</h4><p>在使用hexo-neat插件时，可以在命令窗口中看到各个文件的压缩率，于是可以通过跳过一些文件让效率更高。</p><p><strong>跳过压缩文件的正确配置方式</strong></p><blockquote><p>压缩 html 时不要跳过 .md 文件和 .swig 文件</p><p>.md 文件就是 markdown 文件，如果跳过压缩 .md 文件，而又刚好在文章中使用到了 tab 标签，那么当 hexo 在生成静态页面时就会发生解析错误。这会导致使用到了 tab 标签的页面生成失败而无法访问。</p><p>.swig 文件是模板引擎文件，也就是 hexo 可以通过这些文件来生成对应的页面。如果跳过这些文件，所有页面完全没有起到压缩的效果，页面源代码里依然存在着一大堆空白。</p></blockquote><p>如果按照官方插件的文档说明来配置exclude，会发现完全不起作用。这是因为配置的文件路径不对，压缩时找不到你配置的文件，自然也就无法跳过了。于是需要给这些文件指定正确的路径，万能的配置方式如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">neat_css:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">exclude:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;**/*.min.css&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="gulp"><a href="#gulp" class="headerlink" title="gulp"></a>gulp</h3><blockquote><p>gulp 主要用来压缩图片。</p></blockquote><h4 id="安装-gulp"><a href="#安装-gulp" class="headerlink" title="安装 gulp"></a>安装 gulp</h4><p>gulp 全局安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install --global gulp-cli<br></code></pre></td></tr></table></figure><p>gulp 局部安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install gulp --save<br><br>npm install gulp-babel babel-preset-env babel-preset-mobx --save<br>npm install -D @babel/core @babel/preset-react @babel/preset-env --save<br></code></pre></td></tr></table></figure><p>图片压缩安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install gulp-imagemin --save<br></code></pre></td></tr></table></figure><p>最终生成的 package.json 新增内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;compile&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;hexo clean &amp;&amp; hexo generate &amp;&amp; gulp minify-images&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;dependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;babel-preset-env&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^1.7.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;babel-preset-mobx&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^2.0.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;gulp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^4.0.2&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;gulp-babel&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^8.0.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;gulp-imagemin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^7.1.0&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;devDependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;@babel/core&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^7.8.4&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;@babel/preset-env&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^7.8.4&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;@babel/preset-react&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^7.8.3&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="gulpfile-js-配置"><a href="#gulpfile-js-配置" class="headerlink" title="gulpfile.js 配置"></a>gulpfile.js 配置</h4><p>新增 gulpfile.js，内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 引入需要的模块</span><br><span class="hljs-keyword">var</span> gulp = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp&#x27;</span>);<br><span class="hljs-keyword">var</span> imagemin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-imagemin&#x27;</span>);<br><br><span class="hljs-comment">// 压缩图片</span><br>gulp.<span class="hljs-title function_">task</span>(<span class="hljs-string">&#x27;minify-images&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> gulp.<span class="hljs-title function_">src</span>([<span class="hljs-string">&#x27;./public/**/*.png&#x27;</span>, <span class="hljs-string">&#x27;./public/**/*.jpg&#x27;</span>, <span class="hljs-string">&#x27;./public/**/*.gif&#x27;</span>])<br>        .<span class="hljs-title function_">pipe</span>(<span class="hljs-title function_">imagemin</span>(<br>            [imagemin.<span class="hljs-title function_">gifsicle</span>(&#123; <span class="hljs-string">&#x27;optimizationLevel&#x27;</span>: <span class="hljs-number">3</span> &#125;),<br>            imagemin.<span class="hljs-title function_">mozjpeg</span>(&#123; <span class="hljs-string">&#x27;progressive&#x27;</span>: <span class="hljs-literal">true</span> &#125;),<br>            imagemin.<span class="hljs-title function_">optipng</span>(&#123; <span class="hljs-string">&#x27;optimizationLevel&#x27;</span>: <span class="hljs-number">5</span> &#125;),<br>            imagemin.<span class="hljs-title function_">svgo</span>()],<br>            &#123; <span class="hljs-string">&#x27;verbose&#x27;</span>: <span class="hljs-literal">true</span> &#125;))<br>        .<span class="hljs-title function_">pipe</span>(gulp.<span class="hljs-title function_">dest</span>(<span class="hljs-string">&#x27;./public&#x27;</span>))<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="制作永久链接"><a href="#制作永久链接" class="headerlink" title="制作永久链接"></a>制作永久链接</h2><p>hexo 预设永久连结是依照日期，但是这个很容易改动，又不希望永久连结内使用文章标题（因为是中文也有可能改动），所以有必要对链接路径做自定义配置。</p><h3 id="安装-abbrlink"><a href="#安装-abbrlink" class="headerlink" title="安装 abbrlink"></a>安装 abbrlink</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-abbrlink --save<br></code></pre></td></tr></table></figure><h3 id="设定"><a href="#设定" class="headerlink" title="设定"></a>设定</h3><h4 id="预设设定"><a href="#预设设定" class="headerlink" title="预设设定"></a>预设设定</h4><p>hexo的站点配置文件(_config.yml)中</p><p>使用 <code>permalink: :year/:month/:day/:title/</code> 当作永久连结的设定</p><p>也就是说文章的永久连接最后会是 <code>年/月/日/标题</code> 这样的格式，详情可以看 <a href="https://hexo.io/zh-cn/docs/permalinks.html">hexo永久连结文档</a></p><p>而稍微底下一点有</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">permalink_defaults:</span><br></code></pre></td></tr></table></figure><p>这个是可以设定自己的参数的。</p><h4 id="自定义设定"><a href="#自定义设定" class="headerlink" title="自定义设定"></a>自定义设定</h4><p>我使用 <a href="https://github.com/Rozbo/hexo-abbrlink">hexo-abbrlink</a> 对每篇文章生出一个编号</p><p>设定 hexo-abbrlink<br>在主题配置文件加上</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">abbrlink:</span><br>  <span class="hljs-attr">alg:</span> <span class="hljs-string">crc32</span>  <span class="hljs-comment"># support crc16(default) and crc32  </span><br>  <span class="hljs-attr">rep:</span> <span class="hljs-string">hex</span>    <span class="hljs-comment"># support dec(default) and hex</span><br><br>  <span class="hljs-comment"># crc16/crc32: 差别在于编号个数的极限，crc16可以生出65535个</span><br>  <span class="hljs-comment"># dec/hex:     差别在于编号生出来是十进制还是十六进制</span><br></code></pre></td></tr></table></figure><h4 id="自定义永久连结格式"><a href="#自定义永久连结格式" class="headerlink" title="自定义永久连结格式"></a>自定义永久连结格式</h4><p>我想要以作者名字为主，再加上编号来形成永久连结</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">permalink_defaults:</span><br>  <span class="hljs-attr">author_name:</span> <span class="hljs-string">yahya</span>   <span class="hljs-comment"># 新增一个作者名字的参数</span><br><br><span class="hljs-attr">permalink:</span> <span class="hljs-string">:author_name/:abbrlink/</span>    <span class="hljs-comment"># 结果是：网域/作者名字/abbrlink生成编号</span><br></code></pre></td></tr></table></figure><h2 id="私人文章隐藏"><a href="#私人文章隐藏" class="headerlink" title="私人文章隐藏"></a>私人文章隐藏</h2><p>当一篇文章被设置为「隐藏」时，它不会出现在任何列表中（包括首页、存档、分类页面、标签页面、Feed、站点地图等），也不会被搜索引擎索引（前提是搜索引擎遵守 noindex 标签）。</p><p>只有知道文章链接的人才可以访问被隐藏的文章。</p><p>Github 地址：<a href="https://github.com/printempw/hexo-hide-posts">https://github.com/printempw/hexo-hide-posts</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>在站点根目录下执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-hide-posts --save<br></code></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>在站点目录下的<code>_config.yml</code>中如下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># hexo-hide-posts</span><br><span class="hljs-attr">hide_posts:</span><br>  <span class="hljs-comment"># 可以改成其他你喜欢的名字</span><br>  <span class="hljs-attr">filter:</span> <span class="hljs-string">hidden</span><br>  <span class="hljs-comment"># 指定你想要传递隐藏文章的位置，比如让所有隐藏文章在存档页面可见</span><br>  <span class="hljs-comment"># 常见的位置有：index, tag, category, archive, sitemap, feed, etc.</span><br>  <span class="hljs-comment"># 留空则默认全部隐藏</span><br>  <span class="hljs-attr">public_generators:</span> []<br>  <span class="hljs-comment"># 为隐藏的文章添加 noindex meta 标签，阻止搜索引擎收录</span><br>  <span class="hljs-attr">noindex:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>举个栗子：设置 <code>filter: secret</code> 之后，你就可以在 front-matter 中使用 <code>secret: true</code> 来隐藏文章了。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>在文章的属性中定义 <code>hidden: true</code> 即可隐藏文章。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">&#x27;Hidden Post&#x27;</span><br><span class="hljs-attr">date:</span> <span class="hljs-string">&#x27;2021/03/05 21:45:14&#x27;</span><br><span class="hljs-attr">hidden:</span> <span class="hljs-literal">true</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>虽然首页上被隐藏了，但你仍然可以通过 <code>https://hexo.test/lorem-ipsum/</code> 链接访问它。</p><p>你可以在命令行运行 <code>hexo hidden:list</code> 来获取当前所有的已隐藏文章列表。</p><p>插件也在 <a href="https://hexo.io/api/locals">Local Variables</a> 中添加了 <code>all_posts</code> 和 <code>hidden_posts</code> 变量，供自定义主题使用。</p><h2 id="推荐主题"><a href="#推荐主题" class="headerlink" title="推荐主题"></a>推荐主题</h2><p><a href="https://github.com/fluid-dev/hexo-theme-fluid">hexo-theme-fluid</a></p><p><a href="https://github.com/theme-next/hexo-theme-next">hexo-theme-next</a></p><p><a href="https://github.com/cofess/hexo-theme-pure">hexo-theme-pure</a></p><p><a href="https://github.com/JoeyBling/hexo-theme-yilia-plus">hexo-theme-yilia-plus</a></p><p><a href="https://github.com/yelog/hexo-theme-3-hexo">hexo-theme-3-hexo</a></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://home.ustc.edu.cn/~liujunyan/blog/hexo-next-theme-config/#hexo-%E5%AE%89%E8%A3%85">Hexo 博客 NexT 主题的安装使用</a></p><p><a href="https://bbs.huaweicloud.com/blogs/348180">centos7系统部署hexo博客新手入门</a></p><p><a href="https://monkeywie.cn/2020/08/20/fast-github-page-with-cloudflare/">使用cloudflare免费加速github page</a></p><p><a href="https://www.voidking.com/dev-hexo-gulp/">Hexo使用Gulp压缩静态资源</a></p><p><a href="https://blog.csdn.net/GerZhouGengCheng/article/details/106074545">使用Gulp压缩Hexo博客静态资源</a></p><p><a href="https://www.jb51.net/article/98153.htm">node.js版本管理工具n无效的原理和解决方法</a></p>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
      <category>常用安装</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常见错误</title>
    <link href="/posts/c10f304f/"/>
    <url>/posts/c10f304f/</url>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="解决-x2F-bin-x2F-bash-M-bad-interpreter-No-such-file-or-directory"><a href="#解决-x2F-bin-x2F-bash-M-bad-interpreter-No-such-file-or-directory" class="headerlink" title="[解决]&#x2F;bin&#x2F;bash^M: bad interpreter: No such file or directory"></a>[解决]&#x2F;bin&#x2F;bash^M: bad interpreter: No such file or directory</h2><p>执行一个脚本full_build.sh 时, 一直是提示我:<br>-bash: .&#x2F;full_build.sh: &#x2F;bin&#x2F;bash^M: bad interpreter: No such file or directory</p><p>开始是说我权限不够, 不能执行, 接着我就把权限给改了,  就一直报上面问题.<br>记得几个月前, 就遇到过类似的问题, 当时是在编译Android Framework, 后来打开出错的.xml文件, 很直接的看到很多的^M的标识,  由于负责编译的同事帮忙解决了, 就没有去问为什么, 今天再次遇到, 就上网搜了搜, 才明白了原因.  </p><p>出现上面错误的原因之一是脚本文件是DOS格式的, 即每一行的行尾以\r\n来标识, 使用vim编辑器打开脚本, 运行:<br>:set ff?<br>可以看到DOS或UNIX的字样. 使用set ff&#x3D;unix把它强制为unix格式的, 然后存盘退出, 即可.</p><p>网上也有很多的其他方法, 比如: 执行dos2unix 命令转换编码,  命令为: #dos2unix full_build.sh,  但我没有dos2unix的安装包, 所以就跳过了.  </p><p>也有说造成这种问题的原因是在使用vim时不小心按了个: Ctrl+v,  脚本是我从服务器上下的, 不清楚到底怎么会变成了DOS格式的了. 总之解决了就行啦.</p>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
      <category>常见错误</category>
      
    </categories>
    
    
    <tags>
      
      <tag>常见错误</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>杂烩</title>
    <link href="/posts/c10d2cc/"/>
    <url>/posts/c10d2cc/</url>
    
    <content type="html"><![CDATA[<h1 id="刷新DNS缓存"><a href="#刷新DNS缓存" class="headerlink" title="刷新DNS缓存"></a>刷新DNS缓存</h1><p>现在很多Linux发行版都没有内置DNS本地缓存，Linux不像Windows那样可以使用ipconfig &#x2F;flushdns来刷新，在Linux下无需刷新，因为本身没有缓存；</p><p>当然，如果非要缓存刷新，可以安装nscd，然后刷新这个守护进程。</p><p>Ubuntu：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-get install -y nscd<br></code></pre></td></tr></table></figure><p>CentOS:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y nscd<br></code></pre></td></tr></table></figure><p>使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">service nscd restart<br></code></pre></td></tr></table></figure><h1 id="查看DNS信息"><a href="#查看DNS信息" class="headerlink" title="查看DNS信息"></a>查看DNS信息</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">[deployer@CBSS-DMZ-19 ~]$ nslookup mall.10010.com<br>Server:         202.106.0.20                                           　　 #这个域名是通过202.106.0.20这个DNS服务器进行解析的.<br>Address:        202.106.0.20#53                                         　　#DNS服务器使用的IP地址和端口号<br><br>Non-authoritative answer:<br>mall.10010.com  canonical name = mall.10010.com.cdn.dnsv1.com.          　　#mall.10010.com对应的另外的域名mall.10010.com.cdn.dnsv1.com<br>mall.10010.com.cdn.dnsv1.com    canonical name = lt.p23.tc.cdntip.com. 　　 #mall.10010.com.cdn.dnsv1.com对应的另外的域名lt.p23.tc.cdntip.com<br>Name:   lt.p23.tc.cdntip.com<br>Address: 123.125.46.202      　　 #域名对应的第1个IP地址<br>Name:   lt.p23.tc.cdntip.com<br>Address: 121.29.54.199       　　 #域名对应的第2个IP地址<br>Name:   lt.p23.tc.cdntip.com<br>Address: 121.29.54.195       　　 #域名对应的第3个IP地址<br><br>[deployer@CBSS-DMZ-19 ~]$ cat /etc/resolv.conf    　　 #LINUX主机在本地配置的域名服务器<br>nameserver 202.106.0.20<br></code></pre></td></tr></table></figure><h1 id="防火墙开放端口"><a href="#防火墙开放端口" class="headerlink" title="防火墙开放端口"></a>防火墙开放端口</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">查看防火墙某个端口是否开放</span><br>firewall-cmd --query-port=3306/tcp<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">开放防火墙端口3306</span><br>firewall-cmd --zone=public --add-port=3306/tcp --permanent<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看防火墙状态</span><br>systemctl status firewalld<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">关闭防火墙</span><br>systemctl stop firewalld<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">打开防火墙</span><br>systemctl start firewalld<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">开放一段端口</span><br>firewall-cmd --zone=public --add-port=40000-45000/tcp --permanent<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看开放的端口列表</span><br>firewall-cmd --zone=public --list-ports<br></code></pre></td></tr></table></figure><h1 id="解决SSH连接Linux超时自动断开"><a href="#解决SSH连接Linux超时自动断开" class="headerlink" title="解决SSH连接Linux超时自动断开"></a>解决SSH连接Linux超时自动断开</h1><h2 id="1-TMOUT-系统环境变量"><a href="#1-TMOUT-系统环境变量" class="headerlink" title="1. $TMOUT 系统环境变量"></a>1. $TMOUT 系统环境变量</h2><p>用以下命令判断是否是否设置了该参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo $TMOUT<br></code></pre></td></tr></table></figure><p>如果输出空或0表示不超时，大于0的数字n表示n秒没有收入则超时</p><p><strong>修改方法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi /etc/profile<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">将以下900修改为0就是设置不超时</span><br>export TMOUT=900<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">让配置立即生效</span><br>source /etc/profile<br></code></pre></td></tr></table></figure><h2 id="2-sshd-服务配置"><a href="#2-sshd-服务配置" class="headerlink" title="2. sshd 服务配置"></a>2. sshd 服务配置</h2><blockquote><ol><li>ClientAliveInterval指定了服务器端向客户端请求消息的时间间隔, 默认是0, 不发送。设置60表示每分钟发送一次, 然后客户端响应, 这样就保持长连接了。</li><li>ClientAliveCountMax表示服务器发出请求后客户端没有响应的次数达到一定值, 就自动断开。正常情况下, 客户端不会不响应，使用默认值3即可。</li></ol></blockquote><h3 id="1-查看现有配置"><a href="#1-查看现有配置" class="headerlink" title="1. 查看现有配置"></a>1. 查看现有配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /etc/ssh<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看sshd_config中关于客户端活动状态的配置</span><br>grep ClientAlive sshd_config<br></code></pre></td></tr></table></figure><p><strong>默认输出如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">----------------------------</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">ClientAliveInterval 0</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">ClientAliveCountMax 3</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">----------------------------</span><br></code></pre></td></tr></table></figure><h3 id="3-修改sshd配置"><a href="#3-修改sshd配置" class="headerlink" title="3. 修改sshd配置"></a>3. 修改sshd配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">启用客户端活动检查，每60秒检查一次，3次不活动断开连接</span><br>sed -i &quot;s/#ClientAliveInterval 0/ClientAliveInterval 60/g&quot; sshd_config<br>sed -i &quot;s/#ClientAliveCountMax 3/ClientAliveCountMax 3/g&quot; sshd_config<br></code></pre></td></tr></table></figure><h3 id="4-重新加载"><a href="#4-重新加载" class="headerlink" title="4. 重新加载"></a>4. 重新加载</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">service sshd reload</span><br></code></pre></td></tr></table></figure><h3 id="5-确认修改情况"><a href="#5-确认修改情况" class="headerlink" title="5. 确认修改情况"></a>5. 确认修改情况</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">备份原配置文件</span><br>cp sshd_config sshd_config.bak<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">确认修改</span><br>grep ClientAlive sshd_config<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">比较配置文件差异</span><br>diff sshd_config sshd_config.bak<br></code></pre></td></tr></table></figure><h2 id="3-xshell简易配置方式"><a href="#3-xshell简易配置方式" class="headerlink" title="3. xshell简易配置方式"></a>3. xshell简易配置方式</h2><img src="/posts/c10d2cc/1680091905.png" class alt="2020-04-07T00:48:36.png">]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
      <category>杂烩</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂烩</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows 常见错误</title>
    <link href="/posts/dfcbdf9f/"/>
    <url>/posts/dfcbdf9f/</url>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="dll-注册"><a href="#dll-注册" class="headerlink" title="dll 注册"></a>dll 注册</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-keyword">for</span> %<span class="hljs-number">1</span> <span class="hljs-keyword">in</span> (<span class="hljs-variable">%windir%</span>\system32\*.dll) <span class="hljs-keyword">do</span> regsvr32.exe /s %<span class="hljs-number">1</span><br><br><span class="hljs-keyword">for</span> %<span class="hljs-number">1</span> <span class="hljs-keyword">in</span> (<span class="hljs-variable">%windir%</span>\system32\*.dll) <span class="hljs-keyword">do</span> regasm.exe /s %<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="模块xxx已加载，但找不到入口点DllRegisterServer"><a href="#模块xxx已加载，但找不到入口点DllRegisterServer" class="headerlink" title="模块xxx已加载，但找不到入口点DllRegisterServer"></a>模块xxx已加载，但找不到入口点DllRegisterServer</h2><img src="/posts/dfcbdf9f/image-20210425114620080.png" class alt="image-20210425114620080"><img src="/posts/dfcbdf9f/1391262323_739070.png" class alt="img"><h2 id="使用regasm注册-net-com组件出现不是有效的-net程序集的解决办法"><a href="#使用regasm注册-net-com组件出现不是有效的-net程序集的解决办法" class="headerlink" title="使用regasm注册.net com组件出现不是有效的.net程序集的解决办法"></a>使用regasm注册.net com组件出现不是有效的.net程序集的解决办法</h2><p>在电脑上装有VS 2008和VS 2010.使用VS 2010编写了一个C# com组件:MyCom（基于.net framework4.0），然后使用VS 2008的命令提示工具运行命令：regasm MyCom，结果提示错误：RegAsm：error RA0000,“MyCOM”不是有效的.net程序集。开始百思不得其解。后来才醒悟到VS 2008的命令提示工具运行的regasm.exe是vs2008版本，它可能注册不了基于.net framework4.0的C# com组件。后来发现确实是这样的。如果一台机子上装有VS 2008和VS 2010，那么它就有两个版本的regasm.exe，分别存放的位置是C:\Windows\Microsoft.NET\Framework\v2.0.50727和C:\Windows\Microsoft.NET\Framework\v4.0.30319.使用VS 2010版本的regasm能注册vs2008编写的C# com组件，但是使用vs2008版本的regasm不能注册基于.net framework4.0的C# com组件。</p><h2 id="程序无法正常启动-0xc0000142-解决方法"><a href="#程序无法正常启动-0xc0000142-解决方法" class="headerlink" title="程序无法正常启动 0xc0000142 解决方法"></a>程序无法正常启动 0xc0000142 解决方法</h2><p>在命令下执行</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-keyword">for</span> %<span class="hljs-number">1</span> <span class="hljs-keyword">in</span> (<span class="hljs-variable">%windir%</span>\system32\*.dll) <span class="hljs-keyword">do</span> regsvr32.exe /s %<span class="hljs-number">1</span> <br></code></pre></td></tr></table></figure><p>完成后重启<br>如果不能解决，继续以管理员身份运行命令提示符中依次执行以下命令</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cmd">DISM/Online /Cleanup-image /Scanhealth<br><br>DISM/Online /Cleanup-image /Restorehealth<br><br>Sfc /scannow<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
      <category>windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>字体替换</title>
    <link href="/posts/7e3491fa/"/>
    <url>/posts/7e3491fa/</url>
    
    <content type="html"><![CDATA[<h1 id="字体替换"><a href="#字体替换" class="headerlink" title="字体替换"></a>字体替换</h1><h2 id="1-方式一"><a href="#1-方式一" class="headerlink" title="1. 方式一"></a>1. 方式一</h2><h3 id="1-替换系统字体"><a href="#1-替换系统字体" class="headerlink" title="1. 替换系统字体"></a>1. 替换系统字体</h3><blockquote><p>powershell 命令</p><ul><li><p>覆盖文件<br>move-item [源文件] [目标文件] -force</p></li><li><p>删除文件</p><p>delete-item [文件]</p></li></ul></blockquote><p>重启电脑，进入安全模式，然后打开 CMD 命令行窗口，将需要替换的字体放到下 c:\fonts 目录下，然后执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">xcopy C:\fonts C:\Windows\Fonts<br></code></pre></td></tr></table></figure><h2 id="2-方式二（无须进入安全模式，推荐）"><a href="#2-方式二（无须进入安全模式，推荐）" class="headerlink" title="2. 方式二（无须进入安全模式，推荐）"></a>2. 方式二（无须进入安全模式，推荐）</h2><h3 id="1-替换-CMD-默认字体"><a href="#1-替换-CMD-默认字体" class="headerlink" title="1. 替换 CMD 默认字体"></a>1. 替换 CMD 默认字体</h3><blockquote><p>如果强制覆盖了 <code>SimSun &amp; NSimSun (TrueType)</code> 和 <code>SimSun-ExtB (TrueType)</code>（原始字体分别对应 simsun.ttc 和 simsunb.ttf），会出现重启之后无法打开 CMD 命令行窗口的情况，所以需要对 CMD 命令行的默认字体做切换。</p></blockquote><p>运行 regedit，然后打开如下的键：<code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Console\TrueTypeFont</code>，如下图所示：</p><img src="/posts/7e3491fa/image-20220707134252971.png" alt="image-20220707134252971" style="zoom: 67%;"><p>鼠标右键，然后新建字符串值：</p><img src="/posts/7e3491fa/image-20220707134342130.png" alt="image-20220707134342130" style="zoom: 67%;"><p>输入 0 或者 00 或者 000 或者 0000，每增加一个字体，增加一个0，这里增加的 Consolas-with-Yahei 第四个新的字体，因此使用的是0000，然后选中 0000 这一项，修改，在弹出框中输入字体 Consolas-with-Yahei，如下所示：</p><img src="/posts/7e3491fa/image-20220707135051523.png" alt="image-20220707135051523" style="zoom:80%;"><p>这样子就修改完成了，我们需要进入到 CMD 下，然后在窗口标题栏上右键 -&gt; Options -&gt; 打开字体面板， 发现没有出现注册表中的字体，我们需要回到 CMD 下，输入以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chcp 437<br></code></pre></td></tr></table></figure><p>然后会切换字体。这时候再来看字体这里，就会出现新的字体，选择我们需要的字体，然后确定就OK了。</p><p><strong>这里附带一个永久修改 Active Code Page 的办法：</strong></p><p>有时候，我们的 CMD 的 codepage 和字体等会变化，比如突然由中文变成英文的 codepage（因为一些sh程序的干扰）</p><p>下面是修正方法：</p><p>进入 <code>HKEY_CURRENT_USER\Console\%SystemRoot%_system32_cmd.exe</code>，编辑 CodePage 项，设置为如下的数值：</p><blockquote><p>数值含义如下：</p><ul><li>十六进制 <code>000003a8</code> 或十进制 <code>936</code>，表示 936 (ANSI&#x2F;OEM - 简体中文 GBK)。</li><li>十六进制 <code>000001b5</code> 或十进制 <code>437</code>，表示 437 (OEM - 美国)。</li></ul></blockquote><p>效果如下图所示：</p><img src="/posts/7e3491fa/image-20220707141155227.png" alt="image-20220707141155227" style="zoom: 67%;"><h3 id="2-替换系统字体"><a href="#2-替换系统字体" class="headerlink" title="2. 替换系统字体"></a>2. 替换系统字体</h3><p>键盘上 Windows + R，打开运行后输入 regedit。</p><p>找到路径：<code>计算机\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Fonts</code>，如下图所示：</p><img src="/posts/7e3491fa/image-20220707122639862.png" alt="image-20220707122639862" style="zoom:67%;"><p>点击后面有默认字样的字体，鼠标右键，修改：<code>Microsoft YaHei &amp; Microsoft YaHei UI (TrueType)</code>，这是系统默认的字体。如下图所示。</p><img src="/posts/7e3491fa/image-20220707122723496.png" alt="image-20220707122723496" style="zoom:67%;"><p>点击确定后，再找到 <code>Microsoft YaHei Bold &amp; Microsoft YaHei UI Bold (TrueType)</code>，检查是否一致。</p><img src="/posts/7e3491fa/image-20220707122755801.png" alt="image-20220707122755801" style="zoom:67%;"><p>重启电脑，字体生效。</p>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
      <category>windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>字体</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows 开启 FTP</title>
    <link href="/posts/b7b934f4/"/>
    <url>/posts/b7b934f4/</url>
    
    <content type="html"><![CDATA[<h1 id="WIN10开启FTP"><a href="#WIN10开启FTP" class="headerlink" title="WIN10开启FTP"></a>WIN10开启FTP</h1><h2 id="1-控制面板-–-gt-程序–-gt-启用或关闭windows功能"><a href="#1-控制面板-–-gt-程序–-gt-启用或关闭windows功能" class="headerlink" title="1.控制面板 –&gt; 程序–&gt; 启用或关闭windows功能"></a>1.控制面板 –&gt; 程序–&gt; 启用或关闭windows功能</h2><img src="/posts/b7b934f4/16d074065c68093dtplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="img"><h2 id="2-左下角搜索栏搜索IIS（iis）"><a href="#2-左下角搜索栏搜索IIS（iis）" class="headerlink" title="2.左下角搜索栏搜索IIS（iis）"></a>2.左下角搜索栏搜索IIS（iis）</h2><h2 id><a href="#" class="headerlink" title></a><img src="/posts/b7b934f4/16d0741a099df148tplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="img"></h2><h2 id="3-右键添加FTP站点"><a href="#3-右键添加FTP站点" class="headerlink" title="3.右键添加FTP站点"></a>3.右键添加FTP站点</h2><img src="/posts/b7b934f4/16d074257e348820tplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="img"><h2 id="4-创建站点名字和目录"><a href="#4-创建站点名字和目录" class="headerlink" title="4.创建站点名字和目录"></a>4.创建站点名字和目录<img src="/posts/b7b934f4/16d0744058a08ce7tplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="img"></h2><h2 id="5-绑定本机IP地址，SSL勾选无SSL442"><a href="#5-绑定本机IP地址，SSL勾选无SSL442" class="headerlink" title="5.绑定本机IP地址，SSL勾选无SSL442"></a>5.绑定本机IP地址，SSL勾选无SSL442</h2><h2 id="6-身份验证-–-gt-匿名，授权-–-gt-所有用户，权限-–-gt-读取写入"><a href="#6-身份验证-–-gt-匿名，授权-–-gt-所有用户，权限-–-gt-读取写入" class="headerlink" title="6.身份验证 –&gt;匿名，授权 –&gt; 所有用户，权限 –&gt;读取写入"></a>6.身份验证 –&gt;匿名，授权 –&gt; 所有用户，权限 –&gt;读取写入<img src="/posts/b7b934f4/16d07466ae7f503atplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="img"></h2><h2 id="7-控制面板-–-gt-系统和安全-–-gt-Windows-Defender-防火墙-–-gt-允许应用或功能通过Windows-Defender-防火墙"><a href="#7-控制面板-–-gt-系统和安全-–-gt-Windows-Defender-防火墙-–-gt-允许应用或功能通过Windows-Defender-防火墙" class="headerlink" title="7.控制面板 –&gt; 系统和安全 –&gt; Windows Defender 防火墙 –&gt; 允许应用或功能通过Windows Defender 防火墙 "></a>7.控制面板 –&gt; 系统和安全 –&gt; Windows Defender 防火墙 –&gt; 允许应用或功能通过Windows Defender 防火墙 <img src="/posts/b7b934f4/16d074b087ab0b0ctplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="img"></h2><h2 id="8-更改设置-–-gt-勾选-FTP-服务器"><a href="#8-更改设置-–-gt-勾选-FTP-服务器" class="headerlink" title="8.更改设置 –&gt; 勾选 FTP 服务器"></a>8.更改设置 –&gt; 勾选 FTP 服务器<img src="/posts/b7b934f4/16d074c12b9bbf34tplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="img"></h2><h2 id="9-设置应用路径（C-Windows-System32-svchost-exe）"><a href="#9-设置应用路径（C-Windows-System32-svchost-exe）" class="headerlink" title="9.设置应用路径（C:\Windows\System32\svchost.exe）"></a>9.设置应用路径（C:\Windows\System32\svchost.exe）<img src="/posts/b7b934f4/16d074cc9212392btplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="img"></h2><h2 id="10-使用ftp访问（格式为ftp-x2F-x2F-要访问的IP地址）"><a href="#10-使用ftp访问（格式为ftp-x2F-x2F-要访问的IP地址）" class="headerlink" title="10.使用ftp访问（格式为ftp:&#x2F;&#x2F; + 要访问的IP地址）"></a>10.使用ftp访问（格式为ftp:&#x2F;&#x2F; + 要访问的IP地址）<img src="/posts/b7b934f4/16d074de825e9e71tplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="img"></h2>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
      <category>windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ftp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows 常用配置</title>
    <link href="/posts/d741411d/"/>
    <url>/posts/d741411d/</url>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="设置U盘插入电脑后自动打开文件夹播放"><a href="#设置U盘插入电脑后自动打开文件夹播放" class="headerlink" title="设置U盘插入电脑后自动打开文件夹播放"></a>设置U盘插入电脑后自动打开文件夹播放</h2><p>更改媒体或设备的默认设置</p><img src="/posts/d741411d/image-20220108114958119.png" alt="image-20220108114958119" style="zoom: 40%;"><p>选择需要的选项即可，如下图所示：</p><img src="/posts/d741411d/image-20220108115023892.png" class alt="image-20220108115023892"><h2 id="修改时区"><a href="#修改时区" class="headerlink" title="修改时区"></a>修改时区</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><blockquote><p>使用「Windows 设置」自动设置时区</p></blockquote><ol><li>使用 Windows + I 快捷键打开「Windows 设置」</li><li>打开「时间和语言」——「日期和时间」</li><li>启用「自动设置时区」开关</li></ol><img src="/posts/d741411d/windows-10-time-zone-settings-2.jpg" class alt="img"><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>使用「命令提示符」调整时区，执行以下命令以查看当前时区设置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tzutil /g<br></code></pre></td></tr></table></figure><p>如果要调整时区设置，可使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tzutil /s <span class="hljs-string">&quot;China Standard Time&quot;</span><br></code></pre></td></tr></table></figure><img src="/posts/d741411d/image-20230107114419603.png" alt="image-20230107114419603" style="zoom:67%;"><p>上述是以中国标准时间为例，如果要列出所有可用时区选项，可用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tzutil /l<br></code></pre></td></tr></table></figure><img src="/posts/d741411d/image-20230107114714132.png" alt="image-20230107114714132" style="zoom:67%;"><h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><blockquote><p>使用 Powershell 调整时区。</p></blockquote><p>使用 Windows + X 快捷键打开快捷菜单——选择 Windows PowerShell（管理员），执行以下命令查看当前时区设置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Get-TimeZone<br></code></pre></td></tr></table></figure><p>执行以下命令列出可用时区列表：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-built_in">Get</span><span class="hljs-operator">-</span><span class="hljs-built_in">TimeZone</span> <span class="hljs-operator">-</span><span class="hljs-variable">ListAvailable</span><br></code></pre></td></tr></table></figure><img src="/posts/d741411d/image-20230107115555904.png" alt="image-20230107115555904" style="zoom:67%;"><p>使用以下命令调整时区设置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Set-TimeZone -Name &quot;China Standard Time&quot;<br></code></pre></td></tr></table></figure><h2 id="解决Windows-10下蓝牙设备无法删除的故障"><a href="#解决Windows-10下蓝牙设备无法删除的故障" class="headerlink" title="解决Windows 10下蓝牙设备无法删除的故障"></a>解决Windows 10下蓝牙设备无法删除的故障</h2><p>在更换了一张无线网卡（蓝牙适配器跟无线网卡是集成在一起的）后，蓝牙设备全失联了，想要重新配对，可是原有设备无法删除。</p><img src="https:////upload-images.jianshu.io/upload_images/14575015-3af58d4f3a967eac.png?imageMogr2/auto-orient/strip|imageView2/2/w/796/format/webp" alt="img" style="zoom: 67%;"><p>蓝牙设备无法删除，折腾了好久啊，最后突然发现了如下方法，打开“计算机管理”中的“设备管理器”节点，在该节点上右击后点“查看”然后勾选“显示隐藏的设备”如下图：</p><img src="https:////upload-images.jianshu.io/upload_images/14575015-44298aa29fa13865.png?imageMogr2/auto-orient/strip|imageView2/2/w/687/format/webp" alt="img" style="zoom:67%;"><p>勾选“显示隐藏的设备”， 在右边蓝节节点，找到要删除的蓝牙设备，在其上点右键，选择“卸载设备”。</p><img src="https:////upload-images.jianshu.io/upload_images/14575015-67e3ddf3fa3a86fc.png?imageMogr2/auto-orient/strip|imageView2/2/w/872/format/webp" alt="img" style="zoom:67%;"><p>卸载设备，依次把要删除的多个设备全卸载，问题就解决了。</p><h2 id="删除右键菜单-AMD-选项"><a href="#删除右键菜单-AMD-选项" class="headerlink" title="删除右键菜单 AMD 选项"></a>删除右键菜单 AMD 选项</h2><p>打开 regedit 菜单，进入到 <code>计算机\HKEY_CLASSES_ROOT\Directory\Background\shellex\ContextMenuHandlers\ace</code> 路径，找到默认值，右键删除即可。</p><img src="/posts/d741411d/20220615110515_75408.jpg" class alt="img">]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
      <category>windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gpedit 常用配置</title>
    <link href="/posts/9e487b57/"/>
    <url>/posts/9e487b57/</url>
    
    <content type="html"><![CDATA[<h1 id="关闭-Antimalware-Service-Executable"><a href="#关闭-Antimalware-Service-Executable" class="headerlink" title="关闭 Antimalware Service Executable"></a>关闭 Antimalware Service Executable</h1><img src="/posts/9e487b57/image-20211031204947072.png" class alt="image-20211031204947072"><p>Antimalware Service Executable是什么 如何关闭<br>Antimalware Service Executable进程是微软杀毒软件Windows Defender的相关系统进程,是个正常的系统进程，其工作时经常会出现高CPU、高内存与高磁盘的情况。</p><p>关闭步骤：<br>1、win键+R，输入“gpedit.msc”，打开“本地组策略编辑器”；<br>2、依次选择“计算机配置”-“管理模板”-“Windows组件”-“Windows Defender防病毒程序”；<br>3、找到“关闭Windows Defender防病毒程序”选项，右键“编辑“，选择“已启用”，确定即可；</p>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
      <category>windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>gpedit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows 常用命令</title>
    <link href="/posts/7101b844/"/>
    <url>/posts/7101b844/</url>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="转换磁盘"><a href="#转换磁盘" class="headerlink" title="转换磁盘"></a>转换磁盘</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">convert</span> [driver] /<span class="hljs-built_in">fs</span>:ntfs<br></code></pre></td></tr></table></figure><h2 id="查看局域网所有IP"><a href="#查看局域网所有IP" class="headerlink" title="查看局域网所有IP"></a>查看局域网所有IP</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">arp -a<br></code></pre></td></tr></table></figure><h2 id="CMD临时代理"><a href="#CMD临时代理" class="headerlink" title="CMD临时代理"></a>CMD临时代理</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">set</span> http_proxy=http://<span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">1080</span><br><span class="hljs-built_in">set</span> https_proxy=http://<span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">1080</span><br></code></pre></td></tr></table></figure><h2 id="设置IP、DNS、网关"><a href="#设置IP、DNS、网关" class="headerlink" title="设置IP、DNS、网关"></a>设置IP、DNS、网关</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmd">netsh interface ip <span class="hljs-built_in">set</span> address name=&quot;本地连接&quot; source=static addr=<span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">132</span>.<span class="hljs-number">5</span> mask=<span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">0</span><br>netsh interface ip <span class="hljs-built_in">set</span> address name=&quot;本地连接&quot; gateway=<span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">132</span>.<span class="hljs-number">1</span> gwmetric=<span class="hljs-number">0</span><br>netsh interface ip <span class="hljs-built_in">set</span> dns name=&quot;本地连接&quot; source=static addr=<span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">132</span>.<span class="hljs-number">1</span> register=PRIMARY<br>netsh interface ip <span class="hljs-built_in">set</span> wins name=&quot;本地连接&quot; source=static addr=none<br></code></pre></td></tr></table></figure><h2 id="查看IP、DNS、网关"><a href="#查看IP、DNS、网关" class="headerlink" title="查看IP、DNS、网关"></a>查看IP、DNS、网关</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">netsh interface ip show address<br></code></pre></td></tr></table></figure><h2 id="清除DNS缓存"><a href="#清除DNS缓存" class="headerlink" title="清除DNS缓存"></a>清除DNS缓存</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">ipconfig</span> /flushdns<br></code></pre></td></tr></table></figure><h2 id="重置Winsock目录"><a href="#重置Winsock目录" class="headerlink" title="重置Winsock目录"></a>重置Winsock目录</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">netsh winsock reset<br></code></pre></td></tr></table></figure><h2 id="tasklist"><a href="#tasklist" class="headerlink" title="tasklist"></a>tasklist</h2><blockquote><p>&#x2F;S     system           指定连接到的远程系统。  </p><p>&#x2F;U     [domain]user    指定使用哪个用户执行这个命令。  </p><p>&#x2F;P     [password]       为指定的用户指定密码。  </p><p>&#x2F;M     [module]         列出调用指定的 DLL 模块的所有进程。如果没有指定模块名，显示每个进程加载的所有模块。  </p><p>&#x2F;SVC                   显示每个进程中的服务。  </p><p>&#x2F;V                      指定要显示详述信息。  </p><p>&#x2F;FI    filter           显示一系列符合筛选器指定的进程。  </p><p>&#x2F;FO    format           指定输出格式，有效值: “TABLE”、”LIST”、”CSV”。  </p><p>&#x2F;NH                     指定栏标头不应该在输出中显示。只对 “TABLE” 和 “CSV” 格式有效。</p></blockquote><h2 id="taskkill"><a href="#taskkill" class="headerlink" title="taskkill"></a>taskkill</h2><blockquote><p>TASKKILL [&#x2F;S system [&#x2F;U username [&#x2F;P [password]]]]  </p><p>{ [&#x2F;FI filter] [&#x2F;PID processid | &#x2F;IM imagename] } [&#x2F;F] [&#x2F;T]</p></blockquote><h2 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># 执行命令<br>netsh interface portproxy add v4tov4 listenaddress=[LOCAL_HOST]  listenport=[LOCAL_PORT]  connectaddress=[TARGET_HOST] connectport=[TARGET_PORT]<br># 例<br>netsh interface portproxy add v4tov4 listenaddress=<span class="hljs-number">100</span>.<span class="hljs-number">120</span>.<span class="hljs-number">9</span>.<span class="hljs-number">96</span>  listenport=<span class="hljs-number">2222</span>  connectaddress=<span class="hljs-number">10</span>.<span class="hljs-number">206</span>.<span class="hljs-number">230</span>.<span class="hljs-number">177</span> connectport=<span class="hljs-number">22</span><br><br># 查看现有的配置<br>netsh interface portproxy show all<br><br># 删除原有的端口转发<br>netsh interface portproxy delete v4tov4 listenaddress=[LOCAL_HOST]  listenport=[LOCAL_PORT]<br># 例<br>netsh interface portproxy delete v4tov4 listenaddress=<span class="hljs-number">100</span>.<span class="hljs-number">120</span>.<span class="hljs-number">9</span>.<span class="hljs-number">96</span>  listenport=<span class="hljs-number">2222</span><br></code></pre></td></tr></table></figure><hr><h2 id="Diskpart-手动创建-EFI、MSR-引导分区"><a href="#Diskpart-手动创建-EFI、MSR-引导分区" class="headerlink" title="Diskpart 手动创建 EFI、MSR 引导分区"></a>Diskpart 手动创建 EFI、MSR 引导分区</h2><h3 id="用傲梅分区助手将磁盘转换为GPT格式"><a href="#用傲梅分区助手将磁盘转换为GPT格式" class="headerlink" title="用傲梅分区助手将磁盘转换为GPT格式"></a>用傲梅分区助手将磁盘转换为GPT格式</h3><h4 id="创建-EFI-分区"><a href="#创建-EFI-分区" class="headerlink" title="创建 EFI 分区"></a>创建 EFI 分区</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cmd">diskpart<br>list disk<br>select disk x   (选择需要的硬盘)<br>create partition efi size=<span class="hljs-number">100</span><br>assign letter=b<br><span class="hljs-built_in">format</span> quick <span class="hljs-built_in">fs</span>=FAT32<br></code></pre></td></tr></table></figure><h4 id="创建-msr-分区"><a href="#创建-msr-分区" class="headerlink" title="创建 msr 分区"></a>创建 msr 分区</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">create partition msr size=<span class="hljs-number">16</span>  (Win <span class="hljs-number">10</span> 默认是<span class="hljs-number">16</span>M) <br></code></pre></td></tr></table></figure><h4 id="创建-Recovery-分区-WindowsRE"><a href="#创建-Recovery-分区-WindowsRE" class="headerlink" title="创建 Recovery 分区 (WindowsRE)"></a>创建 Recovery 分区 (WindowsRE)</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cmd">create partition primary size=<span class="hljs-number">450</span><br><span class="hljs-built_in">format</span> quick <span class="hljs-built_in">fs</span>=ntfs <span class="hljs-built_in">label</span>=&quot;Recovery&quot;<br>assign letter=&quot;R&quot;<br><span class="hljs-built_in">set</span> id=&quot;de94bba4-<span class="hljs-number">06</span>d1-<span class="hljs-number">4</span>d40-a16a-bfd50179d6ac&quot;<br>gpt attributes=<span class="hljs-number">0</span>x8000000000000001      ( <span class="hljs-number">8</span> 和 <span class="hljs-number">1</span>之间有<span class="hljs-number">14</span>个<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><h2 id="IP释放、更新、以及清除-DNS"><a href="#IP释放、更新、以及清除-DNS" class="headerlink" title="IP释放、更新、以及清除 DNS"></a>IP释放、更新、以及清除 DNS</h2><ol><li>在桌面上，按<strong>Windows键，</strong>然后输入<strong>CMD</strong>。</li><li>右键单击“ <strong>命令提示符”，</strong>然后选择<strong>“以管理员身份运行”</strong>。</li><li>在命令提示符下输入<code>ipconfig / release</code>。</li><li>等待几秒钟可以得到IP地址已释放。</li><li>在命令提示符下输入<code>ipconfig /renew</code>。</li><li>等待几秒钟可以得到已重新建立IP地址。</li><li>在命令提示符下输入<code>ipconfig / flushdns</code>。</li><li>关闭命令窗口并尝试建立连接。</li></ol>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
      <category>windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>zsh 安装</title>
    <link href="/posts/a1ba4b4f/"/>
    <url>/posts/a1ba4b4f/</url>
    
    <content type="html"><![CDATA[<h1 id="安装zsh配置oh-my-zsh"><a href="#安装zsh配置oh-my-zsh" class="headerlink" title="安装zsh配置oh-my-zsh"></a>安装zsh配置oh-my-zsh</h1><p>安装了虚拟机，玩了几天，发现自带的shell不太好用。本着折腾的优良作风，配置了oh-my-zsh，本文记录下安装步骤。</p><h2 id="查看当前shell"><a href="#查看当前shell" class="headerlink" title="查看当前shell"></a>查看当前shell</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo $SHELL<br></code></pre></td></tr></table></figure><p>返回结果:</p><blockquote><p>bin&#x2F;bash</p></blockquote><h2 id="安装zsh"><a href="#安装zsh" class="headerlink" title="安装zsh"></a>安装zsh</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y zsh<br></code></pre></td></tr></table></figure><p>静候安装完成…</p><p>成功后如下所示</p><p>681</p><p>zsh下载完成</p><h2 id="设置默认shell"><a href="#设置默认shell" class="headerlink" title="设置默认shell"></a>设置默认shell</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chsh -s /bin/zsh<br></code></pre></td></tr></table></figure><p><strong>请在root用户下切换shell</strong></p><p>1143</p><p>更换shell</p><p>返回结果如下，表示切换完成（配置完成后需要重启方能生效，我们先下载oh-my-zsh，稍后重启）</p><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><p>自动和手动安装都需要安装git，执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y git<br></code></pre></td></tr></table></figure><p>静候安装完成,完成后选择一种oh-my-zsh的安装方式。</p><h2 id="安装oh-my-zsh（自动）"><a href="#安装oh-my-zsh（自动）" class="headerlink" title="安装oh-my-zsh（自动）"></a>安装oh-my-zsh（自动）</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;<br></code></pre></td></tr></table></figure><p>使用curl来安装，wget命令执行后不起作用，暂时不知道怎么回事。</p><p>出现以下界面，显示安装成功。</p><p>2118</p><p>oh-my-zsh</p><h2 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h2><p>下载源码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh<br></code></pre></td></tr></table></figure><p>复制配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc<br></code></pre></td></tr></table></figure><h2 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h2><p><code>ZSH_THEME</code> 字段就是主题，可以从资料里的主题找</p><p>2965</p><p>主题配置</p><h2 id="完成后，重启生效默认shell"><a href="#完成后，重启生效默认shell" class="headerlink" title="完成后，重启生效默认shell"></a>完成后，重启生效默认shell</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">reboot<br></code></pre></td></tr></table></figure><h2 id="别名配置"><a href="#别名配置" class="headerlink" title="别名配置"></a>别名配置</h2><p>首先我们看下git的别名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi ~/.oh-my-zsh/plugins/git/git.plugin.zsh<br></code></pre></td></tr></table></figure><p>3716</p><p>git别名</p><p>很强大有木有，我们还可以自定义别名，在<code>~/.zshrc</code>中，最下面直接写即可。</p><p>自定义别名</p><p>3921</p><p>自定义别名</p><h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><p>1、输入<code>d</code>,就会列出你在这个回话中访问的目录，输入前面的序号，就可以直接跳转<br> 2、可以忽略<code>cd</code>命令, 输入<code>..</code>或者<code>...</code>和当前目录名都可以跳转</p><h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul><li><a href="https://link.jianshu.com/?t=https://github.com/Ortonzhang/oh-my-zsh">oh-my-zsh</a></li><li><a href="https://link.jianshu.com/?t=https://github.com/robbyrussell/oh-my-zsh/wiki/themes">oh-my-zsh主题一览</a></li><li><a href="https://link.jianshu.com/?t=http://yijiebuyi.com/blog/b9b5e1ebb719f22475c38c4819ab8151.html">oh-my-zsh配置你的zsh提高shell逼格终极选择</a></li></ul><h1 id="主题修改"><a href="#主题修改" class="headerlink" title="主题修改"></a>主题修改</h1><p>进入themes的目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd ~/.oh-my-zsh/themes<br>ll #查看主题 默认主题是 ZSH_THEME=&quot;robbyrussell&quot;<br></code></pre></td></tr></table></figure><p>在.zshrc中修改主题vi ~&#x2F;.zshrc</p><blockquote><p>推荐主题：jonathan 或者 rkj-repos</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi ~/.zshrc # 找到ZSH_THEME 修改为你想要的主题即可<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
      <category>常用安装</category>
      
    </categories>
    
    
    <tags>
      
      <tag>zsh</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>运维常用命令-系统篇</title>
    <link href="/posts/85b72ed0/"/>
    <url>/posts/85b72ed0/</url>
    
    <content type="html"><![CDATA[<h1 id="设置-hostname"><a href="#设置-hostname" class="headerlink" title="设置 hostname"></a>设置 hostname</h1><blockquote><p>hostname 存放于 <code>/etc/host/hostname</code></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hostnamectl set-hostname [hostname]<br></code></pre></td></tr></table></figure><h1 id="查看用户和用户组"><a href="#查看用户和用户组" class="headerlink" title="查看用户和用户组"></a>查看用户和用户组</h1><h2 id="查看用户列表"><a href="#查看用户列表" class="headerlink" title="查看用户列表"></a>查看用户列表</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /etc/passwd<br></code></pre></td></tr></table></figure><img src="/posts/85b72ed0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FkdmFuY2luZ1N0b25l,size_16,color_FFFFFF,t_70.png" alt="img" style="zoom: 67%;"><h2 id="查看用户组列表"><a href="#查看用户组列表" class="headerlink" title="查看用户组列表"></a>查看用户组列表</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /etc/group<br></code></pre></td></tr></table></figure><img src="/posts/85b72ed0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FkdmFuY2luZ1N0b25l,size_16,color_FFFFFF,t_70-16654207556175.png" alt="img" style="zoom:67%;"><h2 id="查看系统中有哪些用户"><a href="#查看系统中有哪些用户" class="headerlink" title="查看系统中有哪些用户"></a>查看系统中有哪些用户</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cut -d : -f 1 /etc/passwd<br></code></pre></td></tr></table></figure><img src="/posts/85b72ed0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FkdmFuY2luZ1N0b25l,size_16,color_FFFFFF,t_70-16654207833218.png" alt="img" style="zoom:67%;"><h2 id="查看可以登录系统的用户"><a href="#查看可以登录系统的用户" class="headerlink" title="查看可以登录系统的用户"></a>查看可以登录系统的用户</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /etc/passwd | grep -v /sbin/nologin | cut -d : -f 1<br></code></pre></td></tr></table></figure><img src="/posts/85b72ed0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FkdmFuY2luZ1N0b25l,size_16,color_FFFFFF,t_70-166542080828011.png" alt="img" style="zoom:67%;"><h2 id="查看用户操作"><a href="#查看用户操作" class="headerlink" title="查看用户操作"></a>查看用户操作</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">w (root权限)<br></code></pre></td></tr></table></figure><img src="/posts/85b72ed0/20191010163558992.png" alt="img" style="zoom:67%;"><h2 id="查看某一用户"><a href="#查看某一用户" class="headerlink" title="查看某一用户"></a>查看某一用户</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">w &lt;user_name&gt;<br></code></pre></td></tr></table></figure><img src="/posts/85b72ed0/20191010164001289.png" alt="img" style="zoom:67%;"><h2 id="查看登录用户"><a href="#查看登录用户" class="headerlink" title="查看登录用户"></a>查看登录用户</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">who<br></code></pre></td></tr></table></figure><img src="/posts/85b72ed0/20191010164049493.png" alt="img" style="zoom:67%;"><h2 id="查看用户登录历史记录"><a href="#查看用户登录历史记录" class="headerlink" title="查看用户登录历史记录"></a>查看用户登录历史记录</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">last<br></code></pre></td></tr></table></figure><img src="/posts/85b72ed0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FkdmFuY2luZ1N0b25l,size_16,color_FFFFFF,t_70-166542096091420.png" alt="img" style="zoom:67%;"><h2 id="修改root用户密码"><a href="#修改root用户密码" class="headerlink" title="修改root用户密码"></a>修改root用户密码</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">passwd<br></code></pre></td></tr></table></figure><img src="/posts/85b72ed0/20191010164451776.png" alt="img" style="zoom:67%;"><h2 id="root用户修改其他用户密码"><a href="#root用户修改其他用户密码" class="headerlink" title="root用户修改其他用户密码"></a>root用户修改其他用户密码</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">passwd &lt;user_name&gt;<br></code></pre></td></tr></table></figure><img src="/posts/85b72ed0/20191010164520363.png" alt="img" style="zoom:67%;"><h1 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h1><h2 id="init-6"><a href="#init-6" class="headerlink" title="init 6"></a>init 6</h2><p>init 6 基于一系列 <code>/etc/inittab</code> 文件，并且每个应用都会有一个相应 shutdown 脚本。<br>init 6 调用一系列 shutdown 脚本(&#x2F;etc&#x2F;rc0.d&#x2F;K*)来使系统优雅关机。</p><h2 id="reboot"><a href="#reboot" class="headerlink" title="reboot"></a>reboot</h2><p>reboot 并不执行这些过程，reboot更是一个 kernel 级别的命令，不对应用使用 shutdown 脚本。</p><p>综上平常推荐使用 init 6 命令，只有在系统出了问题的时候才比较推荐使用 reboot 命令。</p>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
      <category>常用命令</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运维配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>运维常用命令-时间篇</title>
    <link href="/posts/c72fbcb5/"/>
    <url>/posts/c72fbcb5/</url>
    
    <content type="html"><![CDATA[<h1 id="linux-查看系统当前时间，修改时间，查看文件时间"><a href="#linux-查看系统当前时间，修改时间，查看文件时间" class="headerlink" title="linux 查看系统当前时间，修改时间，查看文件时间"></a>linux 查看系统当前时间，修改时间，查看文件时间</h1><h2 id="查看时间和日期"><a href="#查看时间和日期" class="headerlink" title="查看时间和日期"></a><strong>查看时间和日期</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">date<br></code></pre></td></tr></table></figure><h2 id="设置时间和日期"><a href="#设置时间和日期" class="headerlink" title="设置时间和日期"></a><strong>设置时间和日期</strong></h2><p>例如：将系统日期设定成2018年6月8日的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">date -s 06/08/2018<br></code></pre></td></tr></table></figure><p>将系统时间设定成下午10点46分03秒的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">date -s 10:46:03<br></code></pre></td></tr></table></figure><h2 id="查看时区"><a href="#查看时区" class="headerlink" title="查看时区"></a><strong>查看时区</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">date -R<br></code></pre></td></tr></table></figure><h2 id="查询系统当前日期"><a href="#查询系统当前日期" class="headerlink" title="查询系统当前日期"></a><strong>查询系统当前日期</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">date +&quot;%Y-%m-%d&quot;<br></code></pre></td></tr></table></figure><h2 id="查询系统当前时间"><a href="#查询系统当前时间" class="headerlink" title="查询系统当前时间"></a><strong>查询系统当前时间</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">date +&quot;%H-%M-%S&quot;<br></code></pre></td></tr></table></figure><h2 id="查看文件时间"><a href="#查看文件时间" class="headerlink" title="查看文件时间"></a><strong>查看文件时间</strong></h2><p>ls -l 或者 ll</p><img src="/posts/c72fbcb5/image-20220523011236380.png" class alt="image-20220523011236380"><p>要显示秒（实际更精确），可以用 <code>--full-time</code> 参数</p><img src="/posts/c72fbcb5/image-20220523011700623.png" class alt="image-20220523011700623"><p>要显示更多信息，用 stat 命令：</p><img src="/posts/c72fbcb5/image-20220523011735344.png" class alt="image-20220523011735344">]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
      <category>常用命令</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运维配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>运维常用命令-常用配置篇</title>
    <link href="/posts/c3218428/"/>
    <url>/posts/c3218428/</url>
    
    <content type="html"><![CDATA[<h1 id="禁止ping"><a href="#禁止ping" class="headerlink" title="禁止ping"></a>禁止ping</h1><p>Linux默认是允许Ping响应的，系统是否允许Ping由2个因素决定的：A、内核参数，B、防火墙，需要2个因素同时允许才能允许Ping，2个因素有任意一个禁Ping就无法Ping。</p><h2 id="内核参数设置"><a href="#内核参数设置" class="headerlink" title="内核参数设置"></a>内核参数设置</h2><h3 id="允许PING设置"><a href="#允许PING设置" class="headerlink" title="允许PING设置"></a>允许PING设置</h3><ul><li><p>临时允许PING操作的命令为：<code>echo 0 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all</code></p></li><li><p>永久允许PING配置方法。</p><p><strong>&#x2F;etc&#x2F;sysctl.conf</strong> 中增加一行</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">net.ipv4.icmp_echo_ignore_all=0<br></code></pre></td></tr></table></figure></li></ul><p>如果已经有<code>net.ipv4.icmp_echo_ignore_all</code>这一行了，直接修改&#x3D;号后面的值即可的（0表示允许，1表示禁止）。</p><p>修改完成后执行以下命令，使新配置生效。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sysctl -p<br></code></pre></td></tr></table></figure><h2 id="防火墙设置"><a href="#防火墙设置" class="headerlink" title="防火墙设置"></a>防火墙设置</h2><blockquote><p>注：此处的方法的前提是内核配置是默认值，也就是没有禁止Ping。</p></blockquote><p>以Iptables防火墙为例</p><h3 id="允许PING设置-1"><a href="#允许PING设置-1" class="headerlink" title="允许PING设置"></a>允许PING设置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">iptables -A INPUT -p icmp --icmp-type echo-request -j ACCEPT<br><br>iptables -A OUTPUT -p icmp --icmp-type echo-reply -j ACCEPT<br></code></pre></td></tr></table></figure><p>或者也可以临时停止防火墙操作的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">service iptables stop<br></code></pre></td></tr></table></figure><h3 id="禁止PING设置"><a href="#禁止PING设置" class="headerlink" title="禁止PING设置"></a>禁止PING设置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">iptables -A INPUT -p icmp --icmp-type 8 -s 0/0 -j DROP<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
      <category>常用命令</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运维配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>运维常用命令-常用篇</title>
    <link href="/posts/e9ae7850/"/>
    <url>/posts/e9ae7850/</url>
    
    <content type="html"><![CDATA[<h1 id="1-ls-系列"><a href="#1-ls-系列" class="headerlink" title="1. ls 系列"></a>1. ls 系列</h1><blockquote><p>-F：根据文件、目录等信息在文件名或目录名最后给予附加数据结构</p><ol><li>*  代表可执行文件；</li><li>&#x2F;  代表目录</li><li>&#x3D;  代表socket文件</li><li>|  代表FIFO文件</li><li>@  代表连接文件</li></ol></blockquote><h2 id="1-只显示文件类型，排除目录"><a href="#1-只显示文件类型，排除目录" class="headerlink" title="1. 只显示文件类型，排除目录"></a>1. 只显示文件类型，排除目录</h2><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><blockquote><p>^[^d] 是一个正则表达式，[^d] 表示字符串含有一个不是 d 的字符， ^d 表示以 d 开头，^[^d] 表示不以 d 开头</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ls -l | grep ^[^d]<br></code></pre></td></tr></table></figure><p>所以只显示文件夹的写法为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ls -l | grep ^d<br></code></pre></td></tr></table></figure><h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ls -l | grep -v ^d<br></code></pre></td></tr></table></figure><p>如果文件名包含空格，可以用下面命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ls -l | grep -v [/$]<br></code></pre></td></tr></table></figure><hr><h1 id="2-sed-系列"><a href="#2-sed-系列" class="headerlink" title="2. sed 系列"></a>2. sed 系列</h1><h2 id="1-替换字符串"><a href="#1-替换字符串" class="headerlink" title="1. 替换字符串"></a>1. 替换字符串</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sed &#x27;s/old/new/g&#x27;<br></code></pre></td></tr></table></figure><h1 id="3-rm-系列"><a href="#3-rm-系列" class="headerlink" title="3. rm 系列"></a>3. rm 系列</h1><h2 id="1-删除带有指定字符串的文件"><a href="#1-删除带有指定字符串的文件" class="headerlink" title="1. 删除带有指定字符串的文件"></a>1. 删除带有指定字符串的文件</h2><h3 id="方法一：-1"><a href="#方法一：-1" class="headerlink" title="方法一："></a>方法一：</h3><blockquote><p>注意字符串如果含有特殊字符，必须做转义处理，否则默认会删除当前目录下的所有文件。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rm -f *字符串*<br></code></pre></td></tr></table></figure><h3 id="方法二：-1"><a href="#方法二：-1" class="headerlink" title="方法二："></a>方法二：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">find -type f -name &#x27;*字符串*&#x27; -delete<br></code></pre></td></tr></table></figure><h1 id="4-awk-系列"><a href="#4-awk-系列" class="headerlink" title="4. awk 系列"></a>4. awk 系列</h1><h2 id="1-获取某一行中指定字符后的内容"><a href="#1-获取某一行中指定字符后的内容" class="headerlink" title="1. 获取某一行中指定字符后的内容"></a>1. 获取某一行中指定字符后的内容</h2><p>比如有个xxx.txt文件，里面有很多行内容，其中有行内容为ro.xxx&#x3D;123，要想获取到123这个值，可以如下处理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br>NAME=`cat xxx.txt | grep &#x27;ro.xxx&#x27; | awk -F &#x27;=&#x27; &#x27;&#123;print $2&#125;&#x27;`<br>echo $NAME<br></code></pre></td></tr></table></figure><h1 id="5-cd-dirname-0-pwd"><a href="#5-cd-dirname-0-pwd" class="headerlink" title="5. $(cd dirname $0;pwd)"></a>5. $(cd <code>dirname $0</code>;pwd)</h1><p><code>cd &quot;$(dirname &quot;$0&quot;)&quot;;pwd</code> 等同于 <code>$(dirname $(readlink -f &quot;$0&quot;))</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">在/home/admin/test/下新建test.sh内容如下：</span><br>cd `dirname $0`<br>echo `pwd`<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">然后返回到/home/admin/执行</span><br>sh test/test.sh<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">运行结果:</span><br>/home/admin/test<br></code></pre></td></tr></table></figure><h1 id="6-basename"><a href="#6-basename" class="headerlink" title="6. basename"></a>6. basename</h1><h2 id="1-basename"><a href="#1-basename" class="headerlink" title="1. basename"></a>1. basename</h2><p>打印除上层路径外的基础文件名；当文件名后存在后缀时，除去后面的后缀，如 # basename include&#x2F;stdio.h .h 只会打印出 stdio</p><h2 id="2-basename-s"><a href="#2-basename-s" class="headerlink" title="2. basename -s"></a>2. basename -s</h2><p>-s参数后面指定要去除的后缀字符，即：# basename -s .h include&#x2F;stdio.h 同 # basename include&#x2F;stdio.h .h 一样只会打印出 stdio</p><h2 id="3-basename-a"><a href="#3-basename-a" class="headerlink" title="3. basename -a"></a>3. basename -a</h2><p>-a参数可追加执行多个文件路径，取每一个路径的基础文件名并打印。用法如下图：</p><h1 id="7-pwd"><a href="#7-pwd" class="headerlink" title="7. pwd"></a>7. pwd</h1><h2 id="1-pwd-L"><a href="#1-pwd-L" class="headerlink" title="1. pwd -L"></a>1. pwd -L</h2><p>打印出环境变量 $PWD 的值，如果 PWD 赋值为当前工作路径，pwd 默认同 pwd -L</p><h2 id="2-pwd-P"><a href="#2-pwd-P" class="headerlink" title="2. pwd -P"></a>2. pwd -P</h2><p>打印真实路径，不打印链接的路径，区别如图：</p><h1 id="8-watch"><a href="#8-watch" class="headerlink" title="8. watch"></a>8. watch</h1><p><strong>命令参数</strong>：</p><p>-n 或 –interval watch 缺省每2秒运行一下程序，可以用 -n 或 -interval 来指定间隔的时间。</p><p>-d 或 –differences 用 -d 或 –differences 选项 watch 会高亮显示变化的区域。 而 -d&#x3D;cumulative 选项会把变动过的地方(不管最近的那次有没有变动)都高亮显示出来。</p><p>-t 或-no-title 会关闭watch命令在顶部的时间间隔,命令，当前时间的输出。</p><p><strong>示例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">watch -n 1 -d &quot;&lt;command&gt;&quot;<br></code></pre></td></tr></table></figure><h1 id="9-grep"><a href="#9-grep" class="headerlink" title="9. grep"></a>9. grep</h1><table><thead><tr><th>元字符</th><th>功能</th><th>例子</th><th>匹配什么</th></tr></thead><tbody><tr><td>^</td><td>锚定行的开始</td><td>&#x2F;^love&#x2F;</td><td>匹配所有以love开头的行</td></tr><tr><td>$</td><td>锚定行的结束</td><td>&#x2F;love$&#x2F;</td><td>匹配所有以love 结束的行</td></tr><tr><td>.</td><td>匹配一个字符</td><td>&#x2F;l..e&#x2F;</td><td>匹配这样的行，这些行包含这样的字符：第一个字符是l,紧跟着两个字符，然后是e</td></tr><tr><td>*</td><td>代表0个或多个先前字符</td><td>&#x2F;*love&#x2F;</td><td>匹配所有这样的行，有0个或多个空格，空格后跟着love</td></tr><tr><td>[]</td><td>匹配字符组中的一个字符</td><td>&#x2F;[Ll]ove&#x2F;</td><td>匹配所有包含love或者Love的行</td></tr><tr><td>[^]</td><td>匹配一个不在范围内的字符</td><td>&#x2F;[^A-Z]ove&#x2F;</td><td></td></tr><tr><td>&lt;</td><td>锚定单词的开始</td><td>&lt;love</td><td>匹配所有这样的行，这些行包含以love开头的单词（vi和grep支持这个功能）</td></tr><tr><td>&gt;</td><td>锚定单词的结束</td><td>Love&gt;</td><td>匹配所有这样的行，这些行包含以love结束的单词（vi和grep支持这个功能）</td></tr><tr><td>(..)</td><td>标记后面用到的匹配字符</td><td>&#x2F;(love)able1rs&#x2F;</td><td>最多可以使用9个标签。第一个标签是模板最左边的部分。在本例子中，模板love保存的标签为1，后面的1指得就是love；本例子搜索的是这样的行，这些行包含这样的字符，在Loveabel后面跟着lovers</td></tr><tr><td>x{m}</td><td>M次复制字符x</td><td></td><td></td></tr><tr><td>x{m,}</td><td>至少m次复制字符x</td><td></td><td></td></tr><tr><td>x{m,n}</td><td>至少m次，至多n次复制字x</td><td></td><td></td></tr><tr><td>w</td><td>文字和数字字符，[A-Za-z0-9]</td><td>Lw*e</td><td>匹配一个l字符，紧跟着0个或多个文字或数字字符，然后是e</td></tr><tr><td>W</td><td>同上</td><td></td><td></td></tr><tr><td>b</td><td>单词分界线</td><td>bloveb</td><td>仅仅匹配单词love</td></tr></tbody></table><h2 id="递归查找某个文本内容"><a href="#递归查找某个文本内容" class="headerlink" title="递归查找某个文本内容"></a>递归查找某个文本内容</h2><ul><li>R 表示递归，就是在当前目录找不到就去子目录找 </li><li>E 表示把文件名也打印出来 </li><li>n 打印此行在文件中的位置。</li></ul><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">这句可以显示在哪个文件里包含3306</span><br>grep -Rl &quot;3306&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">可以显现文件名，行数</span><br>grep -REn &quot;3306&quot;<br></code></pre></td></tr></table></figure><h3 id="查找替换内容"><a href="#查找替换内容" class="headerlink" title="查找替换内容"></a>查找替换内容</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">sed -i <span class="hljs-string">&quot;s/[原字符串]/[新字符串]/g&quot;</span> `grep <span class="hljs-string">&#x27;[原字符串]&#x27;</span> -rl /opt/kubernetes`</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">示例：替换/opt/kubernetes下所有文件内容为242的换成245</span><br>sed -i &quot;s/242/245/g&quot; `grep &#x27;242&#x27; -rl /opt/kubernetes`<br></code></pre></td></tr></table></figure><h1 id="10-查看端口占用"><a href="#10-查看端口占用" class="headerlink" title="10. 查看端口占用"></a>10. 查看端口占用</h1><h2 id="查看那些程序使用tcp的80端口"><a href="#查看那些程序使用tcp的80端口" class="headerlink" title="查看那些程序使用tcp的80端口"></a>查看那些程序使用tcp的80端口</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$</span><span class="language-bash">fuser -v -n tcp 80</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">fuser -v 80/tcp</span>  <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
      <category>常用命令</category>
      
    </categories>
    
    
    <tags>
      
      <tag>命令</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vmware 网络配置</title>
    <link href="/posts/da1888d/"/>
    <url>/posts/da1888d/</url>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="网卡配置"><a href="#网卡配置" class="headerlink" title="网卡配置"></a>网卡配置</h2><h3 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h3><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://blog.csdn.net/qiuqurenkong/article/details/78598650">Mac VMware fusion10 Centos7网络配置</a></p><p><a href="https://blog.csdn.net/kakuma_chen/article/details/71425620">如何使VMware ip与本机ip处于同一网段</a></p><p><a href="https://blog.csdn.net/masson32/article/details/48105793">CentOS 7 在vmware中的网络设置</a></p>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
      <category>vmware</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vmware</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>typora 优化</title>
    <link href="/posts/1ed812a6/"/>
    <url>/posts/1ed812a6/</url>
    
    <content type="html"><![CDATA[<h1 id="插入的图片左对齐"><a href="#插入的图片左对齐" class="headerlink" title="插入的图片左对齐"></a>插入的图片左对齐</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span> <span class="hljs-selector-class">.md-image</span><span class="hljs-selector-pseudo">:only-child</span>&#123;<br>    <span class="hljs-attribute">width</span>: auto;<br>    <span class="hljs-attribute">text-align</span>: inherit;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="右键打开"><a href="#右键打开" class="headerlink" title="右键打开"></a>右键打开</h1><ol><li>Win+R 调出运行窗口</li><li>输入 regedit 打开注册表</li></ol><img src="/posts/1ed812a6/image-20220925001024038.png" alt="image-20220925001024038" style="zoom: 67%;"><h2 id="1-对文件增加Typora右键打开项"><a href="#1-对文件增加Typora右键打开项" class="headerlink" title="1. 对文件增加Typora右键打开项"></a>1. 对文件增加Typora右键打开项</h2><h3 id="设置使用-Typora-exe-打开"><a href="#设置使用-Typora-exe-打开" class="headerlink" title="设置使用 Typora.exe 打开"></a><strong>设置使用 Typora.exe 打开</strong></h3><img src="/posts/1ed812a6/image-20220925001720435.png" alt="image-20220925001720435" style="zoom:67%;"><ol><li>首先找到路径<code>计算机\HKEY_CLASSES_ROOT\*\shell\</code></li><li>在 shell 文件夹上右键 新建-&gt;项，文件夹名 Typora</li><li>在 Typora 右键 新建-&gt;项，文件夹名 command</li><li>单击 command，双击右侧名称中的默认，数值数据 中输入<code>&quot;C:\Program Files\Typora\typora.exe&quot; &quot;%1&quot; </code> (你自己程序所在位置)</li><li>此时已经可以在文件上右键通过Typora打开文件了</li></ol><h3 id="设置图标和右键中显示的提示"><a href="#设置图标和右键中显示的提示" class="headerlink" title="设置图标和右键中显示的提示"></a><strong>设置图标和右键中显示的提示</strong></h3><img src="/posts/1ed812a6/image-20220925001527291.png" alt="image-20220925001527291" style="zoom:67%;"><p>单击Typora</p><p>右侧双击默认 数值数据 是右键时提示的文字，这里填写<code>Open With Typora</code></p><p>右侧右键 新建 -&gt; 字符串值，输入icon，双击icon 数值数据输入<code>&quot;C:\Program Files\Typora\typora.exe&quot;</code>  (你自己程序所在位置)</p><img src="/posts/1ed812a6/image-20220925001701700.png" alt="image-20220925001701700" style="zoom:67%;"><h2 id="2-对文件夹增加Typora右键打开项"><a href="#2-对文件夹增加Typora右键打开项" class="headerlink" title="2. 对文件夹增加Typora右键打开项"></a>2. 对文件夹增加Typora右键打开项</h2><ol><li>首先找到路径  <code>计算机\HKEY_CLASSES_ROOT\Folder\shell\</code></li><li>按照上面的方法</li><li>新建 Typora 及子项 command</li><li>单击 command 右侧设置指令</li><li>单击 Typora 右侧设置右键显示的内容和 icon</li></ol><h2 id="3-命令解释"><a href="#3-命令解释" class="headerlink" title="3. 命令解释"></a>3. 命令解释</h2><blockquote><p>指令要用双引号，若不用双引号window对带有空格的路径识别是有问题的</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">&quot;C:\Program Files\Typora\typora.exe&quot; &quot;%1&quot;<br></code></pre></td></tr></table></figure><p>%1 或获取当前选择的内容，可能是文件的路径，也可能是文件夹的路径</p><p>当你cmd终端中输入如下的指令时Typora会打开hello.markdown文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">&quot;C:\Program Files\Typora\typora.exe&quot; &quot;F:\hello.markdown&quot;<br></code></pre></td></tr></table></figure><h2 id="4-简易设置方式"><a href="#4-简易设置方式" class="headerlink" title="4. 简易设置方式"></a>4. 简易设置方式</h2><p>在桌面新建 <code>typora-file.reg</code> 和 <code>typora-folder.reg</code> 两个文件</p><p>用记事本分别录入两个内容</p><p>然后分别双击两个文件会，注册表会自动设置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">Windows Registry Editor Version 5.00<br>[HKEY_CLASSES_ROOT\*\shell\Typora]<br>&quot;icon&quot;=&quot;C:\\Program Files\\Typora\\typora.exe&quot;<br>@=&quot;Open With Typora&quot;<br>[HKEY_CLASSES_ROOT\*\shell\Typora\command]<br>@=&quot;\&quot;C:\\Program Files\\Typora\\typora.exe\&quot; \&quot;%1\&quot;&quot;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">Windows Registry Editor Version 5.00<br>[HKEY_CLASSES_ROOT\Folder\shell\Typora]<br>&quot;icon&quot;=&quot;C:\\Program Files\\Typora\\typora.exe&quot;<br>@=&quot;Open With Typora&quot;<br>[HKEY_CLASSES_ROOT\Folder\shell\Typora\command]<br>@=&quot;\&quot;C:\\Program Files\\Typora\\typora.exe\&quot; \&quot;%1&quot;&quot;<br></code></pre></td></tr></table></figure><h1 id="荧光笔高亮"><a href="#荧光笔高亮" class="headerlink" title="荧光笔高亮"></a>荧光笔高亮</h1><h2 id="开启高亮"><a href="#开启高亮" class="headerlink" title="开启高亮"></a>开启高亮</h2><p>打开方式：文件 &gt; 偏好设置 &gt; Markdown &gt; Markdown扩展语法中把 <strong>高亮</strong> 选中 &gt; <strong>重启Typora</strong>，如下图所示：</p><img src="/posts/1ed812a6/image-20221108163427751.png" alt="image-20221108163427751" style="zoom:67%;"><h2 id="更改高亮配色"><a href="#更改高亮配色" class="headerlink" title="更改高亮配色"></a>更改高亮配色</h2><p>打开方式：文件 &gt; 偏好设置 &gt; 外观 &gt; 打开主题文件夹 &gt; <em>drake-light.css</em>文件 &gt; Ctrl+F 搜索 mark &gt; 修改喜欢的 background(背景颜色) 和 color(字体颜色) 保存。</p><p>这里修改后的最终效果如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* height light */</span><br><span class="hljs-selector-id">#write</span> <span class="hljs-selector-tag">mark</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f8f840</span>;<br>    <span class="hljs-attribute">padding</span>: .<span class="hljs-number">1rem</span> .<span class="hljs-number">5rem</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> .<span class="hljs-number">2rem</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="设置高亮快捷键"><a href="#设置高亮快捷键" class="headerlink" title="设置高亮快捷键"></a>设置高亮快捷键</h2><p>设置方式：文件 &gt; 偏好设置 &gt; 通用 &gt; 打开高级设置 &gt; 会看到两个json文件，添加绑定快捷键，如下所示：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>   ...<br><span class="hljs-attr">&quot;keyBinding&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;Highlight&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Ctrl + q&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  ...<br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>破解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>破解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx 基本概念</title>
    <link href="/posts/56e587e1/"/>
    <url>/posts/56e587e1/</url>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="host-和-http-host-的区别"><a href="#host-和-http-host-的区别" class="headerlink" title="$host 和 $http_host 的区别"></a>$host 和 $http_host 的区别</h2><p><code>$host</code> 是 core 模块内部的一个变量</p><ol><li>当请求头里不存在 <code>Host</code> 属性或者是个空值，<code>$host</code> 则等于 server_name</li><li>如果请求头里有 <code>Host</code> 属性，那么 <code>$host</code> 等于 <code>Host</code> 属性除了端口号的部分，例如 <code>Host</code> 属性是 <code>www.example.com</code>，那么 <code>$host</code> 就是 <code>www.example.com</code></li></ol><p><code>$http_host</code> 不是一个固定的变量，他其实是 <code>$http_HEADER</code> 通配后的结果。</p><p><code>$http_HEADER</code>，注意，这里的HEADER是一个通配符，通配的是请求头里的header属性，例如 <code>$http_content_type</code> 表示请求头里 <code>content-type</code> 属性的值，同理，<code>$http_host</code> 指的就是请求头里的 <code>host</code> 属性，也就是说，如果请求头里面 Host 为空，$http_host 取到的值也就是空。</p>]]></content>
    
    
    <categories>
      
      <category>nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面试单题</title>
    <link href="/posts/1f03d757/"/>
    <url>/posts/1f03d757/</url>
    
    <content type="html"><![CDATA[<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="1、String-str-x3D-”i”与-String-str-x3D-new-String-“i”-一样吗"><a href="#1、String-str-x3D-”i”与-String-str-x3D-new-String-“i”-一样吗" class="headerlink" title="1、String str&#x3D;”i”与 String str&#x3D;new String(“i”)一样吗"></a>1、String str&#x3D;”i”与 String str&#x3D;new String(“i”)一样吗</h2><p>不一样，因为内存的分配方式不一样。String str&#x3D;”i”的方式，java 虚拟机会将其分配到常量池中；而 String str&#x3D;new String(“i”) 则会被分到堆内存中。</p><h2 id="2、抽象类必须要有抽象方法吗？"><a href="#2、抽象类必须要有抽象方法吗？" class="headerlink" title="2、抽象类必须要有抽象方法吗？"></a><strong>2、抽象类必须要有抽象方法吗？</strong></h2><p>不需要，抽象类不一定非要有抽象方法，以下为示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHi</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;hi~&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3、抽象类能使用-final-修饰吗"><a href="#3、抽象类能使用-final-修饰吗" class="headerlink" title="3、抽象类能使用 final 修饰吗"></a><strong>3、抽象类能使用 final 修饰吗</strong></h2><p>不能，定义抽象类就是让其他类继承的，如果定义为 final 该类就不能被继承，这样彼此就会产生矛盾，所以 final 不能修饰抽象类。</p><h2 id="4、接口和抽象类的区别"><a href="#4、接口和抽象类的区别" class="headerlink" title="4、接口和抽象类的区别"></a><strong>4、接口和抽象类的区别</strong></h2><table><thead><tr><th align="left"></th><th>接口</th><th>抽象类</th></tr></thead><tbody><tr><td align="left">实现</td><td>接口必须使用 implements 来实现接口</td><td>抽象类的子类使用 extends 来继承</td></tr><tr><td align="left">构造函数</td><td>无</td><td>可以有</td></tr><tr><td align="left">main 方法</td><td>无</td><td>可以有</td></tr><tr><td align="left">实现数量</td><td>多个</td><td>单个</td></tr><tr><td align="left">访问修饰符</td><td>方法默认public修饰</td><td>方法可以是任意访问修饰符（除了private）</td></tr></tbody></table><h2 id="5、java-中-IO-流分为几种"><a href="#5、java-中-IO-流分为几种" class="headerlink" title="5、java 中 IO 流分为几种"></a><strong>5、java 中 IO 流分为几种</strong></h2><p>按功能来分：输入流（input）、输出流（output）。</p><p>按类型来分：字节流和字符流。</p><p>字节流和字符流的区别是：字节流按 8 位传输以字节为单位输入输出数据，字符流按 16 位传输以字符为单位输入输出数据。</p><h2 id="6、BIO、NIO、AIO-有什么区别"><a href="#6、BIO、NIO、AIO-有什么区别" class="headerlink" title="6、BIO、NIO、AIO 有什么区别"></a><strong>6、BIO、NIO、AIO 有什么区别</strong></h2><ul><li>BIO：Block IO 同步阻塞式 IO，就是我们平常使用的传统 IO，它的特点是模式简单使用方便，并发处理能力低。</li><li>NIO：New IO 同步非阻塞 IO，是传统 IO 的升级，客户端和服务器端通过 Channel（通道）通讯，实现了多路复用。</li><li>AIO：Asynchronous IO 是 NIO 的升级，也叫 NIO2，实现了异步非堵塞 IO ，异步 IO 的操作基于事件和回调机制。</li></ul><h2 id="7、Files的常用方法都有哪些？"><a href="#7、Files的常用方法都有哪些？" class="headerlink" title="7、Files的常用方法都有哪些？"></a>7、Files的常用方法都有哪些？</h2><ul><li>Files.exists()：检测文件路径是否存在。</li><li>Files.createFile()：创建文件。</li><li>Files.createDirectory()：创建文件夹。</li><li>Files.delete()：删除一个文件或目录。</li><li>Files.copy()：复制文件。</li><li>Files.move()：移动文件。</li><li>Files.size()：查看文件个数。</li><li>Files.read()：读取文件。</li><li>Files.write()：写入文件。</li></ul><h1 id="容器"><a href="#容器" class="headerlink" title="容器"></a><strong>容器</strong></h1><h2 id="1、java容器都有哪些"><a href="#1、java容器都有哪些" class="headerlink" title="1、java容器都有哪些"></a><strong>1、java容器都有哪些</strong></h2><img src="/posts/1f03d757/40.png" class><h2 id="2、Collection-和-Collections-有什么区别"><a href="#2、Collection-和-Collections-有什么区别" class="headerlink" title="2、Collection 和 Collections 有什么区别"></a><strong>2、Collection 和 Collections 有什么区别</strong></h2><ul><li>java.util.Collection 是一个集合接口（集合类的一个顶级接口）。它提供了对集合对象进行基本操作的通用接口方法。Collection接口在Java 类库中有很多具体的实现。Collection接口的意义是为各种具体的集合提供了最大化的统一操作方式，其直接继承接口有List与Set。</li><li>Collections则是集合类的一个工具类&#x2F;帮助类，其中提供了一系列静态方法，用于对集合中元素进行排序、搜索以及线程安全等各种操作。</li></ul><h2 id="3、List、Set、Map-之间的区别是什么"><a href="#3、List、Set、Map-之间的区别是什么" class="headerlink" title="3、List、Set、Map 之间的区别是什么"></a><strong>3、List、Set、Map 之间的区别是什么</strong></h2><img src="/posts/1f03d757/41.png" class><h2 id="4、HashMap-和-Hashtable-有什么区别"><a href="#4、HashMap-和-Hashtable-有什么区别" class="headerlink" title="4、HashMap 和 Hashtable 有什么区别"></a><strong>4、HashMap 和 Hashtable 有什么区别</strong></h2><ul><li>hashMap去掉了HashTable 的contains方法，但是保留了containsValue()和containsKey()方法。</li><li>hashTable同步的，而HashMap是非同步的，效率上比hashTable要高。</li><li>hashMap允许空键值，而hashTable不允许。</li></ul><h2 id="5、HashMap-LinkedHashMap-TreeMap的区别"><a href="#5、HashMap-LinkedHashMap-TreeMap的区别" class="headerlink" title="5、HashMap,LinkedHashMap,TreeMap的区别"></a>5、HashMap,LinkedHashMap,TreeMap的区别</h2><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><ul><li>Map主要用于存储健值对，根据键得到值，因此不允许键重复,但允许值重复。</li><li>Hashmap 是一个最常用的Map,它根据键的HashCode 值存储数据,根据键可以直接获取它的值，具有很快的访问速度，遍历时，取得数据的顺序是完全随机的。</li><li>HashMap最多只允许一条记录的键为Null，允许多条记录的值为 Null。</li><li>HashMap不支持线程的同步，即任一时刻可以有多个线程同时写HashMap，可能会导致数据的不一致。如果需要同步，可以用 Collections的synchronizedMap方法使HashMap具有同步的能力，或者使用ConcurrentHashMap。</li></ul><h3 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h3><p>LinkedHashMap是HashMap子类，保存了记录的插入顺序，在用Iterator遍历LinkedHashMap时，先得到的记录肯定是先插入的.也可以在构造时用带参数，按照应用次数排序。在遍历的时候会比HashMap慢，不过有种情况例外，当HashMap容量很大，实际数据较少时，遍历起来可能会比LinkedHashMap慢，因为LinkedHashMap的遍历速度只和实际数据有关，和容量无关，而HashMap的遍历速度和他的容量有关。</p><h3 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h3><p>TreeMap实现SortMap接口，能够把它保存的记录根据键排序,默认是按键值的升序排序，也可以指定排序的比较器，当用Iterator 遍历TreeMap时，得到的记录是排过序的。</p><h2 id="6、HashMap底层实现原理"><a href="#6、HashMap底层实现原理" class="headerlink" title="6、HashMap底层实现原理"></a>6、HashMap底层实现原理</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>HashMap是基于哈希表的Map接口的非同步实现。此实现提供所有可选的映射操作，并允许使用null值和null键。此类不保证映射的顺序，特别是它不保证该顺序恒久不变。 </p><h3 id="HashMap数据结构"><a href="#HashMap数据结构" class="headerlink" title="HashMap数据结构"></a>HashMap数据结构</h3><p>HashMap实际是一种“数组+链表”数据结构。在put操作中，通过内部定义算法寻止找到数组下标，将数据直接放入此数组元素中，若通过算法得到的该数组元素已经有了元素（俗称hash冲突，链表结构出现的实际意义也就是为了解决hash冲突的问题）。将会把这个数组元素上的链表进行遍历，将新的数据放到链表末尾。</p><img src="/posts/1f03d757/42.jpg" class><p>当我们往Hashmap中put元素时，首先根据key的hashcode重新计算hash值，根绝hash值得到这个元素在数组中的位置(下标)，如果该数组在该位置上已经存放了其他元素，那么在这个位置上的元素将以链表的形式存放，新加入的放在链头，最先加入的放入链尾。如果数组中该位置没有元素，就直接将该元素放到数组的该位置上。</p><blockquote><p>需要注意Jdk 1.8中对HashMap的实现做了优化,当链表中的节点数据超过八个之后,该链表会转为红黑树来提高查询效率,从原来的O(n)到O(logn)</p></blockquote><h2 id="7、HashSet-的实现原理"><a href="#7、HashSet-的实现原理" class="headerlink" title="7、HashSet 的实现原理"></a><strong>7、HashSet 的实现原理</strong></h2><ul><li>HashSet底层由HashMap实现</li><li>HashSet的值存放于HashMap的key上</li><li>HashMap的value统一为PRESENT</li></ul><h2 id="8、Array-和-ArrayList-有何区别？"><a href="#8、Array-和-ArrayList-有何区别？" class="headerlink" title="8、Array 和 ArrayList 有何区别？"></a>8、Array 和 ArrayList 有何区别？</h2><ul><li>Array可以容纳基本类型和对象，而ArrayList只能容纳对象。 </li><li>Array是指定大小的，而ArrayList大小是固定的。 </li><li>Array没有提供ArrayList那么多功能，比如addAll、removeAll和iterator等。</li></ul><h2 id="9、在-Queue-中-poll-和-remove-有什么区别？"><a href="#9、在-Queue-中-poll-和-remove-有什么区别？" class="headerlink" title="9、在 Queue 中 poll()和 remove()有什么区别？"></a><strong>9、在 Queue 中 poll()和 remove()有什么区别？</strong></h2><p>poll() 和 remove() 都是从队列中取出一个元素，但是 poll() 在获取元素失败的时候会返回空，但是 remove() 失败的时候会抛出异常。</p><h2 id="10、Iterator-和-ListIterator-有什么区别？"><a href="#10、Iterator-和-ListIterator-有什么区别？" class="headerlink" title="10、Iterator 和 ListIterator 有什么区别？"></a>10、Iterator 和 ListIterator 有什么区别？</h2><ul><li>Iterator可用来遍历Set和List集合，但是ListIterator只能用来遍历List。 </li><li>Iterator对集合只能是前向遍历，ListIterator既可以前向也可以后向。 </li><li>ListIterator实现了Iterator接口，并包含其他的功能，比如：增加元素，替换元素，获取前一个和后一个元素的索引，等等。</li></ul><h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><h2 id="1、线程池中-submit-和-execute-方法有什么区别？"><a href="#1、线程池中-submit-和-execute-方法有什么区别？" class="headerlink" title="1、线程池中 submit()和 execute()方法有什么区别？"></a><strong>1、线程池中 submit()和 execute()方法有什么区别？</strong></h2><ul><li>接收的参数不一样</li><li>submit有返回值，而execute没有</li><li>submit方便Exception处理</li></ul><h2 id="2、在-java-程序中怎么保证多线程的运行安全？"><a href="#2、在-java-程序中怎么保证多线程的运行安全？" class="headerlink" title="2、在 java 程序中怎么保证多线程的运行安全？"></a>2、在 java 程序中怎么保证多线程的运行安全？</h2><p>线程安全在三个方面体现：</p><ul><li>原子性：提供互斥访问，同一时刻只能有一个线程对数据进行操作，（atomic,synchronized）</li><li>可见性：一个线程对主内存的修改可以及时地被其他线程看到，（synchronized,volatile）</li><li>有序性：一个线程观察其他线程中的指令执行顺序，由于指令重排序，该观察结果一般杂乱无序，（happens-before原则）</li></ul><h2 id="3、什么是死锁？"><a href="#3、什么是死锁？" class="headerlink" title="3、什么是死锁？"></a>3、什么是死锁？</h2><p>死锁是指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程。是操作系统层面的一个错误，是进程死锁的简称，最早在 1965 年由 Dijkstra 在研究银行家算法时提出的，它是计算机操作系统乃至整个并发程序设计领域最难处理的问题之一。</p><h3 id="怎么防止死锁？"><a href="#怎么防止死锁？" class="headerlink" title="怎么防止死锁？"></a><strong>怎么防止死锁？</strong></h3><p>死锁的四个必要条件：</p><ul><li>互斥条件：进程对所分配到的资源不允许其他进程进行访问，若其他进程访问该资源，只能等待，直至占有该资源的进程使用完成后释放该资源</li><li>请求和保持条件：进程获得一定的资源之后，又对其他资源发出请求，但是该资源可能被其他进程占有，此事请求阻塞，但又对自己获得的资源保持不放</li><li>不可剥夺条件：是指进程已获得的资源，在未完成使用之前，不可被剥夺，只能在使用完后自己释放</li><li>环路等待条件：是指进程发生死锁后，若干进程之间形成一种头尾相接的循环等待资源关系</li></ul><p>这四个条件是死锁的必要条件，只要系统发生死锁，这些条件必然成立，而只要上述条件之 一不满足，就不会发生死锁。</p><p>理解了死锁的原因，尤其是产生死锁的四个必要条件，就可以最大可能地避免、预防和 解除死锁。</p><p>所以，在系统设计、进程调度等方面注意如何不让这四个必要条件成立，如何确 定资源的合理分配算法，避免进程永久占据系统资源。</p><p>此外，也要防止进程在处于等待状态的情况下占用资源。因此，对资源的分配要给予合理的规划。</p><h2 id="4、synchronized-和-volatile-的区别是什么？"><a href="#4、synchronized-和-volatile-的区别是什么？" class="headerlink" title="4、synchronized 和 volatile 的区别是什么？"></a>4、synchronized 和 volatile 的区别是什么？</h2><ul><li>volatile本质是在告诉jvm当前变量在寄存器（工作内存）中的值是不确定的，需要从主存中读取； synchronized则是锁定当前变量，只有当前线程可以访问该变量，其他线程被阻塞住。</li><li>volatile仅能使用在变量级别；synchronized则可以使用在变量、方法、和类级别的。</li><li>volatile仅能实现变量的修改可见性，不能保证原子性；而synchronized则可以保证变量的修改可见性和原子性。</li><li>volatile不会造成线程的阻塞；synchronized可能会造成线程的阻塞。</li><li>volatile标记的变量不会被编译器优化；synchronized标记的变量可以被编译器优化。</li></ul><h2 id="5、synchronized-和-Lock-有什么区别？"><a href="#5、synchronized-和-Lock-有什么区别？" class="headerlink" title="5、synchronized 和 Lock 有什么区别？"></a>5、synchronized 和 Lock 有什么区别？</h2><ul><li>首先synchronized是java内置关键字，在jvm层面，Lock是个java类；</li><li>synchronized无法判断是否获取锁的状态，Lock可以判断是否获取到锁；</li><li>synchronized会自动释放锁(a 线程执行完同步代码会释放锁 ；b 线程执行过程中发生异常会释放锁)，Lock需在finally中手工释放锁（unlock()方法释放锁），否则容易造成线程死锁；</li><li>用synchronized关键字的两个线程1和线程2，如果当前线程1获得锁，线程2线程等待。如果线程1阻塞，线程2则会一直等待下去，而Lock锁就不一定会等待下去，如果尝试获取不到锁，线程可以不用一直等待就结束了；</li><li>synchronized的锁可重入、不可中断、非公平，而Lock锁可重入、可判断、可公平（两者皆可）；</li><li>Lock锁适合大量同步的代码的同步问题，synchronized锁适合代码少量的同步问题。</li></ul><h2 id="6、synchronized-和-ReentrantLock-区别是什么？"><a href="#6、synchronized-和-ReentrantLock-区别是什么？" class="headerlink" title="6、synchronized 和 ReentrantLock 区别是什么？"></a>6、synchronized 和 ReentrantLock 区别是什么？</h2><p>synchronized是和if、else、for、while一样的关键字，ReentrantLock是类，这是二者的本质区别。既然ReentrantLock是类，那么它就提供了比synchronized更多更灵活的特性，可以被继承、可以有方法、可以有各种各样的类变量，ReentrantLock比synchronized的扩展性体现在几点上： </p><ul><li>ReentrantLock可以对获取锁的等待时间进行设置，这样就避免了死锁 </li><li>ReentrantLock可以获取各种锁的信息</li><li>ReentrantLock可以灵活地实现多路通知</li></ul><p>另外，二者的锁机制其实也是不一样的：<strong>ReentrantLock底层调用的是Unsafe的park方法加锁，synchronized操作的应该是对象头中mark word</strong>。</p><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><h2 id="1、什么是反射？"><a href="#1、什么是反射？" class="headerlink" title="1、什么是反射？"></a>1、什么是反射？</h2><p>反射主要是指程序可以访问、检测和修改它本身状态或行为的一种能力</p><p>Java反射：</p><p>在Java运行时环境中，对于任意一个类，能否知道这个类有哪些属性和方法？对于任意一个对象，能否调用它的任意一个方法</p><p>Java反射机制主要提供了以下功能：</p><ul><li>在运行时判断任意一个对象所属的类。</li><li>在运行时构造任意一个类的对象。</li><li>在运行时判断任意一个类所具有的成员变量和方法。</li><li>在运行时调用任意一个对象的方法。</li></ul><h2 id="2、什么是-java-序列化？什么情况下需要序列化？"><a href="#2、什么是-java-序列化？什么情况下需要序列化？" class="headerlink" title="2、什么是 java 序列化？什么情况下需要序列化？"></a>2、什么是 java 序列化？什么情况下需要序列化？</h2><p>简单说就是为了保存在内存中的各种对象的状态（也就是实例变量，不是方法），并且可以把保存的对象状态再读出来。虽然你可以用你自己的各种各样的方法来保存object states，但是Java给你提供一种应该比你自己好的保存对象状态的机制，那就是序列化。</p><p>什么情况下需要序列化：</p><ol><li>当你想把的内存中的对象状态保存到一个文件中或者数据库中时候；</li><li>当你想用套接字在网络上传送对象的时候；</li><li>当你想通过RMI传输对象的时候；</li></ol><h2 id="3、动态代理是什么？有哪些应用？"><a href="#3、动态代理是什么？有哪些应用？" class="headerlink" title="3、动态代理是什么？有哪些应用？"></a>3、动态代理是什么？有哪些应用？</h2><p>动态代理：</p><p>当想要给实现了某个接口的类中的方法，加一些额外的处理。比如说加日志，加事务等。可以给这个类创建一个代理，故名思议就是创建一个新的类，这个类不仅包含原来类方法的功能，而且还在原来的基础上添加了额外处理的新类。这个代理类并不是定义好的，是动态生成的。具有解耦意义，灵活，扩展性强。</p><p>动态代理的应用：</p><ul><li>Spring的AOP</li><li>加事务</li><li>加权限</li><li>加日志</li></ul><h2 id="4、JDK和CGLIB动态代理原理"><a href="#4、JDK和CGLIB动态代理原理" class="headerlink" title="4、JDK和CGLIB动态代理原理"></a>4、JDK和CGLIB动态代理原理</h2><img src="/posts/1f03d757/108.png" class><h3 id="1、JDK动态代理"><a href="#1、JDK动态代理" class="headerlink" title="1、JDK动态代理"></a>1、JDK动态代理</h3><p>利用拦截器(拦截器必须实现InvocationHanlder)加上反射机制生成一个实现代理接口的匿名类，</p><p>在调用具体方法前调用InvokeHandler来处理。</p><h3 id="2、CGLIB动态代理"><a href="#2、CGLIB动态代理" class="headerlink" title="2、CGLIB动态代理"></a>2、CGLIB动态代理</h3><p>利用ASM开源包，对代理对象类的class文件加载进来，通过修改其字节码生成子类来处理。</p><h3 id="3、何时使用JDK还是CGLIB？"><a href="#3、何时使用JDK还是CGLIB？" class="headerlink" title="3、何时使用JDK还是CGLIB？"></a>3、何时使用JDK还是CGLIB？</h3><ol><li>如果目标对象实现了接口，默认情况下会采用JDK的动态代理实现AOP。</li><li>如果目标对象实现了接口，可以强制使用CGLIB实现AOP。</li><li>如果目标对象没有实现了接口，必须采用CGLIB库，Spring会自动在JDK动态代理和CGLIB之间转换。</li></ol><h3 id="4、如何强制使用CGLIB实现AOP？"><a href="#4、如何强制使用CGLIB实现AOP？" class="headerlink" title="4、如何强制使用CGLIB实现AOP？"></a>4、如何强制使用CGLIB实现AOP？</h3><ol><li>添加CGLIB库(aspectjrt-xxx.jar、aspectjweaver-xxx.jar、cglib-nodep-xxx.jar)</li><li>在Spring配置文件中加入&lt;aop:aspectj-autoproxy proxy-target-class&#x3D;”true”&#x2F;&gt;</li></ol><h3 id="5、JDK动态代理和CGLIB字节码生成的区别？"><a href="#5、JDK动态代理和CGLIB字节码生成的区别？" class="headerlink" title="5、JDK动态代理和CGLIB字节码生成的区别？"></a>5、JDK动态代理和CGLIB字节码生成的区别？</h3><ol><li>JDK动态代理只能对实现了接口的类生成代理，而不能针对类。</li><li>CGLIB是针对类实现代理，主要是对指定的类生成一个子类，覆盖其中的方法，并覆盖其中方法实现增强，但是因为采用的是继承，所以该类或方法最好不要声明成final，对于final类或方法，是无法继承的。</li></ol><h3 id="6、CGlib比JDK快？"><a href="#6、CGlib比JDK快？" class="headerlink" title="6、CGlib比JDK快？"></a>6、CGlib比JDK快？</h3><ol><li>使用CGLib实现动态代理，CGLib底层采用ASM字节码生成框架，使用字节码技术生成代理类，在jdk6之前比使用Java反射效率要高。唯一需要注意的是，CGLib不能对声明为final的方法进行代理，因为CGLib原理是动态生成被代理类的子类。</li><li>在jdk6、jdk7、jdk8逐步对JDK动态代理优化之后，在调用次数较少的情况下，JDK代理效率高于CGLIB代理效率，只有当进行大量调用的时候，jdk6和jdk7比CGLIB代理效率低一点，但是到jdk8的时候，jdk代理效率高于CGLIB代理，总之，每一次jdk版本升级，jdk代理效率都得到提升，而CGLIB代理消息确有点跟不上步伐。</li></ol><h3 id="7、Spring如何选择用JDK还是CGLIB？"><a href="#7、Spring如何选择用JDK还是CGLIB？" class="headerlink" title="7、Spring如何选择用JDK还是CGLIB？"></a>7、Spring如何选择用JDK还是CGLIB？</h3><ol><li>当Bean实现接口时，Spring就会用JDK的动态代理。</li><li>当Bean没有实现接口时，Spring使用CGlib是实现。</li><li>可以强制使用CGlib（在spring配置中加入&lt;aop:aspectj-autoproxy proxy-target-class&#x3D;”true”&#x2F;&gt;）。</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>JDK代理是不需要第三方库支持，只需要JDK环境就可以进行代理，使用条件:</p><ol><li><p>实现InvocationHandler </p></li><li><p>使用Proxy.newProxyInstance产生代理对象</p></li><li><p>被代理的对象必须要实现接口</p></li></ol><p>CGLib必须依赖于CGLib的类库，但是它需要类来实现任何接口代理的是指定的类生成一个子类，覆盖其中的方法，是一种继承但是针对接口编程的环境下推荐使用JDK的代理；</p><h2 id="5、深拷贝和浅拷贝区别是什么？"><a href="#5、深拷贝和浅拷贝区别是什么？" class="headerlink" title="5、深拷贝和浅拷贝区别是什么？"></a><strong>5、深拷贝和浅拷贝区别是什么？</strong></h2><ul><li>浅拷贝只是复制了对象的引用地址，两个对象指向同一个内存地址，所以修改其中任意的值，另一个值都会随之变化，这就是浅拷贝（例：assign()）</li><li>深拷贝是将对象及值复制过来，两个对象修改其中任意的值另一个值不会改变，这就是深拷贝（例：JSON.parse()和JSON.stringify()，但是此方法无法复制函数类型）</li></ul><h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a><strong>异常</strong></h1><h2 id="1、throw-和-throws-的区别？"><a href="#1、throw-和-throws-的区别？" class="headerlink" title="1、throw 和 throws 的区别？"></a><strong>1、throw 和 throws 的区别？</strong></h2><p>throws是用来声明一个方法可能抛出的所有异常信息，throws是将异常声明但是不处理，而是将异常往上传，谁调用我就交给谁处理。而throw则是指抛出的一个具体的异常类型。</p><h2 id="2、final、finally、finalize-有什么区别？"><a href="#2、final、finally、finalize-有什么区别？" class="headerlink" title="2、final、finally、finalize 有什么区别？"></a>2、final、finally、finalize 有什么区别？</h2><ul><li>final可以修饰类、变量、方法，修饰类表示该类不能被继承、修饰方法表示该方法不能被重写、修饰变量表示该变量是一个常量不能被重新赋值。</li><li>finally一般作用在try-catch代码块中，在处理异常的时候，通常我们将一定要执行的代码方法finally代码块中，表示不管是否出现异常，该代码块都会执行，一般用来存放一些关闭资源的代码。</li><li>finalize是一个方法，属于Object类的一个方法，而Object类是所有类的父类，该方法一般由垃圾回收器来调用，当我们调用System的gc()方法的时候，由垃圾回收器调用finalize(),回收垃圾</li></ul><h2 id="3、try-catch-finally-中哪个部分可以省略？"><a href="#3、try-catch-finally-中哪个部分可以省略？" class="headerlink" title="3、try-catch-finally 中哪个部分可以省略？"></a>3、try-catch-finally 中哪个部分可以省略？</h2><p>答：catch 可以省略</p><p>原因：更为严格的说法其实是：try只适合处理运行时异常，try+catch适合处理运行时异常+普通异常。也就是说，如果你只用try去处理普通异常却不加以catch处理，编译是通不过的，因为编译器硬性规定，普通异常如果选择捕获，则必须用catch显示声明以便进一步处理。而运行时异常在编译时没有如此规定，所以catch可以省略，你加上catch编译器也觉得无可厚非。</p><p>理论上，编译器看任何代码都不顺眼，都觉得可能有潜在的问题，所以你即使对所有代码加上try，代码在运行期时也只不过是在正常运行的基础上加一层皮。但是你一旦对一段代码加上try，就等于显示地承诺编译器，对这段代码可能抛出的异常进行捕获而非向上抛出处理。如果是普通异常，编译器要求必须用catch捕获以便进一步处理；如果运行时异常，捕获然后丢弃并且+finally扫尾处理，或者加上catch捕获以便进一步处理。</p><p>至于加上finally，则是在不管有没捕获异常，都要进行的“扫尾”处理。</p><h2 id="4、try-catch-finally-中，如果-catch-中-return-了，finally-还会执行吗？"><a href="#4、try-catch-finally-中，如果-catch-中-return-了，finally-还会执行吗？" class="headerlink" title="4、try-catch-finally 中，如果 catch 中 return 了，finally 还会执行吗？"></a><strong>4、try-catch-finally 中，如果 catch 中 return 了，finally 还会执行吗？</strong></h2><p>答：会执行，在 return 前执行。</p><h1 id="网络"><a href="#网络" class="headerlink" title="网络"></a><strong>网络</strong></h1><h2 id="1、http-响应码-301-和-302-代表的是什么？有什么区别？"><a href="#1、http-响应码-301-和-302-代表的是什么？有什么区别？" class="headerlink" title="1、http 响应码 301 和 302 代表的是什么？有什么区别？"></a>1、http 响应码 301 和 302 代表的是什么？有什么区别？</h2><p>答：301，302 都是HTTP状态的编码，都代表着某个URL发生了转移。</p><p>区别： </p><ul><li>301 redirect: 301 代表永久性转移(Permanently Moved)。</li><li>302 redirect: 302 代表暂时性转移(Temporarily Moved )。</li></ul><h2 id="2、简述-tcp-和-udp的区别？"><a href="#2、简述-tcp-和-udp的区别？" class="headerlink" title="2、简述 tcp 和 udp的区别？"></a>2、简述 tcp 和 udp的区别？</h2><ul><li>TCP面向连接（如打电话要先拨号建立连接）;UDP是无连接的，即发送数据之前不需要建立连接。</li><li>TCP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP尽最大努力交付，即不保证可靠交付。</li><li>TCP通过校验和，重传控制，序号标识，滑动窗口、确认应答实现可靠传输。如丢包时的重发控制，还可以对次序乱掉的分包进行顺序控制。</li><li>UDP具有较好的实时性，工作效率比TCP高，适用于对高速传输和实时性有较高的通信或广播通信。</li><li>每一条TCP连接只能是点到点的;UDP支持一对一，一对多，多对一和多对多的交互通信。</li><li>TCP对系统资源要求较多，UDP对系统资源要求较少。</li></ul><h2 id="3、tcp-为什么要三次握手，两次不行吗？为什么？"><a href="#3、tcp-为什么要三次握手，两次不行吗？为什么？" class="headerlink" title="3、tcp 为什么要三次握手，两次不行吗？为什么？"></a>3、tcp 为什么要三次握手，两次不行吗？为什么？</h2><p>为了实现可靠数据传输， TCP 协议的通信双方， 都必须维护一个序列号， 以标识发送出去的数据包中， 哪些是已经被对方收到的。 三次握手的过程即是通信双方相互告知序列号起始值， 并确认对方已经收到了序列号起始值的必经步骤。</p><p>如果只是两次握手， 至多只有连接发起方的起始序列号能被确认， 另一方选择的序列号则得不到确认。</p><h2 id="4、说一下-tcp-粘包是怎么产生的？"><a href="#4、说一下-tcp-粘包是怎么产生的？" class="headerlink" title="4、说一下 tcp 粘包是怎么产生的？"></a><strong>4、说一下 tcp 粘包是怎么产生的？</strong></h2><p>①. 发送方产生粘包</p><p>采用TCP协议传输数据的客户端与服务器经常是保持一个长连接的状态（一次连接发一次数据不存在粘包），双方在连接不断开的情况下，可以一直传输数据；但当发送的数据包过于的小时，那么TCP协议默认的会启用Nagle算法，将这些较小的数据包进行合并发送（缓冲区数据发送是一个堆压的过程）；这个合并过程就是在发送缓冲区中进行的，也就是说数据发送出来它已经是粘包的状态了。</p><img src="/posts/1f03d757/101.png" class><p>②. 接收方产生粘包</p><p>接收方采用TCP协议接收数据时的过程是这样的：数据到底接收方，从网络模型的下方传递至传输层，传输层的TCP协议处理是将其放置接收缓冲区，然后由应用层来主动获取（C语言用recv、read等函数）；这时会出现一个问题，就是我们在程序中调用的读取数据函数不能及时的把缓冲区中的数据拿出来，而下一个数据又到来并有一部分放入的缓冲区末尾，等我们读取数据时就是一个粘包。（放数据的速度 &gt; 应用层拿数据速度） </p><img src="/posts/1f03d757/102.png" class><h2 id="5、OSI-的七层模型都有哪些？"><a href="#5、OSI-的七层模型都有哪些？" class="headerlink" title="5、OSI 的七层模型都有哪些？"></a>5、OSI 的七层模型都有哪些？</h2><ul><li>应用层：网络服务与最终用户的一个接口。</li><li>表示层：数据的表示、安全、压缩。</li><li>会话层：建立、管理、终止会话。</li><li>传输层：定义传输数据的协议端口号，以及流控和差错校验。</li><li>网络层：进行逻辑地址寻址，实现不同网络之间的路径选择。</li><li>数据链路层：建立逻辑连接、进行硬件地址寻址、差错校验等功能。</li><li>物理层：建立、维护、断开物理连接。</li></ul><h2 id="6、get-和-post-请求有哪些区别？"><a href="#6、get-和-post-请求有哪些区别？" class="headerlink" title="6、get 和 post 请求有哪些区别？"></a>6、get 和 post 请求有哪些区别？</h2><ul><li>GET在浏览器回退时是无害的，而POST会再次提交请求。</li><li>GET产生的URL地址可以被Bookmark，而POST不可以。</li><li>GET请求会被浏览器主动cache，而POST不会，除非手动设置。</li><li>GET请求只能进行url编码，而POST支持多种编码方式。</li><li>GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。</li><li>GET请求在URL中传送的参数是有长度限制的，而POST没有。</li><li>对参数的数据类型，GET只接受ASCII字符，而POST没有限制。</li><li>GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。</li><li>GET参数通过URL传递，POST放在Request body中。</li></ul><h2 id="7、说一下-JSONP-实现原理？"><a href="#7、说一下-JSONP-实现原理？" class="headerlink" title="7、说一下 JSONP 实现原理？"></a><strong>7、说一下 JSONP 实现原理？</strong></h2><p>jsonp 即 json+padding，动态创建script标签，利用script标签的src属性可以获取任何域下的js脚本，通过这个特性(也可以说漏洞)，服务器端不在返货json格式，而是返回一段调用某个函数的js代码，在src中进行了调用，这样实现了跨域。</p><h2 id="8、如何实现跨域？"><a href="#8、如何实现跨域？" class="headerlink" title="8、如何实现跨域？"></a><strong>8、如何实现跨域？</strong></h2><ul><li><p><strong>方式一：图片ping或script标签跨域</strong></p><p><strong>图片ping</strong>常用于跟踪用户点击页面或动态广告曝光次数。<br><strong>script标签</strong>可以得到从其他来源数据，这也是JSONP依赖的根据。 </p></li><li><p><strong>方式二：JSONP跨域</strong></p><p>JSONP（JSON with Padding）是数据格式JSON的一种“使用模式”，可以让网页从别的网域要数据。根据 XmlHttpRequest 对象受到同源策略的影响，而利用 <code>&lt;script&gt;</code>元素的这个开放策略，网页可以得到从其他来源动态产生的JSON数据，而这种使用模式就是所谓的 JSONP。用JSONP抓到的数据并不是JSON，而是任意的JavaScript，用 JavaScript解释器运行而不是用JSON解析器解析。所有，通过Chrome查看所有JSONP发送的Get请求都是js类型，而非XHR。</p></li><li><p><strong>方式三：CORS</strong></p><p>Cross-Origin Resource Sharing（CORS）跨域资源共享是一份浏览器技术的规范，提供了 Web 服务从不同域传来沙盒脚本的方法，以避开浏览器的同源策略，确保安全的跨域数据传输。现代浏览器使用CORS在API容器如XMLHttpRequest来减少HTTP请求的风险来源。与 JSONP 不同，CORS 除了 GET 要求方法以外也支持其他的 HTTP 要求。服务器一般需要增加如下响应头的一种或几种：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot;Access-Control-Allow-Credentials&quot;</span>: <span class="hljs-literal">true</span><br><span class="hljs-comment">// Ajax设置</span><br><span class="hljs-string">&quot;withCredentials&quot;</span>: <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li><li><p><strong>方式四：window.name+iframe</strong></p><p>window.name通过在iframe（一般动态创建i）中加载跨域HTML文件来起作用。然后，HTML文件将传递给请求者的字符串内容赋值给window.name。然后，请求者可以检索window.name值作为响应。</p><ul><li>iframe标签的跨域能力；</li><li>window.name属性值在文档刷新后依旧存在的能力（且最大允许2M左右）。</li></ul><p>每个iframe都有包裹它的window，而这个window是top window的子窗口。contentWindow属性返回<iframe>元素的Window对象。你可以使用这个Window对象来访问iframe的文档及其内部DOM。</iframe></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!-- <br> 下述用端口 <br> <span class="hljs-number">10000</span>表示：domainA<br> <span class="hljs-number">10001</span>表示：domainB<br>--&gt;<br> <br>&lt;!-- <span class="hljs-attr">localhost</span>:<span class="hljs-number">10000</span> --&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">var</span> iframe = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;iframe&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">  iframe.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;none&#x27;</span>; <span class="hljs-comment">// 隐藏</span></span></span><br><span class="language-javascript"><span class="language-xml"> </span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">var</span> state = <span class="hljs-number">0</span>; <span class="hljs-comment">// 防止页面无限刷新</span></span></span><br><span class="language-javascript"><span class="language-xml">  iframe.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">if</span>(state === <span class="hljs-number">1</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(iframe.<span class="hljs-property">contentWindow</span>.<span class="hljs-property">name</span>));</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-comment">// 清除创建的iframe</span></span></span><br><span class="language-javascript"><span class="language-xml">          iframe.<span class="hljs-property">contentWindow</span>.<span class="hljs-property">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">          iframe.<span class="hljs-property">contentWindow</span>.<span class="hljs-title function_">close</span>();</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">removeChild</span>(iframe);</span></span><br><span class="language-javascript"><span class="language-xml">      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(state === <span class="hljs-number">0</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          state = <span class="hljs-number">1</span>;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-comment">// 加载完成，指向当前域，防止错误(proxy.html为空白页面)</span></span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-comment">// Blocked a frame with origin &quot;http://localhost:10000&quot; from accessing a cross-origin frame.</span></span></span><br><span class="language-javascript"><span class="language-xml">          iframe.<span class="hljs-property">contentWindow</span>.<span class="hljs-property">location</span> = <span class="hljs-string">&#x27;http://localhost:10000/proxy.html&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;;</span></span><br><span class="language-javascript"><span class="language-xml"> </span></span><br><span class="language-javascript"><span class="language-xml">  iframe.<span class="hljs-property">src</span> = <span class="hljs-string">&#x27;http://localhost:10001&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(iframe);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br> <br>&lt;!-- <span class="hljs-attr">localhost</span>:<span class="hljs-number">10001</span> --&gt;<br>&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br>...<br>&lt;script&gt;<br>  <span class="hljs-variable language_">window</span>.<span class="hljs-property">name</span> = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(&#123;<span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>&#125;);<br>&lt;/script&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure></li></ul><p><strong>方式五：window.postMessage()</strong></p><p>HTML5新特性，可以用来向其他所有的 window 对象发送消息。需要注意的是我们必须要保证所有的脚本执行完才发送 MessageEvent，如果在函数执行的过程中调用了它，就会让后面的函数超时无法执行。</p><p><strong>方式六：修改document.domain跨子域</strong></p><p>前提条件：这两个域名必须属于同一个基础域名!而且所用的协议，端口都要一致，否则无法利用document.domain进行跨域，所以只能跨子域</p><p>在根域范围内，允许把domain属性的值设置为它的上一级域。例如，在”aaa.xxx.com”域内，可以把domain设置为 “xxx.com” 但不能设置为 “xxx.org” 或者”com”。</p><p><strong>方式七：WebSocket</strong></p><p>WebSocket protocol 是HTML5一种新的协议。它实现了浏览器与服务器全双工通信，同时允许跨域通讯，是server push技术的一种很棒的实现。</p><p>需要注意：WebSocket对象不支持DOM 2级事件侦听器，必须使用DOM 0级语法分别定义各个事件。</p><p><strong>方式八：代理</strong></p><p>同源策略是针对浏览器端进行的限制，可以通过服务器端来解决该问题</p><p>DomainA客户端（浏览器） &#x3D;&#x3D;&gt; DomainA服务器 &#x3D;&#x3D;&gt; DomainB服务器 &#x3D;&#x3D;&gt; DomainA客户端（浏览器）</p><h1 id="Spring-x2F-Spring-MVC"><a href="#Spring-x2F-Spring-MVC" class="headerlink" title="Spring &#x2F; Spring MVC"></a><strong>Spring &#x2F; Spring MVC</strong></h1><h2 id="1、解释一下什么是-ioc？"><a href="#1、解释一下什么是-ioc？" class="headerlink" title="1、解释一下什么是 ioc？"></a><strong>1、解释一下什么是 ioc？</strong></h2><p>IoC（Inverse of Control:控制反转）是一种<strong>设计思想</strong>，就是 <strong>将原本在程序中手动创建对象的控制权，交由Spring框架来管理。</strong>  IoC 在其他语言中也有应用，并非 Spring 特有。 <strong>IoC 容器是 Spring 用来实现 IoC 的载体，IoC 容器实际上就是个Map（key，value）,Map 中存放的是各种对象。</strong></p><p>将对象之间的相互依赖关系交给 IOC 容器来管理，并由 IOC 容器完成对象的注入。这样可以很大程度上简化应用的开发，把应用从复杂的依赖关系中解放出来。  <strong>IOC 容器就像是一个工厂一样，当我们需要创建一个对象的时候，只需要配置好配置文件&#x2F;注解即可，完全不用考虑对象是如何被创建出来的。</strong> 在实际项目中一个 Service 类可能有几百甚至上千个类作为它的底层，假如我们需要实例化这个 Service，你可能要每次都要搞清这个 Service 所有底层类的构造函数，这可能会把人逼疯。如果利用 IOC 的话，你只需要配置好，然后在需要的地方引用就行了，这大大增加了项目的可维护性且降低了开发难度。</p><p>Spring 时代我们一般通过 XML 文件来配置 Bean，后来开发人员觉得 XML 文件来配置不太好，于是 SpringBoot 注解配置就慢慢开始流行起来。</p><p><strong>Spring IOC的初始化过程：</strong></p><img src="/posts/1f03d757/107.png" class alt="Spring IOC的初始化过程"><p>IOC理论提出的观点大体是这样的：借助于“第三方”实现具有依赖关系的对象之间的解耦。如下图：</p><img src="/posts/1f03d757/103.png" class><p>大家看到了吧，由于引进了中间位置的“第三方”，也就是IOC容器，使得A、B、C、D这4个对象没有了耦合关系，齿轮之间的传动全部依靠“第三方”了，全部对象的控制权全部上缴给“第三方”IOC容器，所以，IOC容器成了整个系统的关键核心，它起到了一种类似“粘合剂”的作用，把系统中的所有对象粘合在一起发挥作用，如果没有这个“粘合剂”，对象与对象之间会彼此失去联系，这就是有人把IOC容器比喻成“粘合剂”的由来。</p><h2 id="2、spring-有哪些主要模块？"><a href="#2、spring-有哪些主要模块？" class="headerlink" title="2、spring 有哪些主要模块？"></a><strong>2、spring 有哪些主要模块？</strong></h2><p>Spring框架至今已集成了20多个模块。这些模块主要被分如下图所示的核心容器、数据访问&#x2F;集成、Web、AOP（面向切面编程）、工具、消息和测试模块。</p><img src="/posts/1f03d757/105.png" style="zoom:80%;"><h2 id="3、spring-常用的注入方式有哪些？"><a href="#3、spring-常用的注入方式有哪些？" class="headerlink" title="3、spring 常用的注入方式有哪些？"></a><strong>3、spring 常用的注入方式有哪些？</strong></h2><p>Spring通过DI（依赖注入）实现IOC（控制反转），常用的注入方式主要有三种：</p><ol><li>构造方法注入</li><li>setter注入</li><li>基于注解的注入</li></ol><h2 id="4、spring-支持几种-bean-的作用域？"><a href="#4、spring-支持几种-bean-的作用域？" class="headerlink" title="4、spring 支持几种 bean 的作用域？"></a>4、spring 支持几种 bean 的作用域？</h2><p>当通过spring容器创建一个Bean实例时，不仅可以完成Bean实例的实例化，还可以为Bean指定特定的作用域。Spring支持如下5种作用域：</p><ul><li>singleton：单例模式，在整个Spring IoC容器中，使用singleton定义的Bean将只有一个实例</li><li>prototype：原型模式，每次通过容器的getBean方法获取prototype定义的Bean时，都将产生一个新的Bean实例</li><li>request：对于每次HTTP请求，使用request定义的Bean都将产生一个新实例，即每次HTTP请求将会产生不同的Bean实例。只有在Web应用中使用Spring时，该作用域才有效</li><li>session：对于每次HTTP Session，使用session定义的Bean都将产生一个新实例。同样只有在Web应用中使用Spring时，该作用域才有效</li><li>globalsession：每个全局的HTTP Session，使用session定义的Bean都将产生一个新实例。典型情况下，仅在使用portlet context的时候有效。同样只有在Web应用中使用Spring时，该作用域才有效</li></ul><p>其中比较常用的是singleton和prototype两种作用域。对于singleton作用域的Bean，每次请求该Bean都将获得相同的实例。容器负责跟踪Bean实例的状态，负责维护Bean实例的生命周期行为；如果一个Bean被设置成prototype作用域，程序每次请求该id的Bean，Spring都会新建一个Bean实例，然后返回给程序。在这种情况下，Spring容器仅仅使用new 关键字创建Bean实例，一旦创建成功，容器不在跟踪实例，也不会维护Bean实例的状态。</p><p>如果不指定Bean的作用域，Spring默认使用singleton作用域。Java在创建Java实例时，需要进行内存申请；销毁实例时，需要完成垃圾回收，这些工作都会导致系统开销的增加。因此，prototype作用域Bean的创建、销毁代价比较大。而singleton作用域的Bean实例一旦创建成功，可以重复使用。因此，除非必要，否则尽量避免将Bean被设置成prototype作用域。</p><h2 id="5、Spring-中的单例-bean-的线程安全问题了解吗？"><a href="#5、Spring-中的单例-bean-的线程安全问题了解吗？" class="headerlink" title="5、Spring 中的单例 bean 的线程安全问题了解吗？"></a>5、Spring 中的单例 bean 的线程安全问题了解吗？</h2><p>大部分时候我们并没有在系统中使用多线程，所以很少有人会关注这个问题。单例 bean 存在线程问题，主要是因为当多个线程操作同一个对象的时候，对这个对象的非静态成员变量的写操作会存在线程安全问题。</p><p>常见的有两种解决办法：</p><ol><li>在Bean对象中尽量避免定义可变的成员变量（不太现实）。</li><li>在类中定义一个ThreadLocal成员变量，将需要的可变成员变量保存在 ThreadLocal 中（推荐的一种方式）。</li></ol><h2 id="6、说一下-spring-的事务隔离级别？"><a href="#6、说一下-spring-的事务隔离级别？" class="headerlink" title="6、说一下 spring 的事务隔离级别？"></a><strong>6、说一下 spring 的事务隔离级别？</strong></h2><p>事务隔离级别指的是一个事务对数据的修改与另一个并行的事务的隔离程度，当多个事务同时访问相同数据时，如果没有采取必要的隔离机制，就可能发生以下问题：</p><ul><li>脏读：一个事务读到另一个事务未提交的更新数据。</li><li>幻读：例如第一个事务对一个表中的数据进行了修改，比如这种修改涉及到表中的“全部数据行”。同时，第二个事务也修改这个表中的数据，这种修改是向表中插入“一行新数据”。那么，以后就会发生操作第一个事务的用户发现表中还存在没有修改的数据行，就好象发生了幻觉一样。</li><li>不可重复读：比方说在同一个事务中先后执行两条一模一样的select语句，期间在此次事务中没有执行过任何DDL语句，但先后得到的结果不一致，这就是不可重复读。</li></ul><h2 id="7、Spring-事务中的隔离级别有哪几种"><a href="#7、Spring-事务中的隔离级别有哪几种" class="headerlink" title="7、Spring 事务中的隔离级别有哪几种?"></a>7、Spring 事务中的隔离级别有哪几种?</h2><p><strong>TransactionDefinition 接口中定义了五个表示隔离级别的常量：</strong></p><ul><li><strong>TransactionDefinition.ISOLATION_DEFAULT:</strong><br>使用后端数据库默认的隔离级别，Mysql 默认采用的 REPEATABLE_READ隔离级别 Oracle 默认采用的 READ_COMMITTED隔离级别.</li><li><strong>TransactionDefinition.ISOLATION_READ_UNCOMMITTED:</strong><br>最低的隔离级别，允许读取尚未提交的数据变更，<strong>可能会导致脏读、幻读或不可重复读</strong></li><li><strong>TransactionDefinition.ISOLATION_READ_COMMITTED:</strong><br>允许读取并发事务已经提交的数据，<strong>可以阻止脏读，但是幻读或不可重复读仍有可能发生</strong></li><li><strong>TransactionDefinition.ISOLATION_REPEATABLE_READ:</strong><br>对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，<strong>可以阻止脏读和不可重复读，但幻读仍有可能发生。</strong></li><li><strong>TransactionDefinition.ISOLATION_SERIALIZABLE:</strong><br>最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，<strong>该级别可以防止脏读、不可重复读以及幻读</strong>。但是这将严重影响程序的性能。通常情况下也不会用到该级别。</li></ul><h2 id="8、Spring-事务中哪七种事务传播行为"><a href="#8、Spring-事务中哪七种事务传播行为" class="headerlink" title="8、Spring 事务中哪七种事务传播行为?"></a>8、Spring 事务中哪七种事务传播行为?</h2><p><strong>支持当前事务的情况：</strong></p><ul><li><strong>TransactionDefinition.PROPAGATION_REQUIRED：</strong> 如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。</li><li><strong>TransactionDefinition.PROPAGATION_SUPPORTS：</strong> 如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。</li><li><strong>TransactionDefinition.PROPAGATION_MANDATORY：</strong> 如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。（mandatory：强制性）</li></ul><p><strong>不支持当前事务的情况：</strong></p><ul><li><strong>TransactionDefinition.PROPAGATION_REQUIRES_NEW：</strong> 创建一个新的事务，如果当前存在事务，则把当前事务挂起。</li><li><strong>TransactionDefinition.PROPAGATION_NOT_SUPPORTED：</strong> 以非事务方式运行，如果当前存在事务，则把当前事务挂起。</li><li><strong>TransactionDefinition.PROPAGATION_NEVER：</strong> 以非事务方式运行，如果当前存在事务，则抛出异常。</li></ul><p><strong>其他情况：</strong></p><ul><li><strong>TransactionDefinition.PROPAGATION_NESTED：</strong> 如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于TransactionDefinition.PROPAGATION_REQUIRED。</li></ul><h2 id="9、说一下-spring-mvc-运行流程？"><a href="#9、说一下-spring-mvc-运行流程？" class="headerlink" title="9、说一下 spring mvc 运行流程？"></a><strong>9、说一下 spring mvc 运行流程？</strong></h2><p><strong>Spring MVC运行流程图：</strong></p><img src="/posts/1f03d757/106.png" class><p>Spring运行流程描述：</p><ol><li><p>用户向服务器发送请求，请求被Spring前端控制Servlet DispatcherServlet捕获；</p></li><li><p>DispatcherServlet对请求URL进行解析，得到请求资源标识符（URI）。然后根据该URI，调用HandlerMapping获得该Handler配置的所有相关的对象（包括Handler对象以及Handler对象对应的拦截器），最后以HandlerExecutionChain对象的形式返回；</p></li><li><p>DispatcherServlet 根据获得的Handler，选择一个合适的HandlerAdapter；（附注：如果成功获得HandlerAdapter后，此时将开始执行拦截器的preHandler(…)方法）</p></li><li><p>提取Request中的模型数据，填充Handler入参，开始执行Handler（Controller)。 在填充Handler的入参过程中，根据你的配置，Spring将帮你做一些额外的工作：</p><ul><li><p>HttpMessageConveter： 将请求消息（如Json、xml等数据）转换成一个对象，将对象转换为指定的响应信息</p></li><li><p>数据转换：对请求消息进行数据转换。如String转换成Integer、Double等</p></li><li><p>数据格式化：对请求消息进行数据格式化。 如将字符串转换成格式化数字或格式化日期等</p></li><li><p>数据验证： 验证数据的有效性（长度、格式等），验证结果存储到BindingResult或Error中</p></li></ul></li><li><p>Handler执行完成后，向DispatcherServlet返回一个ModelAndView对象；</p></li><li><p>根据返回的ModelAndView，选择一个适合的ViewResolver（必须是已经注册到Spring容器中的ViewResolver)返回给DispatcherServlet ；</p></li><li><p>ViewResolver结合Model和View，来渲染视图；</p></li><li><p>将渲染结果返回给客户端。</p></li></ol><h2 id="10、spring-mvc-有哪些组件？"><a href="#10、spring-mvc-有哪些组件？" class="headerlink" title="10、spring mvc 有哪些组件？"></a>10、spring mvc 有哪些组件？</h2><p>Spring MVC的核心组件：</p><ol><li>DispatcherServlet：中央控制器，把请求给转发到具体的控制类</li><li>Controller：具体处理请求的控制器</li><li>HandlerMapping：映射处理器，负责映射中央处理器转发给controller时的映射策略</li><li>ModelAndView：服务层返回的数据和视图层的封装类</li><li>ViewResolver：视图解析器，解析具体的视图</li><li>Interceptors ：拦截器，负责拦截我们定义的请求然后做处理工作</li></ol><h2 id="11、Spring-AOP-和-AspectJ-AOP-有什么区别？"><a href="#11、Spring-AOP-和-AspectJ-AOP-有什么区别？" class="headerlink" title="11、Spring AOP 和 AspectJ AOP 有什么区别？"></a>11、Spring AOP 和 AspectJ AOP 有什么区别？</h2><p><strong>Spring AOP 属于运行时增强，而 AspectJ 是编译时增强。</strong> Spring AOP 基于代理(Proxying)，而 AspectJ 基于字节码操作(Bytecode Manipulation)。</p><p>Spring AOP 已经集成了 AspectJ ，AspectJ 应该算的上是 Java 生态系统中最完整的 AOP 框架了。AspectJ 相比于 Spring AOP 功能更加强大，但是 Spring AOP 相对来说更简单，</p><p>如果我们的切面比较少，那么两者性能差异不大。但是，当切面太多的话，最好选择 AspectJ，它比Spring AOP 快很多。</p><h2 id="12、Spring-中的-bean-生命周期"><a href="#12、Spring-中的-bean-生命周期" class="headerlink" title="12、Spring 中的 bean 生命周期?"></a>12、Spring 中的 bean 生命周期?</h2><p><strong>中文版本图</strong></p><img src="/posts/1f03d757/110.jpg" class><p><strong>英文版本图</strong></p><img src="/posts/1f03d757/111.jpg" style="zoom:80%;"><ul><li><p>Bean 容器找到配置文件中 Spring Bean 的定义。</p><p>Bean 容器利用 Java Reflection API 创建一个Bean的实例。</p></li><li><p>如果涉及到一些属性值 利用 <code>set()</code>方法设置一些属性值。</p></li><li><p>如果 Bean 实现了 <code>BeanNameAware</code> 接口，调用 <code>setBeanName()</code>方法，传入Bean的名字。</p><p>如果 Bean 实现了 <code>BeanClassLoaderAware</code> 接口，调用 <code>setBeanClassLoader()</code>方法，传入 <code>ClassLoader</code>对象的实例。</p><p>如果Bean实现了 <code>BeanFactoryAware</code> 接口，调用 <code>setBeanClassLoader()</code>方法，传入 <code>ClassLoader</code> 对象的实例。</p><p>与上面的类似，如果实现了其他 <code>*.Aware</code>接口，就调用相应的方法。</p></li><li><p>如果有和加载这个 Bean 的 Spring 容器相关的 <code>BeanPostProcessor</code> 对象，执行<code>postProcessBeforeInitialization()</code> 方法</p></li><li><p>如果Bean实现了<code>InitializingBean</code>接口，执行<code>afterPropertiesSet()</code>方法。</p></li><li><p>如果 Bean 在配置文件中的定义包含  init-method 属性，执行指定的方法。</p></li><li><p>如果有和加载这个 Bean的 Spring 容器相关的 <code>BeanPostProcessor</code> 对象，执行<code>postProcessAfterInitialization()</code> 方法</p></li><li><p>当要销毁 Bean 的时候，如果 Bean 实现了 <code>DisposableBean</code> 接口，执行 <code>destroy()</code> 方法。</p><p>当要销毁 Bean 的时候，如果 Bean 在配置文件中的定义包含 destroy-method 属性，执行指定的方法。</p></li></ul><h2 id="13、-Component-和-Bean-的区别是什么？"><a href="#13、-Component-和-Bean-的区别是什么？" class="headerlink" title="13、@Component 和 @Bean 的区别是什么？"></a>13、@Component 和 @Bean 的区别是什么？</h2><ol><li>作用对象不同: <code>@Component</code> 注解作用于类，而<code>@Bean</code>注解作用于方法。</li><li><code>@Component</code>通常是通过类路径扫描来自动侦测以及自动装配到Spring容器中（我们可以使用 <code>@ComponentScan</code> 注解定义要扫描的路径从中找出标识了需要装配的类自动装配到 Spring 的 bean 容器中）。<code>@Bean</code> 注解通常是我们在标有该注解的方法中定义产生这个 bean,<code>@Bean</code>告诉了Spring这是某个类的示例，当我需要用它的时候还给我。</li><li><code>@Bean</code> 注解比 <code>Component</code> 注解的自定义性更强，而且很多地方我们只能通过 <code>@Bean</code> 注解来注册bean。比如当我们引用第三方库中的类需要装配到 <code>Spring</code>容器时，则只能通过 <code>@Bean</code>来实现。</li></ol><h2 id="14、将一个类声明为Spring的-bean-的注解有哪些"><a href="#14、将一个类声明为Spring的-bean-的注解有哪些" class="headerlink" title="14、将一个类声明为Spring的 bean 的注解有哪些?"></a>14、将一个类声明为Spring的 bean 的注解有哪些?</h2><p>我们一般使用 <code>@Autowired</code> 注解自动装配 bean，要想把类标识成可用于 <code>@Autowired</code> 注解自动装配的 bean 的类,采用以下注解可实现：</p><ul><li><code>@Component</code> ：通用的注解，可标注任意类为 <code>Spring</code> 组件。如果一个Bean不知道属于拿个层，可以使用<code>@Component</code> 注解标注。</li><li><code>@Repository</code> : 对应持久层即 Dao 层，主要用于数据库相关操作。</li><li><code>@Service</code> : 对应服务层，主要涉及一些复杂的逻辑，需要用到 Dao层。</li><li><code>@Controller</code> : 对应 Spring MVC 控制层，主要用户接受用户请求并调用 Service 层返回数据给前端页面。</li></ul><h2 id="15、区分-BeanFactory-和-ApplicationContext"><a href="#15、区分-BeanFactory-和-ApplicationContext" class="headerlink" title="15、区分 BeanFactory 和 ApplicationContext"></a>15、区分 BeanFactory 和 ApplicationContext</h2><h2 id="16、-Required-注解有什么用？"><a href="#16、-Required-注解有什么用？" class="headerlink" title="16、@Required 注解有什么用？"></a>16、@Required 注解有什么用？</h2><p>@Required 应用于 bean 属性 setter 方法。此注解仅指示必须在配置时使用bean 定义中的显式属性值或使用自动装配填充受影响的 bean 属性。如果尚未填充受影响的 bean 属性，则容器将抛出 BeanInitializationException。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> &#123;<br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-meta">@Required</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span>&#123;<br><span class="hljs-built_in">this</span>.name=name;<br>&#125;<br><span class="hljs-keyword">public</span> string <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> name;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="17、-Autowired-注解有什么用？"><a href="#17、-Autowired-注解有什么用？" class="headerlink" title="17、@Autowired 注解有什么用？"></a>17、@Autowired 注解有什么用？</h2><p>@Autowired 可以更准确地控制应该在何处以及如何进行自动装配。此注解用于在 setter 方法，构造函数，具有任意名称或多个参数的属性或方法上自动装配bean。默认情况下，它是类型驱动的注入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> &#123;<br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br><span class="hljs-built_in">this</span>.name=name;<br>&#125;<br><span class="hljs-keyword">public</span> string <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> name;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="18、-Qualifier-注解有什么用？"><a href="#18、-Qualifier-注解有什么用？" class="headerlink" title="18、@Qualifier 注解有什么用？"></a>18、@Qualifier 注解有什么用？</h2><p>当您创建多个相同类型的 bean 并希望仅使用属性装配其中一个 bean 时，您可以使用@Qualifier 注解和 @Autowired 通过指定应该装配哪个确切的 bean来消除歧义。 例如，这里我们分别有两个类，Employee 和 EmpAccount。在 EmpAccount中，使用@Qualifier 指定了必须装配 id 为 emp1 的 bean。 </p><p>Employee.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> &#123;<br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br><span class="hljs-built_in">this</span>.name=name;<br>&#125;<br><span class="hljs-keyword">public</span> string <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> name;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>EmpAccount.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpAccount</span> &#123;<br><span class="hljs-keyword">private</span> Employee emp;<br>    <br><span class="hljs-meta">@Autowired</span><br><span class="hljs-meta">@Qualifier(emp1)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showName</span><span class="hljs-params">()</span> &#123;<br>System.out.println(“Employee name : ”+emp.getName);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="19、列举-Spring-DAO-抛出的异常。"><a href="#19、列举-Spring-DAO-抛出的异常。" class="headerlink" title="19、列举 Spring DAO 抛出的异常。"></a>19、列举 Spring DAO 抛出的异常。</h2><img src="/posts/1f03d757/194.jpg" style="zoom:150%;"><h2 id="20、spring-JDBC-API-中存在哪些类？"><a href="#20、spring-JDBC-API-中存在哪些类？" class="headerlink" title="20、spring JDBC API 中存在哪些类？"></a>20、spring JDBC API 中存在哪些类？</h2><ul><li><code>JdbcTemplate</code> </li><li><code>SimpleJdbcTemplate</code> </li><li><code>NamedParameterJdbcTemplate</code> </li><li><code>SimpleJdbcInsert</code> </li><li><code>SimpleJdbcCall</code></li></ul><h2 id="21、列举-spring-支持的事务管理类型"><a href="#21、列举-spring-支持的事务管理类型" class="headerlink" title="21、列举 spring 支持的事务管理类型"></a>21、列举 spring 支持的事务管理类型</h2><p>Spring 支持两种类型的事务管理：</p><ul><li>程序化事务管理：在此过程中，在编程的帮助下管理事务。它为您提供极大的灵活性，但维护起来非常困难。</li><li>声明式事务管理：在此，事务管理与业务代码分离。仅使用注解或基于 XML的配置来管理事务。</li></ul><h2 id="22、spring-支持哪些-ORM-框架"><a href="#22、spring-支持哪些-ORM-框架" class="headerlink" title="22、spring 支持哪些 ORM 框架"></a>22、spring 支持哪些 ORM 框架</h2><ul><li>Hibernate</li><li>iBatis </li><li>JPA</li><li>JDO </li><li>OJB</li></ul><h2 id="23、指出在-spring-aop-中-concern-和-cross-cuttingconcern-的不同之处。"><a href="#23、指出在-spring-aop-中-concern-和-cross-cuttingconcern-的不同之处。" class="headerlink" title="23、指出在 spring aop 中 concern 和 cross-cuttingconcern 的不同之处。"></a>23、指出在 spring aop 中 concern 和 cross-cuttingconcern 的不同之处。</h2><p>concern 是我们想要在应用程序的特定模块中定义的行为。它可以定义为我们想要实现的功能。</p><p>cross-cutting concern 是一个适用于整个应用的行为，这会影响整个应用程序。例如，日志记录，安全性和数据传输是应用程序几乎每个模块都需要关注的问题，因此它们是跨领域的问题。</p><h2 id="24、AOP-有哪些实现方式？"><a href="#24、AOP-有哪些实现方式？" class="headerlink" title="24、AOP 有哪些实现方式？"></a>24、AOP 有哪些实现方式？</h2><p>实现 AOP 的技术，主要分为两大类：</p><p>静态代理 指使用 AOP 框架提供的命令进行编译，从而在编译阶段就可生成 AOP 代理类，因此也称为编译时增强；</p><ul><li>编译时编织（特殊编译器实现）</li><li>类加载时编织（特殊的类加载器实现）。</li></ul><p>动态代理 在运行时在内存中“临时”生成 AOP 动态代理类，因此也被称为运行时增强。</p><ul><li>JDK 动态代理 </li><li>CGLIB</li></ul><h2 id="25、如何理解-Spring-中的代理？"><a href="#25、如何理解-Spring-中的代理？" class="headerlink" title="25、如何理解 Spring 中的代理？"></a>25、如何理解 Spring 中的代理？</h2><p>将 Advice 应用于目标对象后创建的对象称为代理。在客户端对象的情况下，目标对象和代理对象是相同的。 Advice + Target Object &#x3D; Proxy</p><h2 id="26、介绍一下-WebApplicationContext"><a href="#26、介绍一下-WebApplicationContext" class="headerlink" title="26、介绍一下 WebApplicationContext"></a>26、介绍一下 WebApplicationContext</h2><p>WebApplicationContext 是 ApplicationContext 的扩展。它具有 Web 应用程序所需的一些额外功能。它与普通的 ApplicationContext 在解析主题和决定与哪个 servlet 关联的能力方面有所不同。</p><h2 id="27、Bean-工厂和-Application-contexts-有什么区别？"><a href="#27、Bean-工厂和-Application-contexts-有什么区别？" class="headerlink" title="27、Bean 工厂和 Application contexts 有什么区别？"></a>27、Bean 工厂和 Application contexts 有什么区别？</h2><p>Application contexts 提供一种方法处理文本消息，一个通常的做法是加载文件资源（比如镜像），它们可以向注册为监听器的 bean 发布事件。另外，在容器或容器内的对象上执行的那些不得不由 bean 工厂以程序化方式处理的操作，可以在Application contexts 中以声明的方式处理。</p><p>Application contexts 实现了 MessageSource 接口，该接口的实现以可插拔的方式提供获取本地化消息的方法。</p><h2 id="28、自动装配有哪些局限性"><a href="#28、自动装配有哪些局限性" class="headerlink" title="28、自动装配有哪些局限性 ?"></a>28、自动装配有哪些局限性 ?</h2><p>自动装配的局限性是：</p><ol><li>重写：你仍需用配置来定义依赖，意味着总要重写自动装配。</li><li>基本数据类型：你不能自动装配简单的属性，如基本数据类型，String字符串，和类。</li><li>模糊特性：自动装配不如显式装配精确，如果有可能，建议使用显式装配。</li></ol><h2 id="29、你可以在-Spring-中注入一个-null-和一个空字符串吗？"><a href="#29、你可以在-Spring-中注入一个-null-和一个空字符串吗？" class="headerlink" title="29、你可以在 Spring 中注入一个 null 和一个空字符串吗？"></a>29、你可以在 Spring 中注入一个 null 和一个空字符串吗？</h2><p>可以。</p><h2 id="30、有几种不同类型的自动代理？"><a href="#30、有几种不同类型的自动代理？" class="headerlink" title="30、有几种不同类型的自动代理？"></a>30、有几种不同类型的自动代理？</h2><ol><li><code>BeanNameAutoProxyCreator</code></li><li><code>DefaultAdvisorAutoProxyCreator</code></li><li><code>Metadata autoproxying</code></li></ol><h2 id="拦截器和过滤器的区别"><a href="#拦截器和过滤器的区别" class="headerlink" title="拦截器和过滤器的区别"></a>拦截器和过滤器的区别</h2><p><strong>过滤器（filter）：</strong></p><ul><li>过滤器处于客户端与Web资源（Servlet、JSP、HTML）之间，客户端与Web资源之间的请求和响应都要通过过滤器进行过滤。举例：在过滤器中定义了禁止访问192.10.10.1这个地址，那么当客户端发出访问192.10.10.1的请求时，经过过滤器后，客户端得到的响应是出现该IP禁止访问的提示。</li><li>在java web中，你传入的request,response提前过滤掉一些信息，或者提前设置一些参数，然后再传入servlet或者struts的 action进行业务逻辑，比如过滤掉非法url（不是login.do的地址请求，如果用户没有登陆都过滤掉）,或者在传入servlet或者 struts的action前统一设置字符集，或者去除掉一些非法字符</li></ul><p>**拦截器（interceptor）:**，</p><ul><li>拦截器是一种面向方面&#x2F;切面编程（AOP Aspect-Oriented Programming）.</li><li>面向切面就是将多个模块的的通用服务进行分离，如权限管理、日志服务，他们在多个模块中都会用到，就可以将其各自封装为一个可重用模块。而这些通用服务的具体实现是通过拦截器来完成，比如用户客户端访问一些保密模块都应先通过权限审查的拦截器来进行权限审查，确定用户是否具有该项操作的权限后方能向下执行。</li><li>在面向切面编程的就是在你的service或者一个方法，前调用一个方法，或者在方法后调用一个方法比如动态代理就是拦截器的简单实现，在你调用方法前打印出字符串（或者做其它业务逻辑的操作），也可以在你调用方法后打印出字符串，甚至在你抛出异常的时候做业务逻辑的操作。</li></ul><p><strong>两者的区别</strong></p><ul><li>拦截器是基于java反射机制的，而过滤器是基于函数回调。</li><li>拦截器不依赖于Servlet容器，而过滤器依赖于servlet容器。</li><li>拦截器只能对action请求起作用，而过滤器可以对几乎所以的请求起作用。</li><li>拦截器可以访问action上下文，值栈里的对象，而过滤器不能。</li><li>在Action的生命周期周，拦截器可以被多次调用，而过滤器只能在容器初始化的时候被调用一次。</li></ul><p><strong>执行顺序 ：</strong>过滤前 - 拦截前 - Action处理 - 拦截后 - 过滤后。个人认为过滤是一个横向的过程，首先把客户端提交的内容进行过滤(例如未登录用户不能访问内部页面的处理)；过滤通过后，拦截器将检查用户提交数据的验证，做一些前期的数据处理，接着把处理后的数据发给对应的Action；Action处理完成返回后，拦截器还可以做其他过程(还没想到要做啥)，再向上返回到过滤器的后续操作。</p><p>拦截器 ：是在面向切面编程的就是在你的service或者一个方法前调用一个方法，或者在方法后调用一个方法比如动态代理就是拦截器的简单实现，在你调用方法前打印出字符串（或者做其它业务逻辑的操作），也可以在你调用方法后打印出字符串，甚至在你抛出异常的时候做业务逻辑的操作。</p><p>过滤器：是在java web中，你传入的request,response提前过滤掉一些信息，或者提前设置一些参数，然后再传入servlet或者struts的 action进行业务逻辑，比如过滤掉非法url（不是login.do的地址请求，如果用户没有登陆都过滤掉）,或者在传入servlet或者 struts的action前统一设置字符集，或者去除掉一些非法字符.</p><h2 id="Java-中，嵌套公共静态类与顶级类有什么不同？"><a href="#Java-中，嵌套公共静态类与顶级类有什么不同？" class="headerlink" title="Java 中，嵌套公共静态类与顶级类有什么不同？"></a>Java 中，嵌套公共静态类与顶级类有什么不同？</h2><p>类的内部可以有多个嵌套公共静态类，但是一个 Java 源文件只能有一个顶级公共类，并且顶级公共类的名称与源文件名称必须一致。</p><h2 id="Java-中，Serializable-与-Externalizable-的区别？"><a href="#Java-中，Serializable-与-Externalizable-的区别？" class="headerlink" title="Java 中，Serializable 与 Externalizable 的区别？"></a>Java 中，Serializable 与 Externalizable 的区别？</h2><p>Serializable 接口是一个序列化 Java 类的接口，以便于它们可以在网络上传输或者可以将它们的状态保存在磁盘上，是 JVM 内嵌的默认序列化方式，成本高、脆弱而且不安全。Externalizable 允许你控制整个序列化过程，指定特定的二进制格式，增加安全机制。</p><h2 id="Java-中，DOM-和-SAX-解析器有什么不同？"><a href="#Java-中，DOM-和-SAX-解析器有什么不同？" class="headerlink" title="Java 中，DOM 和 SAX 解析器有什么不同？"></a>Java 中，DOM 和 SAX 解析器有什么不同？</h2><p>DOM 解析器将整个 XML 文档加载到内存来创建一棵 DOM 模型树，这样可以更快的查找节点和修改 XML 结构，而 SAX 解析器是一个基于事件的解析器，不会将整个 XML 文档加载到内存。由于这个原因，DOM 比 SAX 更快，也要求更多的内存，不适合于解析大 XML 文件。</p><h2 id="说出-JDK-1-7-中的三个新特性？"><a href="#说出-JDK-1-7-中的三个新特性？" class="headerlink" title="说出 JDK 1.7 中的三个新特性？"></a>说出 JDK 1.7 中的三个新特性？</h2><p>虽然 JDK 1.7 不像 JDK 5 和 8 一样的大版本，但是，还是有很多新的特性，如</p><ol><li>try-with-resource 语句，这样你在使用流或者资源的时候，就不需要手动关闭，Java 会自动关闭。</li><li>Fork-Join 池某种程度上实现 Java 版的 Map-reduce。</li><li>允许 Switch 中有 String 变量和文本。</li><li>菱形操作符(&lt;&gt;)用于类型推断，不再需要在变量声明的右边申明泛型，因此可以写出可读写更强、更简洁的代码。</li><li>另一个值得一提的特性是改善异常处理，如允许在同一个 catch 块中捕获多个异常。</li></ol><h2 id="说出-5-个-JDK-1-8-引入的新特性？"><a href="#说出-5-个-JDK-1-8-引入的新特性？" class="headerlink" title="说出 5 个 JDK 1.8 引入的新特性？"></a>说出 5 个 JDK 1.8 引入的新特性？</h2><p>Java 8 在 Java 历史上是一个开创新的版本，下面 JDK 8 中 5 个主要的特性：</p><ol><li>Lambda 表达式,允许像对象一样传递匿名函数</li><li>Stream API,充分利用现代多核 CPU，可以写出很简洁的代码</li><li>Date 与 Time API,最终，有一个稳定、简单的日期和时间库可供你使用</li><li>扩展方法，现在，接口中可以有静态、默认方法。</li><li>重复注解，现在你可以将相同的注解在同一类型上使用多次。</li></ol><h2 id="8、-amp-和-amp-amp-的区别？"><a href="#8、-amp-和-amp-amp-的区别？" class="headerlink" title="8、&amp;和&amp;&amp;的区别？"></a>8、&amp;和&amp;&amp;的区别？</h2><p>&amp;和&amp;&amp;都可以用作逻辑与的运算符，表示逻辑与（and），当运算符两边的表达式的结果都为true时，整个运算结果才为true，否则，只要有一方为false，则结果为false。</p><p>区别：</p><ul><li><p>&amp;&amp;还具有短路的功能，即如果第一个表达式为false，则不再计算第二个表达式以及后面的表达式。(如果遇到true就一直向下判断条件直到遇到false的表达式返回)</p></li><li><p>&amp;不具有短路的功能,逻辑运算表达式条件都会执行。</p></li></ul><h2 id="9、解释内存中的栈-stack-、堆-heap-和方法区-method-area-的用法。"><a href="#9、解释内存中的栈-stack-、堆-heap-和方法区-method-area-的用法。" class="headerlink" title="9、解释内存中的栈(stack)、堆(heap)和方法区(method area)的用法。"></a>9、解释内存中的栈(stack)、堆(heap)和方法区(method area)的用法。</h2><p>通常我们定义一个基本数据类型的变量，一个对象的引用，还有就是函数调用的现场保存都使用JVM中的栈空间；而通过new关键字和构造器创建的对象则放在堆空间，堆是垃圾收集器管理的主要区域，由于现在的垃圾收集器都采用分代收集算法，所以堆空间还可以细分为新生代和老生代，再具体一点可以分为Eden、Survivor（又可分为From Survivor和To Survivor）、Tenured；方法区和堆都是各个线程共享的内存区域，用于存储已经被JVM加载的类信息、常量、静态变量、JIT编译器编译后的代码等数据；程序中的字面量（literal）如直接书写的100、”hello”和常量都是放在常量池中，常量池是方法区的一部分。栈空间操作起来最快但是栈很小，通常大量的对象都是放在堆空间，栈和堆的大小都可以通过JVM的启动参数来进行调整，栈空间用光了会引发StackOverflowError，而堆和常量池空间不足则会引发OutOfMemoryError。</p><h2 id="11、switch-是否能作用在-byte-上，是否能作用在-long-上，是否能作用在-String-上？"><a href="#11、switch-是否能作用在-byte-上，是否能作用在-long-上，是否能作用在-String-上？" class="headerlink" title="11、switch 是否能作用在 byte 上，是否能作用在 long 上，是否能作用在 String 上？"></a>11、switch 是否能作用在 byte 上，是否能作用在 long 上，是否能作用在 String 上？</h2><p>switch可作用于char byte short int</p><p>switch可作用于char byte short int对应的包装类</p><p>switch不可作用于long double float boolean，包括他们的包装类</p><h2 id="13、数组有没有-length-方法？String-有没有-length-方法？"><a href="#13、数组有没有-length-方法？String-有没有-length-方法？" class="headerlink" title="13、数组有没有 length()方法？String 有没有 length()方法？"></a>13、数组有没有 length()方法？String 有没有 length()方法？</h2><p>数组没有length()这个方法，有length的属性。String有length()这个方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> a[];<br>a.length; <span class="hljs-comment">//返回a的长度</span><br>String s;<br>s.length(); <span class="hljs-comment">//返回s的长度</span><br></code></pre></td></tr></table></figure><h2 id="14、在-Java-中，如何跳出当前的多重嵌套循环？"><a href="#14、在-Java-中，如何跳出当前的多重嵌套循环？" class="headerlink" title="14、在 Java 中，如何跳出当前的多重嵌套循环？"></a>14、在 Java 中，如何跳出当前的多重嵌套循环？</h2><p><strong>一、标号方式</strong><br>在Java中，要想跳出多重循环，可以在外面的循环语句前定义一个标号，然后在里层循环体的代码中使用带有标号break语句，即可跳出外层循环。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">ok:<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">10</span>; j++) &#123;<br>        System.out.println(<span class="hljs-string">&quot;i=&quot;</span> + i + <span class="hljs-string">&quot;,j=&quot;</span> + j);<br>        <span class="hljs-keyword">if</span> (j == <span class="hljs-number">5</span>) <span class="hljs-keyword">break</span> ok;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>二、break跳出当前循环，通过内部跳出条件控制跳出外部循环</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">5</span>; j++) &#123;<br>        System.out.println(<span class="hljs-string">&quot;i=&quot;</span> + i + <span class="hljs-string">&quot;; j=&quot;</span> + j);<br>        <span class="hljs-keyword">if</span> (j == <span class="hljs-number">3</span>) &#123;<br>            i = <span class="hljs-number">4</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>三、抛出异常也可以跳出多重循环</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">5</span>; j++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;i=&quot;</span> + i + <span class="hljs-string">&quot;; j=&quot;</span> + j);<br>            <span class="hljs-keyword">if</span> (j == <span class="hljs-number">3</span>) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>    System.out.println(<span class="hljs-string">&quot;e&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>通常并不使用标号这种方式，而是让外层的循环条件表达式的结果可以受到里层循环体代码的控制，例如，要在二维数组中查找到某个数字。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> arr[][] = &#123;&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;, &#123;<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>&#125;, &#123;<span class="hljs-number">9</span>&#125;&#125;;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">found</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length &amp;&amp; !found; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr[i].length; j++) &#123;<br>        System.out.println(<span class="hljs-string">&quot;i=&quot;</span> + i + <span class="hljs-string">&quot;,j=&quot;</span> + j);<br>        <span class="hljs-keyword">if</span> (arr[i][j] == <span class="hljs-number">5</span>) &#123;<br>            found = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="18、当一个对象被当作参数传递到一个方法后，此方法可改变这个对象的属性，并可返回变化后的结果，那么这里到底是值传递还是引用传递？"><a href="#18、当一个对象被当作参数传递到一个方法后，此方法可改变这个对象的属性，并可返回变化后的结果，那么这里到底是值传递还是引用传递？" class="headerlink" title="18、当一个对象被当作参数传递到一个方法后，此方法可改变这个对象的属性，并可返回变化后的结果，那么这里到底是值传递还是引用传递？"></a>18、当一个对象被当作参数传递到一个方法后，此方法可改变这个对象的属性，并可返回变化后的结果，那么这里到底是值传递还是引用传递？</h2><p>是值传递。Java编程语言中只有由值传递参数的。当一个对象实例作为一个参数被传递到方法中时，参数的值就是该对象的引用。对象的内容可以在被调用的方法中改变，但对象的引用是永远不会改变的。</p><h2 id="19、String-和-StringBuilder、StringBuffer-的区别？"><a href="#19、String-和-StringBuilder、StringBuffer-的区别？" class="headerlink" title="19、String 和 StringBuilder、StringBuffer 的区别？"></a>19、String 和 StringBuilder、StringBuffer 的区别？</h2><p>都是final类，都不允许被继承；</p><p>String类长度是不可变的，StringBuffer和StringBuilder类长度是可以改变的；</p><p>StringBuffer类是线程安全的，StringBuilder不是线程安全的。</p><h2 id="20、重载（Overload）和重写（Override）的区别。重载的方法能否根据返回类型进行区分？"><a href="#20、重载（Overload）和重写（Override）的区别。重载的方法能否根据返回类型进行区分？" class="headerlink" title="20、重载（Overload）和重写（Override）的区别。重载的方法能否根据返回类型进行区分？"></a>20、重载（Overload）和重写（Override）的区别。重载的方法能否根据返回类型进行区分？</h2><p>方法的重载和重写都是实现多态的方式，区别在于前者实现的是编译时的多态性，而后者实现的是运行时的多态性。</p><p>重载发生在一个类中，同名的方法如果有不同的参数列表（参数类型不同、参数个数不同或者二者都不同）则视为重载；</p><p>重写发生在子类与父类之间，重写要求子类被重写方法与父类被重写方法有相同的返回类型，比父类被重写方法更好访问，不能比父类被重写方法声明更多的异常（里氏代换原则）。</p><p>重载对返回类型没有特殊的要求。</p><h2 id="21、描述一下-JVM-加载-class-文件的原理机制？"><a href="#21、描述一下-JVM-加载-class-文件的原理机制？" class="headerlink" title="21、描述一下 JVM 加载 class 文件的原理机制？"></a>21、描述一下 JVM 加载 class 文件的原理机制？</h2><p>Java中的所有类，都需要由类加载器装载到JVM中才能运行。类加载器本身也是一个类，而它的工作就是把class文件从硬盘读取到内存中。在写程序的时候，我们几乎不需要关心类的加载，因为这些都是隐式装载的，除非我们有特殊的用法，像是反射，就需要显式的加载所需要的类。</p><p>类装载方式，有两种：</p><ol><li>隐式装载， 程序在运行过程中当碰到通过new 等方式生成对象时，隐式调用类装载器加载对应的类到jvm中，</li><li>显式装载：通过调用ClassLoader加载class对象，比如<code>Class.forName(String name)</code>和<code>this.getClass().getClassLoader().loadClass()</code>加载类。</li></ol><p>Java类的加载是动态的，它并不会一次性将所有类全部加载后再运行，而是保证程序运行的基础类(像是基类)完全加载到jvm中，至于其他类，则在需要的时候才加载。这当然就是为了节省内存开销。</p><p>Java的类加载器有三个，对应Java的三种类:</p><ul><li>Bootstrap Loader  ：启动类加载器，是虚拟机自身的一部分。负责将存放在\lib目录中的类库加载到虚拟机中。其无法被Java程序直接引用。 负责加载系统类 (指的是内置类，像是String，对应于C#中的System类和C&#x2F;C++标准库中的类)</li><li>ExtClassLoader  ： 负责加载扩展类(就是继承类和实现类)</li><li>AppClassLoader  ：负责加载用户类路径（ClassPath）上所指定的类库(程序员自定义的类)</li></ul><p>三个加载器各自完成自己的工作，但它们是如何协调工作呢？哪一个类该由哪个类加载器完成呢？为了解决这个问题，Java采用了委托模型机制。</p><p>委托模型机制的工作原理很简单：当类加载器需要加载类的时候，先请示其Parent(即上一层加载器)在其搜索路径载入，如果找不到，才在自己的搜索路径搜索该类。这样的顺序其实就是加载器层次上自顶而下的搜索，因为加载器必须保证基础类的加载。之所以是这种机制，还有一个安全上的考虑：如果某人将一个恶意的基础类加载到jvm，委托模型机制会搜索其父类加载器，显然是不可能找到的，自然就不会将该类加载进来。</p><p>我们可以通过这样的代码来获取类加载器:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ClassLoader</span> <span class="hljs-variable">loader</span> <span class="hljs-operator">=</span> ClassName.class.getClassLoader();<br><span class="hljs-type">ClassLoader</span> <span class="hljs-variable">ParentLoader</span> <span class="hljs-operator">=</span> loader.getParent();<br></code></pre></td></tr></table></figure><p>注意一个很重要的问题，就是Java在逻辑上并不存在BootstrapKLoader的实体！因为它是用C++编写的，所以打印其内容将会得到null。</p><p>前面是对类加载器的简单介绍，它的原理机制非常简单，就是下面几个步骤:</p><ol><li>装载：查找和导入class文件;</li><li>连接：</li><li>检查：检查载入的class文件数据的正确性;</li><li>准备：为类的静态变量分配存储空间;</li><li>解析：将符号引用转换成直接引用(这一步是可选的)</li><li>初始化：初始化静态变量，静态代码块。<br>这样的过程在程序调用类的静态成员的时候开始执行，所以静态方法main()才会成为一般程序的入口方法。类的构造器也会引发该动作。</li></ol><h2 id="22、char-型变量中能不能存贮一个中文汉字，为什么？"><a href="#22、char-型变量中能不能存贮一个中文汉字，为什么？" class="headerlink" title="22、char 型变量中能不能存贮一个中文汉字，为什么？"></a>22、char 型变量中能不能存贮一个中文汉字，为什么？</h2><p>在Java中，char类型占2个字节，而且Java默认采用Unicode编码，一个Unicode码是16位，所以一个Unicode码占两个字节，Java中无论汉字还是英文字母都是用Unicode编码来表示的。所以，在Java中，char类型变量可以存储一个中文汉字。</p><h2 id="24、静态嵌套类-Static-Nested-Class-和内部类（Inner-Class）的不同？"><a href="#24、静态嵌套类-Static-Nested-Class-和内部类（Inner-Class）的不同？" class="headerlink" title="24、静态嵌套类(Static Nested Class)和内部类（Inner Class）的不同？"></a>24、静态嵌套类(Static Nested Class)和内部类（Inner Class）的不同？</h2><p>Static Nested Class是被声明为静态（static）的内部类，它可以不依赖于外部类实例被实例化。</p><p>而通常的内部类(Inner Class)需要在外部类实例化后才能实例化。</p><h2 id="25、Java-中会存在内存泄漏吗，请简单描述。"><a href="#25、Java-中会存在内存泄漏吗，请简单描述。" class="headerlink" title="25、Java 中会存在内存泄漏吗，请简单描述。"></a>25、Java 中会存在内存泄漏吗，请简单描述。</h2><p><strong>内存泄露就是指一个不再被程序使用的对象或变量一直被占据在内存中。</strong>Java使用有向图的方式进行垃圾回收管理，可以消除引用循环的问题，例如有两个对象，相互引用，只要它们和根进程不可达的，那么GC也是可以回收它们的</p><p>java中内存泄露的发生场景，通俗地说，就是程序员可能创建了一个对象，以后一直不再使用这个对象，这个对象却一直被引用，即这个对象无用但是却无法被垃圾回收器回收的，这就是java中的内存泄露，一定要让程序将各种分支情况都完整执行到程序结束，然后看某个对象是否被使用过，如果没有，则才能判定这个对象属于内存泄露。</p><p>举个例子：</p><ul><li><p>如果一个外部类的实例对象的方法返回了一个内部类的实例对象，这个内部类对象被长期引用了，即使那个外部类实例对象不再被使用，但由于内部类持久外部类的实例对象，这个外部类对象将<strong>不会</strong>被垃圾回收，这也会造成内存泄露。</p></li><li><p>当一个对象被存储进HashSet集合中以后，就不能修改这个对象中的那些参与计算哈希值的字段了，否则，对象修改后的哈希值与最初存储进HashSet集合中时的哈希值就不同了，在这种情况下，即使在contains方法使用该对象的当前引用作为的参数去HashSet集合中检索对象，也将返回找不到对象的结果，这也会导致无法从HashSet集合中单独删除当前对象，造成内存泄露。</p></li></ul><h2 id="26、抽象的（abstract）方法是否可同时是静态的（static）-是否可同时是本地方法（native），是否可同时被-synchronized-修饰？"><a href="#26、抽象的（abstract）方法是否可同时是静态的（static）-是否可同时是本地方法（native），是否可同时被-synchronized-修饰？" class="headerlink" title="26、抽象的（abstract）方法是否可同时是静态的（static）,是否可同时是本地方法（native），是否可同时被 synchronized 修饰？"></a>26、抽象的（abstract）方法是否可同时是静态的（static）,是否可同时是本地方法（native），是否可同时被 synchronized 修饰？</h2><p>都不能。</p><p>抽象方法需要子类重写，而静态的方法是无法被重写的，因此二者是矛盾的。</p><p>本地方法是由本地代码（如C代码）实现的方法，而抽象方法是没有实现的，也是矛盾的。</p><p>synchronized 和方法的实现细节有关，抽象方法不涉及实现细节，因此也是相互矛盾的。</p><h2 id="27、阐述静态变量和实例变量的区别。"><a href="#27、阐述静态变量和实例变量的区别。" class="headerlink" title="27、阐述静态变量和实例变量的区别。"></a>27、阐述静态变量和实例变量的区别。</h2><p><strong>在语法定义上的区别：</strong></p><p>静态变量前要加static关键字，而实例变量前则不加。</p><p><strong>在程序运行时的区别：</strong></p><p>实例变量属于某个对象的属性，必须创建了实例对象，其中的实例变量才会被分配空间，才能使用这个实例变量。</p><p>静态变量不属于某个实例对象，而是属于类，所以也称为类变量，只要程序加载了类的字节码，不用创建任何实例对象，静态变量就会被分配空间，静态变量就可以被使用了。</p><p>总之，实例变量必须创建对象后才可以通过这个对象来使用，静态变量则可以直接使用类名来引用。</p><h2 id="28、是否可以从一个静态（static）方法内部发出对非静态（non-static）方法的调用？"><a href="#28、是否可以从一个静态（static）方法内部发出对非静态（non-static）方法的调用？" class="headerlink" title="28、是否可以从一个静态（static）方法内部发出对非静态（non-static）方法的调用？"></a>28、是否可以从一个静态（static）方法内部发出对非静态（non-static）方法的调用？</h2><p>不可以。</p><p>静态方法只能访问静态成员，因为非静态方法的调用要先创建对象，在调用静态方法时可能对象并没有被初始化。</p><h2 id="29、如何实现对象克隆？"><a href="#29、如何实现对象克隆？" class="headerlink" title="29、如何实现对象克隆？"></a>29、如何实现对象克隆？</h2><p>两种不同的克隆方法，浅克隆(ShallowClone)和深克隆(DeepClone)。</p><p>在Java语言中，数据类型分为值类型（基本数据类型）和引用类型，值类型包括int、double、byte、boolean、char等简单数据类型，引用类型包括类、接口、数组等复杂类型。浅克隆和深克隆的主要区别在于是否支持引用类型的成员变量的复制。</p><hr><p><strong>浅克隆</strong></p><p>在浅克隆中，如果原型对象的成员变量是值类型，将复制一份给克隆对象；如果原型对象的成员变量是引用类型，则将引用对象的地址复制一份给克隆对象，也就是说原型对象和克隆对象的成员变量指向相同的内存地址。</p><img src="/posts/1f03d757/112.jpg" class><p>在Java语言中，通过覆盖Object类的clone()方法可以实现浅克隆。</p><p><strong>深克隆</strong></p><p>在深克隆中，无论原型对象的成员变量是值类型还是引用类型，都将复制一份给克隆对象，深克隆将原型对象的所有引用对象也复制一份给克隆对象。简单来说，在深克隆中，除了对象本身被复制外，对象所包含的所有成员变量也将复制。</p><img src="/posts/1f03d757/113.jpg" class><p>在Java语言中，如果需要实现深克隆，可以通过覆盖Object类的clone()方法实现，也可以通过序列化(Serialization)等方式来实现。</p><hr><p><strong>克隆有两种方式：</strong></p><ol><li>实现Cloneable接口并重写Object类中的clone()方法；</li></ol><ul><li>clone()方法是定义在java.lang.Object类中，该方法是一个protected的方法，所以重载时要把clone()方法的属性设置为public，这样其它类才能调用这个clone类的clone()方法</li><li>实现Cloneable接口：Cloneable接口是不包含任何方法的！其实这个接口仅仅是一个标志，而且这个标志也仅仅是针对Object类中clone()方法的，如果clone类没有实现Cloneable接口，并调用了Object的clone()方法（也就是调用了super.Clone()方法），那么Object的clone()方法就会抛出 CloneNotSupportedException异常。</li></ul><ol><li>实现Serializable接口，通过对象的序列化和反序列化实现克隆，可以实现真正的深度克隆；</li></ol><h2 id="30、GC-是什么？为什么要有-GC？"><a href="#30、GC-是什么？为什么要有-GC？" class="headerlink" title="30、GC 是什么？为什么要有 GC？"></a>30、GC 是什么？为什么要有 GC？</h2><p>GC是垃圾收集的意思（Gabage Collection），内存处理是编程人员容易出现问题的地方，忘记或者错误的内存回收会导致程序或系统的不稳定甚至崩溃，<br>Java提供的GC功能可以自动监测对象是否超过作用域从而达到自动回收内存的目的，Java语言没有提供释放已分配内存的显示操作方法。</p><p>GC是垃圾收集器。Java 程序员不用担心内存管理，因为垃圾收集器会自动进行管理。要请求垃圾收集，可以调用下面的方法之一：</p><ul><li>System.gc()</li><li>Runtime.getRuntime().gc()</li></ul><p>Java是由C++发展来的。</p><p>它摈弃了C++中一些繁琐容易出错的东西。其中有一条就是这个GC。</p><p>写C&#x2F;C++程序，程序员定义了一个变量，就是在内存中开辟了一段相应的空间来存值。内存再大也是有限的，所以当程序不再需要使用某个变量的时候，就需要释放这个内存空间资源，好让别的变量来用它。在C&#x2F;C++中，释放无用变量内存空间的事情要由程序员自己来解决。就是说当程序员认为变量没用了，就应当写一条代码，释放它占用的内存。这样才能最大程度地避免内存泄露和资源浪费。</p><p>但是这样显然是非常繁琐的。程序比较大，变量多的时候往往程序员就忘记释放内存或者在不该释放的时候释放内存了。而且释放内存这种事情，从开发角度说，不应当是程序员所应当关注的。程序员所要做的应该是实现所需要的程序功能，而不是耗费大量精力在内存的分配释放上。</p><p>Java有了GC，就不需要程序员去人工释放内存空间。当Java虚拟机发觉内存资源紧张的时候，就会自动地去清理无用变量所占用的内存空间。当然，如果需要，程序员可以在Java程序中显式地使用System.gc()来强制进行一次立即的内存清理。</p><p>因为显式声明是做堆内存全扫描，也就是 Full GC，是需要停止所有的活动的（Stop The World Collection），你的应用能承受这个吗？而其显示调用System.gc()只是给虚拟机一个建议，不一定会执行，因为System.gc()在一个优先级很低的线程中执行。</p><h2 id="33、一个”-java”源文件中是否可以包含多个类（不是内部类）？有什么限制？"><a href="#33、一个”-java”源文件中是否可以包含多个类（不是内部类）？有什么限制？" class="headerlink" title="33、一个”.java”源文件中是否可以包含多个类（不是内部类）？有什么限制？"></a>33、一个”.java”源文件中是否可以包含多个类（不是内部类）？有什么限制？</h2><p>可以，但一个源文件中最多只能有一个公开类（public class）而且文件名必须和公开类的类名完全保持一致。</p><h2 id="34、Anonymous-Inner-Class-匿名内部类-是否可以继承其它类？是否可以实现接口？"><a href="#34、Anonymous-Inner-Class-匿名内部类-是否可以继承其它类？是否可以实现接口？" class="headerlink" title="34、Anonymous Inner Class(匿名内部类)是否可以继承其它类？是否可以实现接口？"></a>34、Anonymous Inner Class(匿名内部类)是否可以继承其它类？是否可以实现接口？</h2><p>可以。</p><p><strong>抽象类的匿名内部类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>;<br>&#125;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>() &#123;<br>            <span class="hljs-meta">@Override</span>  <span class="hljs-comment">//此处方法重载 说明是实现父类  即内部类可以继承其他类 而且是必须</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;eat something&quot;</span>);<br>            &#125;<br>        &#125;;<br>        p.eat();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>接口类的匿名内部类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>;<br>&#125;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>() &#123;<br>            <span class="hljs-meta">@Override</span>  <span class="hljs-comment">//此处方法重载 说明是实现父类  即内部类可以实现其他类 而且是必须</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;eat something&quot;</span>);<br>            &#125;<br>        &#125;;<br>        p.eat();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="35、内部类可以引用它的包含类（外部类）的成员吗？有没有什么限制？"><a href="#35、内部类可以引用它的包含类（外部类）的成员吗？有没有什么限制？" class="headerlink" title="35、内部类可以引用它的包含类（外部类）的成员吗？有没有什么限制？"></a>35、内部类可以引用它的包含类（外部类）的成员吗？有没有什么限制？</h2><p>完全可以。</p><ul><li><p><strong>静态内部类</strong>：它是用static修饰的，在访问限制上它只能访问外部类中的static所修饰的成员变量或者是方法：</p></li><li><p><strong>成员内部类</strong>：成员内部类是最普通的内部类，它可以无条件访问外部类的所有成员属性和成员方法（包括private成员和静态成员）。</p><p>当成员内部类拥有和外部类同名的成员变量或者方法时，会发生隐藏现象，即默认情况下访问的是成员内部类的成员。如果要访问外部类的同名成员，需要以下面的形式进行访问：</p><ul><li><p>外部类.this.成员变量</p></li><li><p>外部类.this.成员方法</p></li></ul></li><li><p><strong>局部内部类</strong>：局部内部类是定义在外围类的方法中的，在访问的时候它可以直接访问外围类的所有成员！但是不能随便访问局部变量，除非这个局部变量被final修饰。</p></li><li><p><strong>匿名内部类</strong>：匿名内部类其实就是局部内部类的简写格式，只能使用一次。</p></li></ul><h2 id="39、如何实现字符串的反转及替换？"><a href="#39、如何实现字符串的反转及替换？" class="headerlink" title="39、如何实现字符串的反转及替换？"></a>39、如何实现字符串的反转及替换？</h2><p>使用递归实现字符串反转，代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">reverse</span><span class="hljs-params">(String originStr)</span> &#123;<br>     <span class="hljs-keyword">if</span>(originStr == <span class="hljs-literal">null</span> || originStr.length() &lt;= <span class="hljs-number">1</span>)<br>         <span class="hljs-keyword">return</span> originStr;<br>     <span class="hljs-keyword">return</span> reverse(originStr.substring(<span class="hljs-number">1</span>)) + originStr.charAt(<span class="hljs-number">0</span>);<br> &#125;<br></code></pre></td></tr></table></figure><p>每次取第一个字符拼到字符串最后，依次递归，如图所示：</p><img src="/posts/1f03d757/114.jpg" style="zoom:80%;"><h2 id="40、怎样将-GB2312-编码的字符串转换为-ISO-8859-1-编码的字符串？"><a href="#40、怎样将-GB2312-编码的字符串转换为-ISO-8859-1-编码的字符串？" class="headerlink" title="40、怎样将 GB2312 编码的字符串转换为 ISO-8859-1 编码的字符串？"></a>40、怎样将 GB2312 编码的字符串转换为 ISO-8859-1 编码的字符串？</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;你好&quot;</span>;<br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(s1.getBytes(<span class="hljs-string">&quot;GB2312&quot;</span>), <span class="hljs-string">&quot;ISO-8859-1&quot;</span>);<br>&#125; <span class="hljs-keyword">catch</span> (UnsupportedEncodingException e) &#123;<br>    e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="42、打印昨天的当前时刻。"><a href="#42、打印昨天的当前时刻。" class="headerlink" title="42、打印昨天的当前时刻。"></a>42、打印昨天的当前时刻。</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Calendar</span> <span class="hljs-variable">cal</span> <span class="hljs-operator">=</span> Calendar.getInstance();<br>        cal.add(Calendar.DATE, -<span class="hljs-number">1</span>);<br>        System.out.println(cal.getTime());<br>    &#125;   <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="43、比较一下-Java-和-JavaSciprt。"><a href="#43、比较一下-Java-和-JavaSciprt。" class="headerlink" title="43、比较一下 Java 和 JavaSciprt。"></a>43、比较一下 Java 和 JavaSciprt。</h2><p>Java与JavaScript是两个公司开发的不同的两个产品。Java是原Sun Microsystems公司推出的面向对象的程序设计语言，特别适合于互联网应用程序开发；而JavaScript是Netscape公司的产品，为了扩展Netscape浏览器的功能而开发的一种可以嵌入Web页面中运行的基于对象和事件驱动的解释性语言。JavaScript的前身是LiveScript；而Java的前身是Oak语言。</p><p>下面对两种语言间的异同作如下比较：</p><ul><li>基于对象和面向对象：Java是一种真正的面向对象的语言，即使是开发简单的程序，必须设计对象；JavaScript是种脚本语言，它可以用来制作与网络无关的，与用户交互的复杂软件。它是一种基于对象（Object-Based）和事件驱动（Event-Driven）的编程语言，因而它本身提供了非常丰富的内部对象供设计人员使用。</li><li>解释和编译：Java的源代码在执行之前，必须经过编译。JavaScript是一种解释性编程语言，其源代码不需经过编译，由浏览器解释执行（目前的浏览器几乎都使用了JIT（即时编译）技术来提升JavaScript的运行效率）。</li><li>强类型变量和弱类型变量：Java采用强类型变量检查，即所有变量在编译之前必须作声明；JavaScript中变量是弱类型的，甚至在使用变量前可以不作声明，JavaScript的解释器在运行时检查推断其数据类型。</li><li>代码格式不一样。</li></ul><h2 id="44、什么时候用断言（assert）？"><a href="#44、什么时候用断言（assert）？" class="headerlink" title="44、什么时候用断言（assert）？"></a>44、什么时候用断言（assert）？</h2><p>断言在软件开发中是一种常用的调试方式，很多开发语言中都支持这种机制。一般来说，断言用于保证程序最基本、最关键的正确性。断言检查通常在开发和测试时开启。为了保证程序的执行效率，在软件发布后断言检查通常是关闭的。断言是一个包含布尔表达式的语句，在执行这个语句时假定该表达式为true；如果表达式的值为false，那么系统会报告一个AssertionError。</p><p>注意：断言不应该以任何方式改变程序的状态。简单的说，<strong>如果希望在不满足某些条件时阻止代码的执行，就可以考虑用断言来阻止它。</strong></p><p>断言可以有两种形式：</p><ul><li><p>assert Expression1;</p></li><li><p>assert Expression1 : Expression2;</p><p>Expression1表示一个boolean表达式；</p><p>Expression2表示一个基本类型、表达式或者是一个Object，用于在失败时输出错误信息，它是一个传到AssertionError构造函数的值，如果断言失败，该值被转化为它对应的字符串</p></li></ul><p>要在运行时启用断言，可以在启动JVM时使用-enableassertions或者-ea标记。要在运行时选择禁用断言，可以在启动JVM时使用-da或者-disableassertions标记。要在系统类中启用或禁用断言，可使用-esa或-dsa标记。还可以在包的基础上启用或者禁用断言。</p><h2 id="45、Error-和-Exception-有什么区别？"><a href="#45、Error-和-Exception-有什么区别？" class="headerlink" title="45、Error 和 Exception 有什么区别？"></a>45、Error 和 Exception 有什么区别？</h2><img src="/posts/1f03d757/115.jpg" class><p>异常发生的原因有很多，通常包含以下几大类：</p><ul><li>用户输入了非法数据。</li><li>要打开的文件不存在。</li><li>网络通信时连接中断，或者JVM内存溢出。</li></ul><p>异常主要分三种类型：</p><ol><li>检查性异常：最具代表的检查性异常是用户错误或问题引起的异常，这是程序员无法预见的。例如要打开一个不存在文件时，一个异常就发生了，这些异常在编译时不能被简单地忽略。</li><li>运行时异常：运行时异常是可能被程序员避免的异常。与检查性异常相反，运行时异常可以在编译时被忽略。</li><li>错误：错误不是异常，而是脱离程序员控制的问题。错误在代码中通常被忽略。例如，当栈溢出时，一个错误就发生了，它们在编译也检查不到的。</li></ol><p>Java异常又可以分为不受检查异常（Unchecked Exception）和检查异常（Checked Exception）。</p><p>下面将详细讲述这些异常之间的区别与联系：</p><ul><li>Error：Error类对象由 Java<br>虚拟机生成并抛出，大多数错误与代码编写者所执行的操作无关。例如，Java虚拟机运行错误（Virtual<br>MachineError），当JVM不再有继续执行操作所需的内存资源时，将出现OutOfMemoryError。这些异常发生时，Java虚拟机（JVM）一般会选择线程终止；还有发生在虚拟机试图执行应用时，如类定义错误（NoClassDefFoundError）、链接错误（LinkageError）。这些错误是不可查的，因为它们在应用程序的控制和处理能力之外，而且绝大多数是程序运行时不允许出现的状况。对于设计合理的应用程序来说，即使确实发生了错误，本质上也不应该试图去处理它所引起的异常状况。在Java中，错误通常是使用Error的子类描述。</li><li>Exception：在Exception分支中有一个重要的子类RuntimeException（运行时异常），该类型的异常自动为你所编写的程序定义ArrayIndexOutOfBoundsException（数组下标越界）、NullPointerException（空指针异常）、ArithmeticException（算术异常）、MissingResourceException（丢失资源）、ClassNotFoundException（找不到类）等异常，这些异常是不检查异常，程序中可以选择捕获处理，也可以不处理。这些异常一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常的发生；而RuntimeException之外的异常我们统称为非运行时异常，类型上属于Exception类及其子类，从程序语法角度讲是必须进行处理的异常，如果不处理，程序就不能编译通过。如IOException、SQLException等以及用户自定义的Exception异常，一般情况下不自定义检查异常。</li></ul><img src="/posts/1f03d757/116.jpg" class><h2 id="47、Java-语言如何进行异常处理，关键字：throws、throw、try、catch、finally-分别如何使用？"><a href="#47、Java-语言如何进行异常处理，关键字：throws、throw、try、catch、finally-分别如何使用？" class="headerlink" title="47、Java 语言如何进行异常处理，关键字：throws、throw、try、catch、finally 分别如何使用？"></a>47、Java 语言如何进行异常处理，关键字：throws、throw、try、catch、finally 分别如何使用？</h2><p>Java通过面向对象的方法进行异常处理，把各种不同的异常进行分类，并提供了良好的接口。在Java中，每个异常都是一个对象，它是Throwable类或其子类的实例。当一个方法出现异常后便抛出一个异常对象，该对象中包含有异常信息，调用这个对象的方法可以捕获到这个异常并可以对其进行处理。Java的异常处理是通过5个关键词来实现的：try、catch、throw、throws和finally。</p><p>一般情况下是用try来执行一段程序，如果系统会抛出（throw）一个异常对象，可以通过它的类型来捕获（catch）它，或通过总是执行代码块（finally）来处理；</p><p>try用来指定一块预防所有异常的程序；catch子句紧跟在try块后面，用来指定你想要捕获的异常的类型；</p><p>throw语句用来明确地抛出一个异常；</p><p>throws用来声明一个方法可能抛出的各种异常（当然声明异常时允许无病呻吟）；</p><p>finally为确保一段代码不管发生什么异常状况都要被执行；</p><p>try语句可以嵌套，每当遇到一个try语句，异常的结构就会被放入异常栈中，直到所有的try语句都完成。如果下一级的try语句没有对某种异常进行处理，异常栈就会执行出栈操作，直到遇到有处理这种异常的try语句或者最终将异常抛给JVM。</p><h2 id="48、运行时异常与受检异常有何异同？"><a href="#48、运行时异常与受检异常有何异同？" class="headerlink" title="48、运行时异常与受检异常有何异同？"></a>48、运行时异常与受检异常有何异同？</h2><p>异常表示程序运行过程中可能出现的非正常状态。</p><p>运行时异常表示虚拟机的通常操作中可能遇到的异常，是一种常见运行错误，只要程序设计得没有问题通常就不会发生。</p><p>受检异常跟程序运行的上下文环境有关，即使程序设计无误，仍然可能因使用的问题而引发。</p><p><strong>Java编译器要求方法必须声明抛出可能发生的受检异常，但是并不要求必须声明抛出未被捕获的运行时异常。</strong>异常和继承一样，是面向对象程序设计中经常被滥用的东西，在Effective Java中对异常的使用给出了以下指导原则：</p><ul><li>不要将异常处理用于正常的控制流（设计良好的API不应该强迫它的调用者为了正常的控制流而使用异常）</li><li>对可以恢复的情况使用受检异常，对编程错误使用运行时异常</li><li>避免不必要的使用受检异常（可以通过一些状态检测手段来避免异常的发生）</li><li>优先使用标准的异常</li><li>每个方法抛出的异常都要有文档</li><li>保持异常的原子性</li><li>不要在catch中忽略掉捕获到的异常</li></ul><h2 id="49、列出一些你常见的运行时异常？"><a href="#49、列出一些你常见的运行时异常？" class="headerlink" title="49、列出一些你常见的运行时异常？"></a>49、列出一些你常见的运行时异常？</h2><ul><li>ArithmeticException（算术异常）</li><li>ClassCastException （类转换异常）</li><li>IllegalArgumentException （非法参数异常）</li><li>IndexOutOfBoundsException （下标越界异常）</li><li>NullPointerException （空指针异常）</li><li>SecurityException （安全异常）</li></ul><h2 id="50、阐述-final、finally、finalize-的区别。"><a href="#50、阐述-final、finally、finalize-的区别。" class="headerlink" title="50、阐述 final、finally、finalize 的区别。"></a>50、阐述 final、finally、finalize 的区别。</h2><ul><li>final：修饰符（关键字）有三种用法：如果一个类被声明为 final，意味 着它不能再派生出新的子类，即不能被继承，因此它和 abstract 是反义词。将 变量声明为 final，可以保证它们在使用中不被改变，被声明为 final 的变量必须 在声明时给定初值，而在以后的引用中只能读取不可修改。被声明为 final 的方 法也同样只能使用，不能在子类中被重写。</li><li>finally：通常放在 try…catch…的后面构造总是执行代码块，这就意味着 程序无论正常执行还是发生异常，这里的代码只要 JVM 不关闭都能执行，可以 将释放外部资源的代码写在 finally 块中。</li><li>finalize：Object 类中定义的方法，Java 中允许使用 finalize()方法在垃 圾收集器将对象从内存中清除出去之前做必要的清理工作。这个方法是由垃圾收集器在销毁对象时调用的，通过重写 finalize()方法可以整理系统资源或者执行其他清理工作。</li></ul><h2 id="52、List、Set、Map-是否继承自-Collection-接口？"><a href="#52、List、Set、Map-是否继承自-Collection-接口？" class="headerlink" title="52、List、Set、Map 是否继承自 Collection 接口？"></a>52、List、Set、Map 是否继承自 Collection 接口？</h2><p>List、Set 是，Map 不是。Map 是键值对映射容器，与 List 和 Set 有明显的区别， 而 Set 存储的零散的元素且不允许有重复元素（数学中的集合也是如此），List 是线性结构的容器，适用于按数值索引访问元素的情形。</p><h2 id="53、阐述-ArrayList、Vector、LinkedList-的存储性能和特性。"><a href="#53、阐述-ArrayList、Vector、LinkedList-的存储性能和特性。" class="headerlink" title="53、阐述 ArrayList、Vector、LinkedList 的存储性能和特性。"></a>53、阐述 ArrayList、Vector、LinkedList 的存储性能和特性。</h2><p>ArrayList 和 Vector 都是使用数组方式存储数据，此数组元素数大于实际存储的 数据以便增加和插入元素，它们都允许直接按序号索引元素，但是插入元素要涉 及数组元素移动等内存操作，所以索引数据快而插入数据慢，Vector 中的方法由 于添加了 synchronized 修饰，因此 Vector 是线程安全的容器，但性能上ArrayList 差，因此已经是 Java 中的遗留容器。LinkedList 使用双向链表实现存 储（将内存中零散的内存单元通过附加的引用关联起来，形成一个可以按序号索 引的线性结构，这种链式存储方式与数组的连续存储方式相比，内存的利用率更 高），按序号索引数据需要进行前向或后向遍历，但是插入数据时只需要记录项的前后项即可，所以插入速度较快。Vector 属于遗留容器（Java 早期的版本中 提供的容器，除此之外，Hashtable、Dictionary、BitSet、Stack、Properties 都是遗留容器），已经不推荐使用，但是由于 ArrayList 和 LinkedListed 都是非 线程安全的，如果遇到多个线程操作同一个容器的场景，则可以通过工具类 Collections 中的 synchronizedList 方法将其转换成线程安全的容器后再使用（这是对装潢模式的应用，将已有对象传入另一个类的构造器中创建新的对象来增强实现）。</p><h2 id="54、Collection-和-Collections-的区别？"><a href="#54、Collection-和-Collections-的区别？" class="headerlink" title="54、Collection 和 Collections 的区别？"></a>54、Collection 和 Collections 的区别？</h2><p>答： Collection 是一个接口，它是 Set、List 等容器的父接口；Collections 是个一个 工具类，提供了一系列的静态方法来辅助容器操作，这些方法包括对容器的搜索、 排序、线程安全化等等。</p><h2 id="55、List、Map、Set-三个接口存取元素时，各有什么特点？"><a href="#55、List、Map、Set-三个接口存取元素时，各有什么特点？" class="headerlink" title="55、List、Map、Set 三个接口存取元素时，各有什么特点？"></a>55、List、Map、Set 三个接口存取元素时，各有什么特点？</h2><p>List 以特定索引来存取元素，可以有重复元素。</p><p>Set 不能存放重复元素（用对象的 equals()方法来区分元素是否重复）。</p><p>Map 保存键值对（key-value pair）映射， 映射关系可以是一对一或多对一。</p><p>Set 和 Map 容器都有基于哈希存储和排序树的 两种实现版本，基于哈希存储的版本理论存取时间复杂度为 O(1)，而基于排序树 版本的实现在插入或删除元素时会按照元素或元素的键（key）构成排序树从而达 到排序和去重的效果。</p><h2 id="56、TreeMap-和-TreeSet-在排序时如何比较元素？-Collections-工具类中的-sort-方法如何比较元素？"><a href="#56、TreeMap-和-TreeSet-在排序时如何比较元素？-Collections-工具类中的-sort-方法如何比较元素？" class="headerlink" title="56、TreeMap 和 TreeSet 在排序时如何比较元素？ Collections 工具类中的 sort()方法如何比较元素？"></a>56、TreeMap 和 TreeSet 在排序时如何比较元素？ Collections 工具类中的 sort()方法如何比较元素？</h2><p>TreeSet 要求存放的对象所属的类必须实现 Comparable 接口，该接口提供了比较元素的 compareTo()方法，当插入元素时会回调该方法比较元素的大小。</p><p>TreeMap 要求存放的键值对映射的键必须实现 Comparable 接口从而根据键对元素进行排序。</p><p>Collections 工具类的 sort 方法有两种重载的形式，第一种要求传入 的待排序容器中存放的对象比较实现 Comparable 接口以实现元素的比较；第二种不强制性的要求容器中的元素必须可比较，但是要求传入第二个参数，参数是 Comparator 接口的子类型（需要重写 compare 方法实现元素的比较），相当于一个临时定义的排序规则，其实就是通过接口注入比较元素大小的算法，也是对回调模式的应用（Java中对函数式编程的支持）。</p><h2 id="57、Thread-类的-sleep-方法和对象的-wait-方法都可以让线程暂停执行，它们有什么区别"><a href="#57、Thread-类的-sleep-方法和对象的-wait-方法都可以让线程暂停执行，它们有什么区别" class="headerlink" title="57、Thread 类的 sleep()方法和对象的 wait()方法都可以让线程暂停执行，它们有什么区别?"></a>57、Thread 类的 sleep()方法和对象的 wait()方法都可以让线程暂停执行，它们有什么区别?</h2><p>sleep()方法（休眠）是线程类（Thread）的静态方法，调用此方法会让当前线程暂停执行指定的时间，将执行机会（CPU）让给其他线程，但是对象的锁依然保持，因此休眠时间结束后会自动恢复。</p><p>wait()是 Object 类的方法，调用对象的 wait()方法导致当前线程放弃对象的锁（线程暂停执行），进入对象的等待池（wait pool），只有调用对象的notify()方法（或 notifyAll()方法）时才能唤醒等待池中的线程进入等锁池（lock pool），如果线程重新获得对象的锁就可以进入就绪状态。</p><h2 id="58、线程的-sleep-方法和-yield-方法有什么区别？"><a href="#58、线程的-sleep-方法和-yield-方法有什么区别？" class="headerlink" title="58、线程的 sleep()方法和 yield()方法有什么区别？"></a>58、线程的 sleep()方法和 yield()方法有什么区别？</h2><ul><li>sleep()方法给其他线程运行机会时不考虑线程的优先级，因此会给低优先级的线程以运行的机会；yield()方法只会给相同优先级或更高优先级的线程以运行的机会；</li><li>线程执行 sleep()方法后转入阻塞（blocked）状态，而执行 yield()方法后转入就绪（ready）状态；</li><li>sleep()方法声明抛出 InterruptedException，而 yield()方法没有声明任何异常；</li><li>sleep()方法比 yield()方法（跟操作系统 CPU 调度相关）具有更好的可移植性。</li></ul><h2 id="59、当一个线程进入一个对象的-synchronized-方法A之后，-其它线程是否可进入此对象的-synchronized-方法B？"><a href="#59、当一个线程进入一个对象的-synchronized-方法A之后，-其它线程是否可进入此对象的-synchronized-方法B？" class="headerlink" title="59、当一个线程进入一个对象的 synchronized 方法A之后， 其它线程是否可进入此对象的 synchronized 方法B？"></a>59、当一个线程进入一个对象的 synchronized 方法A之后， 其它线程是否可进入此对象的 synchronized 方法B？</h2><p>不能。其它线程只能访问该对象的非同步方法，同步方法则不能进入。因为非静态方法上的 synchronized 修饰符要求执行方法时要获得对象的锁，如果已经进入A方法说明对象锁已经被取走，那么试图进入B方法的线程就只能在等锁池（注意不是等待池）中等待对象的锁。</p><h2 id="68、Java-中如何实现序列化，有什么意义？"><a href="#68、Java-中如何实现序列化，有什么意义？" class="headerlink" title="68、Java 中如何实现序列化，有什么意义？"></a>68、Java 中如何实现序列化，有什么意义？</h2><p>序列化就是一种用来处理对象流的机制，所谓对象流也就是将对象的内容进行流化。可以对流化后的对象进行读写操作，也可将流化后的对象传输于网络之间。 序列化是为了解决对象流读写操作时可能引发的问题（如果不进行序列化可能会存在数据乱序的问题）。要实现序列化，需要让一个类实现 Serializable 接口，该接口是一个标识性接口，标注该类对象是可被序列化的，然后使用一个输出流来构造一个对象输出流并通过 writeObject(Object)方法就可以将实现对象写出（即保存其状态）；如果需要反序列化则可以用一个输入流建立对象输入流，然后通过 readObject 方法从流中读取对象。序列化除了能够实现对象的持久化之外，还能够用于对象的深度克隆。</p><h2 id="69、Java-中有几种类型的流？"><a href="#69、Java-中有几种类型的流？" class="headerlink" title="69、Java 中有几种类型的流？"></a>69、Java 中有几种类型的流？</h2><p>字节流和字符流。字节流继承于 InputStream、OutputStream，字符流继承Reader、Writer。在 <a href="http://java.io/">java.io</a> 包中还有许多其他的流，主要是为了提高性能和使用方便。关于 Java 的 I&#x2F;O 需要注意的有两点：一是两种对称性（输入和输出的对 称性，字节和字符的对称性）；二是两种设计模式（适配器模式和装潢模式）。</p><h2 id="73、XML-文档定义有几种形式？它们之间有何本质区别？解析-XML-文档有哪几种方式？"><a href="#73、XML-文档定义有几种形式？它们之间有何本质区别？解析-XML-文档有哪几种方式？" class="headerlink" title="73、XML 文档定义有几种形式？它们之间有何本质区别？解析 XML 文档有哪几种方式？"></a>73、XML 文档定义有几种形式？它们之间有何本质区别？解析 XML 文档有哪几种方式？</h2><ul><li><p>XML 文档定义分为 DTD 和 Schema 两种形式，二者都是对 XML 语法的约束。</p><p>其本质区别在于 Schema 本身也是一个 XML 文件，可以被 XML 解析器解析，而且 可以为 XML 承载的数据定义类型，约束能力较之 DTD 更强大。</p></li><li><p>对 XML 的解析主 要有 DOM（文档对象模型，Document Object Model）、SAX（Simple API foXML）和 StAX（Java 6 中引入的新的解析 XML 的方式，Streaming API for XML）。</p><ul><li><p>其中 DOM 处理大型文件时其性能下降的非常厉害，这个问题是由 DOM 树结构用的内存较多造成的，而且 DOM 解析方式必须在解析文件之前把整个文档装入内存，适合对 XML 的随机访问（典型的用空间换取时间的策略）。</p></li><li><p>SAX 是事件驱动型的 XML 解析方式，它顺序读取 XML 文件，不需要一次全部装载整个文件。当遇到像文件开头，文档结束，或者标签开头与标签结束时，它会触发一个事件， 用户通过事件回调代码来处理 XML 文件，适合对 XML 的顺序访问。</p></li><li><p>顾名思义， StAX 把重点放在流上，实际上 StAX 与其他解析方式的本质区别就在于应用程能够把 XML 作为一个事件流来处理。将 XML 作为一组事件来处理的想法并不新颖（SAX 就是这样做的），但不同之处在于 StAX 允许应用程序代码把这些事件逐个拉出来，而不用提供在解析器方便时从解析器中接收事件的处理程序。</p></li></ul></li></ul><h2 id="75、阐述-JDBC-操作数据库的步骤。"><a href="#75、阐述-JDBC-操作数据库的步骤。" class="headerlink" title="75、阐述 JDBC 操作数据库的步骤。"></a>75、阐述 JDBC 操作数据库的步骤。</h2><ol><li>加载驱动。</li><li>创建连接。</li><li>创建语句。</li><li>执行语句。</li><li>处理结果。</li><li>关闭资源。</li></ol><p>关闭外部资源的顺序应该和打开的顺序相反，也就是说先关闭 ResultSet、 再关闭 Statement、在关闭 Connection。上面的代码只关闭了 Connection，虽然通常情况下在关闭连接时，连接上创建的语句和打开的游标也会关闭，但不能保证总是如此，因此应该按照刚才说的顺序分别关闭。此外，第一步加载驱动在 JDBC 4.0 中是可以省略的（自动从类路径中加载驱动），但是我们建议保留。</p><h2 id="76、Statement-和-PreparedStatement-有什么区别？哪个性能更好？"><a href="#76、Statement-和-PreparedStatement-有什么区别？哪个性能更好？" class="headerlink" title="76、Statement 和 PreparedStatement 有什么区别？哪个性能更好？"></a>76、Statement 和 PreparedStatement 有什么区别？哪个性能更好？</h2><ol><li>PreparedStatement 接口代表预编译的语句，它主要的优势在于可以减少 SQL 的编译错误并增加 SQL 的安全性（减少 SQL 注射攻击的可 能性）；</li><li>PreparedStatement 中的 SQL 语句是可以带参数的，避免了用字符串连接拼接 SQL 语句的麻烦和不安全；</li><li>当批量处理 SQL 或频繁执行相同的查询时， PreparedStatement 有明显的性能上的优势，由于数据库可以将编译优化后的 SQL 语句缓存起来，下次执行相同结构的语句时就会很快（不用再次编译和生成执行计划）。</li></ol><p>补充：为了提供对存储过程的调用，JDBC API 中还提供了 CallableStatement 接 口。存储过程（Stored Procedure）是数据库中一组为了完成特定功能的 SQL 语句的集合，经编译后存储在数据库中，用户通过指定存储过程的名字并给出参数 （如果该存储过程带有参数）来执行它。虽然调用存储过程会在网络开销、安全性、性能上获得很多好处，但是存在如果底层数据库发生迁移时就会有很多麻烦， 因为每种数据库的存储过程在书写上存在不少的差别。</p><h2 id="77、使用-JDBC-操作数据库时，如何提升读取数据的性能？如何提升更新数据的性能？"><a href="#77、使用-JDBC-操作数据库时，如何提升读取数据的性能？如何提升更新数据的性能？" class="headerlink" title="77、使用 JDBC 操作数据库时，如何提升读取数据的性能？如何提升更新数据的性能？"></a>77、使用 JDBC 操作数据库时，如何提升读取数据的性能？如何提升更新数据的性能？</h2><p>要提升读取数据的性能，可以指定通过结果集（ResultSet）对象的 setFetchSize()方法指定每次抓取的记录数（典型的空间换时间策略）</p><p>要提升更新数据的性能 可以使用 PreparedStatement 语句构建批处理，将若干 SQL 语句置于一个批处理中执行。</p><h2 id="78、在进行数据库编程时，连接池有什么作用？"><a href="#78、在进行数据库编程时，连接池有什么作用？" class="headerlink" title="78、在进行数据库编程时，连接池有什么作用？"></a>78、在进行数据库编程时，连接池有什么作用？</h2><p>由于创建连接和释放连接都有很大的开销（尤其是数据库服务器不在本地时，每次建立连接都需要进行 TCP 的三次握手，释放连接需要进行 TCP 四次握手，造成的开销是不可忽视的），为了提升系统访问数据库的性能，可以事先创建若干连接置于连接池中，需要时直接从连接池获取，使用结束时归还连接池而不必关闭连接，从而避免频繁创建和释放连接所造成的开销，这是典型的用空间换取时间的策略（浪费了空间存储连接，但节省了创建和释放连接的时间）。池化技术在 Java 开发中是很常见的，在使用线程时创建线程池的道理与此相同。基于 Java 的 开源数据库连接池主要有：C3P0、Proxool、DBCP、BoneCP、Druid 等</p><p>补充：在计算机系统中时间和空间是不可调和的矛盾，理解这一点对设计满足性能要求的算法是至关重要的。大型网站性能优化的一个关键就是使用缓存，而缓存跟上面讲的连接池道理非常类似，也是使用空间换时间的策略。可以将热点数据置于缓存中，当用户查询这些数据时可以直接从缓存中得到，这无论如何也快过去数据库中查询。当然，缓存的置换策略等也会对系统性能产生重要影响，对于这个问题的讨论已经超出了这里要阐述的范围。</p><h2 id="79、什么是-DAO-模式？"><a href="#79、什么是-DAO-模式？" class="headerlink" title="79、什么是 DAO 模式？"></a>79、什么是 DAO 模式？</h2><p>DAO（Data Access Object）顾名思义是一个为数据库或其他持久化机制提供了抽象接口的对象，在不暴露底层持久化方案实现细节的前提下提供了各种数据访问操作。</p><p>在实际的开发中，应该将所有对数据源的访问操作进行抽象化后封装在一个公共 API 中。用程序设计语言来说，就是建立一个接口，接口中定义了此应用程序中将会用到的所有事务方法。在这个应用程序中，当需要和数据源进行交互的时候则使用这个接口，并且编写一个单独的类来实现这个接口，在逻辑上该类对应一个特定的数据存储。</p><p>DAO 模式实际上包含了两个模式，一是 Data Accessor（数据访问器），二是 Data Object（数据对象），前者要解决如何访问数据的问题，而后者要解决的是如何用对象封装数据。</p><h2 id="81、JDBC-中如何进行事务处理？"><a href="#81、JDBC-中如何进行事务处理？" class="headerlink" title="81、JDBC 中如何进行事务处理？"></a>81、JDBC 中如何进行事务处理？</h2><p>Connection 提供了事务处理的方法，通过调用 setAutoCommit(false)可以设置手动提交事务；当事务完成后用 commit()显式提交事务；如果在事务处理过程中发生异常则通过 rollback()进行事务回滚。除此之外，从 JDBC 3.0 中还引入了 Savepoint（保存点）的概念，允许通过代码设置保存点并让事务回滚到指定的保存点。</p><img src="/posts/1f03d757/117.jpg" class><h2 id="82、JDBC-能否处理-Blob-和-Clob？"><a href="#82、JDBC-能否处理-Blob-和-Clob？" class="headerlink" title="82、JDBC 能否处理 Blob 和 Clob？"></a>82、JDBC 能否处理 Blob 和 Clob？</h2><p>答： Blob 是指二进制大对象（Binary Large Object），而 Clob 是指大字符对象（Character Large Object），因此其中 Blob 是为存储大的二进制数据而设计的，而 Clob 是为存储大的文本数据而设计的。JDBC 的 PreparedStatement 和 ResultSet 都提供了相应的方法来支持 Blob 和 Clob 操作。</p><h2 id="85、获得一个类的类对象有哪些方式？"><a href="#85、获得一个类的类对象有哪些方式？" class="headerlink" title="85、获得一个类的类对象有哪些方式？"></a>85、获得一个类的类对象有哪些方式？</h2><ul><li>方法 1：类型.class，例如：String.class</li><li>方法 2：对象<code>.getClass()</code>，例如：<code>”hello”.getClass()</code></li><li>方法 3：<code>Class.forName()</code>，例如：<code>Class.forName(“java.lang.String”)</code></li></ul><h2 id="86、如何通过反射创建对象？"><a href="#86、如何通过反射创建对象？" class="headerlink" title="86、如何通过反射创建对象？"></a>86、如何通过反射创建对象？</h2><ul><li>方法 1：通过类对象调用 newInstance()方法，例如： String.class.newInstance()</li><li>方法 2：通过类对象的 getConstructor()或 getDeclaredConstructor() 方法获得构造器（Constructor）对象并调用其 newInstance()方法创建对象， 例如：<code>String.class.getConstructor(String.class).newInstance(“Hello”);</code></li></ul><h2 id="87、Java-中能创建-volatile-数组吗？"><a href="#87、Java-中能创建-volatile-数组吗？" class="headerlink" title="87、Java 中能创建 volatile 数组吗？"></a>87、Java 中能创建 volatile 数组吗？</h2><p>能，Java 中可以创建 volatile 类型数组，不过只是一个指向数组的引用，而不是整个数组。我的意思是，如果改变引用指向的数组，将会受到 volatile 的保护，但是如果多个线程同时改变数组的元素，volatile 标示符就不能起到之前的保护作用了。</p><h2 id="88、volatile-能使得一个非原子操作变成原子操作吗？"><a href="#88、volatile-能使得一个非原子操作变成原子操作吗？" class="headerlink" title="88、volatile 能使得一个非原子操作变成原子操作吗？"></a>88、volatile 能使得一个非原子操作变成原子操作吗？</h2><p>一个典型的例子是在类中有一个 long 类型的成员变量。如果你知道该成员变量会被多个线程访问，如计数器、价格等，你最好是将其设置为 volatile。为什么？因为 Java 中读取 long 类型变量不是原子的，需要分成两步，如果一个线程正在修改该 long 变量的值，另一个线程可能只能看到该值的一半（前 32 位）。但是对一个 volatile 型的 long 或 double 变量的读写是原子。</p><h2 id="89、volatile-修饰符的有过什么实践？"><a href="#89、volatile-修饰符的有过什么实践？" class="headerlink" title="89、volatile 修饰符的有过什么实践？"></a>89、volatile 修饰符的有过什么实践？</h2><p>一种实践是用 volatile 修饰 long 和 double 变量，使其能按原子类型来读写。double 和 long 都是 64 位宽，因此对这两种类型的读是分为两部分的，第一次读取第一个 32 位，然后再读剩下的 32 位，这个过程不是原子的，但 Java 中 volatile 型的 long 或 double 变量的读写是原子的。volatile 修复符的另一个作用是提供内存屏障（memory barrier），例如在分布式框架中的应用。</p><p>简单的说，就是当你写一个 volatile 变量之前，Java 内存模型会插入一个写屏障（writebarrier），读一个 volatile 变量之前，会插入一个读屏障（read barrier）。意思就是说，在你写一个 volatile 域时，能保证任何线程都能看到你写的值，同时，在写之前，也能保证任何数值的更新对所有线程是可见的，因为内存屏障会将其他所有写的值更新到缓存。</p><h2 id="90、volatile-类型变量提供什么保证？"><a href="#90、volatile-类型变量提供什么保证？" class="headerlink" title="90、volatile 类型变量提供什么保证？"></a>90、volatile 类型变量提供什么保证？</h2><p>volatile 变量提供顺序和可见性保证，例如，JVM 或者 JIT 为了获得更好的性能会对语句重排序，但是 volatile 类型变量即使在没有同步块的情况下赋值也不会与其他语句重排序。 volatile 提供 happens-before 的保证，确保一个线程的修改能对其他线程是可见的。某些情况下，volatile 还能提供原子性，如读 64 位数据类型，像 long 和 double 都不是原子的，但 volatile 类型的 double 和 long 就是原子的。</p><h2 id="91、10-个线程和-2-个线程的同步代码，哪个更容易写？"><a href="#91、10-个线程和-2-个线程的同步代码，哪个更容易写？" class="headerlink" title="91、10 个线程和 2 个线程的同步代码，哪个更容易写？"></a>91、10 个线程和 2 个线程的同步代码，哪个更容易写？</h2><p>从写代码的角度来说，两者的复杂度是相同的，因为同步代码与线程数量是相互独立的。但是同步策略的选择依赖于线程的数量，因为越多的线程意味着更大的竞争，所以你需要利用同步技术，如锁分离，这要求更复杂的代码和专业知识。</p><h2 id="92、你是如何调用-wait（）方法的？使用-if-块还是循环？为什么？"><a href="#92、你是如何调用-wait（）方法的？使用-if-块还是循环？为什么？" class="headerlink" title="92、你是如何调用 wait（）方法的？使用 if 块还是循环？为什么？"></a>92、你是如何调用 wait（）方法的？使用 if 块还是循环？为什么？</h2><p>wait() 方法应该在循环调用，因为当线程获取到 CPU 开始执行的时候，其他条件可能还没有满足，所以在处理前，循环检测条件是否满足会更好。下面是一段标准的使用 wait 和 notify 方法的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// The standard idiom for using the wait method</span><br><span class="hljs-keyword">synchronized</span> (obj) &#123;<br><span class="hljs-keyword">while</span> (condition does not hold)<br>obj.wait();<br><span class="hljs-comment">// (Releases lock, and reacquires on wakeup)</span><br>... <span class="hljs-comment">// Perform action appropriate to condition</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="93、什么是多线程环境下的伪共享（false-sharing）？"><a href="#93、什么是多线程环境下的伪共享（false-sharing）？" class="headerlink" title="93、什么是多线程环境下的伪共享（false sharing）？"></a>93、什么是多线程环境下的伪共享（false sharing）？</h2><p>伪共享是多线程系统（每个处理器有自己的局部缓存）中一个众所周知的性能问题。伪共享发生在不同处理器的上的线程对变量的修改依赖于相同的缓存行。</p><h2 id="94、什么是-Busy-spin？我们为什么要使用它？"><a href="#94、什么是-Busy-spin？我们为什么要使用它？" class="headerlink" title="94、什么是 Busy spin？我们为什么要使用它？"></a>94、什么是 Busy spin？我们为什么要使用它？</h2><p>Busy spin 是一种在不释放 CPU 的基础上等待事件的技术。它经常用于避免丢失 CPU 缓存中的数据（如果线程先暂停，之后在其他 CPU 上运行就会丢失）。所以，如果你的工作要求低延迟，并且你的线程目前没有任何顺序，这样你就可以通过循环检测队列中的新消息来代替调用 sleep() 或 wait() 方法。它唯一的好处就是你只需等待很短的时间，如几微秒或几纳秒。LMAX 分布式框架是一个高性能线程间通信的库，该库有一个 BusySpinWaitStrategy 类就是基于这个概念实现的，使用 busy spin 循环 EventProcessors 等待屏障。</p><h2 id="95、Java-中怎么获取一份线程-dump-文件？"><a href="#95、Java-中怎么获取一份线程-dump-文件？" class="headerlink" title="95、Java 中怎么获取一份线程 dump 文件？"></a>95、Java 中怎么获取一份线程 dump 文件？</h2><p>在 Linux 下，你可以通过命令 kill -3 PID （Java 进程的进程 ID）来获取 Java应用的 dump 文件。在 Windows 下，你可以按下 Ctrl + Break 来获取。这样 JVM 就会将线程的 dump 文件打印到标准输出或错误文件中，它可能打印在控制台或者日志文件中，具体位置依赖应用的配置。如果你使用 Tomcat。</p><h2 id="96、Swing-是线程安全的？"><a href="#96、Swing-是线程安全的？" class="headerlink" title="96、Swing 是线程安全的？"></a>96、Swing 是线程安全的？</h2><p>不是，Swing 不是线程安全的。你不能通过任何线程来更新 Swing 组件，如JTable、JList 或 JPanel，事实上，它们只能通过 GUI 或 AWT 线程来更新。这就是为什么 Swing供 invokeAndWait() 和 invokeLater() 方法来获取其他线程的 GUI 更新请求。这些方法将更新请求放入 AWT 的线程队列中，可以一直等待，也可以通过异步更新直接返回结果。</p><h2 id="97、什么是线程局部变量？"><a href="#97、什么是线程局部变量？" class="headerlink" title="97、什么是线程局部变量？"></a>97、什么是线程局部变量？</h2><p>线程局部变量是局限于线程内部的变量，属于线程自身所有，不在多个线程间共享。Java 提供 ThreadLocal 类来支持线程局部变量，是一种实现线程安全的方式。但是在管理环境下（如 web 服务器）使用线程局部变量的时候要特别小心，在这种情况下，工作线程的生命周期比任何应用变量的生命周期都要长。任何线程局部变量一旦在工作完成后没有释放，Java 应用就存在内存泄露的风险。</p><h2 id="98、用-wait-notify-写一段代码来解决生产者-消费者问题？"><a href="#98、用-wait-notify-写一段代码来解决生产者-消费者问题？" class="headerlink" title="98、用 wait-notify 写一段代码来解决生产者-消费者问题？"></a>98、用 wait-notify 写一段代码来解决生产者-消费者问题？</h2><p>只要记住在同步块中调用 wait() 和 notify() 方法 ，如果阻塞，通过循环来测试等待条件。</p><h2 id="99、用-Java-写一个线程安全的单例模式（Singleton）？"><a href="#99、用-Java-写一个线程安全的单例模式（Singleton）？" class="headerlink" title="99、用 Java 写一个线程安全的单例模式（Singleton）？"></a>99、用 Java 写一个线程安全的单例模式（Singleton）？</h2><p>一步一步创建一个线程安全的 Java 单例类。当我们说线程安全时，意思是即使初始化是在多线程环境中，仍然能保证单个实例。Java 中，使用枚举作为单例类是最简单的方式来创建线程安全单例模式的方式。</p><h2 id="100、Java-中-sleep-方法和-wait-方法的区别？"><a href="#100、Java-中-sleep-方法和-wait-方法的区别？" class="headerlink" title="100、Java 中 sleep 方法和 wait 方法的区别？"></a>100、Java 中 sleep 方法和 wait 方法的区别？</h2><p>虽然两者都是用来暂停当前运行的线程，但是 sleep() 实际上只是短暂停顿，因为它不会释放锁，而 wait() 意味着条件等待，这就是为什么该方法要释放锁，因为只有这样，其他等待的线程才能在满足条件时获取到该锁。</p><h2 id="101、什么是不可变对象（immutable-object）？Java-中怎么创建一个不可变对象？"><a href="#101、什么是不可变对象（immutable-object）？Java-中怎么创建一个不可变对象？" class="headerlink" title="101、什么是不可变对象（immutable object）？Java 中怎么创建一个不可变对象？"></a>101、什么是不可变对象（immutable object）？Java 中怎么创建一个不可变对象？</h2><p>不可变对象指对象一旦被创建，状态就不能再改变。任何修改都会创建一个新的对象，如 String、Integer 及其它包装类。</p><h2 id="102、我们能创建一个包含可变对象的不可变对象吗？"><a href="#102、我们能创建一个包含可变对象的不可变对象吗？" class="headerlink" title="102、我们能创建一个包含可变对象的不可变对象吗？"></a>102、我们能创建一个包含可变对象的不可变对象吗？</h2><p>是的，我们是可以创建一个包含可变对象的不可变对象的，你只需要谨慎一点，不要共享可变对象的引用就可以了，如果需要变化时，就返回原对象的一个拷贝。最常见的例子就是对象中包含一个日期对象的引用。数据类型和 Java 基础面试问题</p><h2 id="103、Java-中应该使用什么数据类型来代表价格？"><a href="#103、Java-中应该使用什么数据类型来代表价格？" class="headerlink" title="103、Java 中应该使用什么数据类型来代表价格？"></a>103、Java 中应该使用什么数据类型来代表价格？</h2><p>如果不是特别关心内存和性能的话，使用 BigDecimal，否则使用预定义精度的double 类型。</p><h2 id="103、怎么将-byte-转换为-String？"><a href="#103、怎么将-byte-转换为-String？" class="headerlink" title="103、怎么将 byte 转换为 String？"></a>103、怎么将 byte 转换为 String？</h2><p>可以使用 String 接收 byte[] 参数的构造器来进行转换，需要注意的点是要使用的正确的编码，否则会使用平台默认编码，这个编码可能跟原来的编码相同，也可能不同。</p><h2 id="104、Java-中怎样将-bytes-转换为-long-类型？"><a href="#104、Java-中怎样将-bytes-转换为-long-类型？" class="headerlink" title="104、Java 中怎样将 bytes 转换为 long 类型？"></a>104、Java 中怎样将 bytes 转换为 long 类型？</h2><p>bytes[] 到数字类型的转换是个经常用到的代码,解决方式也不止一种。</p><p><strong>java代码实现</strong></p><p>如果不想借助任何已经有的类，完全可以自己实现这段代码，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 将字节数组转为long&lt;br&gt;</span><br><span class="hljs-comment"> * 如果input为null,或offset指定的剩余数组长度不足8字节则抛出异常</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> input</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> offset       起始偏移量</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> littleEndian 输入数组是否小端模式</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-title function_">longFrom8Bytes</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] input, <span class="hljs-type">int</span> offset, Boolean littleEndian)</span> &#123;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 循环读取每个字节通过移位运算完成long的8个字节拼装</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; count &lt; <span class="hljs-number">8</span>; ++count) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">shift</span> <span class="hljs-operator">=</span> (littleEndian ? count : (<span class="hljs-number">7</span> - count)) &lt;&lt; <span class="hljs-number">3</span>;<br>        value |= ((<span class="hljs-type">long</span>) <span class="hljs-number">0xff</span> &lt;&lt; shift) &amp; ((<span class="hljs-type">long</span>) input[offset + count] &lt;&lt; shift);<br>    &#125;<br>    <span class="hljs-keyword">return</span> value;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>借助java.nio.ByteBuffer实现</strong></p><p>java.nio.ByteBuffer 本身就有getLong、getInt，getFloat….方法，只要将byte[]转换为ByteBuffer就可以实现所有primitive类型的数据读取，参见javadoc。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 利用 &#123;<span class="hljs-doctag">@link</span> java.nio.ByteBuffer&#125;实现byte[]转long</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> input</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> offset </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> littleEndian 输入数组是否小端模式</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-title function_">bytesTolong</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] input, <span class="hljs-type">int</span> offset, Boolean littleEndian)</span> &#123;<br><span class="hljs-comment">// 将byte[] 封装为 ByteBuffer </span><br><span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> ByteBuffer.wrap(input,offset,<span class="hljs-number">8</span>);<br><span class="hljs-keyword">if</span>(littleEndian)&#123;<br><span class="hljs-comment">// ByteBuffer.order(ByteOrder) 方法指定字节序,即大小端模式(BIG_ENDIAN/LITTLE_ENDIAN)</span><br><span class="hljs-comment">// ByteBuffer 默认为大端(BIG_ENDIAN)模式 </span><br>buffer.order(ByteOrder.LITTLE_ENDIAN);<br>&#125;<br><span class="hljs-keyword">return</span> buffer.getlong();<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>借助java.io.DataInputStream实现</strong></p><p>java.io.DataInputStream 同样提供了 readLong，readLong，readLong….方法，只要将byte[]转换为DataInputStream就可以实现所有primitive类型的数据读取,参见javadoc。</p><h2 id="105、我们能将-int-强制转换为-byte-类型的变量吗？如果该值大于-byte-类型的范围，将会出现什么现象？"><a href="#105、我们能将-int-强制转换为-byte-类型的变量吗？如果该值大于-byte-类型的范围，将会出现什么现象？" class="headerlink" title="105、我们能将 int 强制转换为 byte 类型的变量吗？如果该值大于 byte 类型的范围，将会出现什么现象？"></a>105、我们能将 int 强制转换为 byte 类型的变量吗？如果该值大于 byte 类型的范围，将会出现什么现象？</h2><p>是的，我们可以做强制转换，但是 Java 中 int 是 32 位的，而 byte 是 8 位的，所以，如果强制转化是，int 类型的高 24 位将会被丢弃，byte 类型的范围是从 -128 到 127。</p><h2 id="106、存在两个类，B-继承-A，C-继承-B，我们能将-B-转换为C-么？如-C-x3D-C-B；"><a href="#106、存在两个类，B-继承-A，C-继承-B，我们能将-B-转换为C-么？如-C-x3D-C-B；" class="headerlink" title="106、存在两个类，B 继承 A，C 继承 B，我们能将 B 转换为C 么？如 C &#x3D; (C) B；"></a>106、存在两个类，B 继承 A，C 继承 B，我们能将 B 转换为C 么？如 C &#x3D; (C) B；</h2><p>这属于强制类型转换，如果被转换的B实例不是C类型，会有异常</p><p>比如你的ABC分别对应动物，猫，黑猫。</p><p>向上转型就是比如</p><p>C c &#x3D; new C();</p><p>B b &#x3D; c;</p><p>你把c转型为B，黑猫是猫吗？是啊，所以这是ok的。</p><p>但是反过来</p><p>B b &#x3D; new B();</p><p>C c &#x3D; (C)b;</p><p>这就不ok了，只知道这个b是一只猫，他不一定是黑猫。</p><p>但如果这个b已经确定是一只黑猫了，那就可以转型了</p><p>B b &#x3D; new C();</p><p>C c &#x3D; (C)b;</p><p>这里的b本来就是黑猫啊。</p><h2 id="107、哪个类包含-clone-方法？是-Cloneable-还是-Object？"><a href="#107、哪个类包含-clone-方法？是-Cloneable-还是-Object？" class="headerlink" title="107、哪个类包含 clone 方法？是 Cloneable 还是 Object？"></a>107、哪个类包含 clone 方法？是 Cloneable 还是 Object？</h2><p>java.lang.Cloneable 是一个标示性接口，不包含任何方法，clone 方法在object 类中定义。并且需要知道 clone() 方法是一个本地方法，这意味着它是由 c 或 c++ 或 其他本地语言实现的。</p><h2 id="108、Java-中-操作符是线程安全的吗？"><a href="#108、Java-中-操作符是线程安全的吗？" class="headerlink" title="108、Java 中 ++ 操作符是线程安全的吗？"></a>108、Java 中 ++ 操作符是线程安全的吗？</h2><p>不是线程安全的操作。它涉及到多个指令，如读取变量值，增加，然后存储回内存，这个过程可能会出现多个线程交差。</p><h2 id="109、a-x3D-a-b-与-a-x3D-b-的区别"><a href="#109、a-x3D-a-b-与-a-x3D-b-的区别" class="headerlink" title="109、a &#x3D; a + b 与 a +&#x3D; b 的区别"></a>109、a &#x3D; a + b 与 a +&#x3D; b 的区别</h2><p>+&#x3D; 隐式的将加操作的结果类型强制转换为持有结果的类型。如果两这个整型相加，如 byte、short 或者 int，首先会将它们提升到 int 类型，然后在执行加法操作。如果加法操作的结果比 a 的最大值要大，则 a+b 会出现编译错误，但是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">byte</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">127</span>;<br><span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">127</span>;<br>b = a + b;<br><span class="hljs-comment">// error : cannot convert from int to byte</span><br>b += a;<br><span class="hljs-comment">// ok</span><br></code></pre></td></tr></table></figure><p>（译者注：这个地方应该表述的有误，其实无论 a+b 的值为多少，编译器都会报错，因为 a+b 操作会将 a、b 提升为 int 类型，所以将 int 类型赋值给 byte就会编译出错）</p><h2 id="110、我能在不进行强制转换的情况下将一个-double-值赋值给-long-类型的变量吗？"><a href="#110、我能在不进行强制转换的情况下将一个-double-值赋值给-long-类型的变量吗？" class="headerlink" title="110、我能在不进行强制转换的情况下将一个 double 值赋值给 long 类型的变量吗？"></a>110、我能在不进行强制转换的情况下将一个 double 值赋值给 long 类型的变量吗？</h2><p>不行，你不能在没有强制类型转换的前提下将一个 double 值赋值给 long 类型的变量，因为 double 类型的范围比 long 类型更广，所以必须要进行强制转换。</p><h2 id="111、3-0-1-x3D-x3D-0-3-将会返回什么？true-还是-false？"><a href="#111、3-0-1-x3D-x3D-0-3-将会返回什么？true-还是-false？" class="headerlink" title="111、3 * 0.1 &#x3D;&#x3D; 0.3 将会返回什么？true 还是 false？"></a>111、3 * 0.1 &#x3D;&#x3D; 0.3 将会返回什么？true 还是 false？</h2><p>false，因为有些浮点数不能完全精确的表示出来。</p><h2 id="112、int-和-Integer-哪个会占用更多的内存？"><a href="#112、int-和-Integer-哪个会占用更多的内存？" class="headerlink" title="112、int 和 Integer 哪个会占用更多的内存？"></a>112、int 和 Integer 哪个会占用更多的内存？</h2><p>Integer 对象会占用更多的内存。Integer 是一个对象，需要存储对象的元数据。但是 int 是一个原始类型的数据，所以占用的空间更少。</p><h2 id="113、为什么-Java-中的-String-是不可变的（Immutable）？"><a href="#113、为什么-Java-中的-String-是不可变的（Immutable）？" class="headerlink" title="113、为什么 Java 中的 String 是不可变的（Immutable）？"></a>113、为什么 Java 中的 String 是不可变的（Immutable）？</h2><p>Java 中的 String 不可变是因为 Java 的设计者认为字符串使用非常频繁，将字符串设置为不可变可以允许多个客户端之间共享相同的字符串。</p><h2 id="114、我们能在-Switch-中使用-String-吗？"><a href="#114、我们能在-Switch-中使用-String-吗？" class="headerlink" title="114、我们能在 Switch 中使用 String 吗？"></a>114、我们能在 Switch 中使用 String 吗？</h2><p>从 Java 7 开始，我们可以在 switch case 中使用字符串，但这仅仅是一个语法糖。内部实现在 switch 中使用字符串的 hash code。</p><h2 id="115、Java-中的构造器链是什么？"><a href="#115、Java-中的构造器链是什么？" class="headerlink" title="115、Java 中的构造器链是什么？"></a>115、Java 中的构造器链是什么？</h2><p>当你从一个构造器中调用另一个构造器，就是 Java 中的构造器链。这种情况只在重载了类的构造器的时候才会出现。</p><h2 id="116、64-位-JVM-中，int-的长度是多数？"><a href="#116、64-位-JVM-中，int-的长度是多数？" class="headerlink" title="116、64 位 JVM 中，int 的长度是多数？"></a>116、64 位 JVM 中，int 的长度是多数？</h2><p>Java 中，int 类型变量的长度是一个固定值，与平台无关，都是 32 位。意思就是说，在32位和64位的java虚拟机中，int 类型的长度是相同的。</p><h2 id="117、Serial-与-Parallel-GC-之间的不同之处？"><a href="#117、Serial-与-Parallel-GC-之间的不同之处？" class="headerlink" title="117、Serial 与 Parallel GC 之间的不同之处？"></a>117、Serial 与 Parallel GC 之间的不同之处？</h2><p>Serial 与 Parallel 在 GC 执行的时候都会引起 stop-the-world。它们之间主要不同 serial 收集器是默认的复制收集器，执行 GC 的时候只有一个线程，而parallel 收集器使用多个 GC 线程来执行。</p><h2 id="118、32-位和-64-位的-JVM，int-类型变量的长度是多数？"><a href="#118、32-位和-64-位的-JVM，int-类型变量的长度是多数？" class="headerlink" title="118、32 位和 64 位的 JVM，int 类型变量的长度是多数？"></a>118、32 位和 64 位的 JVM，int 类型变量的长度是多数？</h2><p>32 位和 64 位的 JVM 中，int 类型变量的长度是相同的，都是 32 位或者 4个字节。</p><h2 id="119、Java-中-WeakReference-与-SoftReference-的区别？"><a href="#119、Java-中-WeakReference-与-SoftReference-的区别？" class="headerlink" title="119、Java 中 WeakReference 与 SoftReference 的区别？"></a>119、Java 中 WeakReference 与 SoftReference 的区别？</h2><p>虽然 WeakReference 与 SoftReference 都有利于提高 GC 和 内存的效率，但是 WeakReference ，一旦失去最后一个强引用，就会被 GC 回收，而软引用虽然不能阻止被回收，但是可以延迟到 JVM 内存不足的时候。</p><h2 id="120、WeakHashMap-是怎么工作的？"><a href="#120、WeakHashMap-是怎么工作的？" class="headerlink" title="120、WeakHashMap 是怎么工作的？"></a>120、WeakHashMap 是怎么工作的？</h2><p>WeakHashMap 的工作与正常的 HashMap 类似，但是使用弱引用作为 key，意思就是当 key 对象没有任何引用时，key&#x2F;value 将会被回收。</p><h2 id="121、JVM-选项-XX-UseCompressedOops-有什么作用？为什么要使用？"><a href="#121、JVM-选项-XX-UseCompressedOops-有什么作用？为什么要使用？" class="headerlink" title="121、JVM 选项 -XX:+UseCompressedOops 有什么作用？为什么要使用？"></a>121、JVM 选项 -XX:+UseCompressedOops 有什么作用？为什么要使用？</h2><p>当你将你的应用从 32 位的 JVM 迁移到 64 位的 JVM 时，由于对象的指针从32 位增加到了 64 位，因此堆内存会突然增加，差不多要翻倍。这也会对 CPU缓存（容量比内存小很多）的数据产生不利的影响。因为，迁移到 64 位的 JVM主要动机在于可以指定最大堆大小，通过压缩 OOP 可以节省一定的内存。通过-XX:+UseCompressedOops 选项，JVM 会使用 32 位的 OOP，而不是 64 位的 OOP。</p><h2 id="122、怎样通过-Java-程序来判断-JVM-是-32-位-还是-64位？"><a href="#122、怎样通过-Java-程序来判断-JVM-是-32-位-还是-64位？" class="headerlink" title="122、怎样通过 Java 程序来判断 JVM 是 32 位 还是 64位？"></a>122、怎样通过 Java 程序来判断 JVM 是 32 位 还是 64位？</h2><p>你可以检查某些系统属性如 sun.arch.data.model 或 os.arch 来获取该信息。</p><h2 id="123、32-位-JVM-和-64-位-JVM-的最大堆内存分别是多数？"><a href="#123、32-位-JVM-和-64-位-JVM-的最大堆内存分别是多数？" class="headerlink" title="123、32 位 JVM 和 64 位 JVM 的最大堆内存分别是多数？"></a>123、32 位 JVM 和 64 位 JVM 的最大堆内存分别是多数？</h2><p>理论上说上 32 位的 JVM 堆内存可以到达 2^32，即 4GB，但实际上会比这个小很多。不同操作系统之间不同，如 Windows 系统大约 1.5 GB，Solaris 大约3GB。64 位 JVM 允许指定最大的堆内存，理论上可以达到 2^64，这是一个非常大的数字，实际上你可以指定堆内存大小到 100GB。甚至有的 JVM，如 Azul，堆内存到 1000G 都是可能的。</p><h2 id="124、JRE、JDK、JVM-及-JIT-之间有什么不同？"><a href="#124、JRE、JDK、JVM-及-JIT-之间有什么不同？" class="headerlink" title="124、JRE、JDK、JVM 及 JIT 之间有什么不同？"></a>124、JRE、JDK、JVM 及 JIT 之间有什么不同？</h2><p>JRE 代表 Java 运行 时（Java run-time），是 运 行 Java 引用所必须的。</p><p>JDK 代表 Java 开发工具（Java development kit），是 Java 程序的开发工具，如 Java编译器，它也包含 JRE。</p><p>JVM 代表 Java 虚拟机（Java virtual machine），它的责任是运行 Java 应用。</p><p>JIT 代表即时编译（Just In Time compilation），当代码执行的次数超过一定的阈值时，会将 Java 字节码转换为本地代码，如，主要的热点代码会被准换为本地代码，这样有利大幅度提高 Java 应用的性能。</p><h2 id="125、解释-Java-堆空间及-GC？"><a href="#125、解释-Java-堆空间及-GC？" class="headerlink" title="125、解释 Java 堆空间及 GC？"></a>125、解释 Java 堆空间及 GC？</h2><p>当通过 Java 命令启动 Java 进程的时候，会为它分配内存。内存的一部分用于创建堆空间，当程序中创建对象的时候，就从对空间中分配内存。GC 是 JVM 内部的一个进程，回收无效对象的内存用于将来的分配。</p><h2 id="126、你能保证-GC-执行吗？"><a href="#126、你能保证-GC-执行吗？" class="headerlink" title="126、你能保证 GC 执行吗？"></a>126、你能保证 GC 执行吗？</h2><p>不能，虽然你可以调用 System.gc() 或者 Runtime.gc()，但是没有办法保证 GC的执行。</p><h2 id="127、怎么获取-Java-程序使用的内存？堆使用的百分比？"><a href="#127、怎么获取-Java-程序使用的内存？堆使用的百分比？" class="headerlink" title="127、怎么获取 Java 程序使用的内存？堆使用的百分比？"></a>127、怎么获取 Java 程序使用的内存？堆使用的百分比？</h2><p>可以通过 java.lang.Runtime 类中与内存相关方法来获取剩余的内存，总内存及最大堆内存。通过这些方法你也可以获取到堆使用的百分比及堆内存的剩余空间。<code>Runtime.freeMemory()</code> 方法返回剩余空间的字节数，<code>Runtime.totalMemory()</code>方法总内存的字节数，<code>Runtime.maxMemory()</code> 返回最大内存的字节数。</p><h2 id="128、Java-中堆和栈有什么区别？"><a href="#128、Java-中堆和栈有什么区别？" class="headerlink" title="128、Java 中堆和栈有什么区别？"></a>128、Java 中堆和栈有什么区别？</h2><p>JVM 中堆和栈属于不同的内存区域，使用目的也不同。栈常用于保存方法帧和局部变量，而对象总是在堆上分配。栈通常都比堆小，也不会在多个线程之间共享，而堆被整个 JVM 的所有线程共享。</p><h2 id="129、“a-x3D-x3D-b”和”a-equals-b-”有什么区别？"><a href="#129、“a-x3D-x3D-b”和”a-equals-b-”有什么区别？" class="headerlink" title="129、“a &#x3D;&#x3D; b”和”a.equals(b)”有什么区别？"></a>129、“a &#x3D;&#x3D; b”和”a.equals(b)”有什么区别？</h2><p>如果 a 和 b 都是对象，则 a&#x3D;&#x3D;b 是比较两个对象的引用，只有当 a 和 b 指向的是堆中的同一个对象才会返回 true，而 a.equals(b) 是进行逻辑比较，所以通常需要重写该方法来提供逻辑一致性的比较。例如，String 类重写 equals() 方法，所以可以用于两个不同对象，但是包含的字母相同的比较。</p><h2 id="130、a-hashCode-有什么用？与-a-equals-b-有什么关系？"><a href="#130、a-hashCode-有什么用？与-a-equals-b-有什么关系？" class="headerlink" title="130、a.hashCode() 有什么用？与 a.equals(b) 有什么关系？"></a>130、a.hashCode() 有什么用？与 a.equals(b) 有什么关系？</h2><p>hashCode() 方法是相应对象整型的 hash 值。它常用于基于 hash 的集合类，如 Hashtable、HashMap、LinkedHashMap 等等。它与 equals() 方法关系特别紧密。根据 Java 规范，两个使用 equal() 方法来判断相等的对象，必须具有相同的 hash code。</p><h2 id="131、final、finalize-和-finally-的不同之处？"><a href="#131、final、finalize-和-finally-的不同之处？" class="headerlink" title="131、final、finalize 和 finally 的不同之处？"></a>131、final、finalize 和 finally 的不同之处？</h2><p>final 是一个修饰符，可以修饰变量、方法和类。如果 final 修饰变量，意味着该变量的值在初始化后不能被改变。finalize 方法是在对象被回收之前调用的方法，给对象自己最后一个复活的机会，但是什么时候调用 finalize 没有保证。finally是一个关键字，与 try 和 catch 一起用于异常的处理。finally 块一定会被执行，无论在 try 块中是否有发生异常。</p><h2 id="132、Java-中的编译期常量是什么？使用它又什么风险？"><a href="#132、Java-中的编译期常量是什么？使用它又什么风险？" class="headerlink" title="132、Java 中的编译期常量是什么？使用它又什么风险？"></a>132、Java 中的编译期常量是什么？使用它又什么风险？</h2><p>公共静态不可变（public static final ）变量也就是我们所说的编译期常量，这里的 public 可选的。实际上这些变量在编译时会被替换掉，因为编译器知道这些变量的值，并且知道这些变量在运行时不能改变。这种方式存在的一个问题是你使用了一个内部的或第三方库中的公有编译时常量，但是这个值后面被其他人改变了，但是你的客户端仍然在使用老的值，甚至你已经部署了一个新的 jar。为了避免这种情况，当你在更新依赖 JAR 文件时，确保重新编译你的程序。</p><h2 id="133、poll-方法和-remove-方法的区别？"><a href="#133、poll-方法和-remove-方法的区别？" class="headerlink" title="133、poll() 方法和 remove() 方法的区别？"></a>133、poll() 方法和 remove() 方法的区别？</h2><p>poll() 和 remove() 都是从队列中取出一个元素，但是 poll() 在获取元素失败的时候会返回空，但是 remove() 失败的时候会抛出异常。</p><h2 id="134、Java-中-LinkedHashMap-和-PriorityQueue-的区别是什么？"><a href="#134、Java-中-LinkedHashMap-和-PriorityQueue-的区别是什么？" class="headerlink" title="134、Java 中 LinkedHashMap 和 PriorityQueue 的区别是什么？"></a>134、Java 中 LinkedHashMap 和 PriorityQueue 的区别是什么？</h2><p>PriorityQueue 保证最高或者最低优先级的的元素总是在队列头部，但是LinkedHashMap 维持的顺序是元素插入的顺序。当遍历一个 PriorityQueue 时，没有任何顺序保证，但是 LinkedHashMap 课保证遍历顺序是元素插入的顺序。</p><h2 id="135、ArrayList-与-LinkedList-的区别？"><a href="#135、ArrayList-与-LinkedList-的区别？" class="headerlink" title="135、ArrayList 与 LinkedList 的区别？"></a>135、ArrayList 与 LinkedList 的区别？</h2><p>最明显的区别是 ArrrayList 底层的数据结构是数组，支持随机访问，而LinkedList 的底层数据结构书链表，不支持随机访问。使用下标访问一个元素，ArrayList 的时间复杂度是 O(1)，而 LinkedList 是 O(n)。</p><h2 id="136、用哪两种方式来实现集合的排序？"><a href="#136、用哪两种方式来实现集合的排序？" class="headerlink" title="136、用哪两种方式来实现集合的排序？"></a>136、用哪两种方式来实现集合的排序？</h2><p>你可以使用有序集合，如 TreeSet 或 TreeMap，你也可以使用有顺序的的集合，如 list，然后通过 Collections.sort() 来排序。</p><h2 id="137、Java-中怎么打印数组？"><a href="#137、Java-中怎么打印数组？" class="headerlink" title="137、Java 中怎么打印数组？"></a>137、Java 中怎么打印数组？</h2><p>你可以使用 Arrays.toString() 和 Arrays.deepToString() 方法来打印数组。由于数组没有实现 toString() 方法，所以如果将数组传递给 System.out.println()方法，将无法打印出数组的内容，但是 Arrays.toString() 可以打印每个元素。</p><h2 id="138、Java-中的-LinkedList-是单向链表还是双向链表？"><a href="#138、Java-中的-LinkedList-是单向链表还是双向链表？" class="headerlink" title="138、Java 中的 LinkedList 是单向链表还是双向链表？"></a>138、Java 中的 LinkedList 是单向链表还是双向链表？</h2><p>是双向链表，你可以检查 JDK 的源码。</p><h2 id="139、Java-中的-TreeMap-是采用什么树实现的？"><a href="#139、Java-中的-TreeMap-是采用什么树实现的？" class="headerlink" title="139、Java 中的 TreeMap 是采用什么树实现的？"></a>139、Java 中的 TreeMap 是采用什么树实现的？</h2><p>Java 中的 TreeMap 是使用红黑树实现的。</p><h2 id="140、Hashtable-与-HashMap-有什么不同之处？"><a href="#140、Hashtable-与-HashMap-有什么不同之处？" class="headerlink" title="140、Hashtable 与 HashMap 有什么不同之处？"></a>140、Hashtable 与 HashMap 有什么不同之处？</h2><p>这两个类有许多不同的地方，下面列出了一部分：</p><p>a) Hashtable 是 JDK 1 遗留下来的类，而 HashMap 是后来增加的。</p><p>b）Hashtable 是同步的，比较慢，但 HashMap 没有同步策略，所以会更快。</p><p>c）Hashtable 不允许有个空的 key，但是 HashMap 允许出现一个 null key。</p><h2 id="141、Java-中的-HashSet，内部是如何工作的？"><a href="#141、Java-中的-HashSet，内部是如何工作的？" class="headerlink" title="141、Java 中的 HashSet，内部是如何工作的？"></a>141、Java 中的 HashSet，内部是如何工作的？</h2><p>HashSet 的内部采用 HashMap 来实现。由于 Map 需要 key 和 value，所以所有 key 的都有一个默认 value。类似于 HashMap，HashSet 不允许重复的key，只允许有一个 null key，意思就是 HashSet 中只允许存储一个 null 对象。</p><h2 id="142、写一段代码在遍历-ArrayList-时移除一个元素？"><a href="#142、写一段代码在遍历-ArrayList-时移除一个元素？" class="headerlink" title="142、写一段代码在遍历 ArrayList 时移除一个元素？"></a>142、写一段代码在遍历 ArrayList 时移除一个元素？</h2><p>该问题的关键在于面试者使用的是 ArrayList 的 remove() 还是 Iterator 的remove()方法。这有一段示例代码，是使用正确的方式来实现在遍历的过程中移除元素，而不会出现 ConcurrentModificationException 异常的示例代码。</p><h2 id="143、我们能自己写一个容器类，然后使用-for-each-循环码？"><a href="#143、我们能自己写一个容器类，然后使用-for-each-循环码？" class="headerlink" title="143、我们能自己写一个容器类，然后使用 for-each 循环码？"></a>143、我们能自己写一个容器类，然后使用 for-each 循环码？</h2><p>可以，你可以写一个自己的容器类。如果你想使用 Java 中增强的循环来遍历，你只需要实现 Iterable 接口。如果你实现 Collection 接口，默认就具有该属性。</p><h2 id="144、ArrayList-和-HashMap-的默认大小是多数？"><a href="#144、ArrayList-和-HashMap-的默认大小是多数？" class="headerlink" title="144、ArrayList 和 HashMap 的默认大小是多数？"></a>144、ArrayList 和 HashMap 的默认大小是多数？</h2><p>在 Java 7 中，ArrayList 的默认大小是 10 个元素，HashMap 的默认大小是16 个元素（必须是 2 的幂）。这就是 Java 7 中 ArrayList 和 HashMap 类的代码片段：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// from ArrayList.java JDK 1.7</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">DEFAULT_CAPACITY</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-comment">//from HashMap.java JDK 7</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">DEFAULT_INITIAL_CAPACITY</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">4</span>;<br><span class="hljs-comment">// aka 16</span><br></code></pre></td></tr></table></figure><h2 id="145、有没有可能两个不相等的对象有有相同的-hashcode？"><a href="#145、有没有可能两个不相等的对象有有相同的-hashcode？" class="headerlink" title="145、有没有可能两个不相等的对象有有相同的 hashcode？"></a>145、有没有可能两个不相等的对象有有相同的 hashcode？</h2><p>有可能，两个不相等的对象可能会有相同的 hashcode 值，这就是为什么在hashmap 中会有冲突。相等 hashcode 值的规定只是说如果两个对象相等，必须有相同的 hashcode 值，但是没有关于不相等对象的任何规定。</p><h2 id="146、两个相同的对象会有不同的的-hash-code-吗？"><a href="#146、两个相同的对象会有不同的的-hash-code-吗？" class="headerlink" title="146、两个相同的对象会有不同的的 hash code 吗？"></a>146、两个相同的对象会有不同的的 hash code 吗？</h2><p>不能，根据 hash code 的规定，这是不可能的。</p><h2 id="147、我们可以在-hashcode-中使用随机数字吗？"><a href="#147、我们可以在-hashcode-中使用随机数字吗？" class="headerlink" title="147、我们可以在 hashcode() 中使用随机数字吗？"></a>147、我们可以在 hashcode() 中使用随机数字吗？</h2><p>不行，因为对象的 hashcode 值必须是相同的。参见答案获取更多关于 Java 中重写 hashCode() 方法的知识。</p><h2 id="148、Java-中，Comparator-与-Comparable-有什么不同？"><a href="#148、Java-中，Comparator-与-Comparable-有什么不同？" class="headerlink" title="148、Java 中，Comparator 与 Comparable 有什么不同？"></a>148、Java 中，Comparator 与 Comparable 有什么不同？</h2><p>Comparable 接口用于定义对象的自然顺序，而 comparator 通常用于定义用户定制的顺序。</p><p>Comparable 总是只有一个，但是可以有多个 comparator 来定义对象的顺序。</p><h2 id="149、为什么在重写-equals-方法的时候需要重写-hashCode-方法？"><a href="#149、为什么在重写-equals-方法的时候需要重写-hashCode-方法？" class="headerlink" title="149、为什么在重写 equals 方法的时候需要重写 hashCode 方法？"></a>149、为什么在重写 equals 方法的时候需要重写 hashCode 方法？</h2><p>因为有强制的规范指定需要同时重写 hashcode 与 equal 是方法，许多容器类，如 HashMap、HashSet 都依赖于 hashcode 与 equals 的规定。</p><h2 id="150、在我-Java-程序中，我有三个-socket，我需要多少个线程来处理？"><a href="#150、在我-Java-程序中，我有三个-socket，我需要多少个线程来处理？" class="headerlink" title="150、在我 Java 程序中，我有三个 socket，我需要多少个线程来处理？"></a>150、在我 Java 程序中，我有三个 socket，我需要多少个线程来处理？</h2><p>这个需要看你是并行处理还是串行处理了。</p><h2 id="151、Java-中怎么创建-ByteBuffer？"><a href="#151、Java-中怎么创建-ByteBuffer？" class="headerlink" title="151、Java 中怎么创建 ByteBuffer？"></a>151、Java 中怎么创建 ByteBuffer？</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">10</span>];<br><span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buf</span> <span class="hljs-operator">=</span> ByteBuffer.wrap(bytes);<br></code></pre></td></tr></table></figure><h2 id="152、Java-中，怎么读写-ByteBuffer-？"><a href="#152、Java-中，怎么读写-ByteBuffer-？" class="headerlink" title="152、Java 中，怎么读写 ByteBuffer ？"></a>152、Java 中，怎么读写 ByteBuffer ？</h2><h2 id="153、Java-采用的是大端还是小端？"><a href="#153、Java-采用的是大端还是小端？" class="headerlink" title="153、Java 采用的是大端还是小端？"></a>153、Java 采用的是大端还是小端？</h2><h2 id="154、ByteBuffer-中的字节序是什么？"><a href="#154、ByteBuffer-中的字节序是什么？" class="headerlink" title="154、ByteBuffer 中的字节序是什么？"></a>154、ByteBuffer 中的字节序是什么？</h2><p>ByteBuffer类中的order(ByteOrder bo) 方法可以设置 ByteBuffer 的字节序。</p><p>其中的ByteOrder是枚举：</p><p>ByteOrder BIG_ENDIAN 代表大字节序的 ByteOrder 。</p><p>ByteOrder LITTLE_ENDIAN 代表小字节序的 ByteOrder 。</p><p>ByteOrder nativeOrder() 返回当前硬件平台的字节序。</p><h2 id="155、Java-中，直接缓冲区与非直接缓冲器有什么区别？"><a href="#155、Java-中，直接缓冲区与非直接缓冲器有什么区别？" class="headerlink" title="155、Java 中，直接缓冲区与非直接缓冲器有什么区别？"></a>155、Java 中，直接缓冲区与非直接缓冲器有什么区别？</h2><p>非直接缓冲区：通过allocate()分配缓冲区，将缓冲区建立在JVM的内存中</p><p>直接缓冲区：通过allocateDirect()分配直接缓冲区，将缓冲区建立在物理内存中，可以提高效率</p><h2 id="156、Java-中的内存映射缓存区是什么？"><a href="#156、Java-中的内存映射缓存区是什么？" class="headerlink" title="156、Java 中的内存映射缓存区是什么？"></a>156、Java 中的内存映射缓存区是什么？</h2><h2 id="157、socket-选项-TCP-NO-DELAY-是指什么？"><a href="#157、socket-选项-TCP-NO-DELAY-是指什么？" class="headerlink" title="157、socket 选项 TCP NO DELAY 是指什么？"></a>157、socket 选项 TCP NO DELAY 是指什么？</h2><h2 id="158、TCP-协议与-UDP-协议有什么区别？"><a href="#158、TCP-协议与-UDP-协议有什么区别？" class="headerlink" title="158、TCP 协议与 UDP 协议有什么区别？"></a>158、TCP 协议与 UDP 协议有什么区别？</h2><p>TCP协议和UDP协议特性区别总结：</p><ol><li><p>TCP协议在传送数据段的时候要给段标号；UDP协议不</p></li><li><p>TCP协议可靠；UDP协议不可靠</p></li><li><p>TCP协议是面向连接；UDP协议采用无连接</p></li><li><p>TCP协议负载较高，采用虚电路；UDP采用无连接</p></li><li><p>TCP协议的发送方要确认接收方是否收到数据段（3次握手协议）</p></li><li><p>TCP协议采用窗口技术和流控制</p></li></ol><h2 id="159、Java-中，ByteBuffer-与-StringBuffer-有什么区别？"><a href="#159、Java-中，ByteBuffer-与-StringBuffer-有什么区别？" class="headerlink" title="159、Java 中，ByteBuffer 与 StringBuffer 有什么区别？"></a>159、Java 中，ByteBuffer 与 StringBuffer 有什么区别？</h2><h2 id="160、Java-中，编写多线程程序的时候你会遵循哪些最佳实践？"><a href="#160、Java-中，编写多线程程序的时候你会遵循哪些最佳实践？" class="headerlink" title="160、Java 中，编写多线程程序的时候你会遵循哪些最佳实践？"></a>160、Java 中，编写多线程程序的时候你会遵循哪些最佳实践？</h2><p>a）给线程命名，这样可以帮助调试。</p><p>b）最小化同步的范围，而不是将整个方法同步，只对关键部分做同步。</p><p>c）如果可以，更偏向于使用 volatile 而不是 synchronized。</p><p>d）使用更高层次的并发工具，而不是使用 wait() 和 notify() 来实现线程间通信，如 BlockingQueue，CountDownLatch 及 Semaphore。</p><p>e）优先使用并发集合，而不是对集合进行同步。并发集合提供更好的可扩展性。</p><h2 id="161、说出几点-Java-中使用-Collections-的最佳实践"><a href="#161、说出几点-Java-中使用-Collections-的最佳实践" class="headerlink" title="161、说出几点 Java 中使用 Collections 的最佳实践"></a>161、说出几点 Java 中使用 Collections 的最佳实践</h2><p>a）使用正确的集合类，例如，如果不需要同步列表，使用 ArrayList 而不是Vector。</p><p>b）优先使用并发集合，而不是对集合进行同步。并发集合提供更好的可扩展性。</p><p>c）使用接口代表和访问集合，如使用 List 存储 ArrayList，使用 Map 存储HashMap 等等。</p><p>d）使用迭代器来循环集合。</p><p>e）使用集合的时候使用泛型。</p><h2 id="162、说出至少-5-点在-Java-中使用线程的最佳实践。"><a href="#162、说出至少-5-点在-Java-中使用线程的最佳实践。" class="headerlink" title="162、说出至少 5 点在 Java 中使用线程的最佳实践。"></a>162、说出至少 5 点在 Java 中使用线程的最佳实践。</h2><p>这个问题与之前的问题类似，你可以使用上面的答案。对线程来说，你应该：</p><p>a）对线程命名</p><p>b）将线程和任务分离，使用线程池执行器来执行 Runnable 或 Callable。</p><p>c）使用线程池</p><h2 id="163、说出-5-条-IO-的最佳实践"><a href="#163、说出-5-条-IO-的最佳实践" class="headerlink" title="163、说出 5 条 IO 的最佳实践"></a>163、说出 5 条 IO 的最佳实践</h2><p>IO 对 Java 应用的性能非常重要。理想情况下，你不应该在你应用的关键路径上避免 IO 操作。下面是一些你应该遵循的 Java IO 最佳实践：</p><p>a）使用有缓冲区的 IO 类，而不要单独读取字节或字符。</p><p>b）使用 NIO 和 NIO2</p><p>c）在 finally 块中关闭流，或者使用 try-with-resource 语句。</p><p>d）使用内存映射文件获取更快的 IO。</p><h2 id="164、列出-5-个应该遵循的-JDBC-最佳实践"><a href="#164、列出-5-个应该遵循的-JDBC-最佳实践" class="headerlink" title="164、列出 5 个应该遵循的 JDBC 最佳实践"></a>164、列出 5 个应该遵循的 JDBC 最佳实践</h2><p>有很多的最佳实践，你可以根据你的喜好来例举。下面是一些更通用的原则：</p><p>a）使用批量的操作来插入和更新数据</p><p>b）使用 PreparedStatement 来避免 SQL 异常，并提高性能。</p><p>c）使用数据库连接池</p><p>d）通过列名来获取结果集，不要使用列的下标来获取。</p>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>draw.io 基础教程</title>
    <link href="/posts/5e3e9b12/"/>
    <url>/posts/5e3e9b12/</url>
    
    <content type="html"><![CDATA[<h1 id="1-网页端使用"><a href="#1-网页端使用" class="headerlink" title="1. 网页端使用"></a>1. 网页端使用</h1><p>懒得安装的直接使用下面这个链接直接开始绘图：<br><a href="https://www.draw.io/">https://www.draw.io</a></p><h1 id="2-桌面端下载"><a href="#2-桌面端下载" class="headerlink" title="2. 桌面端下载"></a>2. 桌面端下载</h1><p>在github项目右侧有个<code>release</code>，这里是作者打包生成好的安装文件，比如现在最新的版本是<code>14.5.1</code>点击进去后，可以看到如下图所示的下载页面。根据你自己的系统以及硬件平台选择合适的安装文件。</p><img src="/posts/5e3e9b12/2.png" alt="下载"><hr><h1 id="3-语言设置"><a href="#3-语言设置" class="headerlink" title="3. 语言设置"></a>3. 语言设置</h1><p>安装完后第一次打开默认界面是英文的，如果想使用中文，可以点击<code>Language</code>接着选择自己喜欢的语言，如果想提升英语的还是默认吧哈哈。</p><img src="/posts/5e3e9b12/3.png" class alt="Language">选择简体中文。<img src="/posts/5e3e9b12/4.png" class alt="chinese">设置完语言后记得重启下软件。<h1 id="4-开始绘图"><a href="#4-开始绘图" class="headerlink" title="4. 开始绘图"></a>4. 开始绘图</h1><p>打开drawio后，点击创建新绘图：</p><img src="/posts/5e3e9b12/5.png" class alt="start"><p>接着会提示你选择一个模板，这里直接创建一个空白框图（可根据自身情况选择)</p><img src="/posts/5e3e9b12/6.png" class alt="在这里插入图片描述"><p>创建完后，如图所示：</p><img src="/posts/5e3e9b12/7.png" class alt="主页"><h2 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h2><ol><li>选择你需要的元素拖入画布 (左侧有官方提供的各种类型元素，点击左下角更多图形可以找到更多类别)</li><li>选中元素后可使用鼠标点击元素边缘上的点对元素进行放大&#x2F;缩小等操作（元素右上角的旋转标志可以选择元素）</li><li>双击元素可以输入文字</li><li>选中元素后可在右侧的样式中修改元素的样式（颜色等）</li><li>在右侧的文本中可以修改文字的字体、大小以及颜色等等</li><li>在右侧的调整图形中可以对元素的位置、大小以及角度等进行更加精细的调整</li></ol><img src="/posts/5e3e9b12/8.png" class alt="选择元素"><h2 id="元素对齐"><a href="#元素对齐" class="headerlink" title="元素对齐"></a>元素对齐</h2><p>当要对齐多个元素时，选择多个元素（可通过<code>ctrl</code>+鼠标左键选择多个目标），然后点击<strong>调整图形</strong> -&gt; <strong>对齐</strong> 然后选择你想要的对齐方式。</p><img src="/posts/5e3e9b12/9.png" class alt="对齐元素"><h2 id="元素等距分布"><a href="#元素等距分布" class="headerlink" title="元素等距分布"></a>元素等距分布</h2><p>当要等距摆放多个元素时，选择多个元素（可通过<code>ctrl</code>+鼠标左键选择多个目标），然后点击<strong>调整图形</strong> -&gt; <strong>等距分布</strong> 然后选择你想要的分布方式。</p><img src="/posts/5e3e9b12/10.png" class alt="等距分布"><h2 id="连接元素"><a href="#连接元素" class="headerlink" title="连接元素"></a>连接元素</h2><p>当把鼠标放置元素上（注意没有点击，只是放置）会出现如下图所示的标识，四个箭头（用红圈标出的部分），16个小叉叉（用绿色的圈圈标出）。如果点击了元素只会显示四个箭头。</p><img src="/posts/5e3e9b12/11.png" class alt="连接"><p>连接的操作有很多种，这里只简单讲一种，在刚刚说的 <strong>当把鼠标放置元素上</strong> 后在元素周围出现各种标识，你可以自己随便选择一个作为连接线的起始位置，鼠标左键按下（不要松）拖动鼠标移至你想连接的位置。</p><img src="/posts/5e3e9b12/12.png" class alt="连接1"><p>连接后在右侧的样式中可以修改连接线的样式、连接方式、颜色、粗细、线形等等。</p><img src="/posts/5e3e9b12/13.png" class alt="连接2"><h2 id="添加文字"><a href="#添加文字" class="headerlink" title="添加文字"></a>添加文字</h2><ol><li>在通用里拖一个<code>Text</code>元素放到你想放的位置</li><li>双击<code>Text</code>元素编辑文字</li><li>在右侧的<code>文本</code>中对文字的颜色、字体、大小等进行编辑</li></ol><img src="/posts/5e3e9b12/14.png" class alt="添加文字"><h2 id="添加公式"><a href="#添加公式" class="headerlink" title="添加公式"></a>添加公式</h2><p>可参考官方给的文档：<a href="https://www.diagrams.net/doc/faq/math-typesetting">https://www.diagrams.net/doc/faq/math-typesetting</a></p><img src="/posts/5e3e9b12/15.png" class alt="公式"><p>在使用公式功能之前需要打开数学排版，在<strong>其他</strong> -&gt; <strong>数学排版</strong> 在点击后会显示一个勾勾，然后就能用了：</p><img src="/posts/5e3e9b12/16.png" class alt="open"><p>现在官方支持三种格式，比如写博文中常用的<code>LaTeX</code>格式。用起来也非常方便，直接把公式复制到<code>Text</code>元素里就行了。</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-symbol">$</span><span class="hljs-symbol">$</span>\<span class="hljs-built_in">sqrt</span>&#123;<span class="hljs-number">3</span>×<span class="hljs-number">-1</span>&#125;+(<span class="hljs-number">1</span>+x)^<span class="hljs-number">2</span><span class="hljs-symbol">$</span><span class="hljs-symbol">$</span><br></code></pre></td></tr></table></figure><img src="/posts/5e3e9b12/17.png" class alt="公式"><p>如果不了解<code>LaTeX</code>公式不了解可以看下下面几个连接：<br>帮助文档： <a href="https://www.latexlive.com/help">https://www.latexlive.com/help</a><br>在线公式编辑器： <a href="https://www.latexlive.com/">https://www.latexlive.com/</a></p><h2 id="添加图片"><a href="#添加图片" class="headerlink" title="添加图片"></a>添加图片</h2><p>有时，需要使用一些现成的图片，点击上方的加号，再点击图片按钮。</p><img src="/posts/5e3e9b12/18.png" class alt="插入图片"><p>接着你可以通过打开按钮选择自己本地的图片，或者通过网上图片的url直接载入进来。</p><img src="/posts/5e3e9b12/19.png" class alt="插入图片2"><h2 id="添加表格"><a href="#添加表格" class="headerlink" title="添加表格"></a>添加表格</h2><p>点击上方的表格图标，然后拖动鼠标可以选择自己需要的表格大小（行数和列数）。</p><img src="/posts/5e3e9b12/1.png" class alt="表格"><p>选中表格，在右侧的<strong>调整图形</strong>中可以调整表格的大小、位置等属性。</p><img src="/posts/5e3e9b12/20.png" class alt="设置表格"><h2 id="自由绘图"><a href="#自由绘图" class="headerlink" title="自由绘图"></a>自由绘图</h2><p>有时一些特殊的图案软件中并没有提供，这时可以使用自由绘图功能自己去绘制。点击上方的加号，再点击自由绘图，会弹出一个<strong>自由绘图</strong>窗口。</p><img src="/posts/5e3e9b12/21.png" class alt="自由绘图"><p>点击<strong>开始绘图</strong>按钮就可以自己用鼠标随便绘制，绘制完后点击<strong>结束绘图</strong>按钮，刚刚绘制好的图案就会变成一个元素随意使用。</p><img src="/posts/5e3e9b12/22.png" class alt="绘图"><h2 id="组合元素"><a href="#组合元素" class="headerlink" title="组合元素"></a>组合元素</h2><p>同时选中多个元素，在元素上点击鼠标反键，再点击组合即可组合成一个元素。</p><img src="/posts/5e3e9b12/23.png" class alt="组合"><h2 id="保存元素模板"><a href="#保存元素模板" class="headerlink" title="保存元素模板"></a>保存元素模板</h2><p>有时一些元素（可能是你自己组合设计的新元素）经常被用到，我们可以将其保存成一个模板方便下次使用。如下图所示，将需要保存的元素用鼠标拖至左侧的 <strong>便筏本</strong> 中，这样以后都可以使用到。</p><img src="/posts/5e3e9b12/24.png" class alt="保存模板"><p>点击<strong>便筏本</strong>的铅笔符号可以编辑管理自己的便筏本。</p><img src="/posts/5e3e9b12/25.png" class alt="便筏本"><h1 id="5-保存"><a href="#5-保存" class="headerlink" title="5. 保存"></a>5. 保存</h1><h2 id="保存文件"><a href="#保存文件" class="headerlink" title="保存文件"></a>保存文件</h2><p>在左上角点击 <strong>文件</strong> -&gt; <strong>保存</strong> 将绘图文件保存到指定路径。</p><img src="/posts/5e3e9b12/26.png" class alt="保存文件"><h2 id="导出图片"><a href="#导出图片" class="headerlink" title="导出图片"></a>导出图片</h2><p>在左上角点击 <strong>文件</strong> -&gt; <strong>导出为</strong> 将绘图文件导出成指定格式，一般为了方便使用会导出成<code>PNG</code>或者<code>JPEG</code>格式等。</p><img src="/posts/5e3e9b12/27.png" class alt="导出图片"><p>比如我要将图片保存成PNG格式的图片，软件会提示是否要透明背景、阴影、<a href="https://so.csdn.net/so/search?q=%E7%BD%91%E6%A0%BC&spm=1001.2101.3001.7020">网格</a>等。另外还有个<strong>边框宽度</strong>参数，这个参数代表输出图像时是否需要在图片边缘增加一些空白边缘。默认是0，如果需要可以自己设置。</p><img src="/posts/5e3e9b12/28.png" class alt="导出图片"><p>大家可以简单对比下设置和不设置边缘宽度的区别。</p><img src="/posts/5e3e9b12/29.png" class alt="边缘宽度"><h1 id="6-常用快捷键"><a href="#6-常用快捷键" class="headerlink" title="6. 常用快捷键"></a>6. 常用快捷键</h1><table><thead><tr><th>快捷键</th><th>作用</th></tr></thead><tbody><tr><td>CTRL + C</td><td>复制元素</td></tr><tr><td>CTRL + X</td><td>剪切元素</td></tr><tr><td>CTRL + V</td><td>粘贴元素</td></tr><tr><td>CTRL + Z</td><td>撤销操作</td></tr><tr><td>CTRL + S</td><td>保存绘图（建议经常保存，养成良好习惯）</td></tr><tr><td>CTRL + A</td><td>选中全部元素</td></tr><tr><td>DELETE</td><td>删除选中元素</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx 证书概念</title>
    <link href="/posts/4b23af26/"/>
    <url>/posts/4b23af26/</url>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="编码格式"><a href="#编码格式" class="headerlink" title="编码格式"></a>编码格式</h2><p>X.509 - 这是一种证书标准,主要定义了证书中应该包含哪些内容.其详情可以参考 RFC5280，SSL使用的就是这种证书标准。</p><p>目前有以下两种编码格式。</p><h3 id="PEM"><a href="#PEM" class="headerlink" title="PEM"></a>PEM</h3><p>Privacy Enhanced Mail，打开看文本格式，以”—–BEGIN…”开头，”—–END…”结尾，内容是 BASE64 编码。</p><p>查看 PEM 格式证书的信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">openssl x509 -in cloudflare-ssl.pem -text -noout<br></code></pre></td></tr></table></figure><p>Apache 和 NGINX 服务器偏向于使用这种编码格式.</p><p>PEM – Openssl 使用 PEM（Privacy Enhanced Mail）格式来存放各种信息，它是 openssl 默认采用的信息存放方式。</p><p>Openssl 中的 PEM 文件一般包含如下信息:</p><ul><li><strong>内容类型：</strong>表明本文件存放的是什么信息内容,它的形式为“——-BEGIN XXXX ——”，与结尾的“——END XXXX——”对应。</li><li><strong>头信息：</strong>表明数据是如果被处理后存放，openssl 中用的最多的是加密信息，比如加密算法以及初始化向量 iv。</li><li><strong>信息体：</strong>为 BASE64 编码的数据。可以包括所有私钥（RSA 和 DSA）、公钥（RSA 和 DSA）和 (x509) 证书。它存储用 Base64 编码的 DER 格式数据，用 ascii 报头包围，因此适合系统之间的文本模式传输。</li></ul><p>举个栗子：</p><p>使用 PEM 格式存储的证书（.pem 格式结尾）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">—–BEGIN CERTIFICATE—–<br>MIICJjCCAdCgAwIBAgIBITANBgkqhkiG9w0BAQQFADCBqTELMAkGA1UEBhMCVVMx<br>………<br>1p8h5vkHVbMu1frD1UgGnPlOO/K7Ig/KrsU=<br>—–END CERTIFICATE—–<br></code></pre></td></tr></table></figure><p>使用 PEM 格式存储的私钥（.key 格式结尾）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">—–BEGIN RSA PRIVATE KEY—–<br>MIICJjCCAdCgAwIBAgIBITANBgkqhkiG9w0BAQQFADCBqTELMAkGA1UEBhMCVVMx<br>………<br>1p8h5vkHVbMu1frD1UgGnPlOO/K7Ig/KrsU=<br>—–END RSA PRIVATE KEY—–<br></code></pre></td></tr></table></figure><p>使用 PEM 格式存储的证书请求文件(.csr 格式结尾 )：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">—–BEGIN CERTIFICATE REQUEST—–<br>MIICJjCCAdCgAwIBAgIBITANBgkqhkiG9w0BAQQFADCBqTELMAkGA1UEBhMCVVMx<br>………<br>1p8h5vkHVbMu1frD1UgGnPlOO/K7Ig/KrsU=<br>—–END CERTIFICATE REQUEST—–<br></code></pre></td></tr></table></figure><h3 id="DER"><a href="#DER" class="headerlink" title="DER"></a>DER</h3><p>Distinguished Encoding Rules，辨别编码规则 (DER) 可包含所有私钥、公钥和证书。它是大多数浏览器的缺省格式，并按 ASN1 DER 格式存储。它是无报头的 － PEM 是用文本报头包围的 DER，打开看是二进制格式,不可读.</p><p>查看DER格式证书的信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">openssl x509 -in cloudflare-ssl.der -inform der -text -noout<br></code></pre></td></tr></table></figure><p>Java 和 Windows 服务器偏向于使用这种编码格式。</p><h2 id="证书转换"><a href="#证书转换" class="headerlink" title="证书转换"></a>证书转换</h2><h3 id="PEM-转-CRT"><a href="#PEM-转-CRT" class="headerlink" title="PEM 转 CRT"></a>PEM 转 CRT</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">openssl x509 -in cloudflare-ssl.pem -out cloudflare-ssl.crt<br></code></pre></td></tr></table></figure><h3 id="CRT-转-PEM"><a href="#CRT-转-PEM" class="headerlink" title="CRT 转 PEM"></a>CRT 转 PEM</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">openssl x509 -<span class="hljs-keyword">in</span> cloudflare-ssl.crt -outform pem -<span class="hljs-keyword">out</span> cloudflare-ssl.pem<br></code></pre></td></tr></table></figure><h3 id="PEM-转为-DER"><a href="#PEM-转为-DER" class="headerlink" title="PEM 转为 DER"></a>PEM 转为 DER</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">openssl x509 -in cloudflare-ssl.pem -outform der -out cloudflare-ssl.der<br></code></pre></td></tr></table></figure><h3 id="DER-转为-PEM"><a href="#DER-转为-PEM" class="headerlink" title="DER 转为 PEM"></a>DER 转为 PEM</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">openssl x509 -in cloudflare-ssl.der -inform der -outform pem -out cloudflare-ssl.pem<br></code></pre></td></tr></table></figure><h3 id="CRT-转-DER"><a href="#CRT-转-DER" class="headerlink" title="CRT 转 DER"></a>CRT 转 DER</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">openssl x509 -in cloudflare-ssl.crt -outform der -out cloudflare-ssl.der<br></code></pre></td></tr></table></figure><p>从上面的命令我们看出证书的转换是支持三边两两转换的，除了不支持 der 直接转成 crt 之外，如下图所示：</p><blockquote><p>提示：要转换 KEY 文件也类似,只不过把 x509 换成 rsa，要转 CSR 的话，把 x509 换成 req。</p></blockquote><img src="/posts/4b23af26/证书转换-167033977196725.jpg" alt="证书转换" style="zoom:67%;"><ul><li></li></ul>]]></content>
    
    
    <categories>
      
      <category>nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nginx</tag>
      
      <tag>证书</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>黑苹果安装教程</title>
    <link href="/posts/479c48ec/"/>
    <url>/posts/479c48ec/</url>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="镜像下载"><a href="#镜像下载" class="headerlink" title="镜像下载"></a>镜像下载</h2><p><a href="https://sysin.org/blog/macOS-Monterey/">macOS Monterey 12.6.3 (21G419) 正式版 ISO、IPSW、PKG 下载</a></p><h2 id="BIOS-设置"><a href="#BIOS-设置" class="headerlink" title="BIOS 设置"></a>BIOS 设置</h2><h3 id="官方建议"><a href="#官方建议" class="headerlink" title="官方建议"></a>官方建议</h3><p>OpenCore 官方建议的 10 代 CPU 架构的 BISO 调整如下：</p><p><strong>禁用</strong></p><ul><li>Fast Boot</li><li>Secure Boot</li><li>Serial&#x2F;COM Port</li><li>Parallel Port</li><li>VT-d (如果设置了 <code>DisableIoMapper</code> 为 YES，则可以打开这个选项)</li><li>CSM</li><li>Thunderbolt (建议关闭雷电，第一次安装可能出现玄学问题)</li><li>Intel SGX</li><li>Intel Platform Trust</li><li>CFG Lock</li></ul><p><strong>开启</strong></p><ul><li>VT-x</li><li>Above 4G decoding</li><li>Hyper-Threading</li><li>Execute Disable Bit</li><li>EHCI&#x2F;XHCI Hand-off</li><li>OS type: Windows 8.1&#x2F;10 UEFI Mode</li><li>DVMT Pre-Allocated(iGPU Memory): 64MB</li><li>SATA Mode: AHCI</li></ul><h3 id="ASUS-11th"><a href="#ASUS-11th" class="headerlink" title="ASUS-11th"></a>ASUS-11th</h3><ul><li>disable igpu（Otherwise, you will not be able to sleep normally）</li><li>disable Intel Rapid Storage Technology 最后需要按键盘上的<code>F10</code>键保存退出即可.</li></ul><h3 id="ASUS-10th"><a href="#ASUS-10th" class="headerlink" title="ASUS-10th"></a>ASUS-10th</h3><ul><li>Disabe</li><li>Fast Boot</li><li>VT-d</li><li>CSM</li><li>Intel SGX</li><li>CFG Lock</li><li>Enable</li><li>VT-x (no option in BIOS, it’s enabled by default)</li><li>Above 4G decoding</li><li>Hyper-Threading</li><li>EHCI&#x2F;XHCI Hand-off</li><li>OS type: Windows UEFI Mode (Clear Secure Boot Keys or choose <code>Other</code> type)</li><li>DVMT Pre-Allocated(iGPU Memory): 64MB 最后需要按键盘上的<code>F10</code>键保存退出即可.</li></ul><h3 id="MSI-10th"><a href="#MSI-10th" class="headerlink" title="MSI-10th"></a>MSI-10th</h3><ul><li>Boot – Fast Boot -&gt; Disabled</li><li>Advanced – PCH Sorage Configuration – SATA Mode Selection -&gt; AHCI</li><li>Boot – CSM(Compatibility Support Module) -&gt; Disabled</li><li>Ai Tweaker – Ai Overclock Tuner -&gt; XMP</li><li>Advanced – CPU configuration – Intel Virtualization Technology -&gt; Disabled</li><li>Advanced – System Agent (SA) Configuration – VT-D -&gt; Disabled</li><li>Advanced – System Agent (SA) Configuration – Above 4G Decoding -&gt; Disabled</li><li>Advanced – System Agent (SA) Configuration – Graphics Configuration – Primary Display -&gt; CPU Graphics 集成显卡配置1</li><li>Advanced – System Agent (SA) Configuration – Graphics Configuration – iGPU Multi-Monitor -&gt; Disabled 集成显卡配置2</li><li>Advanced – PCH configruation - IOAPIC 24-119 Entries -&gt; Enabled</li><li>Advanced – PCH-FW Configuration – TPM Device Selection -&gt; Discrete TPM</li><li>Advanced – APM Configuration – ErP Ready -&gt; Disabled</li><li>Advanced – Network Stack Configuration – Network Stack -&gt; Disabled</li><li>Boot – Secure Boot – OS Type – Other OS 最后需要按键盘上的<code>F10</code>键保存退出即可.</li></ul><h3 id="MSI-11th"><a href="#MSI-11th" class="headerlink" title="MSI-11th"></a>MSI-11th</h3><ul><li>Boot – Fast Boot -&gt; Disabled</li><li>Advanced – PCH Sorage Configuration – SATA Mode Selection -&gt; AHCI</li><li>Boot – CSM(Compatibility Support Module) -&gt; Disabled</li><li>Ai Tweaker – Ai Overclock Tuner -&gt; XMP</li><li>Advanced – CPU configuration – Intel Virtualization Technology -&gt; Disabled</li><li>Advanced – System Agent (SA) Configuration – VT-D -&gt; Disabled</li><li>Advanced – System Agent (SA) Configuration – Above 4G Decoding -&gt; Disabled</li><li>Advanced – System Agent (SA) Configuration – Graphics Configuration – Primary Display -&gt; PCIE 独立显卡配置 1</li><li>Advanced – System Agent (SA) Configuration – Graphics Configuration – iGPU Multi-Monitor -&gt; Enabled 独立显卡配置 2</li><li>Advanced – PCH configruation - IOAPIC 24-119 Entries -&gt; Enabled</li><li>Advanced – PCH-FW Configuration – TPM Device Selection -&gt; Discrete TPM</li><li>Advanced – APM Configuration – ErP Ready -&gt; Disabled</li><li>Advanced – Network Stack Configuration – Network Stack -&gt; Disabled</li><li>Boot – Secure Boot – OS Type – Other OS 最后需要按键盘上的<code>F10</code>键保存退出即可.</li></ul><h2 id="USB-定制"><a href="#USB-定制" class="headerlink" title="USB 定制"></a>USB 定制</h2><p>1、从仓库下载 「Windows.exe」到 Windows 平台，双击即可运行</p><p> <a href="https://github.com/Win10Q/hackintosh-with-B560-msi-asus/blob/main/img-storage/%E5%AE%9A%E5%88%B6-1.png"><img src="/posts/479c48ec/定制-1.png" alt="Image text" style="zoom:67%;"></a></p><p>2、输入<code>D</code>然后回车来探测电脑上的端口</p><p> <a href="https://github.com/Win10Q/hackintosh-with-B560-msi-asus/blob/main/img-storage/%E5%AE%9A%E5%88%B6-2.png"><img src="/posts/479c48ec/定制-2.png" alt="Image text" style="zoom:67%;"></a></p><p>3、分别在各个 USB 接口插入<code>USB2.0</code>和<code>USB 3.X</code>的设备，每插入一次停留<code> 5 秒钟</code>，如果有<code>Type-C</code>设备的话，正反都要分别插入记录都挨个插一遍后，输入<code> B</code> 回车即可返回主菜单</p><p> <a href="https://github.com/Win10Q/hackintosh-with-B560-msi-asus/blob/main/img-storage/%E5%AE%9A%E5%88%B6-3.png"><img src="/posts/479c48ec/定制-3.png" alt="Image text" style="zoom:67%;"></a></p><p>4、回到主菜单，输入<code>S</code>来查看端口探测的结果，此时结果查看感觉没问题的话，输入<code>K</code>回车，即可导出<code>UTBMap.kext</code>文件（一般情况下会保存在当前程序的同级目录下） <a href="https://user-images.githubusercontent.com/99300084/206326768-84ef300a-e64e-4978-9e30-9c955d537a28.png"><img src="/posts/479c48ec/206326768-84ef300a-e64e-4978-9e30-9c955d537a28.png" alt="image" style="zoom:67%;"></a></p><p>5、除了上述生成的<code>UTBMap.kext</code>文件以外，我们还需要配合<code>USBToolBox.kext</code>使用（仓库）将上述两个 Kext 放到 OC 的 Kexts 文件夹下面并加载，去除 usbport.kext</p><p> <a href="https://github.com/Win10Q/hackintosh-with-B560-msi-asus/blob/main/img-storage/%E5%AE%9A%E5%88%B6-5.png"><img src="/posts/479c48ec/定制-5.png" alt="Image text" style="zoom:67%;"></a></p><p>6、重启即可生效，至此你的 USB 基本上定制完了，尽情使用吧。</p><h2 id="蓝牙配置"><a href="#蓝牙配置" class="headerlink" title="蓝牙配置"></a>蓝牙配置</h2><blockquote><p>2021 年 6 月初的 WWDC2021 上，苹果发布了下一代 macOS，代号 Monterey（蒙特雷），大版本号 12.0。爱折腾爱尝鲜的黑苹果小伙伴们已经通过各种折腾安装上了新版 macOS。但是很快出现了各种各样的驱动问题，其中比较突出的是蓝牙掉驱动并且卡跑码问题。Monterey 大幅精简了蓝牙框架，原因是 macOS 12.0 砍掉了 2015 年之前机型的支持，另外可能也是为通用控制做准备。</p><p>很快，OC 团队做出反应添加了解决方案。说起来也简单，就是新加一个驱动：<a href="http://imacos.top/2021/03/18/brcmpatchram-kext/">BlueToolFixup.kext</a>，然后在 macOS 12.0 取消蓝牙 injector（注入器）的加载。</p><p>「注意」</p><ul><li>BlueToolFixup.kext 目前是 <a href="http://imacos.top/2021/03/18/brcmpatchram-kext/">BrcmPatchRAM</a> 文件包中的一部分，新版本发布会直接包括这个文件，英特尔蓝牙也需要这个驱动；</li><li>使用奋威 T919 或其它免驱动型网卡的，无需担心蓝牙兼容性问题，在 Monterey 里依旧无需任何驱动。</li></ul></blockquote><img src="/posts/479c48ec/61c9107ad91f44016.jpg_e1080.jpg" alt="BCM94360Z4 BCM94360Z3 黑苹果无线网卡驱动指南" style="zoom:50%;"><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ul><li>将 <a href="http://imacos.top/2019/07/02/1534/">Lilu</a> 升级到 1.5.7 及以上；</li><li>博通卡：将 <a href="http://imacos.top/2021/03/18/brcmpatchram-kext/">BrcmPatchRAM</a> 升级到 2.6.1 及以上；</li><li>英特尔：将 <a href="http://imacos.top/2020/03/07/intelbluetoothfirmware-kext/">IntelBluetoothFirmware</a> 升级到 2.0.1 及以上；</li><li>关闭 OpenCore 的 XhciPortLimit，位于 config → Kernel → Quirks 区域，在升级或安装 macOS Monterey 之前，建议定制好 USB 接口；</li><li>将 BlueToolFixup.kext 放到 Clover&#x2F;OpenCore 对应的 kext 目录<ul><li>OpenCore：&#x2F;EFI&#x2F;OC&#x2F;Kexts&#x2F;</li><li>Clover：&#x2F;EFI&#x2F;CLOVER&#x2F;Kexts&#x2F;Other&#x2F;</li></ul></li><li>最后，按照下一章节的说明修改 config.plist 文件。</li></ul><h4 id="Clover-方法"><a href="#Clover-方法" class="headerlink" title="Clover 方法"></a>Clover 方法</h4><p>Clover 使用文件夹名称来区别各个系统加载的 kext，所以可以这么操作：</p><ul><li>博通卡：把 BrcmBluetoothInjector.kext 从 &#x2F;EFI&#x2F;CLOVER&#x2F;Kexts&#x2F;Other&#x2F; 挪到 &#x2F;EFI&#x2F;CLOVER&#x2F;Kexts&#x2F;11.0&#x2F;，将 BlueToolFixup.kext 放到 &#x2F;EFI&#x2F;CLOVER&#x2F;Kexts&#x2F;12.0&#x2F;</li><li>英特尔：把 IntelBluetoothInjector.kext 从 &#x2F;EFI&#x2F;CLOVER&#x2F;Kexts&#x2F;Other&#x2F; 挪到 &#x2F;EFI&#x2F;CLOVER&#x2F;Kexts&#x2F;11.0&#x2F;，将 BlueToolFixup.kext 放到 &#x2F;EFI&#x2F;CLOVER&#x2F;Kexts&#x2F;12.0&#x2F;</li></ul><p>如果没有 11.0&#x2F;12.0 的文件夹，自己新建就可以。这样一来 Clover 在引导 11.0 时会加载 Injector，但是引导 12.0 时则不会加载 Injector，会加载 BlueToolFixup.kext 。其它 Kext 文件继续放在 Other 目录无影响。</p><p>「注意」以上方法如果不起作用，那么在迁移到 Monterey 时，需要手动从 Kext 目录移除 Injector 文件。「提示」如果你没有从 12.0 切换到低版本 macOS 的需求，xxxxInjector .kext 可以直接删除（无论博通和英特尔都一样），无需设置文件夹；</p><h4 id="OpenCore-方法"><a href="#OpenCore-方法" class="headerlink" title="OpenCore 方法"></a>OpenCore 方法</h4><p>OpenCore 用户推荐使用另一种方法，利用 OpenCore 的最小内核（MinKernel）和最大内核（MaxKernel）特性，给 injector 设置最大内核 20.99.99，也就是对应 macOS Big Sur 11.0，给 BlueToolFixup.kext 设置最小内核 21.0.0，对应 macOS Monterey 12.0。</p><p>「提示」如果你没有从 12.0 切换到低版本 macOS 的需求，xxxxInjector .kext 可以直接删除（无论博通和英特尔都一样），也无需设置最大最小内核；</p><p>可以直接看图操作：</p><h5 id="博通免驱网卡"><a href="#博通免驱网卡" class="headerlink" title="博通免驱网卡"></a>博通免驱网卡</h5><blockquote><p>升级 macos 12 方式：</p><p>使用 <code>BlueToolFixup.kext</code> 替代掉 <code>BrcmBluetoothInjector.kext</code> 即可。</p><p>最终使用驱动如下：</p><ul><li>BlueToolFixup.kext</li><li>BrcmFirmwareData.kext</li><li>BrcmPatchRAM3.kext</li></ul></blockquote><img src="/posts/479c48ec/1642342926-%E6%88%AA%E5%B1%8F2022-01-16-%E4%B8%8B%E5%8D%8810.08.25.jpg" class alt="img"><h5 id="Intel无线网卡"><a href="#Intel无线网卡" class="headerlink" title="Intel无线网卡"></a>Intel无线网卡</h5><blockquote><p>升级 macos 12 方式：</p><p>使用 <code>BlueToolFixup.kext</code> 替代掉 <code>IntelBluetoothInjector.kext</code> 即可。</p><p>BlueToolFixup.kext 可以从这里下载：<a href="https://github.com/acidanthera/BrcmPatchRAM/releases">https://github.com/acidanthera/BrcmPatchRAM/releases</a></p><p>最终使用驱动如下：</p><ul><li>BlueToolFixup.kext</li><li>IntelBluetoothFirmware.kext</li></ul></blockquote><img src="/posts/479c48ec/1642342990-%E6%88%AA%E5%B1%8F2022-01-16-%E4%B8%8B%E5%8D%8810.17.21.jpg" class alt="img"><p>完成后，记得保存然后重启，如果无效，请关机冷启动，清除 Kext 缓存，或尝试重置 NVRAM。</p><h2 id="设置启动参数"><a href="#设置启动参数" class="headerlink" title="设置启动参数"></a>设置启动参数</h2><blockquote><p>下面是 macOS 系统可以使用的启动参数列表，功能解释同时列出，使用要点有两个：</p><ul><li>参数之间以空格分隔开；</li><li>在一个参数中，- 和 &#x3D; 只会同时存在一个，例如：debug&#x3D;0x100，-xcpm。即：有了 &#x3D; 号就不会有 - 号，反之亦然，新手请务必牢记。</li></ul></blockquote><p>参数说明一览：</p><table><thead><tr><th>常用</th><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>*</td><td>agdpmod&#x3D;pikera</td><td>Navi 核心避免黑屏使用，其它显卡如 RX400&#x2F;500，Vega56&#x2F;64 无需此参数</td></tr><tr><td>*</td><td>keepsyms&#x3D;1</td><td>辅助上一个参数</td></tr><tr><td>*</td><td>debug&#x3D;0x100 或 debug&#x3D;0x200</td><td>防止自动重启，禁用五国图直接输出错误信息</td></tr><tr><td>*</td><td>-v</td><td>用于安装前期启动时显示代码界面，在安装macOS时，应添加此参数以获取明确的错误信息。</td></tr><tr><td></td><td>-x</td><td>安全启动模式，类似 Windows 的安全模式。此模式下 macOS 会尽可能少的加载 Kext 文件。</td></tr><tr><td></td><td>-s</td><td>单用户模式。这一模式将会启动终端模式，可以用这种方式修复你的系统。</td></tr><tr><td></td><td>-f</td><td>关闭 Kext 缓存模式，等于强制重建 Kext 缓存。</td></tr><tr><td></td><td>-l</td><td>在系统日志中输出内存泄漏的相关记录。</td></tr><tr><td></td><td>arch&#x3D;x86_64</td><td>该参数会强制 macOS 以 64 位内核模式启动，在 10.15 及以上没有什么作用。对应的是 arch&#x3D;i386，将强制以 32 位模式启动。</td></tr><tr><td></td><td>iog&#x3D;0x0</td><td>此参数将强制 MacBook 机型在合盖后，接入外部显示器和键盘时系统保持开启状态；但同时，此参数会在接入外部显示器时关闭笔记本的内屏，这可能对保护屏幕以及省电有帮助。</td></tr><tr><td></td><td>platform&#x3D;X86PC</td><td>此参数将强制禁用 ACPI 电源管理。而 platform&#x3D;ACPI 将强制启用 ACPI 电源管理。</td></tr><tr><td></td><td>idlehalt&#x3D;1</td><td>强制 CPU 进入低功耗模式。</td></tr><tr><td></td><td>debug&#x3D;0x100</td><td>此参数用于禁用五国图，把 Kernel Panic（内核崩溃）的相关数据直接输出在屏幕上，可用于禁止发生内核崩溃时自动重启，这将对排查错误有助益，这一参数还可以用于 Core Dump。其它可用值还有：0x200，这可以在内核崩溃后使用快捷键（C 继续、R 重启、K 进入 KDB）；0x400 可用于触发内核崩溃后自动进行 Core Dump；0x2000 将只生成并发送 Kernel Panic 日志，不包括完整的 Core Dump。除此之外还有很多其他值，但一般以上几个已经足够安装 macOS 时使用。</td></tr><tr><td></td><td>keepsyms&#x3D;1</td><td>此参数可以为 debug&#x3D;0xN 提供更多错误信息。</td></tr><tr><td></td><td>dart&#x3D;0</td><td>此参数会关闭 64 位硬件上的系统 PCI 地址映射器（DART）。DART 在拥有 2GB 以上物理内存的机器上是必需的，在默认情况下 DART 都是加载的。当使用 Clover 引导系统且 BIOS 无法关闭 VT-d 时可尝试此参数。gg</td></tr><tr><td></td><td>darkwake&#x3D;0</td><td>在拥有完全定制好的 USB 接口时完全不必使用此参数，除非你真的需要操控 HID Tickle 行为。darkwake 是 XNU 的一部分，XNU 是一个混合内核，是 Darwin 系统的一部分（macOS 和 iOS 均使用了 Darwin ）。因启动参数仅用于按位计算，所以可能的值有 0、1、2、3、256、257、258、259 等等以此类推，也因此 darkwake&#x3D;8 实际等于 darkwake&#x3D;0；darkwake&#x3D;10 实际等于 darkwake&#x3D;2，XNU 自 2782.1.97 起删除了这两个值（8 和 10），故这两个值在 Yosemite 及更高版本 macOS 中已失效。黑苹果建议关闭电能小憩，使用 pmset 命令调试休眠。如果实在需要使用，可尝试 darkwake&#x3D;0 或 3。更多信息可参考<a href="https://heipg.cn/link/aHR0cHM6Ly93d3cuaW5zYW5lbHltYWMuY29tL2ZvcnVtL3RvcGljLzM0MjAwMi1kYXJrd2FrZS1vbi1tYWNvcy1jYXRhbGluYS1ib290LWFyZ3MtZGFya3dha2U4LWRhcmt3YWtlMTAtYXJlLW9ic29sZXRlLw==">外网这篇文章</a>。</td></tr><tr><td></td><td>nvda_drv&#x3D;1</td><td>用于启用英伟达显卡驱动，包括开启 NVIDIA Web Driver</td></tr><tr><td>*</td><td>nv_disable&#x3D;1</td><td>关闭英伟达显卡驱动，请勿与 nvda_drv&#x3D;1 同时使用。</td></tr><tr><td></td><td>-no_compat_check</td><td>用于禁用 macOS 兼容性检查。例如，macOS 11.0 BigSur 不再支持 iMac 2014 年之前推出的机型，此时可使用此参数以禁止兼容性检查，以达到安装目的。</td></tr><tr><td></td><td><del>kext-dev-mode&#x3D;1</del></td><td>开启 Kext 开发模式，将允许加载未签名的 Kext。在 Yosemite 及更高版本 macOS 中，默认情况下出于安全原因，只会加载已签名的 Kext。此参数可以在 Yosemite 更改此设置，允许加载未签名的 Kext。在比 Yosemite 更新的 macOS 版本（El Capitan）中，引入了另一种安全机制，即系统完整性保护（SIP，也称为 Rootless），该系统会防止修改系统文件，加载未签名的 Kext 等。SIP 可以通过注入正确的 CSR NVRAM 变量来禁用，也可以通过恢复分区运行命令行禁用它。总之，在 10.11 及以后的系统中，已无需此参数。</td></tr><tr><td></td><td>cpus&#x3D;1</td><td>CPU单核模式，用于限制系统中活动 CPU 的数量。苹果的开发者工具有一个选项用于启用或禁用系统中的一些 CPU，但你也可以通过这个参数指定要使用的 CPU 数量。在某些情况下，这也许有助于省电，或者你正在调试 X86 电源驱动。</td></tr><tr><td></td><td>-xcpm</td><td>用于强制开启 xcpm 以实现 CPU 原生电源管理，一般用于较老架构的 CPU，例如 Ivy Bridge。</td></tr><tr><td></td><td>-gux_no_idle</td><td>用于终止英特尔芯片的空闲模式（idle-mode）功能。</td></tr><tr><td></td><td>slide&#x3D;N</td><td>用于引导系统时分配系统内核在内存中的位置，Clover 在一排加号处卡住可以尝试 slide&#x3D;0，<a href="https://heipg.cn/tutorial/what-is-efi-file.html#%E5%85%B3%E4%BA%8E-slide-%E5%80%BC">其它参考：Slide 值的说明</a>。</td></tr><tr><td></td><td>rootless&#x3D;0</td><td>使用 Rootless 模式，请勿在 El Capitan 及更高版本的 macOS 上使用，因为从 El Capitan 起引入了 SIP（系统完整性保护）机制。一般情况下关闭 SIP 即可达成你的目的。</td></tr><tr><td></td><td><del>-disablegfxfirmware</del></td><td>在 WhateverGreen.kext 出现之前，该参数用于关闭苹果的 iGPU firmware 以正确驱动 Intel 核显，在 macOS 10.13 及更高版本中已不使用。</td></tr><tr><td></td><td>npci&#x3D;0x2000 或 npci&#x3D;0x3000</td><td>AMD 系统没有开启 Above 4G Decoding 时使用；此参数会禁用某些与 kIOPCIConfiguratorPFM64 相关的 PCI 调试，另一个相似的选择是 npci&#x3D;0x3000，后者还会禁用与 gIOPCITunnelledKey 相关的调试。当 X299 卡在 PCI Start Configuration 时，应使用此参数，因为存在与 PCI 通道有关的 IRQ 冲突。</td></tr><tr><td>*</td><td>brcmfx-aspm</td><td>解决蓝牙连线问题，结合 AirportBrcmFixup.kext 使用</td></tr><tr><td></td><td>igfxonln&#x3D;1</td><td>使用 HDMI 接口每次开机&#x2F;重启都需要重新插拔才能显示的，添加启动参数 igfxonln&#x3D;1</td></tr><tr><td>*</td><td>-wegnoegpu</td><td>禁用独显（针对笔记本机型）</td></tr></tbody></table><p>切换到 NVRAM 选项卡，右侧找到 7C436110-AB2A-4BBB-A880-FE41995C9F82，启动参数即显示在右方面板，目前配置情况如下：</p><img src="/posts/479c48ec/image-20230319214910914.png" alt="image-20230319214910914" style="zoom:67%;"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">agdpmod=pikera keepsms=1 brcmfx-aspm<br></code></pre></td></tr></table></figure><h2 id="设置默认启动项"><a href="#设置默认启动项" class="headerlink" title="设置默认启动项"></a>设置默认启动项</h2><ul><li><p><code>config.plist</code> 勾上仿冒苹果快捷键 <code>PollAppleHotKey</code>，在启动选择界面，先选中要启动的项，然后按键盘的 <code>Ctrl</code> + <code>Enter</code> 进入系统即可</p><img src="/posts/479c48ec/image-20230319214520473.png" alt="image-20230319214520473" style="zoom: 67%;"></li><li><p>也有看到说在 <code>设置</code>-<code>启动磁盘</code> 可选择默认启动项,修改后重启</p></li></ul><h2 id="更新-OC"><a href="#更新-OC" class="headerlink" title="更新 OC"></a>更新 OC</h2><ul><li>下载最新版本<code>OCAT</code>(<a href="https://github.com/ic005k/OCAuxiliaryTools/releases">https://github.com/ic005k/OCAuxiliaryTools/releases</a>)</li><li>挂载你的<code>efi</code>分区（也叫<code>esp</code>分区） [<img src="/posts/479c48ec/%E6%9B%B4%E6%96%B0oc-1.jpg" class alt="Image text"></li><li>挂载后先不要着急打开，先把<code>OCAT</code>（即<code>OCAuxiliaryTools</code>）同步一下再打开 [<img src="/posts/479c48ec/%E6%9B%B4%E6%96%B0oc-2.jpg" class alt="Image text"></li><li>然后再打开<code>Config.plist</code>。首先点击全选，然后<code>检查kext</code>更新，更新<code>kext</code>，后点击选择<code>opencore版本</code>，选择<code>最新版</code>，<code>获取opencore</code>，后点击<code>同步</code> <code>保存</code>即可 [<img src="/posts/479c48ec/%E6%9B%B4%E6%96%B0oc-3.jpg" class alt="Image text"></li></ul><h2 id="生成三码"><a href="#生成三码" class="headerlink" title="生成三码"></a>生成三码</h2><p>1、同步完不必急着关闭<code>OCAT</code>，切换到<code>PL</code>选项卡</p><p><a href="https://github.com/Win10Q/hackintosh-with-B560-msi-asus/blob/main/img-storage/%E4%B8%89%E7%A0%81-1.png"><img src="/posts/479c48ec/三码-1.png" alt="Image text" style="zoom:67%;"></a></p><p>2、首先点击<code>生成</code>生成<code>三码</code>，然后点击<code>生成</code>生成<code>rom</code>，<code>保存``重启</code>即可</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://heipg.cn/tutorial/what-is-boot-args.html">黑苹果启动参数都是做什么用的？如何添加或删除？</a></p><p><a href="https://imacos.top/2022/01/19/1022-4/">更新macOS Monterey后遇到的各种Bug及解决方法合集（持续更新）</a></p><p><a href="http://imacos.top/2022/01/16/0354/">黑苹果修复博通&#x2F;英特尔蓝牙在macOS Monterey 12.0 正式版中失效的方法</a></p><p><a href="https://apple.sqlsec.com/6-%E5%AE%9E%E7%94%A8%E5%A7%BF%E5%8A%BF/6-7.html">macOS 12 蓝牙</a></p><p><a href="https://heipg.cn/tutorial/patching-intel-igpu-opencore.html">驱动英特尔核显，让黑苹果流畅运行「OpenCore专门篇」</a></p><p><a href="https://apple.sqlsec.com/">国光黑苹果入门安装教程</a></p><p><a href="https://www.bilibili.com/video/BV1yq4y1o7cT/?vd_source=3893b0277053b206b8f4177198a5e3ca">【黑苹果】手把手黑苹果安装教程-基于 OpenCore（持续更新中）</a></p><p><a href="https://mp.weixin.qq.com/s/uF6B4wKNL2uG9pSmH8nZZw">【黑苹果】macOS 12 Monterey 原版 OC 引导安装教程</a></p><p><a href="https://www.sqlsec.com/2021/07/opencore.html#%E6%B7%BB%E5%8A%A0%E5%BC%95%E5%AF%BC">国光 2021 年中的黑苹果组装方案以及驱动分享</a></p><p><a href="https://blog.daliansky.net/minisforum-HX90G-and-HX99G-macOS-Ventura-Installation-Tutorial.html#more">minisforum HX80G&#x2F;HX90G&#x2F;HX99G兼Ventura安装教程</a></p><h2 id="EFI-下载"><a href="#EFI-下载" class="headerlink" title="EFI 下载"></a>EFI 下载</h2><p><a href="https://github.com/Win10Q/hackintosh-with-B560-msi-asus">hackintosh-with-B560-msi-asus</a></p><p><a href="https://github.com/Win10Q/hackintosh-with-B560-msi-asus">ASUS-MSI-10-11-HACKINTOSH-OPENCORE</a></p><p><a href="https://github.com/sqlsec/AsRock-Z490-Steel-Legend-i7-10700">AsRock-Z490-Steel-Legend-i7-10700</a></p><p><a href="https://www.bilibili.com/read/cv16866050">国光 3k 元不到的 i9 极致性能的 ITX 黑苹果方案分享</a></p><p><a href="https://www.sqlsec.com/2021/08/b560m.html">国光 微星 B560M Big Sur 黑苹果记录体验</a></p><p><a href="https://www.bilibili.com/video/BV1iL411j7oC/?buvid=Z249572524E5C6EB4BC0A3BC9E9B43B2059F&is_story_h5=false&mid=qb0Tc188BMlV3OF7U8HM9Q==&p=1&plat_id=114&share_from=ugc&share_medium=iphone&share_plat=ios&share_session_id=F187CBE7-405F-4DAA-90C8-61F585568AC8&share_source=COPY&share_tag=s_i&timestamp=1678448208&unique_k=0AwuEE5&up_id=33242224&vd_source=3893b0277053b206b8f4177198a5e3ca">10400 msi b560黑苹果</a></p><p><a href="https://www.yuque.com/qwetrz007sh/ptugso/ez5ttc">【黑苹果安装教程】i7 10700+微星B460M 迫击炮 WIFI</a></p>]]></content>
    
    
    <categories>
      
      <category>黑苹果</category>
      
    </categories>
    
    
    <tags>
      
      <tag>黑苹果</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>zookeeper 面试题</title>
    <link href="/posts/3647b27d/"/>
    <url>/posts/3647b27d/</url>
    
    <content type="html"><![CDATA[<h2 id="Zookeeper-工作原理"><a href="#Zookeeper-工作原理" class="headerlink" title="Zookeeper 工作原理"></a>Zookeeper 工作原理</h2><p>Zookeeper 的核心是原子广播，这个机制保证了各个 Server 之间的同步。实现这个机制的协议叫做 Zab 协 议。Zab 协议有两种模式，它们分别是恢复模式（选主）和广播模式（同步）。当服务启动或者在领导者崩溃 后，Zab 就进入了恢复模式，当领导者被选举出来，且大多数 Server 完成了和 leader 的状态同步以后，恢复模式就结束了。状态同步保证了 leader 和 Server 具有相同的系统状态。</p>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>zookeeper</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面试题</title>
    <link href="/posts/5205ee75/"/>
    <url>/posts/5205ee75/</url>
    
    <content type="html"><![CDATA[<h2 id="redis线程模型"><a href="#redis线程模型" class="headerlink" title="redis线程模型"></a>redis线程模型</h2><blockquote><p>单线程，NIO，异步事件处理</p></blockquote><img src="/posts/5205ee75/image-20200829103120144.png" class alt="image-20200829103120144"><p>rabbitmq集群架构</p><img src="/posts/5205ee75/208.png" class alt="image-20200829112808080"><h2 id="rabbitmq引入的问题"><a href="#rabbitmq引入的问题" class="headerlink" title="rabbitmq引入的问题"></a>rabbitmq引入的问题</h2><p>好处：异步、解耦、削峰</p><p>坏处：</p><p>重复消息（幂等性保障）</p><ul><li>设置唯一消息主键</li><li>redis setnx 命令（redis分布式锁）</li></ul><p>消息丢失</p><ul><li>备份交换机</li><li>死信队列</li><li>mandantory &#x3D; true + ReturnListener 保证消息不丢失</li></ul><p>消息积压</p><ul><li>增加消费者的消费能力，或者临时增加</li></ul><p>顺序消费怎么解决</p><ul><li>单一消费者</li></ul><h2 id="zookeeper"><a href="#zookeeper" class="headerlink" title="zookeeper"></a>zookeeper</h2><p>zookeeper分布式锁</p><p>监听回调、临时节点</p><h1 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h1><blockquote><p>如果超时就会出现分布式事务问题。</p></blockquote><h2 id="二阶段提交"><a href="#二阶段提交" class="headerlink" title="二阶段提交"></a>二阶段提交</h2><p>atomikos框架实现二阶段提交，可以做到重试机制，日志记录等逻辑，但是无法解决微服务中跨JVM的问题。</p><h2 id="可靠消息最终一致性方案"><a href="#可靠消息最终一致性方案" class="headerlink" title="可靠消息最终一致性方案"></a>可靠消息最终一致性方案</h2><p>可以通过自定义一个消息信息体Message，给消息设置INIT，SEND，END三种状态，然后搭建一个独立的消息服务来补偿消息发送过程可能出现异常的问题，或者是因为网络超时导致消息状态没有修改成功，定时的调用业务系统的相关接口，比如订单是否成功生成，库存是否成功减掉来修复消息本身的状态，进而对操作消息的下一步执行过程。</p><ul><li><p>TCC与XA&#x2F;JTA对比</p><ul><li>XA是资源层面的分布式事务，强一致性，在两阶段提交的整个过程中，一直会持有资源的锁</li><li>TCC是业务层面的分布式事务，最终一致性，不会一直持有资源的锁</li></ul></li><li><p>TCC的开源框架实现</p><p> Atomikos，tcc-transaction，ByteTcc，支付宝GTS</p></li></ul><h2 id="可靠消息最终一致性方案-1"><a href="#可靠消息最终一致性方案-1" class="headerlink" title="可靠消息最终一致性方案"></a><strong>可靠消息最终一致性方案</strong></h2><img src="/posts/5205ee75/209.png" class alt="image-20200831170506773"><h2 id="TCC-Try-Confirm-Cancel-两阶段补偿型方案"><a href="#TCC-Try-Confirm-Cancel-两阶段补偿型方案" class="headerlink" title="TCC(Try-Confirm-Cancel)两阶段补偿型方案"></a>TCC(Try-Confirm-Cancel)两阶段补偿型方案</h2><img src="/posts/5205ee75/210.png" class alt="image-20200831220121891"><h1 id="秒杀系统"><a href="#秒杀系统" class="headerlink" title="秒杀系统"></a>秒杀系统</h1><p>spring session实现分布式session</p><p>zookeeper节点通过watcher机制保证本地ConcurrentHashMap中的当前商品库存数量一致，防止超卖问题</p><p>redis setnx分布式锁保证接口多次请求只有一次能成功，类似于占位标识，一个用户只能有一个订单的请求，搭配rabbitmq中间件异步消费订单消息，消费成功后解除占位标识，同时在redis中生成订单信息</p><p>通过redis的incr实现限流防刷</p><p>详情页优化使用动态化渲染，用nginx+lua实现页面动态化，nginx层面做了两层，一层通过hash取模实现负载转发，一层用于缓存热点数据以减少redis缓存的压力</p><ul><li><p>缓存失效</p><p>由于大量的key设置相同的过期时间导致，可以采用随机数来设置过期时间避免大量缓存同一时间失效。</p></li><li><p>缓存击穿</p><p>打个比方，某个黑客想要攻击网站，那么他通过URL访问一个不存在的商品来跳过nginx的本地缓存，web应用里面的ecache缓存和redis缓存来直接访问数据库，造成数据库压力暴涨导致系统直接宕机；这个可以通过在redis里面设置某个商品的键值对为&lt;key ,null&gt;来避免直接访问数据库，如果查询到一个值为null的key，直接返回商品不存在的提示信息。</p></li><li><p>缓存雪崩</p><p>缓存雪崩是因为大量的并发请求流入，超过了服务器的负载能力，直接压爆了nginx缓存和redis缓存以及各种缓存从而直接导致系统瘫痪，本质上没法根本解决，为了避免缓存雪崩可以通过水平扩展nginx机器增加nginx缓存或者增加redis cluster内的机器，响应更多的并发请求。</p></li></ul><h1 id="计算机所能处理的最小的数据项"><a href="#计算机所能处理的最小的数据项" class="headerlink" title="计算机所能处理的最小的数据项"></a>计算机所能处理的最小的数据项</h1><p>位。</p><h1 id="优化Hibernate所鼓励的7大措施："><a href="#优化Hibernate所鼓励的7大措施：" class="headerlink" title="优化Hibernate所鼓励的7大措施："></a>优化Hibernate所鼓励的7大措施：</h1><ol><li><p>尽量使用many-to-one，避免使用单项one-to-many</p></li><li><p>灵活使用单向one-to-many</p></li><li><p>不用一对一，使用多对一代替一对一</p></li><li><p>配置对象缓存，不使用集合缓存</p></li><li><p>一对多使用Bag 多对一使用Set</p></li><li><p>继承使用显示多态 HQL:from object polymorphism&#x3D;”exlicit” 避免查处所有对象</p></li><li><p>消除大表，使用二级缓存</p></li></ol><h1 id="JSP内置对象"><a href="#JSP内置对象" class="headerlink" title="JSP内置对象"></a>JSP内置对象</h1><p>一共有9个内置对象</p><ul><li>pageContext javax.servlet.jsp.PageContext</li><li>request javax.servlet.http.HttpServletRequest</li><li>response javax.servlet.http.HttpServletResponse</li><li>session javax.servlet.http.HttpSession</li><li>application javax.servlet.ServletContext</li><li>config javax.serlvet.ServletConfig</li><li>exception java.lang.Throwable</li><li>page java.lang.Object</li><li>out javax.servlet.jsp.JspWriter</li></ul><p>作用：</p><ol><li><p>pageContext 表示页容器 EL表达式、 标签 、上传</p></li><li><p>request 服务器端取得客户端的信息：头信息 、Cookie 、请求参数 ，最大用处在MVC设计模式上</p></li><li><p>response 服务器端回应客户端信息：Cookie、重定向</p></li><li><p>session 表示每一个用户，用于登录验证上</p></li><li><p>application 表示整个服务器</p></li><li><p>config 取得初始化参数，初始化参数在web.xml文件中配置</p></li><li><p>exception 表示的是错误页的处理操作</p></li><li><p>page 如同 this 一样，代表整个 jsp 页面自身</p></li><li><p>out 输出，但是尽量使用表达式输出</p></li></ol><h1 id="怎样使JAVA栈内存快速溢出？"><a href="#怎样使JAVA栈内存快速溢出？" class="headerlink" title="怎样使JAVA栈内存快速溢出？"></a>怎样使JAVA栈内存快速溢出？</h1><p>方法区和堆所有线程共享。虚拟机栈和本地方法栈和程序计数器每个线程独享。  每个线程的栈大小可以通过  参数 ：-Xss512k 来决定每新启动一个线程分配的栈大小。</p><p>如果方法迭代度过深就会出现栈内存溢出。 每一个方法在执行的同时会创建一个栈帧（用来存储局部变量，操作数栈，动态链接，动态出口等信息。）从调用到执行完成的过程就对应着</p><p>一个栈帧在虚拟机中入栈到出栈的过程。（方法执行完成后会释放所有的局部变量）</p><p>堆内存则是绝大部分用来存储生成的对象。 创建对象过多或强引用使GC无法回收则会报堆内存不足的异常。 （GC主要关注区域）</p><p>方法区\元空间\永久代  : 用来存储被虚拟机加载的类信息，常量，静态变量。（jdk8取消了这部分内存区域，一部分放入heap中）</p><p>运行时常量池： 用来存储编译器生成的各种字面量和符号引用。  字面量（new String(“你好”） 你好就是字面量</p>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx 常用配置</title>
    <link href="/posts/59e56e3a/"/>
    <url>/posts/59e56e3a/</url>
    
    <content type="html"><![CDATA[<h1 id="nginx使用非80端口时url带端口号的解决办法"><a href="#nginx使用非80端口时url带端口号的解决办法" class="headerlink" title="nginx使用非80端口时url带端口号的解决办法"></a>nginx使用非80端口时url带端口号的解决办法</h1><blockquote><p>注意这里$server_port要和浏览器你想显示的端口号保持一致，因为我listen是80所以是80，如果你listen是8080，又想浏览器显示80，这里server_port 就设置成80。</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">server_name</span> localhost;<br><br><span class="hljs-comment"># 参数之一</span><br>    <span class="hljs-attribute">port_in_redirect</span> <span class="hljs-literal">off</span><br>    <br>    proxy_set_header Host <span class="hljs-variable">$host</span>:<span class="hljs-variable">$server_port</span>;<br>    <span class="hljs-attribute">proxy_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>    <span class="hljs-attribute">proxy_set_header</span> REMOTE-HOST <span class="hljs-variable">$remote_addr</span>;<br>    <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>    <span class="hljs-section">location</span> / &#123;<br>        <span class="hljs-attribute">proxy_pass</span> http://127.0.0.1:8080/;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="proxy-pass反向代理cookie-session丢失"><a href="#proxy-pass反向代理cookie-session丢失" class="headerlink" title="proxy_pass反向代理cookie,session丢失"></a>proxy_pass反向代理cookie,session丢失</h1><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">server_name</span> le.qin.com le.qin.cn;<br><br>    <span class="hljs-section">location</span> / &#123;<br>        <span class="hljs-attribute">proxy_pass</span> http://127.0.0.1:9002/;<br>        <span class="hljs-attribute">root</span> html;<br>        <span class="hljs-attribute">index</span> index.html;<br>        <span class="hljs-attribute">rewrite</span> <span class="hljs-string">&quot;^/+$&quot;</span> /officialsite/initLedaIndex <span class="hljs-literal">last</span>;<br>        <span class="hljs-attribute">proxy_cookie_path</span> /<span class="hljs-literal">off</span>Icialsite/initLedaIndex /;<br>        <span class="hljs-attribute">proxy_set_header</span> Cookie <span class="hljs-variable">$http_cookie</span>;<br>        <span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$http_host</span>;<br>        <span class="hljs-attribute">proxy_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>        <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="proxy-header-端口错误"><a href="#proxy-header-端口错误" class="headerlink" title="proxy header 端口错误"></a>proxy header 端口错误</h1><blockquote><p>nginx监听端口为非80端口时需要配置如下：</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$host</span>:<span class="hljs-variable">$server_port</span><br></code></pre></td></tr></table></figure><h1 id="proxy-redirect-使用"><a href="#proxy-redirect-使用" class="headerlink" title="proxy_redirect 使用"></a>proxy_redirect 使用</h1><blockquote><p>如果需要修改从被代理服务器传来的应答头中的”Location”和”Refresh”字段，可以用这个指令设置。</p></blockquote><p>proxy_redirect<br> 语法：proxy_redirect [ default | off | redirect replacement ]<br> 默认值：proxy_redirect default<br> 使用字段：http, server, location</p><p>示例：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">server_name</span> www.boke.com;<br>    <span class="hljs-section">location</span> / &#123;<br>        <span class="hljs-attribute">proxy_pass</span> http://192.168.1.154:8080;<br>        <span class="hljs-attribute">proxy_redirect</span> ~^http://192.168.1.154:8080(.*) http://www.boke.com<span class="hljs-variable">$1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost nginx]# curl -I http://www.boke.com/wuman<br>HTTP/1.1 301 Moved Permanently<br>Server: nginx<br>Date: Thu, 24 Dec 2015 12:02:00 GMT<br>Content-Type: text/html; charset=iso-8859-1<br>Connection: keep-alive<br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改前</span><br>Location: http://192.168.1.154:8080/wuman/<br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改后</span><br>Location: http://www.boke.com/wuman/<br></code></pre></td></tr></table></figure><h1 id="location配置直接输出文本"><a href="#location配置直接输出文本" class="headerlink" title="location配置直接输出文本"></a>location配置直接输出文本</h1><p>直接返回文本：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> / &#123;<br>    <span class="hljs-attribute">default_type</span>    text/plain;<br>    <span class="hljs-attribute">return</span> <span class="hljs-number">502</span> <span class="hljs-string">&quot;服务正在升级，请稍后再试……&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>也可以使用html标签格式：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> / &#123;<br>    <span class="hljs-attribute">default_type</span>    text/html;<br>    <span class="hljs-attribute">return</span> <span class="hljs-number">502</span> <span class="hljs-string">&quot;服务正在升级，请稍后再试……&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>也可以直接返回json文本：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> / &#123;<br>    <span class="hljs-attribute">default_type</span>    application/json;<br>    <span class="hljs-attribute">return</span> <span class="hljs-number">502</span> <span class="hljs-string">&#x27;&#123;&quot;status&quot;:502,&quot;msg&quot;:&quot;服务正在升级，请稍后再试……&quot;&#125;&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="配置resolver指定DNS解析"><a href="#配置resolver指定DNS解析" class="headerlink" title="配置resolver指定DNS解析"></a>配置resolver指定DNS解析</h1><p>resolver可以指定多个DNS，使用valid来设置缓存时间，如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">resolver</span> <span class="hljs-number">119.29.29.29</span> <span class="hljs-number">114.114.114.114</span> valid=<span class="hljs-number">3600s</span>;<br></code></pre></td></tr></table></figure><p>如果不填写端口则默认使用53，还可以向下面这样指定DNS端口：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">resolver</span> <span class="hljs-number">127.0.0.1:5353</span> valid=<span class="hljs-number">30s</span>;<br></code></pre></td></tr></table></figure><p>强制更新解析：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">resolver</span> <span class="hljs-number">127.0.0.1</span>;<br><span class="hljs-attribute">set</span> <span class="hljs-variable">$backend</span> <span class="hljs-string">&quot;foo.example.com&quot;</span>;<br><span class="hljs-attribute">proxy_pass</span> http://<span class="hljs-variable">$backend</span>;<br></code></pre></td></tr></table></figure><h1 id="server-name-配置"><a href="#server-name-配置" class="headerlink" title="server_name 配置"></a>server_name 配置</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>虚拟主机是一种在单一主机或主机群上运行多个网站或服务的技术，可以用来解决IP地址资源有限而网站数目日益增多的问题。实现方式主要有以下三种:</p><ul><li>基于域名(Name-based)</li><li>基于IP地址(IP-based)</li><li>基于Port端口(Port-based)</li></ul><p>其中使用最广泛无疑是基于域名的方式,不同的域名通过DNS最终可以解析到相同的IP地址,在对应的机器上我们可以使用Nginx等Web服务器软件对不同的域名请求进行相应的处理。这里再提及一点,我们平时访问一个网站，是通过DNS将其解析到某一个IP上,我们的客户端（通常是浏览器）最终是和这个IP对应的机器建立连接，从而发送请求的。那么Nginx等服务器是如何知道一个请求对应的是哪个域名的呢？</p><p>答案在于HTTP协议中的Host请求头,其值为我们要访问的域名。这里需要注意的是,在HTTP&#x2F;1.0中是不支持Host请求头字段的,所以HTTP&#x2F;1.0是不支持虚拟主机技术的，而根据 <a href="https://link.segmentfault.com/?url=https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html">rfc2616规范</a> HTTP&#x2F;1.1协议中客户端发送的请求必须带上Host这个请求头,否则服务器必须返回<code>400 Bad Request</code>响应。</p><p>而nginx正是通过http模块下的server指令块来配置虚拟主机。</p><h2 id="配置语法"><a href="#配置语法" class="headerlink" title="配置语法"></a>配置语法</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nginx">Syntax:    <span class="hljs-attribute">server_name</span> name ...;<br>Default:    <br><span class="hljs-attribute">server_name</span> <span class="hljs-string">&quot;&quot;</span>;<br>Context: server<br></code></pre></td></tr></table></figure><h2 id="server-name形式"><a href="#server-name形式" class="headerlink" title="server_name形式"></a>server_name形式</h2><p>sever_name指令后面的参数值可以是以下几种:</p><ul><li>精确的域名,例如<code>www.example.com</code></li><li>通配符名称,可用<em>表示任意多字符(类似Linux Shell中的</em>),但是通配符必须在域名的最前面或者最后面,例如<code>*.example.com</code>、<code>www.example.*</code></li><li>正则表达式,最前面是一个波浪号<del>,例如&#96;</del>^www\d+.example.com$&#96;表示可以匹配以www开头，后跟一个到多个数字，然后以.example.com结尾的域名</li></ul><p>除了以上几种形式，还有下面几种表示特殊含义的域名:</p><ul><li><code>.example.com</code>,相当于<code>*.example.com</code> + <code>example.com</code></li><li><strong>“” 可以匹配没有带Host头的请求</strong></li><li>国际化域名（用得不多,了解即可）,用ASCII码表示，例如<code>xn--e1afmkfd.xn--80akhbyknj4f</code>可表示<code>пример.испытание</code></li><li><code>_</code>、<code>__</code>或者<code>!@#</code>等无效的域名，可以理解为其可以匹配任意域名，但是优先级最低，最常见的用法是用来设置默认的server,即当一个请求的Host没有命中其他规则时，会采用默认server的配置。配置如下:</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>  default_server;<br>    <span class="hljs-attribute">server_name</span>  _;<br>    <span class="hljs-attribute">return</span>       <span class="hljs-number">444</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="server-name匹配顺序"><a href="#server-name匹配顺序" class="headerlink" title="server_name匹配顺序"></a>server_name匹配顺序</h2><p>当需要决定采用哪个server块的配置处理请求时,会根据以下的顺序查找:</p><ol><li>精确匹配</li><li>以 * 开头的最长通配符名称</li><li>以 * 结尾的最长通配符名称</li><li>根据在配置文件出现的顺序第一个匹配上的正则表示式名称</li><li>默认配置，在 listen 指令中指明了 default_server 的 server 块，若无，为配置文件中第一个声明的 server 块</li></ol><h2 id="配置默认server"><a href="#配置默认server" class="headerlink" title="配置默认server"></a>配置默认server</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span> default_server;<br>    <span class="hljs-attribute">server_name</span> _;<br>    <span class="hljs-attribute">return</span> <span class="hljs-number">200</span> <span class="hljs-string">&quot;default_server&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>关于listen指令,有几点需要注意的地方:</p><ol><li>如果server指令块里没有指定listen指令,则根据运行nginx的用户不同，默认监听的端口也不同,root用户启动默认监听80端口，否则默认监听8000端口</li><li>如果配置了listen且只指定了IP,则监听端口为80,此时操作系统可能会不允许非root用户启动nginx，提示</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx">nginx: [emerg] bind() <span class="hljs-attribute">to</span> <span class="hljs-number">127.0.0.1:80</span> failed (<span class="hljs-number">13</span>: Permission denied)<br></code></pre></td></tr></table></figure><h1 id="location-配置"><a href="#location-配置" class="headerlink" title="location 配置"></a>location 配置</h1><h2 id="配置语法-1"><a href="#配置语法-1" class="headerlink" title="配置语法"></a>配置语法</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nginx">Syntax:    <span class="hljs-section">location</span> [ = | <span class="hljs-regexp">~ |</span> <span class="hljs-regexp">~* |</span><span class="hljs-regexp"> ^~</span> ] uri &#123; ... &#125;<br><span class="hljs-section">location</span> <span class="hljs-variable">@name</span> &#123; ... &#125;<br>Default: —<br>Context: server, <span class="hljs-section">location</span><br></code></pre></td></tr></table></figure><p>根据配置语法我们知道location可以有以下几种形式:</p><blockquote><p>其中 &#x3D; 和 ^~ 修饰符都可以认为是特殊形式的前缀匹配，正则匹配比普通前缀匹配优先级高</p></blockquote><ul><li>&#x3D;，精确匹配</li><li>～，正则匹配,大小写敏感</li><li>～*，正则匹配, 大小写不敏感</li><li>^~，忽略正则表达式的前缀匹配</li><li>没有修饰符，普通前缀匹配</li><li>@，命名location,可用来做内部重定向</li></ul><h2 id="匹配过程"><a href="#匹配过程" class="headerlink" title="匹配过程"></a>匹配过程</h2><p>根据请求的 URI 和 location 的配置,查找请求对应的 location 过程如下:</p><ol><li>将请求URI标准化,包括将”%xx”形式编码的文本进行解码，解析相对路径”.”和”..”以及合并两个或多个相邻的”&#x2F;“成单个”&#x2F;“。</li><li>根据请求URI找到并记录匹配上的最长前缀匹配，这里有两个特殊的场景:<ul><li>找到了&#x3D;修饰的精确匹配,结束查找,采用它的配置。</li><li>如果该步骤最终记录下的前缀以^~修饰，则采用它的配置，不会进行后续的查找步骤。</li></ul></li><li>根据在配置文件出现的顺序，检查相应的正则匹配，若有一个匹配上，则应用该配置，且不会继续检查后续的正则配置。</li><li>若第3步没有找到匹配上的正则匹配，则采用第2步中找到的最长前缀匹配对应的配置。</li></ol><p>根据上面的查找过程，可以得到一些配置优化点：</p><ul><li>对于经常要访问的路径，可以使用精确匹配或^&#x3D;修饰的匹配,可以避免进行正则匹配检查。</li><li>如果一定要用到正则表达式，可以把最经常被访问的location规则配置在最前面，因为正则匹配命中一个就不会继续验证后续的匹配规则。</li></ul><p><strong>注意：</strong></p><p>关于最后一条测试结果,需要注意的是，<code>/a/.*$</code>这个正则表达式,并不要求请求URI以<code>/a</code>开头，这也是很容易疏漏的地方,若想匹配以<code>/a</code>开头的请求，应改为<code>^/a/.*$</code></p><h2 id="name的用法"><a href="#name的用法" class="headerlink" title="@name的用法"></a>@name的用法</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> /try &#123;<br>    <span class="hljs-attribute">try_files</span> <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span>/ <span class="hljs-variable">@name</span>;<br>&#125;<br><br><span class="hljs-section">location</span> /error &#123;<br>    <span class="hljs-attribute">error_page</span> <span class="hljs-number">404</span> = <span class="hljs-variable">@name</span>;<br>    <span class="hljs-attribute">return</span> <span class="hljs-number">404</span>;<br>&#125;<br><br><span class="hljs-section">location</span> <span class="hljs-variable">@name</span> &#123;<br>    <span class="hljs-attribute">return</span> <span class="hljs-number">200</span> <span class="hljs-string">&quot;<span class="hljs-variable">@name</span>&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx 安装 &amp; FTP美化</title>
    <link href="/posts/1b4fede6/"/>
    <url>/posts/1b4fede6/</url>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="配置-nginx-美化"><a href="#配置-nginx-美化" class="headerlink" title="配置 nginx 美化"></a>配置 nginx 美化</h2><h3 id="下载-fancyindex"><a href="#下载-fancyindex" class="headerlink" title="下载 fancyindex"></a>下载 fancyindex</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone git@github.com:aperezdc/ngx-fancyindex.git ngx-fancyindex-0.5.2<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">或者</span><br>wget https://github.com/aperezdc/ngx-fancyindex/archive/refs/tags/v0.5.2.zip<br>unzip v0.5.2.zip<br></code></pre></td></tr></table></figure><img src="/posts/1b4fede6/image-20221203231142318.png" alt="image-20221203231142318" style="zoom: 50%;"><h3 id="下载-fancyindex-theme"><a href="#下载-fancyindex-theme" class="headerlink" title="下载 fancyindex-theme"></a>下载 fancyindex-theme</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone git@github.com:Naereen/Nginx-Fancyindex-Theme.git<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">或者</span><br>wget https://github.com/Naereen/Nginx-Fancyindex-Theme/archive/refs/heads/master.zip<br></code></pre></td></tr></table></figure><p>下载好的目录结构剔除不需要的文件后的最终目录结构如下图所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell">├── fancyindex.conf<br>├── Nginx-Fancyindex<br>│   ├── addNginxFancyIndexForm.js<br>│   ├── footer.html<br>│   ├── header.html<br>│   ├── jquery.min.js<br>│   ├── showdown.min.js<br>│   └── styles.css<br>├── Nginx-Fancyindex-Theme-dark<br>│   ├── addNginxFancyIndexForm.js<br>│   ├── footer.html<br>│   ├── header.html<br>│   ├── jquery.min.js<br>│   ├── showdown.min.js<br>│   └── styles.css<br>├── Nginx-Fancyindex-Theme-light<br>│   ├── addNginxFancyIndexForm.js<br>│   ├── footer.html<br>│   ├── header.html<br>│   ├── HEADER.md<br>│   ├── jquery.min.js<br>│   ├── README.md<br>│   ├── showdown.min.js<br>│   └── styles.css<br></code></pre></td></tr></table></figure><p>将 Nginx-Fancyindex、Nginx-Fancyindex-Theme-dark 以及 Nginx-Fancyindex-Theme-light 移动至 &#x2F;etc&#x2F;nginx&#x2F;html 目录下，然后将 fancyindex.conf 移动至 &#x2F;etc&#x2F;nginx 主目录下，使用如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cp -r Nginx-Fancyindex Nginx-Fancyindex-Theme-dark Nginx-Fancyindex-Theme-light /etc/nginx/html<br>cp fancyindex.conf /etc/nginx<br></code></pre></td></tr></table></figure><h2 id="安装-nginx"><a href="#安装-nginx" class="headerlink" title="安装 nginx"></a>安装 nginx</h2><h3 id="yum-安装（不推荐）"><a href="#yum-安装（不推荐）" class="headerlink" title="yum 安装（不推荐）"></a><del>yum 安装（不推荐）</del></h3><h4 id="1-安装-Nginx"><a href="#1-安装-Nginx" class="headerlink" title="1. 安装 Nginx"></a>1. 安装 Nginx</h4><p>yum 安装 nginx 非常简单，就输入一条命令即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo yum -y install nginx   <span class="hljs-comment"># 安装 nginx</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo yum remove nginx  <span class="hljs-comment"># 卸载 nginx</span></span><br></code></pre></td></tr></table></figure><p>使用 yum 进行 Nginx 安装时，Nginx 配置文件在 <code>/etc/nginx</code> 目录下。</p><h4 id="2-配置-Nginx-服务"><a href="#2-配置-Nginx-服务" class="headerlink" title="2. 配置 Nginx 服务"></a>2. 配置 Nginx 服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo systemctl <span class="hljs-built_in">enable</span> nginx <span class="hljs-comment"># 设置开机启动</span></span> <br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo service nginx start <span class="hljs-comment"># 启动 nginx 服务</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo service nginx stop <span class="hljs-comment"># 停止 nginx 服务</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo service nginx restart <span class="hljs-comment"># 重启 nginx 服务</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo service nginx reload <span class="hljs-comment"># 重新加载配置，一般是在修改过 nginx 配置文件时使用。</span></span><br></code></pre></td></tr></table></figure><h3 id="源码包安装（推荐）"><a href="#源码包安装（推荐）" class="headerlink" title="源码包安装（推荐）"></a>源码包安装（推荐）</h3><p>Nginx 源码包安装方式步骤比较繁琐，并且需要提前安装一些 Nginx 依赖库。</p><h4 id="1-依赖库安装"><a href="#1-依赖库安装" class="headerlink" title="1. 依赖库安装"></a>1. 依赖库安装</h4><h5 id="安装基础环境"><a href="#安装基础环境" class="headerlink" title="安装基础环境"></a>安装基础环境</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum -y install redhat-rpm-config perl-ExtUtils-Embed gd-devel GeoIP GeoIP-devel GeoIP-data libxslt-devel gperftools<br></code></pre></td></tr></table></figure><h5 id="安装-gcc-环境"><a href="#安装-gcc-环境" class="headerlink" title="安装 gcc 环境"></a>安装 gcc 环境</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo yum -y install gcc gcc-c++ <span class="hljs-comment"># nginx 编译时依赖 gcc 环境</span></span><br></code></pre></td></tr></table></figure><h5 id="安装-pcre"><a href="#安装-pcre" class="headerlink" title="安装 pcre"></a>安装 pcre</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo yum -y install pcre pcre-devel <span class="hljs-comment"># 让 nginx 支持重写功能</span></span><br></code></pre></td></tr></table></figure><h5 id="安装-zlib"><a href="#安装-zlib" class="headerlink" title="安装 zlib"></a>安装 zlib</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">zlib 库提供了很多压缩和解压缩的方式，nginx 使用 zlib 对 http 包内容进行 gzip 压缩</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo yum -y install zlib zlib-devel</span><br></code></pre></td></tr></table></figure><h5 id="安装-openssl"><a href="#安装-openssl" class="headerlink" title="安装 openssl"></a>安装 openssl</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">安全套接字层密码库，用于通信加密</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo yum -y install openssl openssl-devel</span><br></code></pre></td></tr></table></figure><p>以上安装完成后，进行 nginx 安装。</p><h4 id="2-nginx-源码包安装"><a href="#2-nginx-源码包安装" class="headerlink" title="2. nginx 源码包安装"></a>2. nginx 源码包安装</h4><h5 id="创建用户组和用户"><a href="#创建用户组和用户" class="headerlink" title="创建用户组和用户"></a>创建用户组和用户</h5><p>创建 nginx 用户组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">groupadd nginx<br></code></pre></td></tr></table></figure><p>创建 nginx 用户并添加进 nginx 用户组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">useradd -g nginx -m nginx<br></code></pre></td></tr></table></figure><p>设置 nginx 用户密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">passwd nginx<br></code></pre></td></tr></table></figure><h5 id="下载配置"><a href="#下载配置" class="headerlink" title="下载配置"></a>下载配置</h5><p>将准备好的 <code>nginx-1.22.1.tar.gz</code> 包，拷贝至 home 目录下（一般习惯在此目录下进行安装）进行解压缩。</p><p>源码包下载地址：<a href="https://nginx.org/en/download.html">nginx: download</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo tar -zxvf nginx-1.22.1.tar.gz <span class="hljs-comment"># 解压缩</span></span><br></code></pre></td></tr></table></figure><p>在完成解压缩后，进入 <code>nginx-1.22.1</code> 目录进行源码编译安装。</p><p>这里编译的时候需要原有的编译的基础上加上以下参数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">--add-module=../ngx-fancyindex-0.5.2<br></code></pre></td></tr></table></figure><p>命令会显示一些环境信息。如果出现错误，一般是依赖库没有安装完成，可按照错误提示信息进行所缺的依赖库安装。</p><p>预先创建好如下目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir -p /var/cache/nginx/&#123;client_temp,proxy_temp,fastcgi_temp,uwsgi_temp,scgi_temp&#125;<br></code></pre></td></tr></table></figure><p>完整编译命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs shell">./configure \<br>--prefix=/etc/nginx \<br>--sbin-path=/usr/sbin/nginx \<br>--modules-path=/usr/lib64/nginx/modules \<br>--conf-path=/etc/nginx/nginx.conf \<br>--error-log-path=/var/log/nginx/error.log \<br>--http-log-path=/var/log/nginx/access.log \<br>--pid-path=/var/run/nginx.pid \<br>--lock-path=/var/run/nginx.lock \<br>--http-client-body-temp-path=/var/cache/nginx/client_temp \<br>--http-proxy-temp-path=/var/cache/nginx/proxy_temp \<br>--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \<br>--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \<br>--http-scgi-temp-path=/var/cache/nginx/scgi_temp \<br>--user=nginx \<br>--group=nginx \<br>--with-compat \<br>--with-file-aio \<br>--with-threads \<br>--with-http_addition_module \<br>--with-http_auth_request_module \<br>--with-http_dav_module \<br>--with-http_flv_module \<br>--with-http_gunzip_module \<br>--with-http_gzip_static_module \<br>--with-http_mp4_module \<br>--with-http_random_index_module \<br>--with-http_realip_module \<br>--with-http_secure_link_module \<br>--with-http_slice_module \<br>--with-http_ssl_module \<br>--with-http_stub_status_module \<br>--with-http_sub_module \<br>--with-http_v2_module \<br>--with-mail \<br>--with-mail_ssl_module \<br>--with-stream \<br>--with-stream_realip_module \<br>--with-stream_ssl_module \<br>--with-stream_ssl_preread_module \<br>--with-cc-opt=&#x27;-I/usr/local/opt/pcre/include -I/usr/local/opt/openssl/include&#x27; \<br>--with-ld-opt=&#x27;-L/usr/local/opt/pcre/lib -L/usr/local/opt/openssl/lib&#x27; \<br>--add-module=../ngx-fancyindex<br></code></pre></td></tr></table></figure><p>查看 <code>fancy</code> 是否安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@yahya ~]# 2&gt;&amp;1 ./nginx -V | tr &#x27; &#x27; &#x27;\n&#x27;|grep fan<br>--add-module=ngx-fancyindex-0.5.2<br></code></pre></td></tr></table></figure><h5 id="目录结构一览"><a href="#目录结构一览" class="headerlink" title="目录结构一览"></a>目录结构一览</h5><p>nginx 运行主 bin 文件已放至 <code>/usr/sbin</code> 目录下，可以直接使用 nginx 的相关命令而不需要定位到绝对路径，目录结构功能一览如下：</p><h6 id="主配置文件目录"><a href="#主配置文件目录" class="headerlink" title="主配置文件目录"></a>主配置文件目录</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@yahya ~]# tree /etc/nginx<br>/etc/nginx<br>├── fastcgi.conf<br>├── fastcgi.conf.default<br>├── fastcgi_params<br>├── fastcgi_params.default<br>├── html<br>│   ├── 50x.html<br>│   ├── fancyindex.conf<br>│   ├── index.html<br>│   ├── Nginx-Fancyindex<br>│   │   ├── addNginxFancyIndexForm.js<br>│   │   ├── footer.html<br>│   │   ├── header.html<br>│   │   ├── jquery.min.js<br>│   │   ├── showdown.min.js<br>│   │   └── styles.css<br>│   ├── Nginx-Fancyindex-Theme-dark<br>│   │   ├── addNginxFancyIndexForm.js<br>│   │   ├── footer.html<br>│   │   ├── header.html<br>│   │   ├── jquery.min.js<br>│   │   ├── showdown.min.js<br>│   │   └── styles.css<br>│   └── Nginx-Fancyindex-Theme-light<br>│       ├── addNginxFancyIndexForm.js<br>│       ├── footer.html<br>│       ├── header.html<br>│       ├── HEADER.md<br>│       ├── jquery.min.js<br>│       ├── README.md<br>│       ├── showdown.min.js<br>│       └── styles.css<br>├── koi-utf<br>├── koi-win<br>├── mime.types<br>├── mime.types.default<br>├── nginx.conf<br>├── nginx.conf.default<br>├── pass_file<br>├── scgi_params<br>├── scgi_params.default<br>├── uwsgi_params<br>├── uwsgi_params.default<br>└── win-utf<br></code></pre></td></tr></table></figure><h6 id="日志目录"><a href="#日志目录" class="headerlink" title="日志目录"></a>日志目录</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@yahya ~]# tree /var/log/nginx<br>/var/log/nginx<br>├── access.log<br>└── error.log<br></code></pre></td></tr></table></figure><h6 id="临时文件目录"><a href="#临时文件目录" class="headerlink" title="临时文件目录"></a>临时文件目录</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@yahya ~]# tree /var/cache/nginx<br>/var/cache/nginx<br>├── client_temp<br>├── fastcgi_temp<br>├── proxy_temp<br>├── scgi_temp<br>└── uwsgi_temp<br></code></pre></td></tr></table></figure><h6 id="运行目录"><a href="#运行目录" class="headerlink" title="运行目录"></a>运行目录</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@yahya ~]# tree /var/run<br>/var/run<br>├── nginx.pid<br></code></pre></td></tr></table></figure><h5 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h5><p>进行源码编译并安装 nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">make <span class="hljs-comment"># 编译</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">make install <span class="hljs-comment"># 安装</span></span><br></code></pre></td></tr></table></figure><h4 id="3-添加登录认证"><a href="#3-添加登录认证" class="headerlink" title="3. 添加登录认证"></a>3. 添加登录认证</h4><p>安装 <code>htpasswd</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo yum install -y httpd-tools<br></code></pre></td></tr></table></figure><p>设置用户名密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">htpasswd -c -d /etc/nginx/pass_file &lt;username&gt;<br></code></pre></td></tr></table></figure><p>回车，按提示输入两次密码。再次访问网站会弹出登录框做认证，这里设置用户名密码均为 admin。</p><h4 id="4-配置-nginx-conf"><a href="#4-配置-nginx-conf" class="headerlink" title="4. 配置 nginx.conf"></a>4. 配置 nginx.conf</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment">#user  nobody;</span><br><span class="hljs-attribute">worker_processes</span>  <span class="hljs-number">1</span>;<br><br><span class="hljs-comment">#error_log  logs/error.log;</span><br><span class="hljs-comment">#error_log  logs/error.log  notice;</span><br><span class="hljs-comment">#error_log  logs/error.log  info;</span><br><br><span class="hljs-comment">#pid        logs/nginx.pid;</span><br><br><br><span class="hljs-section">events</span> &#123;<br>    <span class="hljs-attribute">worker_connections</span>  <span class="hljs-number">1024</span>;<br>&#125;<br><br><br><span class="hljs-section">http</span> &#123;<br>    <span class="hljs-attribute">include</span>       mime.types;<br>    <span class="hljs-attribute">default_type</span>  application/octet-stream;<br><br>    <span class="hljs-comment">#log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br>    <span class="hljs-comment">#                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br>    <span class="hljs-comment">#                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><br>    <span class="hljs-attribute">charset</span> utf-<span class="hljs-number">8</span>;<br>    <span class="hljs-comment">#access_log  logs/access.log  main;</span><br><br>    <span class="hljs-attribute">sendfile</span>        <span class="hljs-literal">on</span>;<br>    <span class="hljs-comment">#tcp_nopush     on;</span><br><br>    <span class="hljs-attribute">keepalive_timeout</span>  <span class="hljs-number">65</span>;<br><br>    <span class="hljs-attribute">gzip</span>  <span class="hljs-literal">on</span>;<br><br>    <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;<br>        <span class="hljs-attribute">server_name</span>  localhost;<br><br>        <span class="hljs-attribute">client_max_body_size</span> <span class="hljs-number">4G</span>;<br><br>        <span class="hljs-comment">#charset koi8-r;</span><br><br>        <span class="hljs-comment">#access_log  logs/host.access.log  main;</span><br>        <span class="hljs-attribute">error_page</span>   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /50x.html;<br><br>        <span class="hljs-section">location</span> / &#123;<br>            <span class="hljs-attribute">root</span>   html;<br>            <span class="hljs-attribute">index</span>  index.html index.htm;<br>        &#125;<br><br>        <span class="hljs-section">location</span> /download &#123;<br>            <span class="hljs-attribute">include</span> /etc/nginx/fancyindex.conf; <span class="hljs-comment"># 目录美化配置</span><br>            <span class="hljs-attribute">auth_basic</span> <span class="hljs-string">&quot;You are not authorized&quot;</span>;<br>            <span class="hljs-attribute">auth_basic_user_file</span> /etc/nginx/pass_file;<br>            <span class="hljs-attribute">alias</span> /usr/local/download/; <span class="hljs-comment"># 指定目录所在路径</span><br>            <span class="hljs-attribute">autoindex</span> <span class="hljs-literal">on</span>; <span class="hljs-comment"># 开启目录浏览</span><br>            <span class="hljs-attribute">autoindex_format</span> html; <span class="hljs-comment"># 以html风格将目录展示在浏览器中</span><br>            <span class="hljs-attribute">autoindex_exact_size</span> <span class="hljs-literal">off</span>; <span class="hljs-comment"># 切换为 off 后，以可读的方式显示文件大小，单位为 KB、MB 或者 GB</span><br>            <span class="hljs-attribute">autoindex_localtime</span> <span class="hljs-literal">on</span>; <span class="hljs-comment"># 以服务器的文件时间作为显示的时间</span><br>            <span class="hljs-attribute">charset</span> utf-<span class="hljs-number">8</span>,gbk; <span class="hljs-comment"># 展示中文文件名</span><br>        &#125;<br><br>        <span class="hljs-comment">#error_page  404              /404.html;</span><br><br>        <span class="hljs-comment"># redirect server error pages to the static page /50x.html</span><br>        <span class="hljs-comment">#</span><br>        <span class="hljs-attribute">error_page</span>   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /50x.html;<br>        <span class="hljs-section">location</span> = /50x.html &#123;<br>            <span class="hljs-attribute">root</span>   html;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>查找当前 nginx 安装目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">which nginx<br></code></pre></td></tr></table></figure><p>启动服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nginx<br></code></pre></td></tr></table></figure><p>重新加载服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nginx -s reload<br></code></pre></td></tr></table></figure><p>停止服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nginx -s stop<br></code></pre></td></tr></table></figure><p>查看 nginx 服务进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ps -ef | grep nginx # 查看服务进程<br></code></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.jianshu.com/p/f468e02f38a0">linux添加用户，用户组（centos7）</a></p><p><a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-basic-http-authentication-with-nginx-on-centos-7">How To Set Up Basic HTTP Authentication With Nginx on CentOS 7</a></p><p><a href="https://juejin.cn/post/6844904134345228301">CentOS 7 安装 Nginx</a></p><p><a href="https://www.jianshu.com/p/220776cb72df">Nginx 文件服务器页面美化，按时间倒叙</a></p>]]></content>
    
    
    <categories>
      
      <category>nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nginx</tag>
      
      <tag>ftp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring cloud 面试题</title>
    <link href="/posts/238ae934/"/>
    <url>/posts/238ae934/</url>
    
    <content type="html"><![CDATA[<h2 id="1、什么是-Spring-Cloud？"><a href="#1、什么是-Spring-Cloud？" class="headerlink" title="1、什么是 Spring Cloud？"></a>1、什么是 Spring Cloud？</h2><p>Spring cloud 流应用程序启动器是基于 Spring Boot 的 Spring 集成应用程序，提供与外部系统的集成。Spring cloud Task，一个生命周期短暂的微服务框架，用于快速构建执行有限数据处理的应用程序。</p><h2 id="2、使用-Spring-Cloud-有什么优势？"><a href="#2、使用-Spring-Cloud-有什么优势？" class="headerlink" title="2、使用 Spring Cloud 有什么优势？"></a>2、使用 Spring Cloud 有什么优势？</h2><p>使用 Spring Boot 开发分布式微服务时，我们面临以下问题</p><p>（1）与分布式系统相关的复杂性：这种开销包括网络问题，延迟开销，带宽问题，安全问题。</p><p>（2）服务发现：服务发现工具管理群集中的流程和服务如何查找和互相交谈。它涉及一个服务目录，在该目录中注册服务，然后能够查找并连接到该目录中的服务。</p><p>（3）冗余：分布式系统中的冗余问题。</p><p>（4）负载平衡：负载平衡改善跨多个计算资源的工作负荷，诸如计算机，计算机集群，网络链路，中央处理单元，或磁盘驱动器的分布。</p><p>（5）性能问题：由于各种运营开销导致的性能问题。</p><p>（6）部署复杂性：Devops 技能的要求。</p><h2 id="3、服务注册和发现是什么意思？Spring-Cloud-如何实现？"><a href="#3、服务注册和发现是什么意思？Spring-Cloud-如何实现？" class="headerlink" title="3、服务注册和发现是什么意思？Spring Cloud 如何实现？"></a>3、服务注册和发现是什么意思？Spring Cloud 如何实现？</h2><p>当我们开始一个项目时，我们通常在属性文件中进行所有的配置。随着越来越多的服务开发和部署，添加和修改这些属性变得更加复杂。有些服务可能会下降，而某些位置可能会发生变化。手动更改属性可能会产生问题。 Eureka 服务注册和发现可以在这种情况下提供帮助。由于所有服务都在 Eureka 服务器上注册并通过调用 Eureka 服务器完成查找，因此无需处理服务地点的任何更改和处理。</p><h2 id="4、Spring-Cloud-和dubbo区别"><a href="#4、Spring-Cloud-和dubbo区别" class="headerlink" title="4、Spring Cloud 和dubbo区别?"></a>4、Spring Cloud 和dubbo区别?</h2><p>（1）服务调用方式 dubbo是RPC springcloud Rest Api</p><p>（2）注册中心，dubbo 是zookeeper springcloud是eureka，也可以是zookeeper</p><p>（3）服务网关，dubbo本身没有实现，只能通过其他第三方技术整合，springcloud有Zuul路由网关，作为路由服务器，进行消费者的请求分发，springcloud支持断路器，与git完美集成配置文件支持版本控制，事物总线实现配置文件的更新与服务自动装配等等一系列的微服务架构要素。</p><h2 id="5、SpringBoot和SpringCloud的区别？"><a href="#5、SpringBoot和SpringCloud的区别？" class="headerlink" title="5、SpringBoot和SpringCloud的区别？"></a>5、SpringBoot和SpringCloud的区别？</h2><p>SpringBoot专注于快速方便的开发单个个体微服务。</p><p>SpringCloud是关注全局的微服务协调整理治理框架，它将SpringBoot开发的一个个单体微服务整合并管理起来，</p><p>为各个微服务之间提供，配置管理、服务发现、断路器、路由、微代理、事件总线、全局锁、决策竞选、分布式会话等等集成服务</p><p>SpringBoot可以离开SpringCloud独立使用开发项目， 但是SpringCloud离不开SpringBoot ，属于依赖的关系.</p><p>SpringBoot专注于快速、方便的开发单个微服务个体，SpringCloud关注全局的服务治理框架。</p><h2 id="6、负载平衡的意义什么？"><a href="#6、负载平衡的意义什么？" class="headerlink" title="6、负载平衡的意义什么？"></a>6、负载平衡的意义什么？</h2><p>在计算中，负载平衡可以改善跨计算机，计算机集群，网络链接，中央处理单元或磁盘驱动器等多种计算资源的工作负载分布。负载平衡旨在优化资源使用，最大化吞吐量，最小化响应时间并避免任何单一资源的过载。使用多个组件进行负载平衡而不是单个组件可能会通过冗余来提高可靠性和可用性。负载平衡通常涉及专用软件或硬件，例如多层交换机或域名系统服务器进程。</p><h2 id="7、什么是-Hystrix？它如何实现容错？"><a href="#7、什么是-Hystrix？它如何实现容错？" class="headerlink" title="7、什么是 Hystrix？它如何实现容错？"></a>7、什么是 Hystrix？它如何实现容错？</h2><p>Hystrix 是一个延迟和容错库，旨在隔离远程系统，服务和第三方库的访问点，当出现故障是不可避免的故障时，停止级联故障并在复杂的分布式系统中实现弹性。</p><p>通常对于使用微服务架构开发的系统，涉及到许多微服务。这些微服务彼此协作。</p><p>思考以下微服务</p><img src="/posts/238ae934/195.png" class><p>假设如果上图中的微服务 9 失败了，那么使用传统方法我们将传播一个异常。但这仍然会导致整个系统崩溃。</p><p>随着微服务数量的增加，这个问题变得更加复杂。微服务的数量可以高达 1000。这是 hystrix 出现的地方 我们将使用 Hystrix 在这种情况下的 Fallback 方法功能。我们有两个服务 employee-consumer 使用由 employee-consumer 公开的服务。</p><p>简化图如下所示</p><img src="/posts/238ae934/196.png" class><p>现在假设由于某种原因，employee-producer 公开的服务会抛出异常。我们在这种情况下使用 Hystrix 定义了一个回退方法。这种后备方法应该具有与公开服务相同的返回类型。如果暴露服务中出现异常，则回退方法将返回一些值。</p><h2 id="8、什么是-Hystrix-断路器？我们需要它吗？"><a href="#8、什么是-Hystrix-断路器？我们需要它吗？" class="headerlink" title="8、什么是 Hystrix 断路器？我们需要它吗？"></a>8、什么是 Hystrix 断路器？我们需要它吗？</h2><p>由于某些原因，employee-consumer 公开服务会引发异常。在这种情况下使用 Hystrix 我们定义了一个回退方法。如果在公开服务中发生异常，则回退方法返回一些默认值。</p><img src="/posts/238ae934/197.png" class><p>如果 firstPage method() 中的异常继续发生，则 Hystrix 电路将中断，并且员工使用者将一起跳过 firtsPage 方法，并直接调用回退方法。 断路器的目的是给第一页方法或第一页方法可能调用的其他方法留出时间，并导致异常恢复。可能发生的情况是，在负载较小的情况下，导致异常的问题有更好的恢复机会 。</p><img src="/posts/238ae934/198.png" class><h2 id="9、什么是-Netflix-Feign？它的优点是什么？"><a href="#9、什么是-Netflix-Feign？它的优点是什么？" class="headerlink" title="9、什么是 Netflix Feign？它的优点是什么？"></a>9、什么是 Netflix Feign？它的优点是什么？</h2><p>Feign 是受到 Retrofit，JAXRS-2.0 和 WebSocket 启发的 java 客户端联编程序。</p><p>Feign 的第一个目标是将约束分母的复杂性统一到 http apis，而不考虑其稳定性。</p><p>在 employee-consumer 的例子中，我们使用了 employee-producer 使用 REST 模板公开的 REST 服务。</p><p>但是我们必须编写大量代码才能执行以下步骤</p><p>（1）使用功能区进行负载平衡。</p><p>（2）获取服务实例，然后获取基本 URL。</p><p>（3）利用 REST 模板来使用服务。 前面的代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConsumerControllerClient</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> LoadBalancerClient loadBalancer;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getEmployee</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> RestClientException， IOException &#123;<br>        ServiceInstance serviceInstance=loadBalancer.choose(<span class="hljs-string">&quot;employee-producer&quot;</span>);<br>        System.out.println(serviceInstance.getUri());<br>        String baseUrl=serviceInstance.getUri().toString();<br>        baseUrl=baseUrl+<span class="hljs-string">&quot;/employee&quot;</span>;<br>        <span class="hljs-type">RestTemplate</span> <span class="hljs-variable">restTemplate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>        ResponseEntity&lt;String&gt; response=<span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span>&#123;<br>            response=restTemplate.exchange(baseUrl，<br>                        HttpMethod.GET， getHeaders()，String.class);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (Exception ex)<br>            &#123;<br>            System.out.println(ex);<br>        &#125;<br>        System.out.println(response.getBody());<br>    &#125;<br></code></pre></td></tr></table></figure><p>之前的代码，有像 NullPointer 这样的例外的机会，并不是最优的。我们将看到如何使用 Netflix Feign 使呼叫变得更加轻松和清洁。如果 Netflix Ribbon 依赖关系也在类路径中，那么 Feign 默认也会负责负载平衡。</p><h2 id="10、什么是-Spring-Cloud-Bus？我们需要它吗？"><a href="#10、什么是-Spring-Cloud-Bus？我们需要它吗？" class="headerlink" title="10、什么是 Spring Cloud Bus？我们需要它吗？"></a>10、什么是 Spring Cloud Bus？我们需要它吗？</h2><p>考虑以下情况：我们有多个应用程序使用 Spring Cloud Config 读取属性，而Spring Cloud Config 从 GIT 读取这些属性。</p><p>下面的例子中多个员工生产者模块从 Employee Config Module 获取 Eureka 注册的财产。</p><img src="/posts/238ae934/199.png" class><p>如果假设 GIT 中的 Eureka 注册属性更改为指向另一台 Eureka 服务器，会发生什么情况。在这种情况下，我们将不得不重新启动服务以获取更新的属性。</p><p>还有另一种使用执行器端点&#x2F;刷新的方式。但是我们将不得不为每个模块单独调用这个 url。例如，如果 Employee Producer1 部署在端口 8080 上，则调用 <a href="http://localhost:8080/refresh%E3%80%82%E5%90%8C%E6%A0%B7%E5%AF%B9%E4%BA%8E">http://localhost:8080/refresh。同样对于</a> Employee Producer2 <a href="http://localhost:8081/refresh">http://localhost:8081/refresh</a> 等等。这又很麻烦。这就是 Spring Cloud Bus 发挥作用的地方。</p><img src="/posts/238ae934/200.png" class><p>Spring Cloud Bus 提供了跨多个实例刷新配置的功能。因此，在上面的示例中，如果我们刷新 Employee Producer1，则会自动刷新所有其他必需的模块。如果我们有多个微服务启动并运行，这特别有用。这是通过将所有微服务连接到单个消息代理来实现的。无论何时刷新实例，此事件都会订阅到侦听此代理的所有微服务，并且它们也会刷新。可以通过使用端点&#x2F;总线&#x2F;刷新来实现对任何单个实例的刷新。</p><h2 id="11、springcloud-断路器的作用"><a href="#11、springcloud-断路器的作用" class="headerlink" title="11、springcloud 断路器的作用"></a>11、springcloud 断路器的作用</h2><p>当一个服务调用另一个服务由于网络原因或自身原因出现问题，调用者就会等待被调用者的响应 当更多的服务请求到这些资源导致更多的请求等待，发生连锁效应（雪崩效应）</p><p>断路器有完全打开状态:一段时间内 达到一定的次数无法调用 并且多次监测没有恢复的迹象 断路器完全打开 那么下次请求就不会请求到该服务</p><p>半开：短时间内 有恢复迹象 断路器会将部分请求发给该服务，正常调用时 断路器关闭</p><p>关闭：当服务一直处于正常状态 能正常调用</p><h2 id="12、什么是SpringCloud-Config"><a href="#12、什么是SpringCloud-Config" class="headerlink" title="12、什么是SpringCloud Config?"></a>12、什么是SpringCloud Config?</h2><p>在分布式系统中，由于服务数量巨多，为了方便服务配置文件统一管理，实时更新，所以需要分布式配置中心组件。在Spring Cloud中，有分布式配置中心组件spring cloud config ，它支持配置服务放在配置服务的内存中（即本地），也支持放在远程Git仓库中。在spring cloud config 组件中，分两个角色，一是config server，二是config client。</p><p>使用：</p><p>（1）添加pom依赖</p><p>（2）配置文件添加相关配置</p><p>（3）启动类添加注解@EnableConfigServer</p><h2 id="13、Spring-Cloud-Gateway"><a href="#13、Spring-Cloud-Gateway" class="headerlink" title="13、Spring Cloud Gateway?"></a>13、Spring Cloud Gateway?</h2><p>Spring Cloud Gateway是Spring Cloud官方推出的第二代网关框架，取代Zuul网关。网关作为流量的，在微服务系统中有着非常作用，网关常见的功能有路由转发、权限校验、限流控制等作用。</p><p>使用了一个RouteLocatorBuilder的bean去创建路由，除了创建路由RouteLocatorBuilder可以让你添加各种predicates和filters，predicates断言的意思，顾名思义就是根据具体的请求的规则，由具体的route去处理，filters是各种过滤器，用来对请求做各种判断和修改。</p><p>14、dubbo是什么</p><p>dubbo是一个分布式的服务框架，致力于提高性能和透明化的RPC远程服务调用方案，以及SOA服务治理方案。</p><p>简言之，dubbo就是一个服务框架，如果没有分布式的需求，其实不需要用的，只有分布式的时候，才需要dubbo这样的分布式框架</p><p>本质里，dubbo就是个服务调用的东东。。</p><p>说白了就是个远程服务调用的分布式框架(告别webservice模式中的wsdl，以服务者与消费者的方式在dubbo上注册)</p><p>dubbo可以和spring无缝集成</p>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring cloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx 常见错误</title>
    <link href="/posts/516ff0b8/"/>
    <url>/posts/516ff0b8/</url>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="413错误"><a href="#413错误" class="headerlink" title="413错误"></a>413错误</h2><blockquote><p><em>fastcgi_intercept_errors 语法: fastcgi_intercept_errors on|off 默认: fastcgi_intercept_errors off 添加位置: http, server, location 默认情况下，nginx不支持自定义404错误页面，只有这个指令被设置为on，nginx才支持将404错误重定向</em></p></blockquote><p>修改<code>nginx</code>配置文件，配置客户端请求大小和缓存大小</p><p>在<code>http&#123;&#125;</code>中输入</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">client_max_body_size</span> <span class="hljs-number">8M</span>;(配置请求体缓存区大小) <br><br><span class="hljs-attribute">client_body_buffer_size</span> <span class="hljs-number">128k</span>;(设置客户端请求体最大值) <br><br><span class="hljs-attribute">fastcgi_intercept_errors</span> <span class="hljs-literal">on</span>;<br></code></pre></td></tr></table></figure><h3 id="post-解决办法"><a href="#post-解决办法" class="headerlink" title="post 解决办法"></a>post 解决办法</h3><p>针对post请求解决办法： </p><p>修改nginx.conf里面的几个相关的配置参数 </p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">client_body_buffer_size</span> <span class="hljs-number">10m</span>(配置请求体缓存区大小, 不配的话) <br><br>client_max_body_size <span class="hljs-number">20m</span>(设置客户端请求体最大值) <br><br>client_body_temp_path /data/temp (设置临时文件存放路径。只有当上传的请求体超出缓存区大小时，才会写到临时文件中,注意临时路径要有写入权限) <br></code></pre></td></tr></table></figure><p>如果上传文件大小超过client_max_body_size时，会报413 entity too large的错误。 </p><h3 id="get-解决办法"><a href="#get-解决办法" class="headerlink" title="get 解决办法"></a>get 解决办法</h3><blockquote><p>为什么修改 http header 的大小就能解决 get 请求串过长的问题？因为 get 请求参数会拼在 http header 中，所以，修改了 http header 的大小，就能解决上面问题。</p></blockquote><p>针对get请求，我们可以通过修改另外两个配置来解决请求串超长的问题： </p><p>使用字段：http, server </p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">client_header_buffer_size</span> <span class="hljs-number">16k</span>;<br><span class="hljs-attribute">large_client_header_buffers</span> <span class="hljs-number">4</span> <span class="hljs-number">16k</span>;<br></code></pre></td></tr></table></figure><p>下面讲讲这两个参数以及他们之间的关联关系：</p><p>对nginx处理header时的方法：</p><blockquote><ol><li>先处理请求的<code>request_line</code>，之后才是<code>request_header</code>。</li><li>这两者的buffer分配策略相同。</li><li>先根据<code>client_header_buffer_size</code>配置的值分配一个<code>buffer</code>，如果分配的<code>buffer</code>无法容纳 <code>request_line</code>&#x2F;<code>request_header</code>，那么就会再次根据<code>large_client_header_buffers</code>配置的参数分配<code>large_buffer</code>，如果<code>large_buffer</code>还是无法容纳，那么就会返回414（处理request_line）&#x2F;400（处理request_header）错误。</li></ol></blockquote><h2 id="400错误：HTTP头-x2F-Cookie过大"><a href="#400错误：HTTP头-x2F-Cookie过大" class="headerlink" title="400错误：HTTP头&#x2F;Cookie过大"></a>400错误：HTTP头&#x2F;Cookie过大</h2><p>　　nginx400错误是由于request header过大，通常是由于cookie中写入了较长的字符串所引起的。</p><p>​解决方法是不要在cookie里记录过多数据，如果实在需要的话可以考虑调整在nginx.conf中的client_header_buffer_size(默认1k)</p><p>　　若cookie太大，可能还需要调整large_client_header_buffers(默认4k)，该参数说明如下：</p><p>　　请求行如果超过buffer，就会报HTTP 414错误(URI Too Long)</p><p>　　nginx接受最长的HTTP头部大小必须比其中一个buffer大，否则就会报400的HTTP错误(Bad Request)。</p><h2 id="504错误"><a href="#504错误" class="headerlink" title="504错误"></a>504错误</h2><p>1、修改&#x2F;etc&#x2F;nginx&#x2F;nginx.conf，添加如下信息：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">http</span> &#123;<br>    <span class="hljs-attribute">include</span>       /etc/nginx/mime.types;<br>    <span class="hljs-attribute">default_type</span>  application/octet-stream;<br><br>    <span class="hljs-attribute">log_format</span>  main  <span class="hljs-string">&#x27;<span class="hljs-variable">$remote_addr</span> - <span class="hljs-variable">$remote_user</span> [<span class="hljs-variable">$time_local</span>] &quot;<span class="hljs-variable">$request</span>&quot; &#x27;</span><br>                      <span class="hljs-string">&#x27;<span class="hljs-variable">$status</span> <span class="hljs-variable">$body_bytes_sent</span> &quot;<span class="hljs-variable">$http_referer</span>&quot; &#x27;</span><br>                      <span class="hljs-string">&#x27;&quot;<span class="hljs-variable">$http_user_agent</span>&quot; &quot;<span class="hljs-variable">$http_x_forwarded_for</span>&quot;&#x27;</span>;<br><br>    <span class="hljs-attribute">access_log</span>  /var/log/nginx/access.log  main;<br><br>    <span class="hljs-attribute">sendfile</span> <span class="hljs-literal">on</span>;<br>    <span class="hljs-comment"># tcp_nopush on;</span><br><br>    <span class="hljs-attribute">keepalive_timeout</span> <span class="hljs-number">65</span>;<br><br>    <span class="hljs-comment"># gzip on;</span><br><br>    <span class="hljs-attribute">include</span> /etc/nginx/conf.d/<span class="hljs-regexp">*.conf</span>;<br>        <br>    <span class="hljs-comment"># 用于tomcat反向代理,解决nginx 504错误 </span><br>    <span class="hljs-attribute">proxy_connect_timeout</span> <span class="hljs-number">300</span>; <span class="hljs-comment">#单位秒 </span><br>    <span class="hljs-attribute">proxy_send_timeout</span> <span class="hljs-number">300</span>; <span class="hljs-comment">#单位秒 </span><br>    <span class="hljs-attribute">proxy_read_timeout</span> <span class="hljs-number">300</span>; <span class="hljs-comment">#单位秒 </span><br>    <span class="hljs-attribute">proxy_buffer_size</span> <span class="hljs-number">16k</span>; <br>    <span class="hljs-attribute">proxy_buffers</span> <span class="hljs-number">4</span> <span class="hljs-number">64k</span>; <br>    <span class="hljs-attribute">proxy_busy_buffers_size</span> <span class="hljs-number">128k</span>; <br>    <span class="hljs-attribute">proxy_temp_file_write_size</span> <span class="hljs-number">128k</span>;<br>    <span class="hljs-comment"># ps:以timeout结尾配置项时间要配置大点</span><br>&#125;<br></code></pre></td></tr></table></figure><p>2、修改server{}，添加如下信息：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> / &#123;<br>        <span class="hljs-attribute">proxy_pass</span> http://182.61.131.62:33060/;<br>        <span class="hljs-attribute">proxy_redirect</span>  <span class="hljs-literal">off</span>;<br>    <br>    <span class="hljs-comment">#用于tomcat反向代理,解决nginx 504错误</span><br>        <span class="hljs-attribute">proxy_send_timeout</span> <span class="hljs-number">300</span>;<br>        <span class="hljs-attribute">proxy_read_timeout</span> <span class="hljs-number">300</span>;<br>        <span class="hljs-attribute">proxy_connect_timeout</span> <span class="hljs-number">300</span>;<br><br>        <span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$host</span>;<br>        <span class="hljs-attribute">proxy_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>        <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="http-header丢失"><a href="#http-header丢失" class="headerlink" title="http header丢失"></a>http header丢失</h2><blockquote><p>header键尽量不要带下划线的命名，不然必须得在nginx里面手动打开如下配置：</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">underscores_in_headers</span> <span class="hljs-literal">on</span>;<br></code></pre></td></tr></table></figure><h2 id="rewrite-post数据丢失"><a href="#rewrite-post数据丢失" class="headerlink" title="rewrite post数据丢失"></a>rewrite post数据丢失</h2><p>rewrite 外部跳转和内部跳转的区别</p><ul><li><strong>外部跳转 http:&#x2F;&#x2F; 触发301，POST数据丢失</strong></li><li><strong>内部跳转 POST数据不丢失</strong></li></ul><p>使用rewrite 与proxy_pass处理此事</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> / &#123;<br>    <span class="hljs-attribute">rewrite</span> (.*) /app<span class="hljs-variable">$1</span>;<br>&#125;<br><span class="hljs-section">location</span> /app &#123;<br>    <span class="hljs-attribute">proxy_pass</span> http://was;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="http-411-length-required"><a href="#http-411-length-required" class="headerlink" title="http 411 length required"></a>http 411 length required</h2><p>http模块添加参数：<code>chunked_transfer_encoding on;</code></p><h2 id="301-URI路径错误问题"><a href="#301-URI路径错误问题" class="headerlink" title="301 URI路径错误问题"></a>301 URI路径错误问题</h2><p>前端的Nginx负责把<code>http://www.a.com/b/c/</code>开头的url反向代理到后端的 <code>http://127.0.0.1/c/</code> 上，对于有完整的</p><p>路径，如<code>http://www.a.com/b/c/</code>的代理没有问题，Server对应后台服务器的一个目录。</p><p>但当访问<code>http://www.a.com/b/c</code>时，后端Nginx会发送一个301到<code>/</code>上，于是返回到前端后URL变成了</p><p><code>http://www.a.com/c/</code>，这个url显然不是我们想要的。</p><blockquote><p>在Apache中有个<code>ProxyPassReverse</code>的参数，用来调整反向代理服务器发送的http应答头的url，可以解决这个问题。</p></blockquote><p>在Nginx代理配置，可以使用<code>proxy_redirect</code>这个参数，它实现的功能和<code>ProxyPassReverse</code>类似，例如增加如下配置：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span><span class="hljs-regexp"> ^~</span> /b &#123; <br>  <span class="hljs-attribute">proxy_pass</span> http://127.0.0.1/; <br>  <span class="hljs-attribute">proxy_redirect</span> http://www.a.com/ /b/; <br>&#125; <br></code></pre></td></tr></table></figure><h2 id="Location-携带错误端口号"><a href="#Location-携带错误端口号" class="headerlink" title="Location 携带错误端口号"></a>Location 携带错误端口号</h2><p>抓包发现服务器给客户端的跳转指令里加了端口号，如Location: <a href="http://www.a.com:9080/abc.html">http://www.a.com:9080/abc.html</a> 。<br>因为nginx服务器侦听的是80端口，所以这样的URL给了客户端,必然会出错.<br>针对这种情况, 加一条proxy_redirect指令: <code>proxy_redirect http://www.kevin.com:9080/ /</code> ,即把所有<code>&quot;http://www.a.com:9080/&quot;</code>的内容替换成<code>&quot;/&quot;</code>再发给客户端，就解决了。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">server_name</span> www.a.com;<br>    <span class="hljs-attribute">proxy_redirect</span> http://www.a.com:9080/ /; <span class="hljs-comment"># 增加此行</span><br><br>    <span class="hljs-section">location</span> / &#123;<br>        <span class="hljs-attribute">proxy_pass</span> http://127.0.0.1:9080;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>黑苹果驱动下载地址</title>
    <link href="/posts/84c0ab93/"/>
    <url>/posts/84c0ab93/</url>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="kext"><a href="#kext" class="headerlink" title="kext"></a>kext</h2><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><table><thead><tr><th>名称</th><th>适用版本</th><th>用途</th><th>下载地址</th><th>备注</th></tr></thead><tbody><tr><td>Lilu.kext</td><td>通用</td><td>很多其他著名 kext 的依赖，没有这个其他都跑不了</td><td><a href="https://github.com/acidanthera/Lilu/releases">https://github.com/acidanthera/Lilu/releases</a></td><td>必须得使用</td></tr><tr><td>VirtualSMC.kext</td><td>通用</td><td>模拟在真实 mac 上找到的 SMC 芯片，没有这个 macOS 将无法启动</td><td><a href="https://github.com/acidanthera/VirtualSMC/releases">https://github.com/acidanthera/VirtualSMC/releases</a></td><td>必须得使用</td></tr><tr><td>AppleALC.kext</td><td>通用</td><td>用于 AppleHDA 修补，支持大多数板载声卡</td><td><a href="https://github.com/acidanthera/AppleALC/releases">https://github.com/acidanthera/AppleALC/releases</a></td><td>强烈建议用</td></tr><tr><td>LucyRTL8125Ethernet.kext</td><td>通用</td><td>Realtek 的 2.5Gb 网卡驱动，需要 10.15 +</td><td><a href="https://github.com/Mieze/LucyRTL8125Ethernet/releases">https://github.com/Mieze/LucyRTL8125Ethernet/releases</a></td><td><a href="https://dortania.github.io/OpenCore-Install-Guide/ktext.html#ethernet">更多网卡参考</a></td></tr><tr><td>NVMeFix.kext</td><td>通用</td><td>改善与非 Apple SSD 的兼容性，有助于主动电源管理</td><td><a href="https://github.com/acidanthera/NVMeFix/releases">https://github.com/acidanthera/NVMeFix/releases</a></td><td>可以试试看</td></tr><tr><td>SMCProcessor.kext</td><td>通用</td><td>用于监控 CPU 温度，AMD 不适用</td><td><a href="https://github.com/acidanthera/VirtualSMC/releases">https://github.com/acidanthera/VirtualSMC/releases</a></td><td>很有必要用</td></tr><tr><td>SMCSuperIO.kext</td><td>通用</td><td>用于监控风扇速度，AMD 不适用</td><td><a href="https://github.com/acidanthera/VirtualSMC/releases">https://github.com/acidanthera/VirtualSMC/releases</a></td><td>很有必要用</td></tr><tr><td>WhateverGreen.kext</td><td>通用</td><td>所有 GPU 都受益于这个 kext，必备插件</td><td><a href="https://github.com/acidanthera/WhateverGreen/releases">https://github.com/acidanthera/WhateverGreen/releases</a></td><td>必须得使用</td></tr><tr><td>USBPorts.kext</td><td>通用</td><td>参考这个文章：<a href="https://sleele.com/2019/06/07/%E4%BD%BF%E7%94%A8hackintool%E5%AE%9A%E5%88%B6%E9%BB%91%E8%8B%B9%E6%9E%9Cusb%E9%A9%B1%E5%8A%A8/">使用 Hackintool 定制黑苹果 USB 驱动</a></td><td></td><td>需要自定义</td></tr></tbody></table><h3 id="博通"><a href="#博通" class="headerlink" title="博通"></a>博通</h3><h4 id="蓝牙"><a href="#蓝牙" class="headerlink" title="蓝牙"></a>蓝牙</h4><blockquote><p>BrcmPatchRAM 需要按系统版本进行选择：</p><ul><li>BrcmPatchRAM3 用于 macOS 10.14 及更高版本，必须搭配 BrcmBluetoothInjector 使用；</li><li>BrcmPatchRAM2 用于 macOS 10.11 到 10.14；</li><li>BrcmPatchRAM 用于 OS X 10.10 或更老的版本；</li></ul><p>如果您有非 PatchRAM 设备（或者不确定），请安装 macOS 版本的 BrcmNonPatchRAM.kext 或 BrcmNonPatchRAM2.kext 之一，请不要同时安装两者。</p></blockquote><table><thead><tr><th>名称</th><th>适用版本</th><th>用途</th><th>下载地址</th></tr></thead><tbody><tr><td>AirportBrcmFixup.kext</td><td>通用</td><td>将旧的 Broadcom 卡注入较新版本的 macOS 的附加功能</td><td><a href="https://github.com/acidanthera/AirportBrcmFixup/releases">https://github.com/acidanthera/AirportBrcmFixup/releases</a></td></tr><tr><td>BlueToolFixup.kext</td><td>Monterey</td><td>修复系统设置内的蓝牙开关</td><td><a href="https://github.com/acidanthera/BrcmPatchRAM/releases">https://github.com/acidanthera/BrcmPatchRAM/releases</a></td></tr><tr><td>BrcmBluetoothInjector.kext</td><td>bigsur</td><td>修复系统设置内的蓝牙开关</td><td><a href="https://github.com/acidanthera/BrcmPatchRAM/releases">https://github.com/acidanthera/BrcmPatchRAM/releases</a></td></tr><tr><td>BrcmBluetoothInjectorLegacy.kext</td><td>-</td><td></td><td><a href="https://github.com/acidanthera/BrcmPatchRAM/releases">https://github.com/acidanthera/BrcmPatchRAM/releases</a></td></tr><tr><td>BrcmFirmwareData.kext</td><td>通用</td><td>上传固件</td><td><a href="https://github.com/acidanthera/BrcmPatchRAM/releases">https://github.com/acidanthera/BrcmPatchRAM/releases</a></td></tr><tr><td>BrcmFirmwareRepo.kext</td><td>-</td><td>安装到 &#x2F;System&#x2F;Library&#x2F;Extensions（在10.11及更高版本上为 &#x2F;Library&#x2F;Extensions）。 该 kext 的内存效率比 BrcmFirmwareData.kext 略高，但是不能由引导加载程序注入。</td><td><a href="https://github.com/acidanthera/BrcmPatchRAM/releases">https://github.com/acidanthera/BrcmPatchRAM/releases</a></td></tr><tr><td>BrcmNonPatchRAM.kext</td><td>-</td><td></td><td><a href="https://github.com/acidanthera/BrcmPatchRAM/releases">https://github.com/acidanthera/BrcmPatchRAM/releases</a></td></tr><tr><td>BrcmNonPatchRAM2.kext</td><td>-</td><td></td><td><a href="https://github.com/acidanthera/BrcmPatchRAM/releases">https://github.com/acidanthera/BrcmPatchRAM/releases</a></td></tr><tr><td>BrcmPatchRAM.kext</td><td>-</td><td></td><td><a href="https://github.com/acidanthera/BrcmPatchRAM/releases">https://github.com/acidanthera/BrcmPatchRAM/releases</a></td></tr><tr><td>BrcmPatchRAM2.kext</td><td>-</td><td></td><td><a href="https://github.com/acidanthera/BrcmPatchRAM/releases">https://github.com/acidanthera/BrcmPatchRAM/releases</a></td></tr><tr><td>BrcmPatchRAM3.kext</td><td>通用</td><td></td><td><a href="https://github.com/acidanthera/BrcmPatchRAM/releases">https://github.com/acidanthera/BrcmPatchRAM/releases</a></td></tr></tbody></table><h3 id="intel"><a href="#intel" class="headerlink" title="intel"></a>intel</h3><h4 id="蓝牙-1"><a href="#蓝牙-1" class="headerlink" title="蓝牙"></a>蓝牙</h4><blockquote><p>IntelBluetoothFirmware 是一个用于在 macOS 中启用原生蓝牙的固件上传驱动，固件的二进制文件来自 Linux。</p><p>经过数月的测试后，这个驱动已经被证实可以正常稳定工作。目前支持 macOS 10.13 及以上，支持的设备 ID 如下：</p><p>0x8087, 0x0a2a<br>0x8087, 0x07dc<br>0x8087, 0x0aa7<br>0x8087, 0x0025<br>0x8087, 0x0aaa<br>0x8087, 0x0026<br>0x8087, 0x0029<br>0x8087, 0x0a2b</p><p>如果驱动程序有问题，请在终端中运行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">log show --last boot | grep IntelFirmware<br></code></pre></td></tr></table></figure></blockquote><table><thead><tr><th>名称</th><th>适用版本</th><th>用途</th><th>下载地址</th></tr></thead><tbody><tr><td>BlueToolFixup.kext</td><td>Ventura，Monterey</td><td>修复系统设置内的蓝牙开关</td><td><a href="https://github.com/acidanthera/BrcmPatchRAM/releases">https://github.com/acidanthera/BrcmPatchRAM/releases</a></td></tr><tr><td>IntelBluetoothInjector.kext</td><td>bigsur</td><td>修复系统设置内的蓝牙开关</td><td><a href="https://github.com/OpenIntelWireless/IntelBluetoothFirmware/releases">https://github.com/OpenIntelWireless/IntelBluetoothFirmware/releases</a></td></tr><tr><td>IntelBluetoothFirmware.kext</td><td></td><td>上传固件</td><td><a href="https://github.com/OpenIntelWireless/IntelBluetoothFirmware/releases">https://github.com/OpenIntelWireless/IntelBluetoothFirmware/releases</a></td></tr><tr><td>IntelBTPatcher.kext</td><td>Ventura</td><td></td><td><a href="https://github.com/OpenIntelWireless/IntelBluetoothFirmware/releases">https://github.com/OpenIntelWireless/IntelBluetoothFirmware/releases</a></td></tr></tbody></table><h4 id="网卡"><a href="#网卡" class="headerlink" title="网卡"></a>网卡</h4><table><thead><tr><th>名称</th><th>适用版本</th><th>用途</th><th>下载地址</th></tr></thead><tbody><tr><td>AirportItlwm.kext</td><td>通用</td><td>网卡驱动</td><td><a href="https://github.com/OpenIntelWireless/itlwm/releases">https://github.com/OpenIntelWireless/itlwm/releases</a></td></tr></tbody></table><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.bilibili.com/read/cv19014995?from=search">BrcmPatchRAM 黑苹果WiFi无线网卡蓝牙驱动</a></p><p><a href="https://www.imacpc.net/archives/4237">使用 WIFI&#x2F;BlueTooth 擴展卡，在Monterey 藍芽無法驅動的解決方案</a></p>]]></content>
    
    
    <categories>
      
      <category>黑苹果</category>
      
    </categories>
    
    
    <tags>
      
      <tag>黑苹果</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>postman 常用配置</title>
    <link href="/posts/51f0c4fa/"/>
    <url>/posts/51f0c4fa/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/18c7cd8605f8">参考链接</a></p><h1 id="导入-chrome-请求"><a href="#导入-chrome-请求" class="headerlink" title="导入 chrome 请求"></a>导入 chrome 请求</h1><h2 id="1-选择-Copy-as-cURL（bash）"><a href="#1-选择-Copy-as-cURL（bash）" class="headerlink" title="1. 选择 Copy as cURL（bash）"></a>1. 选择 Copy as cURL（bash）</h2><img src="/posts/51f0c4fa/image-20210830232534515.png" class alt="image-20210830232534515"><h2 id="2-导入-postman"><a href="#2-导入-postman" class="headerlink" title="2. 导入 postman"></a>2. 导入 postman</h2><p>postman 左上角点击 Import，选择 Paste Raw Text，去除 –compressed 即可成功导入。</p><img src="/posts/51f0c4fa/image-20210830232748511.png" class alt="image-20210830232748511"><h1 id="Postman-Interceptor-使用"><a href="#Postman-Interceptor-使用" class="headerlink" title="Postman Interceptor 使用"></a>Postman Interceptor 使用</h1><h2 id="1-chrome-启用-Interceptor"><a href="#1-chrome-启用-Interceptor" class="headerlink" title="1. chrome 启用 Interceptor"></a>1. chrome 启用 Interceptor</h2><img src="/posts/51f0c4fa/image-20210830233515260.png" alt="image-20210830233515260" style="zoom:50%;"><h2 id="2-设置拦截域名"><a href="#2-设置拦截域名" class="headerlink" title="2. 设置拦截域名"></a>2. 设置拦截域名</h2><img src="/posts/51f0c4fa/image-20210830233551258.png" alt="image-20210830233551258" style="zoom: 33%;"><h2 id="3-postman-启用拦截"><a href="#3-postman-启用拦截" class="headerlink" title="3. postman 启用拦截"></a>3. postman 启用拦截</h2><img src="/posts/51f0c4fa/image-20210830233643139.png" class alt="image-20210830233643139"><p>即可即时拦截捕获所有异步请求。</p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx SSL 配置</title>
    <link href="/posts/6da6896d/"/>
    <url>/posts/6da6896d/</url>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h2><p>为了给 nginx 增加 ssl 安全证书配置，需要在编译的时候增加以下选项：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">--with-http_ssl_module<br></code></pre></td></tr></table></figure><p>如果之前的 nginx 编译的时候已经加上上述选项，可以直接跳过，否则可以参考下面命令的基础用法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./configure --prefix=&lt;安装位置&gt; --with-http_ssl_module<br></code></pre></td></tr></table></figure><p>然后执行下面的命令进行 nginx 的安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make &amp;&amp; make install<br></code></pre></td></tr></table></figure><h2 id="配置-nginx-conf"><a href="#配置-nginx-conf" class="headerlink" title="配置 nginx.conf"></a>配置 nginx.conf</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span>       <span class="hljs-number">443</span> ssl;<br>    <span class="hljs-attribute">server_name</span>  localhost vless.yahyav2rayssr.top;<br><br>    <span class="hljs-comment"># ssl证书地址</span><br>    <span class="hljs-attribute">ssl_certificate</span>     /etc/nginx/cert/cloudflare-ssl.pem;  <span class="hljs-comment"># pem文件的路径</span><br>    <span class="hljs-attribute">ssl_certificate_key</span>  /etc/nginx/cert/cloudflare-ssl.key; <span class="hljs-comment"># key文件的路径</span><br><br>    <span class="hljs-comment"># ssl验证相关配置</span><br>    <span class="hljs-attribute">ssl_session_timeout</span>  <span class="hljs-number">5m</span>;    <span class="hljs-comment">#缓存有效期</span><br>    <span class="hljs-attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;    <span class="hljs-comment">#加密算法</span><br>    <span class="hljs-attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="hljs-number">1</span> TLSv1.<span class="hljs-number">2</span>;    <span class="hljs-comment">#安全链接可选的加密协议</span><br>    <span class="hljs-attribute">ssl_prefer_server_ciphers</span> <span class="hljs-literal">on</span>;   <span class="hljs-comment">#使用服务器端的首选算法</span><br><br>    <span class="hljs-section">location</span> / &#123;<br>        <span class="hljs-attribute">root</span>   html;<br>        <span class="hljs-attribute">index</span>  index.html index.htm;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="将-http-重定向-https"><a href="#将-http-重定向-https" class="headerlink" title="将 http 重定向 https"></a>将 http 重定向 https</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">server_name</span>  localhost vless.yahyav2rayssr.top;<br>    <span class="hljs-attribute">return</span> <span class="hljs-number">301</span> https://<span class="hljs-variable">$server_name</span><span class="hljs-variable">$request_uri</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="重启-nginx"><a href="#重启-nginx" class="headerlink" title="重启 nginx"></a>重启 nginx</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nginx -s reload<br></code></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://segmentfault.com/a/1190000022673232">Nginx 安装 SSL 配置 HTTPS 超详细完整全过程</a></p>]]></content>
    
    
    <categories>
      
      <category>nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql 面试题</title>
    <link href="/posts/34945828/"/>
    <url>/posts/34945828/</url>
    
    <content type="html"><![CDATA[<h2 id="1、MySQL-中有哪几种锁？"><a href="#1、MySQL-中有哪几种锁？" class="headerlink" title="1、MySQL 中有哪几种锁？"></a>1、MySQL 中有哪几种锁？</h2><ol><li>表级锁：开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高，并发度最低。</li><li>行级锁：开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高。</li><li>页面锁：开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般。</li></ol><h2 id="2、MySQL-中有哪些不同的表格？"><a href="#2、MySQL-中有哪些不同的表格？" class="headerlink" title="2、MySQL 中有哪些不同的表格？"></a>2、MySQL 中有哪些不同的表格？</h2><ol><li>MyISAM</li><li>Heap</li><li>Merge</li><li>INNODB</li><li>ISAM</li></ol><h2 id="3、简述在-MySQL-数据库中-MyISAM-和-InnoDB-的区别"><a href="#3、简述在-MySQL-数据库中-MyISAM-和-InnoDB-的区别" class="headerlink" title="3、简述在 MySQL 数据库中 MyISAM 和 InnoDB 的区别"></a>3、简述在 MySQL 数据库中 MyISAM 和 InnoDB 的区别</h2><p>MyISAM：</p><ul><li>不支持事务，但是每次查询都是原子的；</li><li>支持表级锁，即每次操作是对整个表加锁；</li><li>存储表的总行数；</li><li>一个 MYISAM 表有三个文件：索引文件、表结构文件、数据文件；</li><li>采用非聚集索引，索引文件的数据域存储指向数据文件的指针。辅索引与主索引基本一致，但是辅索引不用保证唯一性。</li></ul><p>InnoDb：</p><ul><li>支持 ACID 的事务，支持事务的四种隔离级别；</li><li>支持行级锁及外键约束，因此可以支持写并发；</li><li>不存储总行数；</li><li>一个 InnoDb 引擎存储在一个文件空间（共享表空间，表大小不受操作系统控制，一个表可能分布在多个文件里），也有可能为多个（设置为独立表空，表大小受操作系统文件大小限制，一般为2G），受操作系统文件大小的限制；</li><li>主键索引采用聚集索引（索引的数据域存储数据文件本身），辅索引的数据域存储主键的值；因此从辅索引查找数据，需要先通过辅索引找到主键值，再访问辅索引；最好使用自增主键，防止插入数据时，为了维持 B+树结构，文件的大调整。</li></ul><h2 id="4、MySQL-中-InnoDB-支持的四种事务隔离级别名称，以及逐-级之间的区别？"><a href="#4、MySQL-中-InnoDB-支持的四种事务隔离级别名称，以及逐-级之间的区别？" class="headerlink" title="4、MySQL 中 InnoDB 支持的四种事务隔离级别名称，以及逐 级之间的区别？"></a>4、MySQL 中 InnoDB 支持的四种事务隔离级别名称，以及逐 级之间的区别？</h2><p>SQL 标准定义的四个隔离级别为：</p><ol><li>Read uncommitted 读未提交 在该级别下，一个事务对一行数据修改的过程中，不允许另一个事务对该行数据进行修改，但允许另一个事务对该行数据读。 因此本级别下，不会出现更新丢失，但会出现脏读、不可重复读。</li><li>Read committed 读提交 在该级别下，未提交的写事务不允许其他事务访问该行，因此不会出现脏读；但是读取数据的事务允许其他事务的访问该行数据，因此会出现不可重复读的情况。</li><li>Repeatable read 重复读 在该级别下，读事务禁止写事务，但允许读事务，因此不会出现同一事务两次读到不同的数据的情况（不可重复读），且写事务禁止其他一切事务。</li><li>Serializable 序列化 该级别要求所有事务都必须串行执行，因此能避免一切因并发引起的问题，但效率很低。</li></ol><h2 id="5、CHAR-和-VARCHAR-的区别？"><a href="#5、CHAR-和-VARCHAR-的区别？" class="headerlink" title="5、CHAR 和 VARCHAR 的区别？"></a>5、CHAR 和 VARCHAR 的区别？</h2><ol><li>CHAR 和 VARCHAR 类型在存储和检索方面有所不同</li><li>CHAR 列长度固定为创建表时声明的长度，长度值范围是 1 到 255 当 CHAR 值被存储时，它们被用空格填充到特定长度，检索 CHAR 值时需删除尾随空格。</li></ol><h2 id="6、主键和候选键有什么区别？"><a href="#6、主键和候选键有什么区别？" class="headerlink" title="6、主键和候选键有什么区别？"></a>6、主键和候选键有什么区别？</h2><p>表格的每一行都由主键唯一标识,一个表只有一个主键。</p><p>主键也是候选键。按照惯例，候选键可以被指定为主键，并且可以用于任何外键引用。</p><h2 id="7、myisamchk-是用来做什么的？"><a href="#7、myisamchk-是用来做什么的？" class="headerlink" title="7、myisamchk 是用来做什么的？"></a>7、myisamchk 是用来做什么的？</h2><p>它用来压缩 MyISAM 表，这减少了磁盘或内存使用。</p><p>MyISAM Static 和 MyISAM Dynamic 有什么区别？</p><p>在 MyISAM Static 上的所有字段有固定宽度。动态 MyISAM 表将具有像 TEXT， BLOB 等字段，以适应不同长度的数据类型。</p><p>MyISAM Static 在受损情况下更容易恢复。</p><h2 id="8、如果一个表有一列定义为-TIMESTAMP，将发生什么？"><a href="#8、如果一个表有一列定义为-TIMESTAMP，将发生什么？" class="headerlink" title="8、如果一个表有一列定义为 TIMESTAMP，将发生什么？"></a>8、如果一个表有一列定义为 TIMESTAMP，将发生什么？</h2><p>每当行被更改时，时间戳字段将获取当前时间戳。</p><blockquote><h5 id="列设置为-AUTO-INCREMENT-时，如果在表中达到最大值，会发生什么情况？"><a href="#列设置为-AUTO-INCREMENT-时，如果在表中达到最大值，会发生什么情况？" class="headerlink" title="列设置为 AUTO INCREMENT 时，如果在表中达到最大值，会发生什么情况？"></a>列设置为 AUTO INCREMENT 时，如果在表中达到最大值，会发生什么情况？</h5><p>它会停止递增，任何进一步的插入都将产生错误，因为密钥已被使用。</p><h5 id="怎样才能找出最后一次插入时分配了哪个自动增量？"><a href="#怎样才能找出最后一次插入时分配了哪个自动增量？" class="headerlink" title="怎样才能找出最后一次插入时分配了哪个自动增量？"></a>怎样才能找出最后一次插入时分配了哪个自动增量？</h5><p>LAST_INSERT_ID 将返回由 Auto_increment 分配的最后一个值，并且不需要指定表名称。</p></blockquote><h2 id="9、你怎么看到为表格定义的所有索引？"><a href="#9、你怎么看到为表格定义的所有索引？" class="headerlink" title="9、你怎么看到为表格定义的所有索引？"></a>9、你怎么看到为表格定义的所有索引？</h2><p>索引是通过以下方式为表格定义的：</p><p>SHOW INDEX FROM ;</p><h2 id="10、LIKE-声明中的％和-是什么意思？"><a href="#10、LIKE-声明中的％和-是什么意思？" class="headerlink" title="10、LIKE 声明中的％和_是什么意思？"></a>10、LIKE 声明中的％和_是什么意思？</h2><p>％对应于 0 个或更多字符，_只是 LIKE 语句中的一个字符。</p><blockquote><h5 id="如何在-Unix-和-MySQL-时间戳之间进行转换？"><a href="#如何在-Unix-和-MySQL-时间戳之间进行转换？" class="headerlink" title="如何在 Unix 和 MySQL 时间戳之间进行转换？"></a>如何在 Unix 和 MySQL 时间戳之间进行转换？</h5><ul><li>UNIX_TIMESTAMP 是从 MySQL 时间戳转换为 Unix 时间戳的命令 </li><li>FROM_UNIXTIME 是从 Unix 时间戳转换为 MySQL 时间戳的命令。</li></ul></blockquote><h2 id="11、列对比运算符是什么？"><a href="#11、列对比运算符是什么？" class="headerlink" title="11、列对比运算符是什么？"></a>11、列对比运算符是什么？</h2><p>在 SELECT 语句的列比较中使用&#x3D;，&lt;&gt;，&lt;&#x3D;，&lt;，&gt; &#x3D;，&gt;，&lt;&lt;，&gt;&gt;，&lt;&#x3D;&gt;，AND， OR 或 LIKE 运算符。</p><h2 id="12、BLOB-和-TEXT-有什么区别？"><a href="#12、BLOB-和-TEXT-有什么区别？" class="headerlink" title="12、BLOB 和 TEXT 有什么区别？"></a>12、BLOB 和 TEXT 有什么区别？</h2><p>BLOB 是一个二进制对象，可以容纳可变数量的数据。TEXT 是一个不区分大小写的 BLOB。</p><p>BLOB 和 TEXT 类型之间的唯一区别在于对 BLOB 值进行排序和比较时区分大小写，对 TEXT 值不区分大小写。</p><h2 id="13、MySQL-fetch-array-和-MySQL-fetch-object-的区别是-什么？"><a href="#13、MySQL-fetch-array-和-MySQL-fetch-object-的区别是-什么？" class="headerlink" title="13、MySQL_fetch_array 和 MySQL_fetch_object 的区别是 什么？"></a>13、MySQL_fetch_array 和 MySQL_fetch_object 的区别是 什么？</h2><p>以下是 MySQL_fetch_array 和 MySQL_fetch_object 的区别：</p><p>MySQL_fetch_array（） – 将结果行作为关联数组或来自数据库的常规数组返回。</p><p>MySQL_fetch_object – 从数据库返回结果行作为对象。</p><h2 id="14、MyISAM-表格将在哪里存储，并且还提供其存储格式？"><a href="#14、MyISAM-表格将在哪里存储，并且还提供其存储格式？" class="headerlink" title="14、MyISAM 表格将在哪里存储，并且还提供其存储格式？"></a>14、MyISAM 表格将在哪里存储，并且还提供其存储格式？</h2><p>每个 MyISAM 表格以三种格式存储在磁盘上：</p><ol><li>文件存储表具有“.frm”扩展名</li><li>数据文件具有“.MYD”（MYData）扩展名</li><li>索引文件具有“.MYI”（MYIndex）扩展名</li></ol><h2 id="15、MySQL-如何优化-DISTINCT？"><a href="#15、MySQL-如何优化-DISTINCT？" class="headerlink" title="15、MySQL 如何优化 DISTINCT？"></a>15、MySQL 如何优化 DISTINCT？</h2><p>DISTINCT 在所有列上转换为 GROUP BY，并与 ORDER BY 子句结合使用。</p><h2 id="17、可以使用多少列创建索引？"><a href="#17、可以使用多少列创建索引？" class="headerlink" title="17、可以使用多少列创建索引？"></a>17、可以使用多少列创建索引？</h2><p>任何标准表最多可以创建 16 个索引列。</p><h2 id="18、NOW（）和-CURRENT-DATE（）有什么区别？"><a href="#18、NOW（）和-CURRENT-DATE（）有什么区别？" class="headerlink" title="18、NOW（）和 CURRENT_DATE（）有什么区别？"></a>18、NOW（）和 CURRENT_DATE（）有什么区别？</h2><p>NOW（）命令用于显示当前年份，月份，日期，小时，分钟和秒。</p><p>CURRENT_DATE（）仅显示当前年份，月份和日期。</p><h2 id="19、什么是非标准字符串类型？"><a href="#19、什么是非标准字符串类型？" class="headerlink" title="19、什么是非标准字符串类型？"></a>19、什么是非标准字符串类型？</h2><ol><li>TINYTEXT</li><li>TEXT</li><li>MEDIUMTEXT</li><li>LONGTEXT</li></ol><h2 id="20、什么是通用-SQL-函数？"><a href="#20、什么是通用-SQL-函数？" class="headerlink" title="20、什么是通用 SQL 函数？"></a>20、什么是通用 SQL 函数？</h2><ul><li>CONCAT(A, B) – 连接两个字符串值以创建单个字符串输出。通常用于将两个 或多个字段合并为一个字段</li><li>FORMAT(X, D)- 格式化数字 X 到 D 有效数字。</li><li>CURRDATE(), CURRTIME()- 返回当前日期或时间。</li><li>NOW（） – 将当前日期和时间作为一个值返回。</li><li>MONTH（），DAY（），YEAR（），WEEK（），WEEKDAY（） – 从日期 值中提取给定数据。</li><li>HOUR（），MINUTE（），SECOND（） – 从时间值中提取给定数据。</li><li>DATEDIFF（A，B） – 确定两个日期之间的差异，通常用于计算年龄</li><li>SUBTIMES（A，B） – 确定两次之间的差异。</li><li>FROMDAYS（INT） – 将整数天数转换为日期值。</li></ul><h2 id="21、MySQL-支持事务吗？"><a href="#21、MySQL-支持事务吗？" class="headerlink" title="21、MySQL 支持事务吗？"></a>21、MySQL 支持事务吗？</h2><p>在缺省模式下，MySQL 是 autocommit 模式的，所有的数据库更新操作都会即时 提交，所以在缺省情况下，MySQL 是不支持事务的。</p><p>但是如果你的 MySQL 表类型是使用 InnoDB Tables 或 BDB tables 的话，你的 MySQL 就可以使用事务处理,使用 SET AUTOCOMMIT&#x3D;0 就可以使 MySQL 允许在非 autocommit 模式，在非 autocommit 模式下，你必须使用 COMMIT 来提交你的更改，或者用 ROLLBACK 来回滚你的更改。</p><h2 id="22、MySQL-里记录货币用什么字段类型好"><a href="#22、MySQL-里记录货币用什么字段类型好" class="headerlink" title="22、MySQL 里记录货币用什么字段类型好"></a>22、MySQL 里记录货币用什么字段类型好</h2><p>NUMERIC 和 DECIMAL 类型被 MySQL 实现为同样的类型，这在 SQL92 标准允许。他们被用于保存值，该值的准确精度是极其重要的值，例如与金钱有关的数据。当声明一个类是这些类型之一时，精度和规模的能被(并且通常是)指定。</p><p>例如：</p><p>salary DECIMAL(9,2)</p><p>在这个例子中，9(precision)代表将被用于存储值的总的小数位数，而 2(scale)代 表将被用于存储小数点后的位数。</p><p>因此，在这种情况下，能被存储在 salary 列中的值的范围是从-9999999.99 到 9999999.99。</p><h2 id="23、MySQL-有关权限的表都有哪几个？"><a href="#23、MySQL-有关权限的表都有哪几个？" class="headerlink" title="23、MySQL 有关权限的表都有哪几个？"></a>23、MySQL 有关权限的表都有哪几个？</h2><p>MySQL 服务器通过权限表来控制用户对数据库的访问，权限表存放在 MySQL 数据库里，由 MySQL_install_db 脚本初始化。这些权限表分别 user，db，table_priv， columns_priv 和 host。</p><h2 id="24、列的字符串类型可以是什么？"><a href="#24、列的字符串类型可以是什么？" class="headerlink" title="24、列的字符串类型可以是什么？"></a>24、列的字符串类型可以是什么？</h2><p>字符串类型是：</p><p>1、SET</p><p>2、BLOB</p><p>3、ENUM</p><p>4、CHAR</p><p>5、TEXT</p><h2 id="25、MySQL-数据库作发布系统的存储，一天五万条以上的增量，-预计运维三年-怎么优化？"><a href="#25、MySQL-数据库作发布系统的存储，一天五万条以上的增量，-预计运维三年-怎么优化？" class="headerlink" title="25、MySQL 数据库作发布系统的存储，一天五万条以上的增量， 预计运维三年,怎么优化？"></a>25、MySQL 数据库作发布系统的存储，一天五万条以上的增量， 预计运维三年,怎么优化？</h2><p>1、设计良好的数据库结构，允许部分数据冗余，尽量避免 join 查询，提高效率。</p><p>2、选择合适的表字段数据类型和存储引擎，适当的添加索引。</p><p>3、 MySQL 库主从读写分离。</p><p>4、找规律分表，减少单表中的数据量提高查询速度。</p><p>5、添加缓存机制，比如 memcached，apc 等。</p><p>6、不经常改动的页面，生成静态页面。</p><p>7、书写高效率的 SQL。比如 SELECT * FROM TABEL 改为 SELECT field_1, field_2, field_3 FROM TABLE。</p><h2 id="26、锁的优化策略"><a href="#26、锁的优化策略" class="headerlink" title="26、锁的优化策略"></a>26、锁的优化策略</h2><ol><li>读写分离</li><li>分段加锁</li><li>减少锁持有的时间</li><li>多个线程尽量以相同的顺序去获取资源</li></ol><p>不能将锁的粒度过于细化，不然可能会出现线程的加锁和释放次数过多，反而效 率不如一次加一把大锁。</p><h2 id="27、索引的底层实现原理和优化"><a href="#27、索引的底层实现原理和优化" class="headerlink" title="27、索引的底层实现原理和优化"></a>27、索引的底层实现原理和优化</h2><p>B+树，经过优化的 B+树</p><p>主要是在所有的叶子结点中增加了指向下一个叶子节点的指针，因此 InnoDB 建议为大部分表使用默认自增的主键作为主索引。</p><h2 id="28、什么情况下设置了索引但无法使用"><a href="#28、什么情况下设置了索引但无法使用" class="headerlink" title="28、什么情况下设置了索引但无法使用"></a>28、什么情况下设置了索引但无法使用</h2><ol><li>以“%”开头的 LIKE 语句，模糊匹配</li><li>OR 语句前后没有同时使用索引</li><li>数据类型出现隐式转化（如 varchar 不加单引号的话可能会自动转换为 int 型）</li></ol><h2 id="30、优化数据库的方法"><a href="#30、优化数据库的方法" class="headerlink" title="30、优化数据库的方法"></a>30、优化数据库的方法</h2><ol><li>选取最适用的字段属性，尽可能减少定义字段宽度，尽量把字段设置 NOTNULL， 例如’省份’、’性别’最好适用 ENUM</li><li>使用连接(JOIN)来代替子查询</li><li>适用联合(UNION)来代替手动创建的临时表</li><li>事务处理</li><li>锁定表、优化事务处理</li><li>适用外键，优化锁定表</li><li>建立索引</li><li>优化查询语句</li></ol><h2 id="31、简单描述-MySQL-中，索引，主键，唯一索引，联合索引-的区别，对数据库的性能有什么影响（从读写两方面）"><a href="#31、简单描述-MySQL-中，索引，主键，唯一索引，联合索引-的区别，对数据库的性能有什么影响（从读写两方面）" class="headerlink" title="31、简单描述 MySQL 中，索引，主键，唯一索引，联合索引 的区别，对数据库的性能有什么影响（从读写两方面）"></a>31、简单描述 MySQL 中，索引，主键，唯一索引，联合索引 的区别，对数据库的性能有什么影响（从读写两方面）</h2><p>索引是一种特殊的文件(InnoDB 数据表上的索引是表空间的一个组成部分)，它们包含着对数据表里所有记录的引用指针。</p><ul><li><p>普通索引(由关键字 KEY 或 INDEX 定义的索引)的唯一任务是加快对数据的访问速度。</p><p>普通索引允许被索引的数据列包含重复的值。如果能确定某个数据列将只包含彼此各不相同的值，在为这个数据列创建索引的时候就应该用关键字 UNIQUE 把它定义为一个唯一索引。也就是说，唯一索引可以保证数据记录的唯一性。</p></li><li><p>主键，是一种特殊的唯一索引，在一张表中只能定义一个主键索引，主键用于唯一标识一条记录，使用关键字 PRIMARY KEY 来创建。</p></li><li><p>索引可以覆盖多个数据列，如像 INDEX(columnA, columnB)索引，这就是联合索引。</p></li></ul><p>索引可以极大的提高数据的查询速度，但是会降低插入、删除、更新表的速度， 因为在执行这些写操作时，还要操作索引文件。</p><h2 id="32、数据库中的事务是什么"><a href="#32、数据库中的事务是什么" class="headerlink" title="32、数据库中的事务是什么?"></a>32、数据库中的事务是什么?</h2><p>事务（transaction）是作为一个单元的一组有序的数据库操作。如果组中的所有操作都成功，则认为事务成功，即使只有一个操作失败，事务也不成功。如果所有操作完成，事务则提交，其修改将作用于所有其他数据库进程。如果一个操作失败，则事务将回滚，该事务所有操作的影响都将取消。</p><p>事务特性：</p><p>1、原子性：即不可分割性，事务要么全部被执行，要么就全部不被执行。</p><p>2、一致性或可串性：事务的执行使得数据库从一种正确状态转换成另一种正确状态</p><p>3、隔离性：在事务正确提交之前，不允许把该事务对数据的任何改变提供给任何其他事务，</p><p>4、持久性：事务正确提交后，其结果将永久保存在数据库中，即使在事务提交后有了其他故障，事务的处理结果也会得到保存。</p><p>或者这样理解：</p><p>事务就是被绑定在一起作为一个逻辑工作单元的 SQL 语句分组，如果任何一个语句操作失败那么整个操作就被失败，以后操作就会回滚到操作前状态，或者是上有个节点。为了确保要么执行，要么不执行，就可以使用事务。要将有组语句作为事务考虑，就需要通过 ACID 测试，即原子性，一致性，隔离性和持久性。</p><h2 id="33、SQL-注入漏洞产生的原因？如何防止？"><a href="#33、SQL-注入漏洞产生的原因？如何防止？" class="headerlink" title="33、SQL 注入漏洞产生的原因？如何防止？"></a>33、SQL 注入漏洞产生的原因？如何防止？</h2><p>SQL 注入产生的原因：程序开发过程中不注意规范书写 sql 语句和对特殊字符行过滤，导致客户端可以通过全局变量 POST 和 GET 提交一些 sql 语句正常执行。</p><p>防止 SQL 注入的方式：</p><p>开启配置文件中的 magic_quotes_gpc 和 magic_quotes_runtime 设执行 sql 语句时使用 addslashes 进行 sql 语句转换</p><p>Sql 语句书写尽量不要省略双引号和单引号。</p><p>过滤掉 sql 语句中的一些关键词：update、insert、delete、select、 * 。</p><p>提高数据库表和字段的命名技巧，对一些重要的字段根据程序的特点命名，取不易被猜到的。</p><h2 id="34、为表中得字段选择合适得数据类型"><a href="#34、为表中得字段选择合适得数据类型" class="headerlink" title="34、为表中得字段选择合适得数据类型"></a>34、为表中得字段选择合适得数据类型</h2><p>字段类型优先级: 整形&gt;date,time&gt;enum,char&gt;varchar&gt;blob,tex</p><p>优先考虑数字类型，其次是日期或者二进制类型，最后是字符串类型，同级别得数据类型，应该优先选择占用空间小的数据类型</p><h2 id="35、存储时期"><a href="#35、存储时期" class="headerlink" title="35、存储时期"></a>35、存储时期</h2><p>Datatime：以 YYYY-MM-DD HH:MM:SS 格式存储时期时间，精确到秒，占用 8 个字节得存储空间，datatime 类型与时区无关</p><p>Timestamp：以时间戳格式存储，占用 4 个字节，范围小 1970-1-1 到 2038-1-19，显示依赖于所指定得时区，默认在第一个列行的数据修改时可以自动得修改</p><p>timestamp列得值</p><p>Date:（生日）占用得字节数比使用字符串储存要少，使用 date 只 需要 3 个字节，存储日期月份，还可以利用日期时间函数进行日期间得计算</p><p>Time：存储时间部分得数据</p><p>注意：不要使用字符串类型来存储日期时间数据（通常比字符串占用得储存空间小， 在进行查找过滤可以利用日期得函数）</p><p>使用 int 存储日期时间不如使用 timestamp 类型</p><h2 id="36、对于关系型数据库而言，索引是相当重要的概念，请回答-有关索引的几个问题："><a href="#36、对于关系型数据库而言，索引是相当重要的概念，请回答-有关索引的几个问题：" class="headerlink" title="36、对于关系型数据库而言，索引是相当重要的概念，请回答 有关索引的几个问题："></a>36、对于关系型数据库而言，索引是相当重要的概念，请回答 有关索引的几个问题：</h2><p>1、索引的目的是什么？</p><p>快速访问数据表中的特定信息，提高检索速度</p><p>创建唯一性索引，保证数据库表中每一行数据的唯一性。</p><p>加速表和表之间的连接</p><p>使用分组和排序子句进行数据检索时，可以显著减少查询中分组和排序的时间</p><p>2、索引对数据库系统的负面影响是什么？</p><p>负面影响：</p><p>创建索引和维护索引需要耗费时间，这个时间随着数据量的增加而增加；索引需要占用物理空间，不光是表需要占用数据空间，每个索引也需要占用物理空间； 当对表进行增、删、改、的时候索引也要动态维护，这样就降低了数据的维护速度。</p><p>3、为数据表建立索引的原则有哪些？</p><p>在最频繁使用的、用以缩小查询范围的字段上建立索引。</p><p>在频繁使用的、需要排序的字段上建立索引</p><p>4、什么情况下不宜建立索引？</p><p>对于查询中很少涉及的列或者重复值比较多的列，不宜建立索引。</p><p>对于一些特殊的数据类型，不宜建立索引，比如文本字段（text）等</p><h2 id="37、解释-MySQL-外连接、内连接与自连接的区别"><a href="#37、解释-MySQL-外连接、内连接与自连接的区别" class="headerlink" title="37、解释 MySQL 外连接、内连接与自连接的区别"></a>37、解释 MySQL 外连接、内连接与自连接的区别</h2><p>先说什么是交叉连接: 交叉连接又叫笛卡尔积，它是指不使用任何条件，直接将一个表的所有记录和另一个表中的所有记录一一匹配。</p><p>内连接则是只有条件的交叉连接，根据某个条件筛选出符合条件的记录，不符合条件的记录不会出现在结果集中，即内连接只连接匹配的行。</p><p>外连接其结果集中不仅包含符合连接条件的行，而且还会包括左表、右表或两个表中的所有数据行，这三种情况依次称之为左外连接，右外连接，和全外连接。</p><p>左外连接，也称左连接，左表为主表，左表中的所有记录都会出现在结果集中，对于那些在右表中并没有匹配的记录，仍然要显示，右边对应的那些字段值以 NULL 来填充。</p><p>右外连接，也称右连接，右表为主表，右表中的所有记录都会出现在结果集中。左连接和右连接可以互换，MySQL 目前还不支持全外连接。</p><h2 id="38、Myql-中的事务回滚机制概述"><a href="#38、Myql-中的事务回滚机制概述" class="headerlink" title="38、Myql 中的事务回滚机制概述"></a>38、Myql 中的事务回滚机制概述</h2><p>事务是用户定义的一个数据库操作序列，这些操作要么全做要么全不做，是一个不可分割的工作单位，事务回滚是指将该事务已经完成的对数据库的更新操作撤销。</p><p>要同时修改数据库中两个不同表时，如果它们不是一个事务的话，当第一个表改完，可能第二个表修改过程中出现了异常而没能修改，此时就只有第二个表依旧是未修改之前的状态，而第一个表已经被修改完毕。而当你把它们设定为一个事务的时候，当第一个表修改完，第二表修改出现异常而没能修改，第一个表和第二个表都要回到未修改的状态，这就是所谓的事务回滚。</p><h2 id="39、SQL-语言包括哪几部分？每部分都有哪些操作关键字？"><a href="#39、SQL-语言包括哪几部分？每部分都有哪些操作关键字？" class="headerlink" title="39、SQL 语言包括哪几部分？每部分都有哪些操作关键字？"></a>39、SQL 语言包括哪几部分？每部分都有哪些操作关键字？</h2><p>SQL 语言包括数据定义(DDL)、数据操纵(DML)，数据控制(DCL)和数据查询（DQL）四个部分。</p><ul><li>数据定义：Create Table，Alter Table，Drop Table, Create&#x2F;Drop Index 等</li><li>数据操纵：select，insert，update，delete</li><li>数据控制：grant，revoke</li><li>数据查询：select</li></ul><h2 id="40、完整性约束包括哪些？"><a href="#40、完整性约束包括哪些？" class="headerlink" title="40、完整性约束包括哪些？"></a>40、完整性约束包括哪些？</h2><p>数据完整性(Data Integrity)是指数据的精确(Accuracy)和可靠性(Reliability)。</p><p>分为以下四类：</p><ol><li>实体完整性：规定表的每一行在表中是唯一的实体。</li><li>域完整性：是指表中的列必须满足某种特定的数据类型约束，其中约束又包括取值范围、精度等规定。</li><li>参照完整性：是指两个表的主关键字和外关键字的数据应一致，保证了表之间的数据的一致性，防止了数据丢失或无意义的数据在数据库中扩散。</li><li>用户定义的完整性：不同的关系数据库系统根据其应用环境的不同，往往还需要一些特殊的约束条件。用户定义的完整性即是针对某个特定关系数据库的约束条件，它反映某一具体应用必须满足的语义要求。</li></ol><p>与表有关的约束：包括列约束(NOT NULL（非空约束）)和表约束(PRIMARY KEY、 foreign key、check、UNIQUE) 。</p><h2 id="41、什么是锁？"><a href="#41、什么是锁？" class="headerlink" title="41、什么是锁？"></a>41、什么是锁？</h2><p>数据库是一个多用户使用的共享资源。当多个用户并发地存取数据时，在数据库中就会产生多个事务同时存取同一数据的情况。若对并发操作不加控制就可能会读取和存储不正确的数据，破坏数据库的一致性。</p><p>加锁是实现数据库并发控制的一个非常重要的技术。当事务在对某个数据对象进行操作前，先向系统发出请求，对其加锁。加锁后事务就对该数据对象有了一定的控制，在该事务释放锁之前，其他的事务不能对此数据对象进行更新操作。</p><p>基本锁类型：锁包括行级锁和表级锁。</p><h2 id="42、什么叫视图？游标是什么？"><a href="#42、什么叫视图？游标是什么？" class="headerlink" title="42、什么叫视图？游标是什么？"></a>42、什么叫视图？游标是什么？</h2><p>视图是一种虚拟的表，具有和物理表相同的功能。可以对视图进行增改查操作，视图通常是有一个表或者多个表的行或列的子集。对视图的修改不影响基本表。它使得我们获取数据更容易，相比多表查询。</p><p>游标是对查询出来的结果集作为一个单元来有效的处理。游标可以定在该单元中的特定行，从结果集的当前行检索一行或多行。可以对结果集当前行做修改。一般不使用游标，但是需要逐条处理数据的时候，游标显得十分重要。</p><h2 id="43、什么是存储过程？用什么来调用？"><a href="#43、什么是存储过程？用什么来调用？" class="headerlink" title="43、什么是存储过程？用什么来调用？"></a>43、什么是存储过程？用什么来调用？</h2><p>存储过程是一个预编译的 SQL 语句，优点是允许模块化的设计，就是说只需创建一次，以后在该程序中就可以调用多次。如果某次操作需要执行多次 SQL， <strong>使用存储过程比单纯 SQL 语句执行要快</strong>。可以用一个命令对象来调用存储过程。</p><h2 id="44、如何通俗地理解三个范式？"><a href="#44、如何通俗地理解三个范式？" class="headerlink" title="44、如何通俗地理解三个范式？"></a>44、如何通俗地理解三个范式？</h2><p>第一范式：1NF 是对属性的原子性约束，要求属性具有原子性，不可再分解。</p><p>第二范式：2NF 是对记录的唯一性约束，要求记录有惟一标识，即实体的唯一性。</p><p>第三范式：3NF 是对字段冗余性的约束，即任何字段不能由其他字段派生出来，它要求字段没有冗余。</p><p>范式化设计优缺点:</p><p>优点：可以尽量得减少数据冗余，使得更新快，体积小 </p><p>缺点：对于查询需要多个表进行关联，减少写得效率增加读得效率，更难进行索引优化</p><p>反范式化:</p><p>优点：可以减少表得关联，可以更好得进行索引优化</p><p>缺点：数据冗余以及数据异常，数据得修改需要更多的成本</p><h2 id="46、试述视图的优点？"><a href="#46、试述视图的优点？" class="headerlink" title="46、试述视图的优点？"></a>46、试述视图的优点？</h2><ol><li>视图能够简化用户的操作；</li><li>视图使用户能以多种角度看待同一数据；</li><li>视图为数据库提供了一定程度的逻辑独立性；</li><li>视图能够对机密数据提供安全保护。</li></ol><h2 id="47、-NULL-是什么意思"><a href="#47、-NULL-是什么意思" class="headerlink" title="47、 NULL 是什么意思"></a>47、 NULL 是什么意思</h2><p>答：NULL 这个值表示 UNKNOWN(未知)。它不表示“”(空字符串)。对 NULL 这个值的任何比较都会生产一个 NULL 值。不能把任何值与一个 NULL 值进行比较，并在逻辑上希望获得一个答案。</p><p>使用 IS NULL 来进行 NULL 判断。</p><h2 id="48、主键、外键和索引的区别？"><a href="#48、主键、外键和索引的区别？" class="headerlink" title="48、主键、外键和索引的区别？"></a>48、主键、外键和索引的区别？</h2><p><strong>定义：</strong></p><ul><li>主键：唯一标识一条记录，不能有重复的，不允许为空 </li><li>外键：表的外键是另一表的主键，外键可以有重复的，可以是空值</li><li>索引：该字段没有重复值，但可以有一个空值</li></ul><p><strong>作用：</strong></p><ul><li>主键：用来保证数据完整性</li><li>外键：用来和其他表建立联系用的</li><li>索引：是提高查询排序的速度</li></ul><p><strong>个数：</strong></p><ul><li>主键：主键只能有一个</li><li>外键：一个表可以有多个外键</li><li>索引：一个表可以有多个索引</li></ul><h2 id="49、你可以用什么来确保表格里的字段只接受特定范围里的值"><a href="#49、你可以用什么来确保表格里的字段只接受特定范围里的值" class="headerlink" title="49、你可以用什么来确保表格里的字段只接受特定范围里的值?"></a>49、你可以用什么来确保表格里的字段只接受特定范围里的值?</h2><p>Check 限制，它在数据库表格里被定义，用来限制输入该列的值。</p><p>触发器也可以被用来限制数据库表格里的字段能够接受的值，但是这种办法要求触发器在表格里被定义，这可能会在某些情况下影响到性能。</p><h2 id="50、说说对-SQL-语句优化有哪些方法？（选择几条）"><a href="#50、说说对-SQL-语句优化有哪些方法？（选择几条）" class="headerlink" title="50、说说对 SQL 语句优化有哪些方法？（选择几条）"></a>50、说说对 SQL 语句优化有哪些方法？（选择几条）</h2><ol><li>Where 子句中 where 表之间的连接必须写在其他 Where 条件之前，那些可以过滤掉最大数量记录的条件必须写在 Where 子句的末尾，HAVING 放在最后。</li><li>用 EXISTS 替代 IN、用 NOT EXISTS 替代 NOT IN。</li><li>避免在索引列上使用计算</li><li>避免在索引列上使用 IS NULL 和 IS NOT NULL</li><li>对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。</li><li>应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描</li><li>应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。</li></ol><h2 id="count-1-和count-的区别"><a href="#count-1-和count-的区别" class="headerlink" title="count(1)和count(*)的区别"></a>count(1)和count(*)的区别</h2><p>count(1) and count(字段)</p><p>两者的主要区别是</p><p>（1） count(1) 会统计表中的所有的记录数， <em><strong>包含字段为null 的记录</strong></em>。</p><p>（2） count(字段) 会统计该字段在表中出现的次数，忽略字段为null 的情况。即 <em><strong>不统计字段为null 的记录</strong></em>。 </p>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>v2rayN 配置教程</title>
    <link href="/posts/4a137bcb/"/>
    <url>/posts/4a137bcb/</url>
    
    <content type="html"><![CDATA[<h1 id="4-12-最新-v2rayN-windows-进阶版使用教程-附PAC模式路由规则-多个自定义路由规则"><a href="#4-12-最新-v2rayN-windows-进阶版使用教程-附PAC模式路由规则-多个自定义路由规则" class="headerlink" title="4.12 最新 v2rayN windows 进阶版使用教程 | 附PAC模式路由规则 | 多个自定义路由规则"></a>4.12 最新 v2rayN windows 进阶版使用教程 | 附PAC模式路由规则 | 多个自定义路由规则</h1><p>在上篇 v2rayN 使用教程中（<a href="https://www.jamesdailylife.com/new_v2rayn-windows">点击跳转</a>），已经向大家介绍了最新 v2rayN windows 的重大更新内容以及如何快速使用新版 v2rayN 客户端：</p><blockquote><p>比如，删除了常见PAC 模式; 自定义路由规则集和自由切换多个路由规则集；</p><p>系统代理把windows系统部分软件流量（比如浏览器）转到v2ray的http入口、VMESS和VLESS协议 增加SNI属性等</p><p>新版 v2rayN 下载地址：<a href="https://github.com/2dust/v2rayN/releases/">https://github.com/2dust/v2rayN/releases/</a></p></blockquote><p>不少小伙伴，也在上期视频教程下方（<a href="https://youtu.be/4D-6A0qRuv4">点击跳转</a>）留言：</p><p>需要详细介绍“自定义路由规则的原理”、“分享一些常用的路由规则”、“能不能如何通过路由规则实现旧版客户端的PAC模式”等等。今天我们就来一起学习吧！</p><h2 id="新旧版的不同点"><a href="#新旧版的不同点" class="headerlink" title="新旧版的不同点"></a>新旧版的不同点</h2><p>旧版的PAC模式是由“本地的PAC文件&#x2F;GFW LIST”对流量先进行分流；然后，再通过v2ray.exe去判断是否走代理出站，并配合”v2ray_privoxy.exe”进行流量转发；这也是为什么使用旧版客户端时， win10 UWP应用能正常工作的原因；新版的路由模式则是直接通过v2ray.exe 程序去分流和判断是否走代理的。（<strong>个人理解，如有错误，请帮忙留言指正，谢谢！</strong>）</p><p>旧版客户端：</p><blockquote><img src="/posts/4a137bcb/v2rayn-4.16.2021-2-e1618557781896.jpg" class alt="img"></blockquote><p>新版客户端： </p><blockquote><img src="/posts/4a137bcb/v2rayn-4.16.2021-1-e1618557612858.jpg" class alt="img"></blockquote><p>那旧版PAC 模式消耗的内存更多一点（<strong>见下图</strong>），自定义灵活度也不高；</p><p>新版v2rayN 自定义灵活度高、使用的内存更小、有一定的速度提高，但有学习成本！</p><img src="/posts/4a137bcb/v2rayN-2021.4.21.jpg" class alt="img"><h2 id="常说的-Geo文件是什么？与路由规则和路由规则集的关系是什么？"><a href="#常说的-Geo文件是什么？与路由规则和路由规则集的关系是什么？" class="headerlink" title="常说的 Geo文件是什么？与路由规则和路由规则集的关系是什么？"></a>常说的 Geo文件是什么？与路由规则和路由规则集的关系是什么？</h2><p>Geo文件即路由规则文件：</p><ul><li><p>“geosite.dat”：提供一个预定义好的 「全球域名」 列表，</p></li><li><p>“geoip.dat” ：提供一个预定义好的 「全球 ip-地区」 列表。</p></li></ul><blockquote><p>“.dat文件”里面有无数个分类，比如,中国的域名和IP都在 geosite:cn 和 geoip:cn</p><p>gfwlist的网址(也就是经典的PAC)在 geosite:gfw | <a href="https://youtu.be/jjpBvUYotDc">点击跳转</a></p><p>广告域名在 geosite:category-ads-all</p><p>国外域名在 geosite:geolocation-!cn</p><p>本地IP在 geoip:private里;</p><p>还有一千多种分类细分，比如 geosite:steam geosite:google 等，</p><p>以上内容来自于“网友 ycdm ”，谢谢他的分享。</p></blockquote><h3 id="综上"><a href="#综上" class="headerlink" title="综上:"></a>综上:</h3><ol><li>geo路由规则文件是”全球域名和 全球地区的 IP 数据库”</li><li>路由规则可以采用”数据库内任意域名或者IP的分类”或者”添加一个不在数据库的域名或者IP”，并选择“对应的出站标签”；然后 “xray.exe或者 v2ray.exe “（常说的核心） 自带的路由模式，会根据路由规则中”不同的出站标签”，来决定“出站标签”包含的域名和IP是否走代理出站、直连（本地网络访问）还是禁止访问。<img src="/posts/4a137bcb/v2rayn-4.16.2021-1-e1618557612858.jpg" class alt="img"></li><li><strong>那“路由规则集”就是”包含一个或者多个路由规则的集合”</strong></li></ol><h2 id="如何添加-x2F-自定义路由规则集？"><a href="#如何添加-x2F-自定义路由规则集？" class="headerlink" title="如何添加&#x2F;自定义路由规则集？"></a>如何添加&#x2F;自定义路由规则集？</h2><p>添加规则集的目的：<strong>不同的路由规则集对应不同的代理模式，可以分别对应“PAC 模式”、“绕过大陆”、“全局代理”等等，来满足自己不同的“科学上网”或者“其他特殊的需求”。</strong></p><h3 id="1、下载-Geo-路由规则文件（推荐-V2ray路由加强版）：点击跳转"><a href="#1、下载-Geo-路由规则文件（推荐-V2ray路由加强版）：点击跳转" class="headerlink" title="1、下载 Geo 路由规则文件（推荐 V2ray路由加强版）：点击跳转"></a>1、下载 Geo 路由规则文件（推荐 V2ray路由加强版）：<a href="https://github.com/Loyalsoldier/v2ray-rules-dat">点击跳转</a></h3><h3 id="2、普通用户：-直接启用“默认的基础路由规则”，并按照自己的需求和格式要求，在对应的对话框输入内容。"><a href="#2、普通用户：-直接启用“默认的基础路由规则”，并按照自己的需求和格式要求，在对应的对话框输入内容。" class="headerlink" title="2、普通用户： 直接启用“默认的基础路由规则”，并按照自己的需求和格式要求，在对应的对话框输入内容。"></a>2、普通用户： 直接启用“默认的基础路由规则”，并按照自己的需求和格式要求，在对应的对话框输入内容。</h3><img src="/posts/4a137bcb/v2rayN-2021-2-21_03.jpg" class alt="img"><h3 id="3-路由规则输入的格式"><a href="#3-路由规则输入的格式" class="headerlink" title="3. 路由规则输入的格式"></a>3. 路由规则输入的格式</h3><p>默认的“基础功能”—“一键导入基础规则”</p><p>可以在对应的对话框，输入单个网址或者 IP，多个选项，用英文输入方法下的逗号”,” 隔开。比如，在”阻止的Domian或 IP” 输入“domian:jamesdailylife.com”；此时，就不能访问该网址。</p><p>启用 “geoip.data” 和 “geosite.data”中，已经包含常用的域名和IP。使用方式：<code>geosite:filename</code>，如 <code>geosite:google</code> 表示对文件内符合 <code>google</code> 内包含的域名，按照自身需求录入到“代理、直连、阻止” ，就行了。</p><ul><li><p>“代理的Domian或 IP”：此对话框的域名或者IP 走代理</p></li><li><p>“直连的Domian或 IP”：此对话框的域名或者IP 不走代理</p></li><li><p>“阻止的Domian或 IP”：此对话框的域名或者IP 不能访问</p></li></ul><img src="/posts/4a137bcb/v2rayn-4.16.2021-3-e1618560382845.jpg" class alt="img"><p>相关域名和IP分类名的解释</p><blockquote><p>category-ads：包含了常见的广告域名。<br>category-ads-all：包含了常见的广告域名，以及广告提供商的域名。<br>cn：相当于 geolocation-cn 和 tld-cn 的合集。<br>apple：包含了 Apple 旗下绝大部分域名。<br>google：包含了 Google 旗下绝大部分域名。<br>microsoft：包含了 Microsoft 旗下绝大部分域名。<br>facebook：包含了 Facebook 旗下绝大部分域名。<br>twitter：包含了 Twitter 旗下绝大部分域名。<br>telegram：包含了 Telegram 旗下绝大部分域名。<br>geolocation-cn：包含了常见的大陆站点域名。<br>geolocation-!cn：包含了常见的非大陆站点域名，同时包含了 tld-!cn。<br>tld-cn：包含了 CNNIC 管理的用于中国大陆的顶级域名，如以 .cn、.中国 结尾的域名。<br>tld-!cn：包含了非中国大陆使用的顶级域名，如以 .hk（香港）、.tw（台湾）、.jp（日本）、.sg（新加坡）、.us（美国）.ca（加拿大）等结尾的域名。</p><p>category-games： 包含了 steam、ea、blizzard、epicgames 和 nintendo 等常见的游戏厂商。<br>更多域名类别，请查看 <a href="https://github.com/v2fly/domain-list-community/tree/master/data">data 目录</a> 。</p></blockquote><h3 id="4-“启用路由高级功能”后，自定义路由规则集的方法有点不同。"><a href="#4-“启用路由高级功能”后，自定义路由规则集的方法有点不同。" class="headerlink" title="4. “启用路由高级功能”后，自定义路由规则集的方法有点不同。"></a>4. “启用路由高级功能”后，自定义路由规则集的方法有点不同。</h3><h4 id="A-添加已经编写好-x2F-在使用的路由规则集："><a href="#A-添加已经编写好-x2F-在使用的路由规则集：" class="headerlink" title="A. 添加已经编写好&#x2F;在使用的路由规则集："></a>A. 添加已经编写好&#x2F;在使用的路由规则集：</h4><ul><li>“从文件中导入规则”： 导入本地的”路由规则集文件”</li><li>“从剪贴板中导入规则”： 复制“其他人分享的路由规则集范本”（文章末尾有）</li><li>“从订阅Url中导入规则”： 粘贴“别人分享的、含有路由规则集的url链接”</li></ul><p>订阅url地址，不是机场的订阅地址，而是含规则集的 url 地址。</p><p>除了规则以外的请求，都走“代理”就是白名单模式；都走“直连”就是黑名单模式。</p><h4 id><a href="#" class="headerlink" title></a><img src="/posts/4a137bcb/v2rayN-2021.4.20-2.jpg" class alt="img"></h4><h4 id="B-添加单个或者多个路由规则："><a href="#B-添加单个或者多个路由规则：" class="headerlink" title="B.添加单个或者多个路由规则："></a>B.添加单个或者多个路由规则：</h4><ul><li>“Proxy” ： 走代理的域名或者IP</li><li>“Direct” ：不走代理的域名或者IP</li><li>“Block”： 不能访问的域名或者IP</li><li>“Port”：目标端口范围，当目标端口落在此范围内时，此规则生效</li></ul><img src="/posts/4a137bcb/v2rayn-4.16.2021-4.jpg" class alt="img"><h3 id="5-特别注意："><a href="#5-特别注意：" class="headerlink" title="5. 特别注意："></a>5. 特别注意：</h3><h4 id="越靠前的规则，优先级越高；简单来说，优先使用“排在前面的路由规则”对产生的流量进行删选！！！"><a href="#越靠前的规则，优先级越高；简单来说，优先使用“排在前面的路由规则”对产生的流量进行删选！！！" class="headerlink" title="越靠前的规则，优先级越高；简单来说，优先使用“排在前面的路由规则”对产生的流量进行删选！！！"></a>越靠前的规则，优先级越高；简单来说，优先使用“排在前面的路由规则”对产生的流量进行删选！！！</h4><h4 id="使用加强版-v2ray-路由规则文件，一定特别“设置geoip-dat和geosite-dat文件不跟随core更新”"><a href="#使用加强版-v2ray-路由规则文件，一定特别“设置geoip-dat和geosite-dat文件不跟随core更新”" class="headerlink" title="使用加强版 v2ray 路由规则文件，一定特别“设置geoip.dat和geosite.dat文件不跟随core更新”"></a>使用加强版 v2ray 路由规则文件，一定特别“设置geoip.dat和geosite.dat文件不跟随core更新”</h4><img src="/posts/4a137bcb/v2rayn-4.16.2021-6.jpg" class alt="img"><h4 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h4><p>v2fly&#x2F;domain-list-community 项目 <a href="https://github.com/v2fly/domain-list-community/tree/master/data">data</a> 目录中某些列表里的规则会被标记诸如 <code>@cn</code> 的 attribute（如下所示），意为该域名在中国大陆有接入点，可直连。</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs llvm">steampowered.com.<span class="hljs-number">8686</span><span class="hljs-keyword">c</span>.com <span class="hljs-title">@cn</span><br>steamstatic.com.<span class="hljs-number">8686</span><span class="hljs-keyword">c</span>.com <span class="hljs-title">@cn</span><br></code></pre></td></tr></table></figure><p>对于玩 Steam 国区游戏，想要直连的用户，可以设置类别 <code>geosite:steam@cn</code> 为直连，意为将 <a href="https://github.com/v2fly/domain-list-community/blob/master/data/steam">steam</a> 列表内所有被标记了 <code>@cn</code> attribute 的规则（域名）设置为直连。同理，由于 <a href="https://github.com/v2fly/domain-list-community/blob/master/data/category-games">category-games</a> 列表包含了 <code>steam</code>、<code>ea</code>、<code>blizzard</code>、<code>epicgames</code> 和 <code>nintendo</code> 等常见的游戏厂商。设置类别 <code>geosite:category-games@cn</code> 为直连，即可节省大量服务器流量。</p><blockquote><p> <strong>注意：</strong>在 Routing 配置中，类别越靠前（上），优先级越高，所以 <code>geosite:category-games@cn</code> 等所有带有 <code>@cn</code> attribute 的规则都要放置在 <code>geosite:geolocation-!cn</code> 前（上）面才能生效。</p><p><code>category-games</code> 列表内的规则（域名）可能会有疏漏，请留意规则命中情况。如发现遗漏，欢迎到项目 v2fly&#x2F;domain-list-community 提 <a href="https://github.com/v2fly/domain-list-community/issues">issue</a> 反馈。</p></blockquote><h2 id="路由规则集范本"><a href="#路由规则集范本" class="headerlink" title="路由规则集范本"></a>路由规则集范本</h2><h3 id="请先“启用高级路由规则”，按照视频教程添加规则：点击跳转"><a href="#请先“启用高级路由规则”，按照视频教程添加规则：点击跳转" class="headerlink" title="请先“启用高级路由规则”，按照视频教程添加规则：点击跳转"></a>请先“启用高级路由规则”，按照视频教程添加规则：<a href="https://youtu.be/4D-6A0qRuv4">点击跳转</a></h3><p>谢谢网友“ANGIANAPR”的分享：<a href="https://github.com/2dust/v2rayN/issues/1366">点击跳转 GitHub</a></p><p>2dust 大佬分享的白名单和黑名单规则集范例</p><p>在4.14、4.13 版客户端中，在电脑能“富强&#x2F;科学上网”的前提下，</p><p>才能通过黑白名单范例的 URL 添加规则集！（见下图）</p><blockquote><p><strong>白名单范例</strong>：<a href="https://raw.githubusercontent.com/2dust/v2rayCustomRoutingList/master/custom_routing_rules_whitelist">https://raw.githubusercontent.com/2dust/v2rayCustomRoutingList/master/custom_routing_rules_whitelist</a></p><p><strong>黑名单范例</strong>：<a href="https://raw.githubusercontent.com/2dust/v2rayCustomRoutingList/master/custom_routing_rules_blacklist">https://raw.githubusercontent.com/2dust/v2rayCustomRoutingList/master/custom_routing_rules_blacklist</a></p><img src="/posts/4a137bcb/v2rayN-2021.4.28-2.jpg" class alt="img"></blockquote><p><strong>1. PAC模式&#x2F;GFW 模式，带广告屏蔽的：</strong></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs prolog">[<br>  &#123;<br>    <span class="hljs-string">&quot;outboundTag&quot;</span>: <span class="hljs-string">&quot;block&quot;</span>,<br>    <span class="hljs-string">&quot;domain&quot;</span>: [<br>      <span class="hljs-string">&quot;geosite:category-ads-all&quot;</span>,<br>    ]<br>  &#125;,<br>  &#123;<br>     <span class="hljs-string">&quot;outboundTag&quot;</span>: <span class="hljs-string">&quot;proxy&quot;</span>,<br>     <span class="hljs-string">&quot;ip&quot;</span>: [<br>       <span class="hljs-string">&quot;geoip:telegram&quot;</span><br>     ],<br>     <span class="hljs-string">&quot;domain&quot;</span>: [<br>       <span class="hljs-string">&quot;geosite:gfw&quot;</span><br>    ]<br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">&quot;port&quot;</span>: <span class="hljs-string">&quot;0-65535&quot;</span>,<br>    <span class="hljs-string">&quot;outboundTag&quot;</span>: <span class="hljs-string">&quot;direct&quot;</span><br>  &#125;<br>]<br></code></pre></td></tr></table></figure><p><strong>2. PAC模式&#x2F;GFW 模式，不带广告屏蔽：</strong></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs prolog">[<br>  &#123;<br>     <span class="hljs-string">&quot;outboundTag&quot;</span>: <span class="hljs-string">&quot;proxy&quot;</span>,<br>     <span class="hljs-string">&quot;ip&quot;</span>: [<br>       <span class="hljs-string">&quot;geoip:telegram&quot;</span><br>     ],<br>     <span class="hljs-string">&quot;domain&quot;</span>: [<br>       <span class="hljs-string">&quot;geosite:gfw&quot;</span><br>    ]<br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">&quot;port&quot;</span>: <span class="hljs-string">&quot;0-65535&quot;</span>,<br>    <span class="hljs-string">&quot;outboundTag&quot;</span>: <span class="hljs-string">&quot;direct&quot;</span><br>  &#125;<br>]<br></code></pre></td></tr></table></figure><p><strong>3. 全局代理：</strong></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs prolog">[<br>  &#123;<br>    <span class="hljs-string">&quot;outboundTag&quot;</span>: <span class="hljs-string">&quot;proxy&quot;</span>,<br>    <span class="hljs-string">&quot;port&quot;</span>: <span class="hljs-string">&quot;0-65535&quot;</span>,<br>  &#125;<br>]<br></code></pre></td></tr></table></figure><p><strong>4. “解决Mirosoft Store等UWP软件无法访问”：<a href="https://github.com/2dust/v2rayN/issues/1413">点击跳转</a></strong></p><h3 id="延伸阅读："><a href="#延伸阅读：" class="headerlink" title="延伸阅读："></a>延伸阅读：</h3><h3 id="什么是路由规则？"><a href="#什么是路由规则？" class="headerlink" title="什么是路由规则？"></a>什么是路由规则？</h3><h4 id="是将入站数据（用户请求）按需求由不同的出站连接发出，以达到按需求进行代理的目的。"><a href="#是将入站数据（用户请求）按需求由不同的出站连接发出，以达到按需求进行代理的目的。" class="headerlink" title="是将入站数据（用户请求）按需求由不同的出站连接发出，以达到按需求进行代理的目的。"></a>是将入站数据（用户请求）按需求由不同的出站连接发出，以达到按需求进行代理的目的。</h4><blockquote><p>常见用法是分流国内外流量，V2Ray 可以通过内部机制判断不同地区的流量，然后将它们发送到不同的出站代理。</p><p>简单地说，先设置相关路由规则， 经过 geo文件来判断目标是否命中相关路由规则，从而决定是否走代理出站(局域网也已绕过)。 </p></blockquote><h3 id="怎么在v2rayN-客户端自定义DNS？"><a href="#怎么在v2rayN-客户端自定义DNS？" class="headerlink" title="怎么在v2rayN 客户端自定义DNS？"></a>怎么在v2rayN 客户端自定义DNS？</h3><img src="/posts/4a137bcb/v2rayN-2021.4.20-4.jpg" class alt="img"><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.jamesdailylife.com/new_v2rayn_c">4.12 最新 v2rayN windows 进阶版使用教程 | 附PAC模式路由规则 | 多个自定义路由规则</a></p><p><a href="https://github.com/v2fly/v2ray-core">V2Ray 路由规则文件加强版 </a> </p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>查缺补漏</title>
    <link href="/posts/d7158ead/"/>
    <url>/posts/d7158ead/</url>
    
    <content type="html"><![CDATA[<h2 id="SpringMVC执行流程"><a href="#SpringMVC执行流程" class="headerlink" title="SpringMVC执行流程:"></a><strong>SpringMVC执行流程:</strong></h2><ol><li><p>用户发送请求至前端控制器DispatcherServlet</p></li><li><p>DispatcherServlet收到请求调用处理器映射器HandlerMapping。</p></li><li><p>处理器映射器根据请求url找到具体的处理器，生成处理器执行链HandlerExecutionChain(包括处理器对象和处理器拦截器)一并返回给DispatcherServlet。</p></li><li><p>DispatcherServlet根据处理器Handler获取处理器适配器HandlerAdapter执行HandlerAdapter处理一系列的操作，如：参数封装，数据格式转换，数据验证等操作</p></li><li><p>执行处理器Handler(Controller，也叫页面控制器)。</p></li><li><p>Handler执行完成返回ModelAndView</p></li><li><p>HandlerAdapter将Handler执行结果ModelAndView返回到DispatcherServlet</p></li><li><p>DispatcherServlet将ModelAndView传给ViewResolver视图解析器</p></li><li><p>ViewResolver解析后返回具体View</p></li><li><p>DispatcherServlet对View进行渲染视图（即将模型数据model填充至视图中）。</p></li><li><p>DispatcherServlet响应用户。</p></li></ol><h2 id="spring的反射有什么问题"><a href="#spring的反射有什么问题" class="headerlink" title="spring的反射有什么问题"></a>spring的反射有什么问题</h2><p>java的反射破坏了封装，性能也是一个问题；反射不能用jit加速。</p><h2 id="springboot启动过程"><a href="#springboot启动过程" class="headerlink" title="springboot启动过程"></a>springboot启动过程</h2><p>@SpringBootConfiguration 通过与 @Bean 结合完成Bean的 JavaConfig配置；</p><p>@ComponentScan 通过范围扫描的方式，扫描特定注解注释的类，将其注册到Spring容器；</p><p>@EnableAutoConfiguration 通过 spring.factories 的配置，并结合 @Condition 条件，完成bean的注册；</p><p>@Import 通过导入的方式，将指定的class注册解析到Spring容器；</p><img src="/posts/d7158ead/203.jpg" class><p>我们将各步骤总结精炼如下：</p><ol><li>通过 <code>SpringFactoriesLoader</code> 加载 <code>META-INF/spring.factories</code> 文件，获取并创建 <code>SpringApplicationRunListener</code> 对象</li><li>然后由 <code>SpringApplicationRunListener</code> 来发出 starting 消息</li><li>创建参数，并配置当前 SpringBoot 应用将要使用的 Environment</li><li>完成之后，依然由 <code>SpringApplicationRunListener</code> 来发出 environmentPrepared 消息</li><li>创建 <code>ApplicationContext</code></li><li>初始化 <code>ApplicationContext</code>，并设置 Environment，载相关配置等</li><li>由 <code>SpringApplicationRunListener</code> 来发出 <code>contextPrepared</code> 消息，告知SpringBoot 应用使用的 <code>ApplicationContext</code> 已准备OK</li><li>将各种 beans 装载入 <code>ApplicationContext</code>，继续由 <code>SpringApplicationRunListener</code> 来发出 contextLoaded 消息，告知 SpringBoot 应用使用的 <code>ApplicationContext</code> 已装填OK</li><li>refresh ApplicationContext，完成IoC容器可用的最后一步</li><li>由 <code>SpringApplicationRunListener</code> 来发出 started 消息</li><li>完成最终的程序的启动</li><li>由 <code>SpringApplicationRunListener</code> 来发出 running 消息，告知程序已运行起来了</li></ol><h2 id="问：Spring-Boot-Starter-的工作原理是什么？"><a href="#问：Spring-Boot-Starter-的工作原理是什么？" class="headerlink" title="问：Spring Boot Starter 的工作原理是什么？"></a>问：Spring Boot Starter 的工作原理是什么？</h2><p>答：Spring Boot 在启动的时候会干这几件事情：</p><ul><li>① Spring Boot 在启动时会去依赖的 Starter 包中寻找 resources&#x2F;META-INF&#x2F;spring.factories 文件，然后根据文件中配置的 Jar 包去扫描项目所依赖的 Jar 包。</li><li>② 根据 spring.factories 配置加载 AutoConfigure 类</li><li>③ 根据 @Conditional 注解的条件，进行自动配置并将 Bean 注入 Spring Context</li></ul><h2 id="1、Spring-Boot-的自动配置是如何实现的？"><a href="#1、Spring-Boot-的自动配置是如何实现的？" class="headerlink" title="1、Spring Boot 的自动配置是如何实现的？"></a>1、Spring Boot 的自动配置是如何实现的？</h2><p>Spring Boot 项目的启动注解是：@SpringBootApplication，其实它就是由下面三个注解组成的：</p><ul><li>@Configuration</li><li>@ComponentScan</li><li>@EnableAutoConfiguration</li></ul><p>其中 @EnableAutoConfiguration 是实现自动配置的入口，该注解又通过 @Import 注解导入了AutoConfigurationImportSelector，在该类中加载 META-INF&#x2F;spring.factories 的配置信息。然后筛选出以 EnableAutoConfiguration 为 key 的数据，加载到 IOC 容器中，实现自动配置功能！</p><h2 id="21、描述一下JVM加载class文件的原理机制？"><a href="#21、描述一下JVM加载class文件的原理机制？" class="headerlink" title="21、描述一下JVM加载class文件的原理机制？"></a>21、描述一下JVM加载class文件的原理机制？</h2><p>答：JVM中类的装载是由类加载器（ClassLoader）和它的子类来实现的，Java中的类加载器是一个重要的Java运行时系统组件，它负责在运行时查找和装入类文件中的类。</p><p>由于Java的跨平台性，经过编译的Java源程序并不是一个可执行程序，而是一个或多个类文件。当Java程序需要使用某个类时，JVM会确保这个类已经被加载、连接（验证、准备和解析）和初始化。类的加载是指把类的.class文件中的数据读入到内存中，通常是创建一个字节数组读入.class文件，然后产生与所加载类对应的Class对象。加载完成后，Class对象还不完整，所以此时的类还不可用。当类被加载后就进入连接阶段，这一阶段包括验证、准备（为静态变量分配内存并设置默认的初始值）和解析（将符号引用替换为直接引用）三个步骤。最后JVM对类进行初始化，包括：1)如果类存在直接的父类并且这个类还没有被初始化，那么就先初始化父类；2)如果类中存在初始化语句，就依次执行这些初始化语句。</p><p>类的加载是由类加载器完成的，类加载器包括：根加载器（BootStrap）、扩展加载器（Extension）、系统加载器（System）和用户自定义类加载器（java.lang.ClassLoader的子类）。从Java 2（JDK 1.2）开始，类加载过程采取了父亲委托机制（PDM）。PDM更好的保证了Java平台的安全性，在该机制中，JVM自带的Bootstrap是根加载器，其他的加载器都有且仅有一个父类加载器。类的加载首先请求父类加载器加载，父类加载器无能为力时才由其子类加载器自行加载。JVM不会向Java程序提供对Bootstrap的引用。下面是关于几个类加载器的说明：</p><p>​    Bootstrap：一般用本地代码实现，负责加载JVM基础核心类库（rt.jar）；</p><p>​    Extension：从java.ext.dirs系统属性所指定的目录中加载类库，它的父加载器是Bootstrap；</p><p>​    System：又叫应用类加载器，其父类是Extension。它是应用最广泛的类加载器。它从环境变量classpath或者系统属性java.class.path所指定的目录中记载类，是用户自定义加载器的默认父加载器。</p><h2 id="Comparable和Comparator接口是干什么的，其区别"><a href="#Comparable和Comparator接口是干什么的，其区别" class="headerlink" title="Comparable和Comparator接口是干什么的，其区别"></a>Comparable和Comparator接口是干什么的，其区别</h2><p>Comparable &amp; Comparator 都是用来实现集合中元素的比较、排序的，只是 Comparable 是在集合内部定义的方法实现的排序，Comparator 是在集合外部实现的排序，所以，如想实现排序，就需要在集合外定义 Comparator 接口的方法或在集合内实现 Comparable 接口的方法。</p><p>Comparator位于包java.util下，而Comparable位于包 java.lang下 Comparable 是一个对象本身就已经支持自比较所需要实现的接口（如 String、Integer 自己就可以完成比较大小操作，已经实现了Comparable接口） 自定义的类要在加入list容器中后能够排序，可以实现Comparable接口，在用Collections类的sort方法排序时，如果不指定Comparator，那么就以自然顺序排序， 这里的自然顺序就是实现Comparable接口设定的排序方式。 </p><p>而 Comparator 是一个专用的比较器，当这个对象不支持自比较或者自比较函数不能满足你的要求时，你可以写一个比较器来完成两个对象之间大小的比较。 可以说一个是自已完成比较，一个是外部程序实现比较的差别而已。 </p><p>用 Comparator 是策略模式（strategy design pattern），就是不改变对象自身，而用一个策略对象（strategy object）来改变它的行为。 比如：你想对整数采用绝对值大小来排序，Integer 是不符合要求的，你不需要去修改 Integer 类（实际上你也不能这么做）去改变它的排序行为，只要使用一个实现了 Comparator 接口的对象来实现控制它的排序就行了。</p><h2 id="分布式Session的几种实现方式"><a href="#分布式Session的几种实现方式" class="headerlink" title="分布式Session的几种实现方式"></a>分布式Session的几种实现方式</h2><ol><li><p>session复制：在支持session复制的服务器上进行，同步session，保持session一致</p><p>方案：<code>tomcat-redis-session-manager</code></p></li><li><p>session粘滞：强行分发session到各个服务器</p><p>方案：负载均衡</p></li><li><p>cookie存储session：把sessionid存储到cookie中(不安全，cookie容易被盗取，可以存储不重要的数据)</p></li><li><p>session集中管理：把用户的session存储在单台或者集群服务器的缓存中，所有web服务器从中拿取session，实现session共享</p><p>方案：Redis存储用户生成的sessionId或者存储保存sessionId的cookie</p></li></ol><h2 id="Mybatis的mapper文件中resultType和resultMap的区别。"><a href="#Mybatis的mapper文件中resultType和resultMap的区别。" class="headerlink" title="Mybatis的mapper文件中resultType和resultMap的区别。"></a>Mybatis的mapper文件中resultType和resultMap的区别。</h2><p>1、查询结果为Map时，使用resultType;</p><p>2、简单查询且结果为Pojo类，也可以使用resultType,另外，查询字段名与Pojo属性名不一致，可以通过使用别名的方式；</p><p>3、复杂的映射或级联，可以使用resultMap;</p><h2 id="Spring中七种事务传播行为"><a href="#Spring中七种事务传播行为" class="headerlink" title="Spring中七种事务传播行为"></a>Spring中七种事务传播行为</h2><table><thead><tr><th>事务传播行为类型</th><th>说明</th></tr></thead><tbody><tr><td>PROPAGATION_REQUIRED</td><td>如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。这是最常见的选择。</td></tr><tr><td>PROPAGATION_SUPPORTS</td><td>支持当前事务，如果当前没有事务，就以非事务方式执行。</td></tr><tr><td>PROPAGATION_MANDATORY</td><td>使用当前的事务，如果当前没有事务，就抛出异常。</td></tr><tr><td>PROPAGATION_REQUIRES_NEW</td><td>新建事务，如果当前存在事务，把当前事务挂起。</td></tr><tr><td>PROPAGATION_NOT_SUPPORTED</td><td>以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</td></tr><tr><td>PROPAGATION_NEVER</td><td>以非事务方式执行，如果当前存在事务，则抛出异常。</td></tr><tr><td>PROPAGATION_NESTED</td><td>如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与PROPAGATION_REQUIRED类似的操作。</td></tr></tbody></table><h2 id="REQUIRED-REQUIRES-NEW-NESTED异同"><a href="#REQUIRED-REQUIRES-NEW-NESTED异同" class="headerlink" title="REQUIRED,REQUIRES_NEW,NESTED异同"></a>REQUIRED,REQUIRES_NEW,NESTED异同</h2><p>NESTED和REQUIRED修饰的内部方法都属于外围方法事务，如果外围方法抛出异常，这两种方法的事务都会被回滚。但是REQUIRED是加入外围方法事务，所以和外围事务同属于一个事务，一旦REQUIRED事务抛出异常被回滚，外围方法事务也将被回滚。而NESTED是外围方法的子事务，有单独的保存点，所以NESTED方法抛出异常被回滚，不会影响到外围方法的事务。</p><p>NESTED和REQUIRES_NEW都可以做到内部方法事务回滚而不影响外围方法事务。但是因为NESTED是嵌套事务，所以外围方法回滚之后，作为外围方法事务的子事务也会被回滚。而REQUIRES_NEW是通过开启新的事务实现的，内部事务和外围事务是两个事务，外围事务回滚不会影响内部事务。</p><h2 id="nginx负载均衡的5种策略"><a href="#nginx负载均衡的5种策略" class="headerlink" title="nginx负载均衡的5种策略"></a>nginx负载均衡的5种策略</h2><h3 id="轮询（默认）"><a href="#轮询（默认）" class="headerlink" title="轮询（默认）"></a>轮询（默认）</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">upstream</span> backserver &#123;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.0.14</span>;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.0.15</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="weight"><a href="#weight" class="headerlink" title="weight"></a>weight</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">upstream</span> backserver &#123;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.0.14</span> weight=<span class="hljs-number">3</span>;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.0.15</span> weight=<span class="hljs-number">7</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="ip-hash"><a href="#ip-hash" class="headerlink" title="ip_hash"></a>ip_hash</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">upstream</span> backserver &#123;<br>    ip_hash;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.0.14:88</span>;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.0.15:80</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="fair"><a href="#fair" class="headerlink" title="fair"></a>fair</h3><p>按后端服务器的响应时间来分配请求，响应时间短的优先分配。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">upstream</span> backserver &#123;<br>    <span class="hljs-attribute">server</span> server1;<br>    <span class="hljs-attribute">server</span> server2;<br>    fair;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="url-hash"><a href="#url-hash" class="headerlink" title="url_hash"></a>url_hash</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">upstream</span> backserver &#123;<br>    <span class="hljs-attribute">server</span> squid1:<span class="hljs-number">3128</span>;<br>    <span class="hljs-attribute">server</span> squid2:<span class="hljs-number">3128</span>;<br>    <span class="hljs-attribute">hash</span> <span class="hljs-variable">$request_uri</span>;<br>    <span class="hljs-attribute">hash_method</span> crc32;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="spring是如何解决循环依赖的？"><a href="#spring是如何解决循环依赖的？" class="headerlink" title="spring是如何解决循环依赖的？"></a>spring是如何解决循环依赖的？</h2><p>构造器的循环依赖：这种依赖spring是处理不了的，直接抛出BeanCurrentlylnCreationException异常。 </p><p>单例模式下的setter循环依赖：通过“三级缓存”处理循环依赖。 </p><ul><li>singletonObjects &#x2F;&#x2F; 一级缓存</li><li>earlySingletonObjects &#x2F;&#x2F; 二级缓存</li><li>singletonFactories &#x2F;&#x2F; 三级缓存</li></ul><p>非单例循环依赖：无法处理。</p><h2 id="幂等性实现方案"><a href="#幂等性实现方案" class="headerlink" title="幂等性实现方案"></a>幂等性实现方案</h2><h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><p>如果只是更新已有的数据，没有必要对业务进行加锁，设计表结构时使用乐观锁，一般通过version来做乐观锁，这样既能保证执行效率，又能保证幂等。</p><h3 id="防重表"><a href="#防重表" class="headerlink" title="防重表"></a>防重表</h3><p>使用订单号 orderNo 做为去重表的唯一索引，每次请求都根据订单号向去重表中插入一条数据。第一次请求查询订单支付状态，订单没有支付，进行支付操作，无论成功与否，执行完后更新订单状态为成功或失败，删除去重表中的数据。后续的订单因为表中唯一索引而插入失败，则返回操作失败，直到第一次的请求完成（成功或失败）。</p><img src="/posts/d7158ead/%E5%B9%82%E7%AD%89%E6%80%A7.png" class alt="img"><h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><p>对于防重表可以用分布式锁代替，比如 Redis 和 Zookeeper</p><p><strong>Redis</strong></p><ol><li>订单发起支付请求，支付系统会去 Redis 缓存中查询是否存在该订单号的 Key，如果不存在，则向 Redis 增加 Key 为订单号</li><li>查询订单支付状态，如果未支付，则进行支付流程，支付完成后删除该订单号的 key</li></ol><p><strong>Zookeeper</strong></p><ol><li>订单发起支付请求，支付系统会去 Zookeeper 中创建一个 node，如果创建失败，则表示订单已经被支付</li><li>如果创建成功，则进行支付流程，支付完成后删除 node</li></ol><h3 id="Token-机制"><a href="#Token-机制" class="headerlink" title="Token 机制"></a>Token 机制</h3><p>这种方式分成两个阶段：申请 Token 阶段和支付阶段。 第一阶段，在进入到提交订单页面之前，需要订单系统根据用户信息向支付系统发起一次申请 Token 的请求，支付系统将 Token 保存到 Redis 缓存中，为第二阶段支付使用。 第二阶段，订单系统拿着申请到的 Token 发起支付请求，支付系统会检查 Redis 中是否存在该 Token ，如果存在，表示第一次发起支付请求，删除缓存中 Token 后开始支付逻辑处理；如果缓存中不存在，表示非法请求。</p><h3 id="消息队列缓冲"><a href="#消息队列缓冲" class="headerlink" title="消息队列缓冲"></a>消息队列缓冲</h3><p>将订单的支付请求全部发送到消息队列中，然后使用异步任务处理队列中的数据，过滤掉重复的待支付订单，再进行支付流程。</p>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>查缺补漏</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>黑苹果常用配置</title>
    <link href="/posts/4a49b547/"/>
    <url>/posts/4a49b547/</url>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="macOS-开启或关闭-SIP"><a href="#macOS-开启或关闭-SIP" class="headerlink" title="macOS 开启或关闭 SIP"></a>macOS 开启或关闭 SIP</h2><blockquote><p>参考链接：<a href="https://sspai.com/post/55066">https://sspai.com/post/55066</a></p></blockquote><p>SIP 全称为「System Integrity Protection」即「<a href="https://support.apple.com/zh-cn/HT204899">系统完整性保护</a>」，是 OS X El Capitan 时开始采用的一项安全技术，SIP 将一些文件目录和系统应用保护了起来。但这会影响我们一些使用或设置，比如：更改系统应用图标、终端操作系统目录文件提示「Operation not permitted」、Finder 无法编辑系统目录里的文件。</p><h3 id="关闭-SIP"><a href="#关闭-SIP" class="headerlink" title="关闭 SIP"></a>关闭 SIP</h3><p>因为 SIP 是系统级的权限操作，我们无法直接关闭它，需要前往「<a href="https://support.apple.com/zh-cn/HT201314">macOS 恢复功能</a>」下进行。<br>将 Mac 开机，立即在键盘上按住 Command ⌘ + R，直到看到 Apple 标志或旋转的地球时松开。看到「实用工具」窗口时，恢复功能启动即完成。</p><img src="/posts/4a49b547/1.png" alt="img" style="zoom: 50%;"><p>在上方的菜单栏点击「实用工具」选择「终端」。</p><img src="/posts/4a49b547/1-16785905078421.png" alt="img" style="zoom: 50%;"><p>在终端中，输入「csrutil disable」后回车。</p><p><img src="/posts/4a49b547/1-16785905078422.png" alt="回车后会提示「成功关闭了系统完整性保护，请重启机器」" style="zoom: 50%;">回车后会提示「成功关闭了系统完整性保护，请重启机器」</p><p>点击菜单栏  标志，选择「重新启动」。</p><img src="/posts/4a49b547/1-16785905078423.png" alt="img" style="zoom:50%;"><p>就此我们关闭了 SIP。</p><h3 id="打开-SIP"><a href="#打开-SIP" class="headerlink" title="打开 SIP"></a>打开 SIP</h3><p>SIP 是避免软件任意修改或覆盖任意系统文件或应用，日常还是建议保持开启状态的。<br>仍然是进入到「macOS 恢复功能」，但这次在终端输入的是「csrutil enable」开启 SIP，重启 Mac 即可。</p><img src="/posts/4a49b547/1-16785905078424.png" class alt="和之前不同，这次输入的是「csrutil enable」">和之前不同，这次输入的是「csrutil enable」<h3 id="查看-SIP-当前状态"><a href="#查看-SIP-当前状态" class="headerlink" title="查看 SIP 当前状态"></a>查看 SIP 当前状态</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">csrutil status<br></code></pre></td></tr></table></figure><img src="/posts/4a49b547/1-16785905078425.png" alt="enabled 为开启，disabled 为关闭" style="zoom: 50%;"><h2 id="opencore-重置-nvram"><a href="#opencore-重置-nvram" class="headerlink" title="opencore 重置 nvram"></a>opencore 重置 nvram</h2><p>在 OpenCore 中，重置 NVRAM 的方法有以下几种：</p><ol><li>在 OpenCore 引导界面中，按下 Command + Option + P + R 键。这将在重启电脑后重置 NVRAM。</li><li>使用 Terminal 命令重置 NVRAM。在 Terminal 中输入 <code>sudo nvram -c</code> 并回车。这将立即清除 NVRAM 中的所有设置。</li><li>通过 OpenCore Configurator 清除 NVRAM。在 OpenCore Configurator 中选择 NVRAM 中的“Reset NVRAM”按钮。</li></ol><p>请注意，重置 NVRAM 将清除所有自定义设置，并将需要重新配置。</p><h2 id="查看错误日志"><a href="#查看错误日志" class="headerlink" title="查看错误日志"></a>查看错误日志</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pmset -g log<br></code></pre></td></tr></table></figure><h2 id="引导进入-Recovery-分区"><a href="#引导进入-Recovery-分区" class="headerlink" title="引导进入 Recovery 分区"></a>引导进入 Recovery 分区</h2><p><code>OpenCore</code>配置文件中勾选</p><ul><li><input checked disabled type="checkbox"> <code>UEFI</code> -&gt; <code>APFS</code> -&gt; <code>JumpstartHotPlug</code></li></ul><img src="/posts/4a49b547/image-20230319220430744.png" alt="image-20230319220430744" style="zoom:67%;">]]></content>
    
    
    <categories>
      
      <category>黑苹果</category>
      
    </categories>
    
    
    <tags>
      
      <tag>黑苹果</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mybatis 面试题</title>
    <link href="/posts/2e4af39/"/>
    <url>/posts/2e4af39/</url>
    
    <content type="html"><![CDATA[<h2 id="1、解析全局配置文件的时候，做了什么？"><a href="#1、解析全局配置文件的时候，做了什么？" class="headerlink" title="1、解析全局配置文件的时候，做了什么？"></a>1、解析全局配置文件的时候，做了什么？</h2><p>Configuration</p><p>MappedStatement</p><h2 id="2、没有实现类，Mybatis的方法是怎么执行的？"><a href="#2、没有实现类，Mybatis的方法是怎么执行的？" class="headerlink" title="2、没有实现类，Mybatis的方法是怎么执行的？"></a>2、没有实现类，Mybatis的方法是怎么执行的？</h2><p>动态代理MapperProxy</p><h2 id="3、接口方法和映射器的statement-id是怎么绑定起来的？（怎么根据接口方法拿到SQL语句的？）"><a href="#3、接口方法和映射器的statement-id是怎么绑定起来的？（怎么根据接口方法拿到SQL语句的？）" class="headerlink" title="3、接口方法和映射器的statement id是怎么绑定起来的？（怎么根据接口方法拿到SQL语句的？）"></a>3、接口方法和映射器的statement id是怎么绑定起来的？（怎么根据接口方法拿到SQL语句的？）</h2><p>MappedStatement</p><h2 id="4、四大对象是什么时候创建的？"><a href="#4、四大对象是什么时候创建的？" class="headerlink" title="4、四大对象是什么时候创建的？"></a>4、四大对象是什么时候创建的？</h2><p>openSession()方法里面</p><ul><li>Executor</li></ul><p>执行SQL语句的时候</p><ul><li><p>StatementHandler</p></li><li><p>ParameterHandler</p></li><li><p>ResultSetHandler</p></li></ul><h2 id="5、JDK动态代理，代理能不能被代理"><a href="#5、JDK动态代理，代理能不能被代理" class="headerlink" title="5、JDK动态代理，代理能不能被代理"></a>5、JDK动态代理，代理能不能被代理</h2><p>能</p><h2 id="6、Mybatis集成到Spring的原理是什么？"><a href="#6、Mybatis集成到Spring的原理是什么？" class="headerlink" title="6、Mybatis集成到Spring的原理是什么？"></a>6、Mybatis集成到Spring的原理是什么？</h2><p>SqlSessionTemplate</p><p>MapperFactoryBean</p>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>有道云笔记去广告</title>
    <link href="/posts/c1da566d/"/>
    <url>/posts/c1da566d/</url>
    
    <content type="html"><![CDATA[<h1 id="有道云笔记v6-70去除广告"><a href="#有道云笔记v6-70去除广告" class="headerlink" title="有道云笔记v6.70去除广告"></a>有道云笔记v6.70去除广告</h1><h2 id="去除文章列表底部广告"><a href="#去除文章列表底部广告" class="headerlink" title="去除文章列表底部广告"></a>去除文章列表底部广告</h2><p>编辑文件<br><code>C:\Program Files (x86)\Youdao\YoudaoNote\theme\build.xml</code></p><p>搜索<code>AdWraperMid</code>, 找到如下代码块:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">AdWraperMid</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;panel&quot;</span> <span class="hljs-attr">css</span>=<span class="hljs-string">&quot;public&quot;</span> <span class="hljs-attr">dockstyle</span>=<span class="hljs-string">&quot;bottom&quot;</span> <span class="hljs-attr">visible</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">bounds</span>=<span class="hljs-string">&quot;0,0,0,161&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>修改成如下部分</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">AdWraperMid</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;panel&quot;</span> <span class="hljs-attr">css</span>=<span class="hljs-string">&quot;public&quot;</span> <span class="hljs-attr">dockstyle</span>=<span class="hljs-string">&quot;bottom&quot;</span> <span class="hljs-attr">visible</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">bounds</span>=<span class="hljs-string">&quot;0,0,0,0&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其实就是修改了第一行末尾的<code>bounds=&quot;0,0,0,161&quot;</code> 为 <code>bounds=&quot;0,0,0,0&quot;</code>，来隐藏广告位窗口。</p><h2 id="去除左下角广告"><a href="#去除左下角广告" class="headerlink" title="去除左下角广告"></a>去除左下角广告</h2><p>搜索<code>PanelAd</code>, 找到如下代码块，<code>&lt;PanelAd</code> 这一行的 <code>ass=&quot;mainform panelclient PanelAd&quot;</code> 删除即可:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">PanelAd</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;adpanel&quot;</span> <span class="hljs-attr">css</span>=<span class="hljs-string">&quot;public&quot;</span> <span class="hljs-attr">ass</span>=<span class="hljs-string">&quot;mainform panelclient PanelAd&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>修改后：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">PanelAd</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;adpanel&quot;</span> <span class="hljs-attr">css</span>=<span class="hljs-string">&quot;public&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后保存文件，重启软件。</p>]]></content>
    
    
    <categories>
      
      <category>破解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>破解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>翻墙杂项</title>
    <link href="/posts/126dc918/"/>
    <url>/posts/126dc918/</url>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="一级域名"><a href="#一级域名" class="headerlink" title="一级域名"></a>一级域名</h2><p>yahyav2rayssr.top</p><h2 id="namesilo"><a href="#namesilo" class="headerlink" title="namesilo"></a>namesilo</h2><table><thead><tr><th>用户名</th><th>邮箱</th><th>密码</th></tr></thead><tbody><tr><td>yahya-yaoyuming</td><td><a href="mailto:&#x36;&#x37;&#50;&#53;&#x35;&#52;&#x37;&#x38;&#x34;&#x40;&#x71;&#113;&#x2e;&#x63;&#111;&#109;">&#x36;&#x37;&#50;&#53;&#x35;&#52;&#x37;&#x38;&#x34;&#x40;&#x71;&#113;&#x2e;&#x63;&#111;&#109;</a></td><td>Yao88219620ko!</td></tr></tbody></table><h2 id="cloudflare"><a href="#cloudflare" class="headerlink" title="cloudflare"></a>cloudflare</h2><table><thead><tr><th>邮箱</th><th>密码</th></tr></thead><tbody><tr><td><a href="mailto:&#54;&#55;&#50;&#x35;&#53;&#52;&#x37;&#56;&#x34;&#x40;&#113;&#113;&#46;&#x63;&#x6f;&#109;">&#54;&#55;&#50;&#x35;&#53;&#52;&#x37;&#56;&#x34;&#x40;&#113;&#113;&#46;&#x63;&#x6f;&#109;</a></td><td>Yao88219620ko!</td></tr></tbody></table><h3 id="端口说明文档"><a href="#端口说明文档" class="headerlink" title="端口说明文档"></a>端口说明文档</h3><p>参考链接：<a href="https://developers.cloudflare.com/fundamentals/get-started/reference/network-ports/">https://developers.cloudflare.com/fundamentals/get-started/reference/network-ports/</a></p><p>已开放HTTPS端口有：443, 2053, 2083, 2087, 2096, 8443</p><p>全局API KEY:</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">66</span>f6f58b393232b878e6a855ab<span class="hljs-number">40944431724</span><br></code></pre></td></tr></table></figure><h2 id="hosteONS"><a href="#hosteONS" class="headerlink" title="hosteONS"></a>hosteONS</h2><blockquote><p>VPS 服务器信息。</p><p>IP付款链接： <a href="https://my.hosteons.com/viewinvoice.php?id=107772&paymentsuccess=true">https://my.hosteons.com/viewinvoice.php?id=107772&amp;paymentsuccess=true</a></p></blockquote><table><thead><tr><th>邮箱</th><th>密码</th></tr></thead><tbody><tr><td><a href="mailto:&#x36;&#x37;&#50;&#x35;&#x35;&#52;&#55;&#56;&#52;&#x40;&#x71;&#113;&#46;&#99;&#111;&#x6d;">&#x36;&#x37;&#50;&#x35;&#x35;&#52;&#55;&#56;&#52;&#x40;&#x71;&#113;&#46;&#99;&#111;&#x6d;</a></td><td>Yao88219620ko!</td></tr></tbody></table><h2 id="x-ui-面板信息"><a href="#x-ui-面板信息" class="headerlink" title="x-ui 面板信息"></a>x-ui 面板信息</h2><table><thead><tr><th>访问地址</th><th>用户名</th><th>密码</th></tr></thead><tbody><tr><td><a href="https://194.33.38.170:8443/">https://194.33.38.170:8443/</a> 或者 <a href="https://vless.yahyav2rayssr.top:8443/">https://vless.yahyav2rayssr.top:8443</a></td><td>admin</td><td>7613302589</td></tr></tbody></table><h2 id="x-ui-安装"><a href="#x-ui-安装" class="headerlink" title="x-ui 安装"></a>x-ui 安装</h2><blockquote><p>这里采用 centos7-minin 系统。</p></blockquote><p>系统安装证书前置命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum -y install crontabs<br>yum -y install openssl openssl-devel<br>curl https://get.acme.sh | sh<br><br>yum update -y          # Debian/Ubuntu 命令<br>yum install -y curl socat    #Debian/Ubuntu 命令<br></code></pre></td></tr></table></figure><p>x-ui 面板安装：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">bash &lt;(curl -Ls https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/vaxilu/</span>x-ui<span class="hljs-regexp">/master/i</span>nstall.sh) <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>黑苹果装机配置</title>
    <link href="/posts/f0e37cbf/"/>
    <url>/posts/f0e37cbf/</url>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="电脑配置"><a href="#电脑配置" class="headerlink" title="电脑配置"></a>电脑配置</h2><table><thead><tr><th>类型</th><th>型号</th><th>价格</th><th>渠道</th></tr></thead><tbody><tr><td>网卡</td><td>T919 BCM94360CD</td><td>150</td><td>闲鱼</td></tr><tr><td>显卡</td><td>蓝宝石 RX460 4GB 超白金版</td><td>229</td><td>闲鱼</td></tr><tr><td>内存条</td><td>镁光 3200 DDR4 32G</td><td>790</td><td>闲鱼</td></tr><tr><td>散热</td><td>雅浚 B3 PRO 4 热管 ARGB 神光同步</td><td>74.01</td><td>闲鱼</td></tr><tr><td>SSD 固态硬盘</td><td>西数 SN570 1T</td><td>350</td><td>闲鱼</td></tr><tr><td>主板</td><td>MSI MAG-B560M-MORTAR-WIFI</td><td>580</td><td>闲鱼</td></tr><tr><td>机箱</td><td>爱国者 T9 机箱</td><td>83.6</td><td>闲鱼</td></tr><tr><td>电源</td><td>爱国者 G7 全模组 700W</td><td>238</td><td>闲鱼</td></tr><tr><td>风扇</td><td>爱国者 冰魄彩虹 V1 * 6</td><td>56</td><td>闲鱼</td></tr><tr><td>CPU</td><td>i7-10700</td><td>1091</td><td>淘宝</td></tr><tr><td>螺丝</td><td>风扇铁黑&#x2F;镀镍螺丝</td><td>3.43</td><td>淘宝</td></tr><tr><td>转接线</td><td>大 4pin 一分五扩展线</td><td>12.99</td><td>淘宝</td></tr><tr><td>转接线</td><td>大 4pin 转 6 pin，显卡用</td><td>5.79</td><td>淘宝</td></tr><tr><td>硅脂</td><td>信越 7921 导热硅脂</td><td>20.90</td><td>淘宝</td></tr><tr><td><strong>合计</strong></td><td></td><td>3475.72</td><td></td></tr></tbody></table><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.bilibili.com/video/BV1Sb411e78a/?spm_id_from=333.337.search-card.all.click&vd_source=1696fd296900bc9f809f262000c4b785">台式装机全程攻略</a></p><p><a href="https://heipg.cn/tutorial/gpu-support-for-hackintosh.html">2022年黑苹果macOS Big Sur&#x2F;Monterey显卡支持列表，持续更新中。</a></p><p><a href="https://heipg.cn/tutorial/wifi-bluetooth-card-for-hackintosh.html">黑苹果无线网卡购买&amp;安装&amp;使用指南2022年版</a></p>]]></content>
    
    
    <categories>
      
      <category>黑苹果</category>
      
    </categories>
    
    
    <tags>
      
      <tag>黑苹果</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis 面试题</title>
    <link href="/posts/9657a236/"/>
    <url>/posts/9657a236/</url>
    
    <content type="html"><![CDATA[<h2 id="1、什么是-Redis"><a href="#1、什么是-Redis" class="headerlink" title="1、什么是 Redis?"></a>1、什么是 Redis?</h2><p>Redis 是完全开源免费的，遵守 BSD 协议，是一个高性能的 key-value 数据库。</p><p>Redis 与其他 key - value 缓存产品有以下三个特点：</p><p>（1）Redis 支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。</p><p>（2）Redis 不仅仅支持简单的 key-value 类型的数据，同时还提供 list，set，zset，hash 等数据结构的存储。</p><p>（3）Redis 支持数据的备份，即 master-slave 模式的数据备份。</p><p>Redis 优势</p><p>（1）性能极高 – Redis 能读的速度是 110000 次&#x2F;s,写的速度是 81000 次&#x2F;s 。</p><p>（2）丰富的数据类型 – Redis 支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。</p><p>（3）原子 – Redis 的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行。单个操作是原子性的。多个操作也支持事务，即原子性，通过 MULTI 和 EXEC指令包起来。</p><p>（4）丰富的特性 – Redis 还支持 publish&#x2F;subscribe, 通知, key 过期等等特性。</p><p>Redis 与其他 key-value 存储有什么不同？</p><p>（1）Redis 有着更为复杂的数据结构并且提供对他们的原子性操作，这是一个不同于其他数据库的进化路径。Redis 的数据类型都是基于基本数据结构的同时对程序员透明，无需进行额外的抽象。</p><p>（2）Redis 运行在内存中但是可以持久化到磁盘，所以在对不同数据集进行高速读写时需要权衡内存，因为数据量不能大于硬件内存。在内存数据库方面的另一个优点是，相比在磁盘上相同的复杂的数据结构，在内存中操作起来非常简单，这样 Redis可以做很多内部复杂性很强的事情。同时，在磁盘格式方面他们是紧凑的以追加的方式产生的，因为他们并不需要进行随机访问。</p><h2 id="2、Redis-的数据类型？"><a href="#2、Redis-的数据类型？" class="headerlink" title="2、Redis 的数据类型？"></a>2、Redis 的数据类型？</h2><p>Redis 支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及 zsetsorted set：有序集合)。</p><p>我们实际项目中比较常用的是 string，hash 如果你是 Redis 中高级用户，还需要加上下面几种数据结构 HyperLogLog、Geo、Pub&#x2F;Sub。</p><p>如果你说还玩过 Redis Module，像 BloomFilter，RedisSearch，Redis-ML，面试官得眼睛就开始发亮了。</p><h2 id="3、使用-Redis-有哪些好处？"><a href="#3、使用-Redis-有哪些好处？" class="headerlink" title="3、使用 Redis 有哪些好处？"></a>3、使用 Redis 有哪些好处？</h2><p>（1）速度快，因为数据存在内存中，类似于 HashMap，HashMap 的优势就是查找和操作的时间复杂度都是 O1)</p><p>（2）支持丰富数据类型，支持 string，list，set，Zset，hash 等</p><p>（3）支持事务，操作都是原子性，所谓的原子性就是对数据的更改要么全部执行，要么全部不执行</p><p>（4）丰富的特性：可用于缓存，消息，按 key 设置过期时间，过期后将会自动删除</p><h2 id="4、Redis-相比-Memcached-有哪些优势？"><a href="#4、Redis-相比-Memcached-有哪些优势？" class="headerlink" title="4、Redis 相比 Memcached 有哪些优势？"></a>4、Redis 相比 Memcached 有哪些优势？</h2><p>（1）Memcached 所有的值均是简单的字符串，redis 作为其替代者，支持更为丰富的数据类</p><p>（2）Redis 的速度比 Memcached 快很</p><p>（3）Redis 可以持久化其数据</p><h2 id="5、Memcache-与-Redis-的区别都有哪些？"><a href="#5、Memcache-与-Redis-的区别都有哪些？" class="headerlink" title="5、Memcache 与 Redis 的区别都有哪些？"></a>5、Memcache 与 Redis 的区别都有哪些？</h2><p>（1）存储方式 Memecache 把数据全部存在内存之中，断电后会挂掉，数据不能超过内存大小。 Redis 有部份存在硬盘上，这样能保证数据的持久性。</p><p>（2）数据支持类型 Memcache 对数据类型支持相对简单。 Redis 有复杂的数据类型。</p><p>（3）使用底层模型不同 它们之间底层实现方式 以及与客户端之间通信的应用协议不一样。 Redis 直接自己构建了 VM 机制 ，因为一般的系统调用系统函数的话，会浪费一定的时间去移动和请求。</p><h2 id="6、Redis-是单进程单线程的？"><a href="#6、Redis-是单进程单线程的？" class="headerlink" title="6、Redis 是单进程单线程的？"></a>6、Redis 是单进程单线程的？</h2><p>Redis 是单进程单线程的，redis 利用队列技术将并发访问变为串行访问，消除了传统数据库串行控制的开销。</p><h2 id="7、一个字符串类型的值能存储最大容量是多少？"><a href="#7、一个字符串类型的值能存储最大容量是多少？" class="headerlink" title="7、一个字符串类型的值能存储最大容量是多少？"></a>7、一个字符串类型的值能存储最大容量是多少？</h2><p>512M</p><h2 id="8、Redis-的持久化机制是什么？各自的优缺点？"><a href="#8、Redis-的持久化机制是什么？各自的优缺点？" class="headerlink" title="8、Redis 的持久化机制是什么？各自的优缺点？"></a>8、Redis 的持久化机制是什么？各自的优缺点？</h2><p>Redis提供两种持久化机制 RDB 和 AOF 机制:</p><h3 id="1、RDB-Redis-DataBase-持久化方式："><a href="#1、RDB-Redis-DataBase-持久化方式：" class="headerlink" title="1、RDB Redis DataBase 持久化方式："></a>1、RDB Redis DataBase 持久化方式：</h3><p>是指用数据集快照的方式半持久化模式)记录 redis 数据库的所有键值对,在某个时间点将数据写入一个临时文件，持久化结束后，用这个临时文件替换上次持久化的文件，达到数据恢复。</p><p><strong>优点：</strong></p><p>（1）只有一个文件 dump.rdb，方便持久化。</p><p>（2）容灾性好，一个文件可以保存到安全的磁盘。</p><p>（3）性能最大化，fork 子进程来完成写操作，让主进程继续处理命令，所以是 IO最大化。使用单独子进程来进行持久化，主进程不会进行任何 IO 操作，保证了redis的高性能)</p><p>（4）相对于数据集大时，比 AOF 的启动效率更高。</p><p><strong>缺点：</strong></p><p>数据安全性低。RDB 是间隔一段时间进行持久化，如果持久化之间 redis 发生故障，会发生数据丢失。所以这种方式更适合数据要求不严谨的时候</p><h3 id="2、AOF-Append-only-file-持久化方式："><a href="#2、AOF-Append-only-file-持久化方式：" class="headerlink" title="2、AOF Append-only file 持久化方式："></a>2、AOF Append-only file 持久化方式：</h3><p>是指所有的命令行记录以 redis 命令请求协议的格式完全持久化存储)保存为 aof 文件。</p><p><strong>优点：</strong></p><p>（1）数据安全，aof 持久化可以配置 appendfsync 属性，有 always，每进行一次命令操作就记录到 aof 文件中一次。</p><p>（2）通过 append 模式写文件，即使中途服务器宕机，可以通过 redis-check-aof 工具解决数据一致性问题。</p><p>（3）AOF 机制的 rewrite 模式。AOF 文件没被 rewrite 之前（文件过大时会对命令进行合并重写），可以删除其中的某些命令（比如误操作的 flushall）)</p><p><strong>缺点：</strong></p><p>（1）AOF 文件比 RDB 文件大，且恢复速度慢。</p><p>（2）数据集大的时候，比 rdb 启动效率低。</p><h2 id="9、Redis-常见性能问题和解决方案："><a href="#9、Redis-常见性能问题和解决方案：" class="headerlink" title="9、Redis 常见性能问题和解决方案："></a>9、Redis 常见性能问题和解决方案：</h2><p>（1）Master 最好不要写内存快照，如果 Master 写内存快照，save 命令调度 rdbSave函数，会阻塞主线程的工作，当快照比较大时对性能影响是非常大的，会间断性暂停服务</p><p>（2）如果数据比较重要，某个 Slave 开启 AOF 备份数据，策略设置为每秒同步一</p><p>（3）为了主从复制的速度和连接的稳定性，Master 和 Slave 最好在同一个局域网</p><p>（4）尽量避免在压力很大的主库上增加从</p><p>（5）主从复制不要用图状结构，用单向链表结构更为稳定，即：Master &lt;- Slave1&lt;- Slave2 &lt;- Slave3…这样的结构方便解决单点故障问题，实现 Slave 对 Master的替换。如果 Master 挂了，可以立刻启用 Slave1 做 Master，其他不变。</p><h2 id="10、redis-过期键的删除策略？"><a href="#10、redis-过期键的删除策略？" class="headerlink" title="10、redis 过期键的删除策略？"></a>10、redis 过期键的删除策略？</h2><p>（1）定时删除：在设置键的过期时间的同时，创建一个定时器 timer。让定时器在键的过期时间来临时，立即执行对键的删除操作。</p><p>（2）惰性删除：放任键过期不管，但是每次从键空间中获取键时，都检查取得的键是否过期，如果过期的话，就删除该键;如果没有过期，就返回该键。</p><p>（3）定期删除：每隔一段时间程序就对数据库进行一次检查，删除里面的过期键。至于要删除多少过期键，以及要检查多少个数据库，则由算法决定。</p><h2 id="11、Redis-的回收策略（淘汰策略）"><a href="#11、Redis-的回收策略（淘汰策略）" class="headerlink" title="11、Redis 的回收策略（淘汰策略）?"></a>11、Redis 的回收策略（淘汰策略）?</h2><p>volatile-lru：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰</p><p>volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰</p><p>volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰</p><p>allkeys-lru：从数据集（server.db[i].dict）中挑选最近最少使用的数据淘汰</p><p>allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰</p><p>no-enviction（驱逐）：禁止驱逐数据</p><p>注意这里的 6 种机制，volatile 和 allkeys 规定了是对已设置过期时间的数据集淘汰数据还是从全部数据集淘汰数据，后面的 lru、ttl 以及 random 是三种不同的淘汰策略，再加上一种 no-enviction 永不回收的策略。</p><p>使用策略规则：</p><p>（1）如果数据呈现幂律分布，也就是一部分数据访问频率高，一部分数据访问频率低，则使用 allkeys-lru</p><p>（2）如果数据呈现平等分布，也就是所有的数据访问频率都相同，则使用allkeys-random</p><h2 id="12、为什么-redis-需要把所有数据放到内存中？"><a href="#12、为什么-redis-需要把所有数据放到内存中？" class="headerlink" title="12、为什么 redis 需要把所有数据放到内存中？"></a>12、为什么 redis 需要把所有数据放到内存中？</h2><p>答 ：Redis 为了达到最快的读写速度将数据都读到内存中，并通过异步的方式将数据写入磁盘。所以 redis 具有快速和数据持久化的特征。如果不将数据放在内存中，磁盘 I&#x2F;O 速度为严重影响 redis 的性能。在内存越来越便宜的今天，redis 将会越来越受欢迎。如果设置了最大使用的内存，则数据已有记录数达到内存限值后不能继续插入新值。</p><h2 id="13、Redis-的同步机制了解么？"><a href="#13、Redis-的同步机制了解么？" class="headerlink" title="13、Redis 的同步机制了解么？"></a>13、Redis 的同步机制了解么？</h2><p>Redis 可以使用主从同步，从从同步。第一次同步时，主节点做一次 bgsave，并同时将后续修改操作记录到内存 buffer，待完成后将 rdb 文件全量同步到复制节点，复制节点接受完成后将 rdb 镜像加载到内存。加载完成后，再通知主节点将期间修改的操作记录同步到复制节点进行重放就完成了同步过程。</p><h2 id="14、Pipeline-有什么好处，为什么要用-pipeline？"><a href="#14、Pipeline-有什么好处，为什么要用-pipeline？" class="headerlink" title="14、Pipeline 有什么好处，为什么要用 pipeline？"></a>14、Pipeline 有什么好处，为什么要用 pipeline？</h2><p>可以将多次 IO 往返的时间缩减为一次，前提是 pipeline 执行的指令之间没有因果相关性。使用 redis-benchmark 进行压测的时候可以发现影响 redis 的 QPS峰值的一个重要因素是 pipeline 批次指令的数目。</p><h2 id="15、是否使用过-Redis-集群，集群的原理是什么？"><a href="#15、是否使用过-Redis-集群，集群的原理是什么？" class="headerlink" title="15、是否使用过 Redis 集群，集群的原理是什么？"></a>15、是否使用过 Redis 集群，集群的原理是什么？</h2><p>（1）Redis Sentinal 着眼于高可用，在 master 宕机时会自动将 slave 提升为master，继续提供服务。</p><p>（2）Redis Cluster 着眼于扩展性，在单个 redis 内存不足时，使用 Cluster 进行分片存储。</p><h2 id="16、Redis-集群方案什么情况下会导致整个集群不可用？"><a href="#16、Redis-集群方案什么情况下会导致整个集群不可用？" class="headerlink" title="16、Redis 集群方案什么情况下会导致整个集群不可用？"></a>16、Redis 集群方案什么情况下会导致整个集群不可用？</h2><p>有 A，B，C 三个节点的集群,在没有复制模型的情况下,如果节点 B 失败了，那么整个集群就会以为缺少 5501-11000 这个范围的槽而不可用。</p><h2 id="17、Redis-支持的-Java-客户端都有哪些？官方推荐用哪个？"><a href="#17、Redis-支持的-Java-客户端都有哪些？官方推荐用哪个？" class="headerlink" title="17、Redis 支持的 Java 客户端都有哪些？官方推荐用哪个？"></a>17、Redis 支持的 Java 客户端都有哪些？官方推荐用哪个？</h2><p>Redisson、Jedis、lettuce 等等，官方推荐使用 Redisson。</p><h2 id="18、Jedis-与-Redisson-对比有什么优缺点？"><a href="#18、Jedis-与-Redisson-对比有什么优缺点？" class="headerlink" title="18、Jedis 与 Redisson 对比有什么优缺点？"></a>18、Jedis 与 Redisson 对比有什么优缺点？</h2><p>Jedis 是 Redis 的 Java 实现的客户端，其 API 提供了比较全面的 Redis 命令的支持；Redisson 实现了分布式和可扩展的 Java 数据结构，和 Jedis 相比，功能较为简单，不支持字符串操作，不支持排序、事务、管道、分区等 Redis 特性。</p><p>Redisson 的宗旨是促进使用者对 Redis 的关注分离，从而让使用者能够将精力更集中地放在处理业务逻辑上。</p><h2 id="19、Redis-如何设置密码及验证密码？"><a href="#19、Redis-如何设置密码及验证密码？" class="headerlink" title="19、Redis 如何设置密码及验证密码？"></a>19、Redis 如何设置密码及验证密码？</h2><p>设置密码：config set requirepass 123456</p><p>授权密码：auth 123456</p><h2 id="20、说说-Redis-哈希槽的概念？"><a href="#20、说说-Redis-哈希槽的概念？" class="headerlink" title="20、说说 Redis 哈希槽的概念？"></a>20、说说 Redis 哈希槽的概念？</h2><p>Redis 集群没有使用一致性 hash,而是引入了哈希槽的概念，Redis 集群有16384 个哈希槽，每个 key 通过 CRC16 校验后对 16384 取模来决定放置哪个槽，集群的每个节点负责一部分 hash 槽。</p><h2 id="21、Redis-集群的主从复制模型是怎样的？"><a href="#21、Redis-集群的主从复制模型是怎样的？" class="headerlink" title="21、Redis 集群的主从复制模型是怎样的？"></a>21、Redis 集群的主从复制模型是怎样的？</h2><p>为了使在部分节点失败或者大部分节点无法通信的情况下集群仍然可用，所以集群使用了主从复制模型,每个节点都会有 N-1 个复制品.</p><h2 id="22、Redis-集群会有写操作丢失吗？为什么？"><a href="#22、Redis-集群会有写操作丢失吗？为什么？" class="headerlink" title="22、Redis 集群会有写操作丢失吗？为什么？"></a>22、Redis 集群会有写操作丢失吗？为什么？</h2><p>Redis 并不能保证数据的强一致性，这意味这在实际中集群在特定的条件下可能会丢失写操作。</p><h2 id="23、Redis-集群之间是如何复制的？"><a href="#23、Redis-集群之间是如何复制的？" class="headerlink" title="23、Redis 集群之间是如何复制的？"></a>23、Redis 集群之间是如何复制的？</h2><p>异步复制</p><h2 id="24、Redis-集群最大节点个数是多少？"><a href="#24、Redis-集群最大节点个数是多少？" class="headerlink" title="24、Redis 集群最大节点个数是多少？"></a>24、Redis 集群最大节点个数是多少？</h2><p>16384 个。</p><h2 id="25、Redis-集群如何选择数据库？"><a href="#25、Redis-集群如何选择数据库？" class="headerlink" title="25、Redis 集群如何选择数据库？"></a>25、Redis 集群如何选择数据库？</h2><p>Redis 集群目前无法做数据库选择，默认在 0 数据库。</p><h2 id="26、怎么测试-Redis-的连通性？"><a href="#26、怎么测试-Redis-的连通性？" class="headerlink" title="26、怎么测试 Redis 的连通性？"></a>26、怎么测试 Redis 的连通性？</h2><p>使用 ping 命令。</p><h2 id="27、怎么理解-Redis-事务？"><a href="#27、怎么理解-Redis-事务？" class="headerlink" title="27、怎么理解 Redis 事务？"></a>27、怎么理解 Redis 事务？</h2><p>（1）事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</p><p>（2）事务是一个原子操作：事务中的命令要么全部被执行，要么全部都不执行。</p><h2 id="28、Redis-事务相关的命令有哪几个？"><a href="#28、Redis-事务相关的命令有哪几个？" class="headerlink" title="28、Redis 事务相关的命令有哪几个？"></a>28、Redis 事务相关的命令有哪几个？</h2><p>MULTI、EXEC、DISCARD、WATCH</p><h2 id="29、Redis-key-的过期时间和永久有效分别怎么设置？"><a href="#29、Redis-key-的过期时间和永久有效分别怎么设置？" class="headerlink" title="29、Redis key 的过期时间和永久有效分别怎么设置？"></a>29、Redis key 的过期时间和永久有效分别怎么设置？</h2><p>EXPIRE 和 PERSIST 命令。</p><h2 id="30、Redis-如何做内存优化？"><a href="#30、Redis-如何做内存优化？" class="headerlink" title="30、Redis 如何做内存优化？"></a>30、Redis 如何做内存优化？</h2><p>尽可能使用散列表（hashes），散列表（是说散列表里面存储的数少）使用的内存非常小，所以你应该尽可能的将你的数据模型抽象到一个散列表里面。比如你的 web 系统中有一个用户对象，不要为这个用户的名称，姓氏，邮箱，密码设置单独的 key，而是应该把这个用户的所有信息存储到一张散列表里面。</p><h2 id="31、Redis-回收进程如何工作的？"><a href="#31、Redis-回收进程如何工作的？" class="headerlink" title="31、Redis 回收进程如何工作的？"></a>31、Redis 回收进程如何工作的？</h2><p>一个客户端运行了新的命令，添加了新的数据。Redi 检查内存使用情况，如果大于 maxmemory 的限制, 则根据设定好的策略进行回收。一个新的命令被执行，等等。所以我们不断地穿越内存限制的边界，通过不断达到边界然后不断地回收回到边界以下。如果一个命令的结果导致大量内存被使用（例如很大的集合的交集保存到一个新的键），不用多久内存限制就会被这个内存使用量超越。</p><h2 id="32、都有哪些办法可以降低-Redis-的内存使用情况呢？"><a href="#32、都有哪些办法可以降低-Redis-的内存使用情况呢？" class="headerlink" title="32、都有哪些办法可以降低 Redis 的内存使用情况呢？"></a>32、都有哪些办法可以降低 Redis 的内存使用情况呢？</h2><p>如果你使用的是 32 位的 Redis 实例，可以好好利用 Hash,list,sorted set,set 等集合类型数据，因为通常情况下很多小的 Key-Value 可以用更紧凑的方式存放到一起。</p><h2 id="33、Redis-的内存用完了会发生什么？"><a href="#33、Redis-的内存用完了会发生什么？" class="headerlink" title="33、Redis 的内存用完了会发生什么？"></a>33、Redis 的内存用完了会发生什么？</h2><p>如果达到设置的上限，Redis 的写命令会返回错误信息（但是读命令还可以正常返回）。或者你可以将 Redis 当缓存来使用配置淘汰机制，当 Redis 达到内存上限时会冲刷掉旧的内容。</p><h2 id="34、一个-Redis-实例最多能存放多少的-keys？List、Set、Sorted-Set-他们最多能存放多少元素？"><a href="#34、一个-Redis-实例最多能存放多少的-keys？List、Set、Sorted-Set-他们最多能存放多少元素？" class="headerlink" title="34、一个 Redis 实例最多能存放多少的 keys？List、Set、Sorted Set 他们最多能存放多少元素？"></a>34、一个 Redis 实例最多能存放多少的 keys？List、Set、Sorted Set 他们最多能存放多少元素？</h2><p>理论上 Redis 可以处理多达 232 的 keys，并且在实际中进行了测试，每个实例至少存放了 2 亿 5 千万的 keys。我们正在测试一些较大的值。任何 list、set、和 sorted set 都可以放 232 个元素。换句话说，Redis 的存储极限是系统中的可用内存值。</p><h2 id="35、MySQL-里有-2000w-数据，redis-中只存-20w-的数据，如何保证-redis-中的数据都是热点数据？"><a href="#35、MySQL-里有-2000w-数据，redis-中只存-20w-的数据，如何保证-redis-中的数据都是热点数据？" class="headerlink" title="35、MySQL 里有 2000w 数据，redis 中只存 20w 的数据，如何保证 redis 中的数据都是热点数据？"></a>35、MySQL 里有 2000w 数据，redis 中只存 20w 的数据，如何保证 redis 中的数据都是热点数据？</h2><p>Redis 内存数据集大小上升到一定大小的时候，就会施行数据淘汰策略。</p><p>相关知识：Redis 提供 6 种数据淘汰策略：</p><p>volatile-lru：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰</p><p>volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰</p><p>volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰</p><p>allkeys-lru：从数据集（server.db[i].dict）中挑选最近最少使用的数据淘汰</p><p>allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰</p><p>no-enviction（驱逐）：禁止驱逐数据</p><h2 id="36、Redis-最适合的场景？"><a href="#36、Redis-最适合的场景？" class="headerlink" title="36、Redis 最适合的场景？"></a>36、Redis 最适合的场景？</h2><p>1、会话缓存（Session Cache）</p><p>最常用的一种使用 Redis 的情景是会话缓存（session cache）。用 Redis 缓存会话比其他存储（如 Memcached）的优势在于：Redis 提供持久化。当维护一个不是严格要求一致性的缓存时，如果用户的购物车信息全部丢失，大部分人都会不高兴的，现在，他们还会这样吗？ 幸运的是，随着 Redis 这些年的改进，很容易找到怎么恰当的使用 Redis 来缓存会话的文档。甚至广为人知的商业平台Magento 也提供 Redis 的插件。</p><p>2、全页缓存（FPC）</p><p>除基本的会话 token 之外，Redis 还提供很简便的 FPC 平台。回到一致性问题，即使重启了 Redis 实例，因为有磁盘的持久化，用户也不会看到页面加载速度的下降，这是一个极大改进，类似 PHP 本地 FPC。 再次以 Magento 为例，Magento提供一个插件来使用 Redis 作为全页缓存后端。 此外，对 WordPress 的用户来说，Pantheon 有一个非常好的插件 wp-redis，这个插件能帮助你以最快速度加载你曾浏览过的页面。</p><p>3、队列</p><p>Reids 在内存存储引擎领域的一大优点是提供 list 和 set 操作，这使得 Redis能作为一个很好的消息队列平台来使用。Redis 作为队列使用的操作，就类似于本地程序语言（如 Python）对 list 的 push&#x2F;pop 操作。 如果你快速的在 Google中搜索“Redis queues”，你马上就能找到大量的开源项目，这些项目的目的就是利用 Redis 创建非常好的后端工具，以满足各种队列需求。例如，Celery 有一个后台就是使用 Redis 作为 broker，你可以从这里去查看。</p><p>4，排行榜&#x2F;计数器</p><p>Redis 在内存中对数字进行递增或递减的操作实现的非常好。集合（Set）和有序集合（Sorted Set）也使得我们在执行这些操作的时候变的非常简单，Redis 只是正好提供了这两种数据结构。所以，我们要从排序集合中获取到排名最靠前的 10个用户–我们称之为“user_scores”，我们只需要像下面一样执行即可： 当然，这是假定你是根据你用户的分数做递增的排序。如果你想返回用户及用户的分数，你需要这样执行： ZRANGE user_scores 0 10 WITHSCORES Agora Games 就是一个很好的例子，用 Ruby 实现的，它的排行榜就是使用 Redis 来存储数据的，你可以在这里看到。</p><p>5、发布&#x2F;订阅</p><p>最后（但肯定不是最不重要的）是 Redis 的发布&#x2F;订阅功能。发布&#x2F;订阅的使用场景确实非常多。我已看见人们在社交网络连接中使用，还可作为基于发布&#x2F;订阅的脚本触发器，甚至用 Redis 的发布&#x2F;订阅功能来建立聊天系统！</p><h2 id="37、假如-Redis-里面有-1-亿个-key，其中有-10w-个-key-是以某个固定的已知的前缀开头的，如果将它们全部找出来？"><a href="#37、假如-Redis-里面有-1-亿个-key，其中有-10w-个-key-是以某个固定的已知的前缀开头的，如果将它们全部找出来？" class="headerlink" title="37、假如 Redis 里面有 1 亿个 key，其中有 10w 个 key 是以某个固定的已知的前缀开头的，如果将它们全部找出来？"></a>37、假如 Redis 里面有 1 亿个 key，其中有 10w 个 key 是以某个固定的已知的前缀开头的，如果将它们全部找出来？</h2><p>使用 keys 指令可以扫出指定模式的 key 列表。</p><p>对方接着追问：如果这个 redis 正在给线上的业务提供服务，那使用 keys 指令会有什么问题？</p><p>这个时候你要回答 redis 关键的一个特性：redis 是单线程的。keys 指令会导致线程阻塞一段时间，线上服务会停顿，直到指令执行完毕，服务才能恢复。这个时候可以使用 scan 指令，scan 指令可以无阻塞的提取出指定模式的 key 列表，但是会有一定的重复概率，在客户端做一次去重就可以了，但是整体所花费的时间会比直接用 keys 指令长。</p><h2 id="38、如果有大量的-key-需要设置同一时间过期，一般需要注意什么？"><a href="#38、如果有大量的-key-需要设置同一时间过期，一般需要注意什么？" class="headerlink" title="38、如果有大量的 key 需要设置同一时间过期，一般需要注意什么？"></a>38、如果有大量的 key 需要设置同一时间过期，一般需要注意什么？</h2><p>如果大量的 key 过期时间设置的过于集中，到过期的那个时间点，redis 可能会出现短暂的卡顿现象。一般需要在时间上加一个随机值，使得过期时间分散一些。</p><h2 id="39、使用过-Redis-做异步队列么，你是怎么用的？"><a href="#39、使用过-Redis-做异步队列么，你是怎么用的？" class="headerlink" title="39、使用过 Redis 做异步队列么，你是怎么用的？"></a>39、使用过 Redis 做异步队列么，你是怎么用的？</h2><p>一般使用 list 结构作为队列，rpush 生产消息，lpop 消费消息。当 lpop 没有消息的时候，要适当 sleep 一会再重试。如果对方追问可不可以不用 sleep 呢？list 还有个指令叫 blpop，在没有消息的时候，它会阻塞住直到消息到来。如果对方追问能不能生产一次消费多次呢？使用 pub&#x2F;sub 主题订阅者模式，可以实现1:N 的消息队列。</p><p>如果对方追问 pub&#x2F;sub 有什么缺点？</p><p>在消费者下线的情况下，生产的消息会丢失，得使用专业的消息队列如 RabbitMQ等。</p><p>如果对方追问 redis 如何实现延时队列？</p><p>我估计现在你很想把面试官一棒打死如果你手上有一根棒球棍的话，怎么问的这么详细。但是你很克制，然后神态自若的回答道：使用 sortedset，拿时间戳作为score，消息内容作为 key 调用 zadd 来生产消息，消费者用 zrangebyscore 指令获取 N 秒之前的数据轮询进行处理。到这里，面试官暗地里已经对你竖起了大拇指。但是他不知道的是此刻你却竖起了中指，在椅子背后。</p><h2 id="40、使用过-Redis-分布式锁么，它是什么回事？"><a href="#40、使用过-Redis-分布式锁么，它是什么回事？" class="headerlink" title="40、使用过 Redis 分布式锁么，它是什么回事？"></a>40、使用过 Redis 分布式锁么，它是什么回事？</h2><p>先拿 setnx 来争抢锁，抢到之后，再用 expire 给锁加一个过期时间防止锁忘记了释放。</p><p>这时候对方会告诉你说你回答得不错，然后接着问如果在 setnx 之后执行 expire 之前进程意外 crash 或者要重启维护了，那会怎么样？这时候你要给予惊讶的反馈：唉，是喔，这个锁就永远得不到释放了。紧接着你需要抓一抓自己得脑袋，故作思考片刻，好像接下来的结果是你主动思考出来的，然后回我记得 set 指令有非常复杂的参数，这个应该是可以同时把 setnx 和 expire 合成一条指令来用的！对方这时会显露笑容，心里开始默念：摁，这小子还不错。</p>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx 常用命令</title>
    <link href="/posts/ffa59763/"/>
    <url>/posts/ffa59763/</url>
    
    <content type="html"><![CDATA[<h1 id="测试文件是否正确"><a href="#测试文件是否正确" class="headerlink" title="测试文件是否正确"></a>测试文件是否正确</h1><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">nginx</span> -t<br></code></pre></td></tr></table></figure><h1 id="指定外部配置文件"><a href="#指定外部配置文件" class="headerlink" title="指定外部配置文件"></a>指定外部配置文件</h1><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">nginx</span> -c &lt;path_to_config&gt;<br></code></pre></td></tr></table></figure><h1 id="显示-nginx-版本号"><a href="#显示-nginx-版本号" class="headerlink" title="显示 nginx 版本号"></a>显示 nginx 版本号</h1><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">nginx</span> -v<br></code></pre></td></tr></table></figure><h1 id="显示-nginx-的版本号以及编译环境信息以及编译时的参数"><a href="#显示-nginx-的版本号以及编译环境信息以及编译时的参数" class="headerlink" title="显示 nginx 的版本号以及编译环境信息以及编译时的参数"></a>显示 nginx 的版本号以及编译环境信息以及编译时的参数</h1><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">nginx</span> -V<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gitkraken 破解</title>
    <link href="/posts/8aace767/"/>
    <url>/posts/8aace767/</url>
    
    <content type="html"><![CDATA[<h1 id="1-下载客户端"><a href="#1-下载客户端" class="headerlink" title="1. 下载客户端"></a>1. 下载客户端</h1><ul><li><a href="https://474b.com/file/21384459-442883642">gitkraken windows版本 6.5.1下载地址-1</a></li><li><a href="https://release.axocdn.com/win64/GitKrakenSetup-6.5.0.exe">gitkraken windows版本 6.5.1下载地址-2</a></li><li><a href="https://474b.com/file/21384459-442883514">gitkraken Mac版本 6.5.1下载地址</a></li><li><a href="https://474b.com/file/21384459-442883174">gitkraken linux deb 6.5.1下载地址</a></li></ul><h1 id="2-屏蔽更新host"><a href="#2-屏蔽更新host" class="headerlink" title="2. 屏蔽更新host"></a>2. 屏蔽更新host</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"># gitKraken 更新屏蔽<br><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span> release<span class="hljs-selector-class">.gitkraken</span><span class="hljs-selector-class">.com</span><br></code></pre></td></tr></table></figure><h1 id="3-打开gitkraken并登陆"><a href="#3-打开gitkraken并登陆" class="headerlink" title="3. 打开gitkraken并登陆"></a>3. 打开gitkraken并登陆</h1><h1 id="4-下载破解脚本"><a href="#4-下载破解脚本" class="headerlink" title="4. 下载破解脚本"></a>4. 下载破解脚本</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/5cr1pt/GitCracken.git<br>cd GitCracken/GitCracken<br>rm yarn.lock<br>yarn install<br>yarn build<br><span class="hljs-meta prompt_"># </span><span class="language-bash">windows gitbash</span><br>node dist/bin/gitcracken.js patcher --asar ~/AppData/Local/gitkraken/app-6.5.0/resources/app.asar<br><span class="hljs-meta prompt_"># </span><span class="language-bash">mac</span> <br>node dist/bin/gitcracken.js patcher --asar 你的gitkraken的目录/resources/app.asar<br></code></pre></td></tr></table></figure><h1 id="5-禁用更新"><a href="#5-禁用更新" class="headerlink" title="5. 禁用更新"></a>5. 禁用更新</h1><p>删掉Update.exe, 查找和Gitkraken目录有关的Update.exe(一般在<code>C:\Users\你的用户名\AppData\Local\gitkraken</code>目录下)。</p><hr><p>参考：</p><p><a href="https://github.com/KillWolfVlad/GitKraken-AUR">插件github</a></p><p><a href="https://github.com/5cr1pt/GitCracken/tree/master/GitCracken">破解插件</a></p><p><a href="https://www.v2ex.com/t/645112">才发现 gitkraken 现在要给钱才能打开私有库了</a></p>]]></content>
    
    
    <categories>
      
      <category>破解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>破解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>黑苹果常见错误</title>
    <link href="/posts/42c32bc5/"/>
    <url>/posts/42c32bc5/</url>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="解决-App-Store-无法登录"><a href="#解决-App-Store-无法登录" class="headerlink" title="解决 App Store 无法登录"></a>解决 App Store 无法登录</h2><p>打开终端，输入命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo nvram -cPassword:nvram: Error clearing firmware variables: (iokit/common) not permitted<br></code></pre></td></tr></table></figure><p>输入用户密码，然后回车，不必理会提示信息，然后重启</p><h2 id="BIOS-未禁用-CFG-LOCK-选项"><a href="#BIOS-未禁用-CFG-LOCK-选项" class="headerlink" title="BIOS 未禁用 CFG LOCK 选项"></a>BIOS 未禁用 CFG LOCK 选项</h2><p>相关错误信息：</p><ul><li><strong>卡在 <code>[EB|#LOG:EXITBS:START]</code></strong></li></ul><p>某些用户会忘记或无法禁用BIOS中的CFG-Lock(特别是与用于电源管理的锁定0xE2 MSR位有关，显然更安全地关闭CFG-Lock)。**&#x3D;&#x3D;请注意，这仅适用于Intel用户，不适用于AMD&#x3D;&#x3D;。**发生这种情况时，有几个可能的解决方法：</p><p>开<code>OpenCore</code>的配置文件<code>config.plist</code>，勾选如下三个选项：</p><ul><li><code>Kernel</code> -&gt; <code>Quirks</code><ul><li><code>AppleCpuPmCfgLock</code></li><li><code>AppleXcpmCfgLock</code></li></ul></li><li><code>UEFI</code> -&gt; <code>Quirks</code><ul><li><code>IgnoreInvalidFlexRatio</code></li></ul></li></ul><img src="/posts/42c32bc5/image-20230319221225660.png" alt="image-20230319221225660" style="zoom:67%;"><img src="/posts/42c32bc5/image-20230319221303369.png" alt="image-20230319221303369" style="zoom:67%;"><h2 id="BIOS-重设或重启-x2F-关机后发送到安全模式"><a href="#BIOS-重设或重启-x2F-关机后发送到安全模式" class="headerlink" title="BIOS 重设或重启 &#x2F; 关机后发送到安全模式"></a>BIOS 重设或重启 &#x2F; 关机后发送到安全模式</h2><p><code>AppleRTC</code> 的问题，很简单的解决方法：</p><ul><li>打开 <code>Config.plist</code> 配置文件：<ul><li><code>Kernel</code> -&gt; <code>Quirks</code> -&gt; <code>DisableRtcChecksum</code></li></ul></li></ul><p><strong>注意</strong>：如果仍然有问题，则需要使用 <code>RTCMemoryFixup.kext</code> 并排除范围。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.cxyzjd.com/article/weixin_33352924/113086729">Big Sur安装常见问题</a></p>]]></content>
    
    
    <categories>
      
      <category>黑苹果</category>
      
    </categories>
    
    
    <tags>
      
      <tag>黑苹果</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jrebel 破解</title>
    <link href="/posts/b92b7720/"/>
    <url>/posts/b92b7720/</url>
    
    <content type="html"><![CDATA[<h1 id="1-生成-GUID-的网址"><a href="#1-生成-GUID-的网址" class="headerlink" title="1. 生成 GUID 的网址"></a>1. 生成 GUID 的网址</h1><p><a href="https://www.guidgen.com/">https://www.guidgen.com/</a></p><h1 id="2-用这个网址-生成的-GUID-激活"><a href="#2-用这个网址-生成的-GUID-激活" class="headerlink" title="2. 用这个网址 + 生成的 GUID 激活"></a>2. 用这个网址 + 生成的 GUID 激活</h1><p><a href="https://jrebel.qekang.com/">https://jrebel.qekang.com/</a></p><p>例如:</p><p><a href="https://jrebel.qekang.com/738b776f-6cc9-4ac5-9574-960a057392db">https://jrebel.qekang.com/738b776f-6cc9-4ac5-9574-960a057392db</a></p><img src="/posts/b92b7720/image-20210123170510215.png" alt="image-20210123170510215" style="zoom: 33%;"><h1 id="3-设置离线模式-来防止失效"><a href="#3-设置离线模式-来防止失效" class="headerlink" title="3. 设置离线模式 来防止失效"></a>3. 设置离线模式 来防止失效</h1><img src="/posts/b92b7720/image-20210123170220875.png" alt="image-20210123170220875" style="zoom: 33%;">]]></content>
    
    
    <categories>
      
      <category>破解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>破解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>rabbitmq 面试题</title>
    <link href="/posts/217b8ff8/"/>
    <url>/posts/217b8ff8/</url>
    
    <content type="html"><![CDATA[<h2 id="消息堆积"><a href="#消息堆积" class="headerlink" title="消息堆积"></a>消息堆积</h2><p>一个消费者一秒是 1000 条，一秒 3 个消费者是 3000 条，一分钟就是 18 万条。所以如果你积压了几百万到上千万的数据，即使消费者恢复了，也需要大概 1 小时的时间才能恢复过来。</p><p>一般这个时候，只能临时紧急扩容了，具体操作步骤和思路如下：</p><p>先修复 consumer 的问题，确保其恢复消费速度，然后将现有 consumer 都停掉。<br>新建一个 topic，partition 是原来的 10 倍，临时建立好原先 10 倍的 queue 数量。<br>然后写一个临时的分发数据的 consumer 程序，这个程序部署上去消费积压的数据，消费之后不做耗时的处理，直接均匀轮询写入临时建立好的 10 倍数量的 queue。<br>接着临时征用 10 倍的机器来部署 consumer，每一批 consumer 消费一个临时 queue 的数据。这种做法相当于是临时将 queue 资源和 consumer 资源扩大 10 倍，以正常的 10 倍速度来消费数据。<br>等快速消费完积压数据之后，得恢复原先部署的架构，重新用原先的 consumer 机器来消费消息。<br> mq 中的消息过期失效了</p><p>假设你用的是 RabbitMQ，RabbtiMQ 是可以设置过期时间的，也就是 TTL。如果消息在 queue 中积压超过一定的时间就会被 RabbitMQ 给清理掉，这个数据就没了。那这就是第二个坑了。这就不是说数据会大量积压在 mq 里，而是大量的数据会直接搞丢。</p><p>这个情况下，就不是说要增加 consumer 消费积压的消息，因为实际上没啥积压，而是丢了大量的消息。我们可以采取一个方案，就是批量重导，这个我们之前线上也有类似的场景干过。就是大量积压的时候，我们当时就直接丢弃数据了，然后等过了高峰期以后，比如大家一起喝咖啡熬夜到晚上12点以后，用户都睡觉了。这个时候我们就开始写程序，将丢失的那批数据，写个临时程序，一点一点的查出来，然后重新灌入 mq 里面去，把白天丢的数据给他补回来。也只能是这样了。</p><p>假设 1 万个订单积压在 mq 里面，没有处理，其中 1000 个订单都丢了，你只能手动写程序把那 1000 个订单给查出来，手动发到 mq 里去再补一次。</p><p>mq 都快写满了</p><p>如果消息积压在mq里，你很长时间都没有处理掉，此时导致mq都快写满了，咋办？这个还有别的办法吗？没有，谁让你第一个方案执行的太慢了，你临时写程序，接入数据来消费，消费一个丢弃一个，都不要了，快速消费掉所有的消息。然后走第二个方案，到了晚上再补数据吧。</p><h2 id="confirm机制投递消息的高延迟性"><a href="#confirm机制投递消息的高延迟性" class="headerlink" title="confirm机制投递消息的高延迟性"></a><strong>confirm机制投递消息的高延迟性</strong></h2><p>绝对不能以同步写消息 + 等待ack的方式来投递消息，用来临时存放未ack消息的存储需要承载高并发写入，而且我们不需要什么复杂的运算操作，这种存储首选绝对不是MySQL之类的关系数据库，而<strong>建议采用kv存储</strong>。kv存储承载高并发能力极强，而且kv操作性能很高。</p><p>生产者消息投递出去之后并且在kv存储器存储，这个投递的线程其实就可以返回了，至于每个消息的异步回调，是通过在channel注册一个confirm监听器实现的。生产者收到一个消息ack之后，就从kv存储中删除这条临时消息；收到一个消息nack之后，就从kv存储提取这条消息然后重新投递一次即可；也可以自己对kv存储里的消息做监控，如果超过一定时长没收到ack，就主动重发消息。</p><p><strong>异步confirm模式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> channelManager.getPublisherChannel(namespaceName);<br><span class="hljs-type">ProxiedConfirmListener</span> <span class="hljs-variable">confirmListener</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProxiedConfirmListener</span>();<span class="hljs-comment">//监听类</span><br>confirmListener.setChannelManager(channelManager);<br>confirmListener.setChannel(channel);<br>confirmListener.setNamespace(namespaceName);<br>confirmListener.addSuccessCallbacks(successCallbacks);<br>channel.addConfirmListener(confirmListener);<br>channel.confirmSelect();<span class="hljs-comment">//开启confirm模式</span><br>AMQP.<span class="hljs-type">BasicProperties</span> <span class="hljs-variable">messageProperties</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (message.getProperty() <span class="hljs-keyword">instanceof</span> AMQP.BasicProperties) &#123;<br>    messageProperties = (AMQP.BasicProperties) message.getProperty();<br>&#125;<br>confirmListener.toConfirm(channel.getNextPublishSeqNo(), rawMsg);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">50</span>;i++)&#123;<br>    channel.basicPublish(<br>            exchange, routingKey,<br>            mandatory, immediate,<br>            messageProperties,<br>            message.getContent()<br>    );<br>&#125;<br></code></pre></td></tr></table></figure><p>异步模式需要自己多写一部分复杂的代码实现，异步监听类，监听server端的通知消息，异步的好处性能会大幅度提升，发送完毕之后，可以继续发送其他消息。 MQServer通知生产端ConfirmListener监听类：用户可以继承接口实现自己的实现类，处理消息确认机制，此处继承类代码省略，就是上面 ProxiedConfirmListener 类： 下面贴下要实现的接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.rabbitmq.client;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Implement this interface in order to be notified of Confirm events.</span><br><span class="hljs-comment"> * Acks represent messages handled successfully; Nacks represent</span><br><span class="hljs-comment"> * messages lost by the broker.  Note, the lost messages could still</span><br><span class="hljs-comment"> * have been delivered to consumers, but the broker cannot guarantee</span><br><span class="hljs-comment"> * this.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ConfirmListener</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    ** handleAck RabbitMQ消息接收成功的方法，成功后业务可以做的事情</span><br><span class="hljs-comment">    ** 发送端投递消息前，需要把消息先存起来，比如用KV存储，接收到ack后删除</span><br><span class="hljs-comment">    **/</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleAck</span><span class="hljs-params">(<span class="hljs-type">long</span> deliveryTag, <span class="hljs-type">boolean</span> multiple)</span><br>        <span class="hljs-keyword">throws</span> IOException;<br><br>    <span class="hljs-comment">//handleNack RabbitMQ消息接收失败的通知方法，用户可以在这里重新投递消息</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleNack</span><span class="hljs-params">(<span class="hljs-type">long</span> deliveryTag, <span class="hljs-type">boolean</span> multiple)</span><br>        <span class="hljs-keyword">throws</span> IOException;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>rabbitmq</tag>
      
    </tags>
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>关于</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<p>欢迎体验 <a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid</a> ，这是一款 Material Design 风格的 Hexo 主题，以简约的设计帮助你专注于写作。</p><p>该主题相较于其他主题的优势：</p><ol><li>设计遵循简洁至上，同时具有轻快的体验，和优雅的颜值；</li><li>提供大量定制化配置项，使每个用户使用该主题都能具有独特的样式；</li><li>响应式页面，适配手机、平板等设备</li></ol>]]></content>
    
  </entry>
  
  
  
</search>
