<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yahya的博客</title>
  
  <subtitle>学习笔记</subtitle>
  <link href="https://blog.yahyav2rayssr.top/atom.xml" rel="self"/>
  
  <link href="https://blog.yahyav2rayssr.top/"/>
  <updated>2023-04-17T13:59:57.801Z</updated>
  <id>https://blog.yahyav2rayssr.top/</id>
  
  <author>
    <name>Yahya</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Springboot 常用配置</title>
    <link href="https://blog.yahyav2rayssr.top/posts/fd57e58c/"/>
    <id>https://blog.yahyav2rayssr.top/posts/fd57e58c/</id>
    <published>2023-04-17T13:59:57.800Z</published>
    <updated>2023-04-17T13:59:57.801Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="SpringBoot-指定-logback-配置文件"><a href="#SpringBoot-指定-logback-配置文件" class="headerlink" title="SpringBoot 指定 logback 配置文件"></a>SpringBoot 指定 logback 配置文件</h2><p>我们可以在springboot的配置文件中指明使用哪个xml作为logger的配置，比如：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">logging.config</span>=<span class="hljs-string">classpath:logback-spring-dev.xml</span><br></code></pre></td></tr></table></figure><p>如果不指定，则会按照<code>logback.xml</code> -&gt; <code>application.yml</code> -&gt; <code>logback-spring.xml</code>的顺序去查找是否存在默认的配置。</p><p>如果是命令行下进行指定，可以按下面的方式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">java -jar -Dlogging.config=./config/logback-spring.xml your-jar.jar<br></code></pre></td></tr></table></figure><h2 id="SpringProfile-多环境切换"><a href="#SpringProfile-多环境切换" class="headerlink" title="SpringProfile 多环境切换"></a>SpringProfile 多环境切换</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">springProfile</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;local,dev&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;INFO&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;CONSOLE-WITH-COLOR&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;FILE&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">springProfile</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">springProfile</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prod&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;INFO&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;CONSOLE-WITH-COLOR&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;FILE&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">springProfile</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="SpringBoot-设置支持跨域请求"><a href="#SpringBoot-设置支持跨域请求" class="headerlink" title="SpringBoot 设置支持跨域请求"></a>SpringBoot 设置支持跨域请求</h2><p><strong>CORS 常见 header</strong></p><ul><li>Access-Control-Allow-Origin：<a href="http://somehost.com/">http://somehost.com</a> 表示允许<a href="http://somehost.com发起跨域请求/">http://somehost.com发起跨域请求</a>。</li><li>Access-Control-Max-Age：86400 表示在86400秒内不需要再发送预校验请求。</li><li>Access-Control-Allow-Methods：GET,POST,PUT,DELETE 表示允许跨域请求的方法。</li><li>Access-Control-Allow-Headers：content-type 表示允许跨域请求包含content-type</li></ul><h3 id="配置过滤器"><a href="#配置过滤器" class="headerlink" title="配置过滤器"></a>配置过滤器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GlobalCorsConfig</span> &#123;<br>    <br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> CorsFilter <span class="hljs-title function_">corsFilter</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//1.添加CORS配置信息</span><br>        <span class="hljs-type">CorsConfiguration</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CorsConfiguration</span>();<br>          <span class="hljs-comment">//放行哪些原始域</span><br>          config.addAllowedOrigin(<span class="hljs-string">&quot;*&quot;</span>);<br>          <span class="hljs-comment">//是否发送Cookie信息</span><br>          config.setAllowCredentials(<span class="hljs-literal">true</span>);<br>          <span class="hljs-comment">//放行哪些原始域(请求方式)</span><br>          config.addAllowedMethod(<span class="hljs-string">&quot;*&quot;</span>);<br>          <span class="hljs-comment">//放行哪些原始域(头部信息)</span><br>          config.addAllowedHeader(<span class="hljs-string">&quot;*&quot;</span>);<br>          <span class="hljs-comment">//暴露哪些头部信息（因为跨域访问默认不能获取全部头部信息）</span><br>          config.addExposedHeader(<span class="hljs-string">&quot;*&quot;</span>);<br><br>        <span class="hljs-comment">//2.添加映射路径</span><br>        <span class="hljs-type">UrlBasedCorsConfigurationSource</span> <span class="hljs-variable">configSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UrlBasedCorsConfigurationSource</span>();<br>        configSource.registerCorsConfiguration(<span class="hljs-string">&quot;/**&quot;</span>, config);<br><br>        <span class="hljs-comment">//3.返回新的CorsFilter.</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CorsFilter</span>(configSource);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="配置拦截器"><a href="#配置拦截器" class="headerlink" title="配置拦截器"></a>配置拦截器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConfiguration</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebMvcConfigurerAdapter</span>  &#123;<br><br><span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCorsMappings</span><span class="hljs-params">(CorsRegistry registry)</span> &#123;  <br>        registry.addMapping(<span class="hljs-string">&quot;/**&quot;</span>)  <br>                .allowCredentials(<span class="hljs-literal">true</span>)  <br>                .allowedHeaders(<span class="hljs-string">&quot;*&quot;</span>)  <br>                .allowedOrigins(<span class="hljs-string">&quot;*&quot;</span>)  <br>                .allowedMethods(<span class="hljs-string">&quot;*&quot;</span>);  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="重写-WebMvcConfigurer"><a href="#重写-WebMvcConfigurer" class="headerlink" title="重写 WebMvcConfigurer"></a>重写 WebMvcConfigurer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GlobalCorsConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> WebMvcConfigurer <span class="hljs-title function_">corsConfigurer</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebMvcConfigurer</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-comment">//重写父类提供的跨域请求处理的接口</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCorsMappings</span><span class="hljs-params">(CorsRegistry registry)</span> &#123;<br>                <span class="hljs-comment">//添加映射路径</span><br>                registry.addMapping(<span class="hljs-string">&quot;/**&quot;</span>)<br>                        <span class="hljs-comment">//放行哪些原始域</span><br>                        .allowedOrigins(<span class="hljs-string">&quot;*&quot;</span>)<br>                        <span class="hljs-comment">//是否发送Cookie信息</span><br>                        .allowCredentials(<span class="hljs-literal">true</span>)<br>                        <span class="hljs-comment">//放行哪些原始域(请求方式)</span><br>                        .allowedMethods(<span class="hljs-string">&quot;GET&quot;</span>,<span class="hljs-string">&quot;POST&quot;</span>, <span class="hljs-string">&quot;PUT&quot;</span>, <span class="hljs-string">&quot;DELETE&quot;</span>)<br>                        <span class="hljs-comment">//放行哪些原始域(头部信息)</span><br>                        .allowedHeaders(<span class="hljs-string">&quot;*&quot;</span>)<br>                        <span class="hljs-comment">//暴露哪些头部信息（因为跨域访问默认不能获取全部头部信息）</span><br>                        .exposedHeaders(<span class="hljs-string">&quot;Header1&quot;</span>, <span class="hljs-string">&quot;Header2&quot;</span>);<br>            &#125;<br>        &#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="CrossOrigin-注解"><a href="#CrossOrigin-注解" class="headerlink" title="@CrossOrigin 注解"></a>@CrossOrigin 注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br><span class="hljs-meta">@CrossOrigin(&quot;http://localhost:8080&quot;)</span> <br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">( )</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello World&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>或者在控制器（@Controller）上使用注解 @CrossOrigin ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@CrossOrigin(origins = &quot;http://xx-domain.com&quot;, maxAge = 3600)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AccountController</span> &#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">( )</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello World&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>手工设置响应头（局部跨域 ）</li></ol><p>使用HttpServletResponse对象添加响应头（Access-Control-Allow-Origin）来授权原始域，这里Origin的值也可以设置为”*” ，表示全部放行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">(HttpServletResponse response)</span>&#123;<br>    response.addHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="hljs-string">&quot;http://localhost:8080&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello World&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="SpringBoot-配置Filter过滤器"><a href="#SpringBoot-配置Filter过滤器" class="headerlink" title="SpringBoot 配置Filter过滤器"></a>SpringBoot 配置Filter过滤器</h2><h3 id="通过-WebFilter-注解来配置"><a href="#通过-WebFilter-注解来配置" class="headerlink" title="通过 @WebFilter 注解来配置"></a>通过 @WebFilter 注解来配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@WebFilter(urlPatterns = &quot;/webapi/*&quot;, filterName = &quot;authFilter&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    ......<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="通过-Bean-注解来配置"><a href="#通过-Bean-注解来配置" class="headerlink" title="通过 @Bean 注解来配置"></a>通过 @Bean 注解来配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> FilterRegistrationBean <span class="hljs-title function_">testFilterRegistration</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">FilterRegistrationBean</span> <span class="hljs-variable">registration</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterRegistrationBean</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TestFilter</span>());<br>registration.addUrlPatterns(<span class="hljs-string">&quot;/webapi/*&quot;</span>); <span class="hljs-comment">//</span><br>registration.addInitParameter(<span class="hljs-string">&quot;paramName&quot;</span>, <span class="hljs-string">&quot;paramValue&quot;</span>); <span class="hljs-comment">//</span><br>registration.setName(<span class="hljs-string">&quot;testFilter&quot;</span>);<br><span class="hljs-keyword">return</span> registration;<br>&#125;<br></code></pre></td></tr></table></figure><p>那如果有多个过虑器，怎么指定执行的顺序呢？</p><blockquote><p>注意：</p><p>1、如果指定了 Order 属性，执行的顺序与注册的顺序是无关的；</p><p>2、数字越小，优先级越高；</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> FilterRegistrationBean <span class="hljs-title function_">testFilterRegistration</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">FilterRegistrationBean</span> <span class="hljs-variable">registration</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterRegistrationBean</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TestFilter</span>());<br>registration.addUrlPatterns(<span class="hljs-string">&quot;/webapi/*&quot;</span>); <span class="hljs-comment">//</span><br>registration.addInitParameter(<span class="hljs-string">&quot;paramName&quot;</span>, <span class="hljs-string">&quot;paramValue&quot;</span>); <span class="hljs-comment">//</span><br>registration.setName(<span class="hljs-string">&quot;testFilter&quot;</span>);<br>registration.setOrder(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">return</span> registration;<br>&#125;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> FilterRegistrationBean <span class="hljs-title function_">authFilterRegistration</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">FilterRegistrationBean</span> <span class="hljs-variable">registration</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterRegistrationBean</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AuthFilter</span>());<br>registration.addUrlPatterns(<span class="hljs-string">&quot;/webapi/*&quot;</span>); <span class="hljs-comment">//</span><br>registration.addInitParameter(<span class="hljs-string">&quot;paramName&quot;</span>, <span class="hljs-string">&quot;paramValue&quot;</span>); <span class="hljs-comment">//</span><br>registration.setName(<span class="hljs-string">&quot;authFilter&quot;</span>);<br>registration.setOrder(<span class="hljs-number">2</span>);<br><span class="hljs-keyword">return</span> registration;<br>&#125;<br></code></pre></td></tr></table></figure><p>获取<code>spring.profiles.active</code>值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProfileUtil</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApplicationContextAware</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setApplicationContext</span><span class="hljs-params">(ApplicationContext applicationContext)</span><br>            <span class="hljs-keyword">throws</span> BeansException &#123;<br>        <span class="hljs-built_in">this</span>.context = applicationContext;<br>    &#125;<br><br>    <span class="hljs-comment">// 获取当前环境参数  exp: dev,prod,test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getActiveProfile</span><span class="hljs-params">()</span> &#123;<br>        String[] profiles = context.getEnvironment().getActiveProfiles();<br>        <span class="hljs-keyword">if</span>(!ArrayUtils.isEmpty(profiles))&#123;<br>            <span class="hljs-keyword">return</span> profiles[<span class="hljs-number">0</span>];<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="捕获-NoHandlerFoundException"><a href="#捕获-NoHandlerFoundException" class="headerlink" title="捕获 NoHandlerFoundException"></a>捕获 NoHandlerFoundException</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">mvc:</span><br>    <span class="hljs-attr">static-path-pattern:</span> <span class="hljs-string">/statics/**</span><br>    <span class="hljs-attr">throw-exception-if-no-handler-found:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h2 id="RequestContextHolder-getRequestAttributes-空指针问题"><a href="#RequestContextHolder-getRequestAttributes-空指针问题" class="headerlink" title="RequestContextHolder.getRequestAttributes() 空指针问题"></a>RequestContextHolder.getRequestAttributes() 空指针问题</h2><p>增加以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> RequestContextListener <span class="hljs-title function_">requestContextListener</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestContextListener</span>();<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><p>@ConditionalOnBean：当容器里有指定Bean的条件下</p></li><li><p>@ConditionalOnClass：当类路径下有指定的类的条件下</p></li><li><p>@ConditionalOnExpression：基于SpEL表达式为true的时候作为判断条件才去实例化</p></li><li><p>@ConditionalOnJava：基于JVM版本作为判断条件</p></li><li><p>@ConditionalOnJndi：在JNDI存在的条件下查找指定的位置</p></li><li><p>@ConditionalOnMissingBean：当容器里没有指定Bean的情况下</p></li><li><p>@ConditionalOnMissingClass：当容器里没有指定类的情况下</p></li><li><p>@ConditionalOnWebApplication：当前项目时Web项目的条件下</p></li><li><p>@ConditionalOnNotWebApplication：当前项目不是Web项目的条件下</p></li><li><p>@ConditionalOnProperty：指定的属性是否有指定的值</p></li><li><p>@ConditionalOnResource：类路径是否有指定的值</p></li><li><p>@ConditionalOnOnSingleCandidate：当指定Bean在容器中只有一个，或者有多个但是指定首选的Bean</p></li></ol><h2 id="Import-注解"><a href="#Import-注解" class="headerlink" title="Import 注解"></a>Import 注解</h2><h3 id="普通类"><a href="#普通类" class="headerlink" title="普通类"></a>普通类</h3><p>spring4.2之后<code>@Import</code>注解可以实例化普通类的bean实例。例如：</p><p>先定义Role类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Role</span> &#123;<br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String name;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后在任意配置类上导入Role类，<code>@Import</code>支持同时导入多个普通类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Import(&#123;Role.class, User.class&#125;)</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-comment">// 配置类</span><br></code></pre></td></tr></table></figure><h3 id="Configuration类"><a href="#Configuration类" class="headerlink" title="Configuration类"></a>Configuration类</h3><blockquote><p>如果配置类不在指定的spring扫描目录或者子目录下，则通过<code>@Import</code>注解的导入功能，也能额外扫描到被导入的配置类，适用于多项目工程。</p></blockquote><p>上面介绍了@Import注解导入普通类的方法，它同时也支持导入Configuration类。</p><h3 id="ImportSelector接口"><a href="#ImportSelector接口" class="headerlink" title="ImportSelector接口"></a>ImportSelector接口</h3><p>复杂自定义的配置导入可以实现ImportSelector接口来实现，代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyDataImportSelector</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ImportSelector</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;com.sue.async.service.User&quot;</span>, <span class="hljs-string">&quot;com.sue.async.service.Role&quot;</span>&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>重写<code>selectImports</code>方法，在该方法中指定需要定义bean的类名，注意要包含完整路径，而非相对路径。</p><p>然后用<code>@Import</code>注解导入该类即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Import(&#123;MyDataImportSelector.class&#125;)</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-comment">// 配置类</span><br></code></pre></td></tr></table></figure><h3 id="ImportBeanDefinitionRegistrar接口"><a href="#ImportBeanDefinitionRegistrar接口" class="headerlink" title="ImportBeanDefinitionRegistrar接口"></a>ImportBeanDefinitionRegistrar接口</h3><p>除了能够非常灵活的自定义bean以外，还能自定义bean的名称和作用域等属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomImportSelector</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ImportBeanDefinitionRegistrar</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerBeanDefinitions</span><span class="hljs-params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> &#123;<br>        <span class="hljs-type">RootBeanDefinition</span> <span class="hljs-variable">roleBeanDefinition</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RootBeanDefinition</span>(Role.class);<br>        registry.registerBeanDefinition(<span class="hljs-string">&quot;role&quot;</span>, roleBeanDefinition);<br><br>        <span class="hljs-type">RootBeanDefinition</span> <span class="hljs-variable">userBeanDefinition</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RootBeanDefinition</span>(User.class);<br>        userBeanDefinition.setScope(ConfigurableBeanFactory.SCOPE_PROTOTYPE);<br>        registry.registerBeanDefinition(<span class="hljs-string">&quot;user&quot;</span>, userBeanDefinition);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后通过@Import注解导入该配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Import(&#123;CustomImportSelector.class&#125;)</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-comment">// 配置类</span><br></code></pre></td></tr></table></figure><h2 id="PostProcessor"><a href="#PostProcessor" class="headerlink" title="PostProcessor"></a>PostProcessor</h2><img src="/posts/fd57e58c/b883feb54a6b4e608bd3d133f848de40tplv-k3u1fbpfcp-zoom-1.image" alt="img" style="zoom:50%;"><p>修改应用程序上下文的内部bean定义注册表标准初始化。所有常规bean定义都将被加载，但是还没有bean被实例化。这允许进一步添加在下一个后处理阶段开始之前定义bean。</p><h3 id="BeanDefinitionRegistryPostProcessor-接口"><a href="#BeanDefinitionRegistryPostProcessor-接口" class="headerlink" title="BeanDefinitionRegistryPostProcessor 接口"></a>BeanDefinitionRegistryPostProcessor 接口</h3><p>重写<code>postProcessBeanDefinitionRegistry</code>方法，在该方法中能够获取<code>BeanDefinitionRegistry</code>对象，它负责bean的注册工作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRegistryPostProcessor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanDefinitionRegistryPostProcessor</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postProcessBeanDefinitionRegistry</span><span class="hljs-params">(BeanDefinitionRegistry registry)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        <span class="hljs-type">RootBeanDefinition</span> <span class="hljs-variable">roleBeanDefinition</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RootBeanDefinition</span>(Role.class);<br>        registry.registerBeanDefinition(<span class="hljs-string">&quot;role&quot;</span>, roleBeanDefinition);<br><br>        <span class="hljs-type">RootBeanDefinition</span> <span class="hljs-variable">userBeanDefinition</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RootBeanDefinition</span>(User.class);<br>        userBeanDefinition.setScope(ConfigurableBeanFactory.SCOPE_PROTOTYPE);<br>        registry.registerBeanDefinition(<span class="hljs-string">&quot;user&quot;</span>, userBeanDefinition);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postProcessBeanFactory</span><span class="hljs-params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="BeanFactoryPostProcessor-接口"><a href="#BeanFactoryPostProcessor-接口" class="headerlink" title="BeanFactoryPostProcessor 接口"></a>BeanFactoryPostProcessor 接口</h3><img src="/posts/fd57e58c/555db8a009404ae8bcda8b6a9bd0c0eatplv-k3u1fbpfcp-zoom-1.image" class alt="img"><p>在应用程序上下文的标准bean工厂之后修改其内部bean工厂初始化。所有bean定义都已加载，但没有bean将被实例化。这允许重写或添加属性甚至可以初始化bean。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyPostProcessor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanFactoryPostProcessor</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postProcessBeanFactory</span><span class="hljs-params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        <span class="hljs-type">DefaultListableBeanFactory</span> <span class="hljs-variable">registry</span> <span class="hljs-operator">=</span> (DefaultListableBeanFactory)beanFactory;<br>        <span class="hljs-type">RootBeanDefinition</span> <span class="hljs-variable">roleBeanDefinition</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RootBeanDefinition</span>(Role.class);<br>        registry.registerBeanDefinition(<span class="hljs-string">&quot;role&quot;</span>, roleBeanDefinition);<br><br>        <span class="hljs-type">RootBeanDefinition</span> <span class="hljs-variable">userBeanDefinition</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RootBeanDefinition</span>(User.class);<br>        userBeanDefinition.setScope(ConfigurableBeanFactory.SCOPE_PROTOTYPE);<br>        registry.registerBeanDefinition(<span class="hljs-string">&quot;user&quot;</span>, userBeanDefinition);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>既然这两个接口都能注册bean，那么他们有什么区别？</p><ul><li>BeanDefinitionRegistryPostProcessor 更侧重于bean的注册</li><li>BeanFactoryPostProcessor 更侧重于对已经注册的bean的属性进行修改，虽然也可以注册bean。</li></ul><h3 id="BeanFactoryAware接口"><a href="#BeanFactoryAware接口" class="headerlink" title="BeanFactoryAware接口"></a><del>BeanFactoryAware</del>接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BeanFactoryRegistry</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanFactoryAware</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBeanFactory</span><span class="hljs-params">(BeanFactory beanFactory)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        <span class="hljs-type">DefaultListableBeanFactory</span> <span class="hljs-variable">registry</span> <span class="hljs-operator">=</span> (DefaultListableBeanFactory) beanFactory;<br>        <span class="hljs-type">RootBeanDefinition</span> <span class="hljs-variable">rootBeanDefinition</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RootBeanDefinition</span>(User.class);<br>        registry.registerBeanDefinition(<span class="hljs-string">&quot;user&quot;</span>, rootBeanDefinition);<br><br>        <span class="hljs-type">RootBeanDefinition</span> <span class="hljs-variable">userBeanDefinition</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RootBeanDefinition</span>(User.class);<br>        userBeanDefinition.setScope(ConfigurableBeanFactory.SCOPE_PROTOTYPE);<br>        registry.registerBeanDefinition(<span class="hljs-string">&quot;user&quot;</span>, userBeanDefinition);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><img src="/posts/fd57e58c/da87ec4ada9148e08209cd2d1702634ctplv-k3u1fbpfcp-zoom-1.image" class alt="img"><p>原因如下：</p><p>spring中bean的创建过程顺序：</p><img src="/posts/fd57e58c/ad2dd7bded1b4b68b5c44731aeca7a7btplv-k3u1fbpfcp-zoom-1.image" class alt="img"><p><code>BeanFactoryAware</code>接口是在bean创建成功，并且完成依赖注入之后，在真正初始化之前才被调用的。在这个时候去注册bean意义不大，因为这个接口是给我们获取bean的，并不建议去注册bean，会引发很多问题。</p><h1 id="CommandLineRunner和ApplicationRunner接口"><a href="#CommandLineRunner和ApplicationRunner接口" class="headerlink" title="CommandLineRunner和ApplicationRunner接口"></a>CommandLineRunner和ApplicationRunner接口</h1><p>CommandLineRunner的参数是最原始的参数，没有做任何处理。ApplicationRunner的参数是ApplicationArguments，是对原始参数做了进一步的封装。</p><p>ApplicationArguments是对参数（main方法）做了进一步的处理，可以解析–name&#x3D;value的，我们就可以通过name来获取value（而CommandLineRunner只是获取–name&#x3D;value）</p><h2 id="CommandLineRunner-接口"><a href="#CommandLineRunner-接口" class="headerlink" title="CommandLineRunner 接口"></a>CommandLineRunner 接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Order(1)</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServerSuccessReport</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">CommandLineRunner</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(String... args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;=====应用已经成功启动=====&quot;</span> + Arrays.asList(args));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ImproveApplication</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">ConfigurableApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> SpringApplication.run(ImproveApplication.class, args);<br><span class="hljs-type">ApplicationArguments</span> <span class="hljs-variable">applicationArguments</span> <span class="hljs-operator">=</span> context.getBean(ApplicationArguments.class);<br>System.out.println(<span class="hljs-string">&quot;============&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;name=&quot;</span>+applicationArguments.getOptionNames());<br>System.out.println(<span class="hljs-string">&quot;values====&quot;</span>+applicationArguments.getOptionValues(<span class="hljs-string">&quot;developer.name&quot;</span>));<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/posts/fd57e58c/5225109-2dee19989fb39697.png" class alt="img"><h2 id="ApplicationRunner-接口"><a href="#ApplicationRunner-接口" class="headerlink" title="ApplicationRunner 接口"></a>ApplicationRunner 接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyApplicationRunner</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApplicationRunner</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(ApplicationArguments args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;===MyApplicationRunner===&quot;</span> + Arrays.asList(args.getSourceArgs()));<br>        System.out.println(<span class="hljs-string">&quot;===getOptionNames========&quot;</span> + args.getOptionNames());<br>        System.out.println(<span class="hljs-string">&quot;===getOptionValues=======&quot;</span> + args.getOptionValues(<span class="hljs-string">&quot;foo&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;==getOptionValues========&quot;</span> + args.getOptionValues(<span class="hljs-string">&quot;developer.name&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="AutoCloseable接口"><a href="#AutoCloseable接口" class="headerlink" title="AutoCloseable接口"></a>AutoCloseable接口</h1><p><strong>对于实现AutoCloseable接口的类的实例，将其放到try后面（我们称之为：带资源的try语句），在try结束的时候，会自动将这些资源关闭（调用close方法）。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserContext</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AutoCloseable</span> &#123;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ThreadLocal&lt;LoginUser&gt; current = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserContext</span><span class="hljs-params">(LoginUser user)</span> &#123;<br>        current.set(user);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> LoginUser <span class="hljs-title function_">getCurrentUser</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> current.get();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCurrentUser</span><span class="hljs-params">(LoginUser user)</span> &#123;<br>        current.set(user);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> &#123;<br>        current.remove();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Spring中BeanFactoryPostProcessor和BeanPostProcessor区别"><a href="#Spring中BeanFactoryPostProcessor和BeanPostProcessor区别" class="headerlink" title="Spring中BeanFactoryPostProcessor和BeanPostProcessor区别"></a>Spring中BeanFactoryPostProcessor和BeanPostProcessor区别</h1><p>Spring IoC容器允许BeanFactoryPostProcessor在容器实例化任何bean之前读取bean的定义(配置元数据)，并可以修改它。同时可以定义多个BeanFactoryPostProcessor，通过设置’order’属性来确定各个BeanFactoryPostProcessor执行顺序。</p><p>注册一个BeanFactoryPostProcessor实例需要定义一个Java类来实现BeanFactoryPostProcessor接口，并重写该接口的postProcessorBeanFactory方法。通过beanFactory可以获取bean的定义信息，并可以修改bean的定义信息。这点是和BeanPostProcessor最大区别</p><p><strong>BeanPostProcessor.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.spring;<br> <br><span class="hljs-keyword">import</span> org.springframework.beans.BeansException;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.config.BeanPostProcessor;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * bean后置处理器</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zss</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PostProcessor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanPostProcessor</span> &#123;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">postProcessBeforeInitialization</span><span class="hljs-params">(Object bean,</span><br><span class="hljs-params">            String beanName)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        System.out.println(<span class="hljs-string">&quot;后置处理器处理bean=【&quot;</span>+beanName+<span class="hljs-string">&quot;】开始&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">postProcessAfterInitialization</span><span class="hljs-params">(Object bean,</span><br><span class="hljs-params">            String beanName)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        System.out.println(<span class="hljs-string">&quot;后置处理器处理bean=【&quot;</span>+beanName+<span class="hljs-string">&quot;】完毕!&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>BeanFactoryPostProcessor.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.spring;<br> <br><span class="hljs-keyword">import</span> org.springframework.beans.BeansException;<br><span class="hljs-keyword">import</span> org.springframework.beans.MutablePropertyValues;<br><span class="hljs-keyword">import</span> org.springframework.beans.PropertyValue;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.config.BeanDefinition;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.config.BeanFactoryPostProcessor;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.config.ConfigurableListableBeanFactory;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FactoryPostProcessor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanFactoryPostProcessor</span> &#123;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postProcessBeanFactory</span><span class="hljs-params">(</span><br><span class="hljs-params">            ConfigurableListableBeanFactory configurableListableBeanFactory)</span><br>            <span class="hljs-keyword">throws</span> BeansException &#123;<br>        System.out.println(<span class="hljs-string">&quot;******调用了BeanFactoryPostProcessor&quot;</span>);<br>        String[] beanStr = configurableListableBeanFactory<br>                .getBeanDefinitionNames();<br>        <span class="hljs-keyword">for</span> (String beanName : beanStr) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;beanFactoryPostProcessorTest&quot;</span>.equals(beanName)) &#123;<br>                <span class="hljs-type">BeanDefinition</span> <span class="hljs-variable">beanDefinition</span> <span class="hljs-operator">=</span> configurableListableBeanFactory<br>                        .getBeanDefinition(beanName);<br>                <span class="hljs-type">MutablePropertyValues</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> beanDefinition.getPropertyValues();<br>                <span class="hljs-keyword">if</span> (m.contains(<span class="hljs-string">&quot;name&quot;</span>)) &#123;<br>                    m.addPropertyValue(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;赵四&quot;</span>);<br>                    System.out.println(<span class="hljs-string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 修改了name属性初始值了&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br> <br>&#125;<br></code></pre></td></tr></table></figure><h1 id="获取spring容器对象"><a href="#获取spring容器对象" class="headerlink" title="获取spring容器对象"></a>获取spring容器对象</h1><h2 id="实现BeanFactoryAware接口"><a href="#实现BeanFactoryAware接口" class="headerlink" title="实现BeanFactoryAware接口"></a>实现BeanFactoryAware接口</h2><p>实现<code>BeanFactoryAware</code>接口，然后重写<code>setBeanFactory</code>方法，就能从该方法中获取到spring容器对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanFactoryAware</span> &#123;<br>    <span class="hljs-keyword">private</span> BeanFactory beanFactory;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBeanFactory</span><span class="hljs-params">(BeanFactory beanFactory)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        <span class="hljs-built_in">this</span>.beanFactory = beanFactory;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> (Person) beanFactory.getBean(<span class="hljs-string">&quot;person&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="实现ApplicationContextAware接口"><a href="#实现ApplicationContextAware接口" class="headerlink" title="实现ApplicationContextAware接口"></a>实现ApplicationContextAware接口</h2><p>实现<code>ApplicationContextAware</code>接口，然后重写<code>setApplicationContext</code>方法，也能从该方法中获取到spring容器对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonService2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApplicationContextAware</span> &#123;<br>    <span class="hljs-keyword">private</span> ApplicationContext applicationContext;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setApplicationContext</span><span class="hljs-params">(ApplicationContext applicationContext)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        <span class="hljs-built_in">this</span>.applicationContext = applicationContext;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> (Person) applicationContext.getBean(<span class="hljs-string">&quot;person&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="实现-ApplicationListener-接口"><a href="#实现-ApplicationListener-接口" class="headerlink" title="实现 ApplicationListener 接口"></a>实现 ApplicationListener 接口</h2><p>实现 <code>ApplicationListener</code> 接口，需要注意的是该接口接收的泛型是 <code>ContextRefreshedEvent</code> 类，然后重写 <code>onApplicationEvent</code> 方法，也能从该方法中获取到 spring 容器对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonService3</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApplicationListener</span>&lt;ContextRefreshedEvent&gt; &#123;<br>    <span class="hljs-keyword">private</span> ApplicationContext applicationContext;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onApplicationEvent</span><span class="hljs-params">(ContextRefreshedEvent event)</span> &#123;<br>        applicationContext = event.getApplicationContext();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> (Person) applicationContext.getBean(<span class="hljs-string">&quot;person&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>Aware</code> 接口是很常用的功能，目前包含如下功能：</p><img src="/posts/fd57e58c/7dcf8487d9984a9fa6bfb61d5d3f3094tplv-k3u1fbpfcp-watermark.image" class alt="img">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;SpringBoot-指定-logback-配置文件&quot;&gt;&lt;a href=&quot;#SpringBoot-指定-logback-配置文件&quot;</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.yahyav2rayssr.top/categories/Java/"/>
    
    <category term="Spring" scheme="https://blog.yahyav2rayssr.top/categories/Java/Spring/"/>
    
    
    <category term="spring" scheme="https://blog.yahyav2rayssr.top/tags/spring/"/>
    
    <category term="springboot" scheme="https://blog.yahyav2rayssr.top/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>Java 反射</title>
    <link href="https://blog.yahyav2rayssr.top/posts/fa358471/"/>
    <id>https://blog.yahyav2rayssr.top/posts/fa358471/</id>
    <published>2023-04-17T13:48:11.555Z</published>
    <updated>2023-04-17T13:48:11.556Z</updated>
    
    <content type="html"><![CDATA[<h1 id="反射可修改作用域范围"><a href="#反射可修改作用域范围" class="headerlink" title="反射可修改作用域范围"></a>反射可修改作用域范围</h1><ol><li>private 私有属性</li><li>final 不可变更属性（前提是StringBuffer之类，不能是String类型）</li><li>纯 static 类型的成员变量</li></ol><h2 id="1-修改-final-类型的变量"><a href="#1-修改-final-类型的变量" class="headerlink" title="1. 修改 final 类型的变量"></a>1. 修改 final 类型的变量</h2><p>修改 final String 类型示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Pojo3</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;default3&quot;</span>;<br> <br>    <span class="hljs-comment">// code</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printName</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>经过编译器优化后变为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// code</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printName</span><span class="hljs-params">()</span> &#123;<br>       System.out.println(<span class="hljs-string">&quot;default3&quot;</span>);<br>   &#125;<br></code></pre></td></tr></table></figure><p>可以发现反射可以正常修改name属性的值，但是 printName 方法已经被JVM优化写死了，无法修改 printName 方法的打印值，以下两种方式可以防止JVM编译期间将final类型的字符串处理成常量：</p><blockquote><p>思路为让name的值经过运行才能获得, 那么就不会被处理为常量。</p></blockquote><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Pojo4</span> &#123;<br>    <span class="hljs-comment">// 防止JVM编译时就把&quot;default4&quot;作为常量处理</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> (<span class="hljs-literal">null</span> == <span class="hljs-literal">null</span> ? <span class="hljs-string">&quot;default4&quot;</span> : <span class="hljs-string">&quot;&quot;</span>);<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printName</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Pojo4</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;default5&quot;</span>).toString();<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printName</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test5</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">Pojo4</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pojo4</span>();<br>    p.printName();<br>    <br>    <span class="hljs-type">Field</span> <span class="hljs-variable">nameField</span> <span class="hljs-operator">=</span> p.getClass().getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<br>    nameField.setAccessible(<span class="hljs-literal">true</span>);<br>    nameField.set(p, <span class="hljs-string">&quot;111&quot;</span>);<br>    <br>    p.printName();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-修改-static-final-类型的变量"><a href="#2-修改-static-final-类型的变量" class="headerlink" title="2. 修改 static + final 类型的变量"></a>2. 修改 static + final 类型的变量</h2><p>常规情况下，反射无法修改同时被static final修饰的变量，可以通过修改修饰符的方式将 final 修饰符去掉，然后再用反射操作修改。</p><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Pojo7</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pojo7</span>();<br>p.printName();<br><br><span class="hljs-type">Field</span> <span class="hljs-variable">nameField</span> <span class="hljs-operator">=</span> p.getClass().getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<br>nameField.setAccessible(<span class="hljs-literal">true</span>);<br><br><span class="hljs-type">Field</span> <span class="hljs-variable">modifiers</span> <span class="hljs-operator">=</span> nameField.getClass().getDeclaredField(<span class="hljs-string">&quot;modifiers&quot;</span>);<br>modifiers.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-comment">// 去掉 final 修饰符</span><br>modifiers.setInt(nameField, nameField.getModifiers() &amp; ~Modifier.FINAL);<br><br>nameField.set(p, <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;111&quot;</span>));<br><br><span class="hljs-comment">// 恢复 final 修饰符</span><br>modifiers.setInt(nameField, nameField.getModifiers() &amp; ~Modifier.FINAL);<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;反射可修改作用域范围&quot;&gt;&lt;a href=&quot;#反射可修改作用域范围&quot; class=&quot;headerlink&quot; title=&quot;反射可修改作用域范围&quot;&gt;&lt;/a&gt;反射可修改作用域范围&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;private 私有属性&lt;/li&gt;
&lt;li&gt;final 不可变更</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.yahyav2rayssr.top/categories/Java/"/>
    
    <category term="Java 基础" scheme="https://blog.yahyav2rayssr.top/categories/Java/Java-%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="反射" scheme="https://blog.yahyav2rayssr.top/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>Spring 常用注解</title>
    <link href="https://blog.yahyav2rayssr.top/posts/70a6ebcd/"/>
    <id>https://blog.yahyav2rayssr.top/posts/70a6ebcd/</id>
    <published>2023-04-16T20:49:35.456Z</published>
    <updated>2023-04-16T20:49:35.457Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a><code>@Retention</code></h2><p>注解的保留位置　　　　　　　　　</p><ul><li><p><code>@Retention(RetentionPolicy.SOURCE)</code>  </p><p>注解仅存在于源码中，在class字节码文件中不包含</p></li><li><p><code>@Retention(RetentionPolicy.CLASS)</code></p><p>默认的保留策略，注解会在class字节码文件中存在，但运行时无法获得</p></li><li><p><code>@Retention(RetentionPolicy.RUNTIME)</code></p><p>注解会在class字节码文件中存在，在运行时可以通过反射获取到</p></li></ul><h2 id="Target"><a href="#Target" class="headerlink" title="@Target"></a><code>@Target</code></h2><p>注解的作用目标　　　　　　　　</p><ul><li><code>@Target(ElementType.TYPE)</code>   &#x2F;&#x2F;接口、类、枚举</li><li><code>@Target(ElementType.FIELD)</code> &#x2F;&#x2F;字段、枚举的常量</li><li><code>@Target(ElementType.METHOD)</code> &#x2F;&#x2F;方法</li><li><code>@Target(ElementType.PARAMETER)</code> &#x2F;&#x2F;方法参数</li><li><code>@Target(ElementType.CONSTRUCTOR)</code>  &#x2F;&#x2F;构造函数</li><li><code>@Target(ElementType.LOCAL_VARIABLE)</code>&#x2F;&#x2F;局部变量</li><li><code>@Target(ElementType.ANNOTATION_TYPE)</code>&#x2F;&#x2F;注解</li><li><code>@Target(ElementType.PACKAGE)</code> &#x2F;&#x2F;包</li></ul><h2 id="Document"><a href="#Document" class="headerlink" title="@Document"></a><code>@Document</code></h2><p>说明该注解将被包含在<code>javadoc</code>中</p><h2 id="Inherited"><a href="#Inherited" class="headerlink" title="@Inherited"></a><code>@Inherited</code></h2><p>说明子类可以继承父类中的该注解</p><h2 id="AutoConfigureAfter注解"><a href="#AutoConfigureAfter注解" class="headerlink" title="@AutoConfigureAfter注解"></a><code>@AutoConfigureAfter</code>注解</h2><p><strong>@AutoConfigureAfter</strong> 在加载配置的类之后再加载当前类<br><strong>它的value 是一个数组</strong> 一般配合着**@import** 注解使用 ，在使用import时必须要让这个类先被spring ioc 加载好<br>所以@AutoConfigureAfter必不可少</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassA</span> &#123;<span class="hljs-comment">//在加载DemoConfig之前加载ClassA类</span><br><br>&#125;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@AutoConfigureAfter(ClassA.class)</span><br><span class="hljs-meta">@Import(ClassA.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoConfig</span> &#123;<br><br>&#125;<br><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Target(&#123; ElementType.TYPE &#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> AutoConfigureAfter &#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The auto-configure classes that should have already been applied.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> the classes</span><br><span class="hljs-comment"> */</span><br>Class&lt;?&gt;[] value() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The names of the auto-configure classes that should have already been applied.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> the class names</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 1.2.2</span><br><span class="hljs-comment"> */</span><br>String[] name() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="scope"><a href="#scope" class="headerlink" title="@scope"></a><code>@scope</code></h2><p>Scope，也称作用域，在 Spring IoC 容器是指其创建的 Bean 对象相对于其他 Bean 对象的请求可见范围。在 Spring IoC 容器中具有以下几种作用域：基本作用域（singleton、prototype），Web 作用域（request、session、globalsession），自定义作用域。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Scope(scopeName = WebApplicationContext.SCOPE_SESSION)</span><br></code></pre></td></tr></table></figure><h2 id="Lazy"><a href="#Lazy" class="headerlink" title="@Lazy"></a><code>@Lazy</code></h2><blockquote><p>​注解。</p></blockquote><p><strong>value 取值有 true 和 false 两个 默认值为 true</strong></p><p>true 表示使用 延迟加载， false 表示不使用，false 纯属多余，如果不使用，不标注该注解就可以了。</p><h2 id="EnableConfigurationProperties注解"><a href="#EnableConfigurationProperties注解" class="headerlink" title="@EnableConfigurationProperties注解"></a><code>@EnableConfigurationProperties</code>注解</h2><p>ConditionalOn 类注解常用图如下：</p><img src="/posts/70a6ebcd/image-20230416145941377.png" alt="image-20230416145941377" style="zoom:50%;"><ol><li><p>@ConditionalOnBean：当容器里有指定Bean的条件下</p></li><li><p>@ConditionalOnClass：当类路径下有指定的类的条件下</p></li><li><p>@ConditionalOnExpression：基于SpEL表达式为true的时候作为判断条件才去实例化</p></li><li><p>@ConditionalOnJava：基于JVM版本作为判断条件</p></li><li><p>@ConditionalOnJndi：在JNDI存在的条件下查找指定的位置</p></li><li><p>@ConditionalOnMissingBean：当容器里没有指定Bean的情况下</p></li><li><p>@ConditionalOnMissingClass：当容器里没有指定类的情况下</p></li><li><p>@ConditionalOnWebApplication：当前项目时Web项目的条件下</p></li><li><p>@ConditionalOnNotWebApplication：当前项目不是Web项目的条件下</p></li><li><p>@ConditionalOnProperty：指定的属性是否有指定的值</p></li><li><p>@ConditionalOnResource：类路径是否有指定的值</p></li><li><p>@ConditionalOnOnSingleCandidate：当指定Bean在容器中只有一个，或者有多个但是指定首选的Bean</p></li></ol><p>@EnableConfigurationProperties注解的作用是：使使用 @ConfigurationProperties 注解的类生效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;service.properties&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServiceProperties</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SERVICE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;test-service&quot;</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> SERVICE_NAME;<br>       <br>    set/get<br>&#125;<br><br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableConfigurationProperties(HelloServiceProperties.class)</span><br><span class="hljs-meta">@ConditionalOnClass(HelloService.class)</span><br><span class="hljs-meta">@ConditionalOnProperty(prefix = &quot;hello&quot;, value = &quot;enable&quot;, matchIfMissing = true)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServiceAutoConfiguration</span> &#123;<br><br>&#125;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConfigurationPropertiesController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> HelloServiceProperties helloServiceProperties;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/getObjectProperties&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getObjectProperties</span> <span class="hljs-params">()</span> &#123;<br>        System.out.println(helloServiceProperties.getMsg());<br>        <span class="hljs-keyword">return</span> myConfigTest.getProperties();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>等同于</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;service.properties&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServiceProperties</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SERVICE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;test-service&quot;</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> SERVICE_NAME;<br>       set/get<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ControllerAdvice"><a href="#ControllerAdvice" class="headerlink" title="@ControllerAdvice"></a><code>@ControllerAdvice</code></h2><p>@ControllerAdvice支持三种作用域方式，不填写具体的默认拦截所有Controller。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Target all Controllers annotated with @RestController</span><br><span class="hljs-meta">@ControllerAdvice(annotations = RestController.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnnotationAdvice</span> &#123;&#125;<br> <br><span class="hljs-comment">// Target all Controllers within specific packages</span><br><span class="hljs-meta">@ControllerAdvice(&quot;org.example.controllers&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BasePackageAdvice</span> &#123;&#125;<br> <br><span class="hljs-comment">// Target all Controllers assignable to specific classes</span><br><span class="hljs-meta">@ControllerAdvice(assignableTypes = &#123;ControllerInterface.class, AbstractController.class&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AssignableTypesAdvice</span> &#123;&#125;<br></code></pre></td></tr></table></figure><h2 id="ResponseStatus"><a href="#ResponseStatus" class="headerlink" title="@ResponseStatus"></a><code>@ResponseStatus</code></h2><p>带有@ResponseStatus注解的异常类会被ResponseStatusExceptionResolver 解析。可以实现自定义的一些异常,同时在页面上进行显示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ResponseStatus(value = HttpStatus.FORBIDDEN, reason = &quot;用户名和密码不匹配!&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserNameNotMatchPasswordException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RuntimeException</span>&#123;<br>        <br>&#125;<br></code></pre></td></tr></table></figure><img src="/posts/70a6ebcd/20170509170421669.jpg" class alt="img"><h2 id="ImportResource"><a href="#ImportResource" class="headerlink" title="@ImportResource"></a><code>@ImportResource</code></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Springboot02ConfigApplicationTests</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ApplicationContext ioc;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testHelloService</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">helloService</span> <span class="hljs-operator">=</span> ioc.containsBean(<span class="hljs-string">&quot;helloService&quot;</span>);<br>        System.out.println(helloService);<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@ImportResource(locations = &#123;&quot;classpath:beans.xml&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Springboot02ConfigApplication</span> &#123;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(Springboot02ConfigApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="PropertySource"><a href="#PropertySource" class="headerlink" title="@PropertySource"></a><code>@PropertySource</code></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span> <br><span class="hljs-meta">@PropertySource(&quot;classpath:redis.properties&quot;)</span><br></code></pre></td></tr></table></figure><h2 id="PropertySources"><a href="#PropertySources" class="headerlink" title="@PropertySources"></a><code>@PropertySources</code></h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@PropertySources</span>(&#123;<br>        <span class="hljs-variable">@PropertySource</span>(value = <span class="hljs-string">&quot;classpath:myDefine.properties&quot;</span>,encoding = <span class="hljs-string">&quot;utf-8&quot;</span>),<br>        <span class="hljs-variable">@PropertySource</span>(value = <span class="hljs-string">&quot;classpath:myConfig.properties&quot;</span>,encoding = <span class="hljs-string">&quot;utf-8&quot;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="ConfigurationProperties"><a href="#ConfigurationProperties" class="headerlink" title="@ConfigurationProperties"></a><code>@ConfigurationProperties</code></h2><p>@ConfigurationProperties在其他配置文件取值时候，需要@PropertySource(“classpath:config&#x2F;xxx.yml”) 配置文件路径 。</p><p>@PropertySource注解，默认是不支持yml配置文件读取的，需要修改重写才可以</p><h3 id="激活-ConfigurationProperties"><a href="#激活-ConfigurationProperties" class="headerlink" title="激活  @ConfigurationProperties"></a>激活  @ConfigurationProperties</h3><p>我们可以通过添加 @Component 注解让 Component Scan 扫描到</p><img src="/posts/70a6ebcd/image-20201207163914367.png" alt="image-20201207163914367" style="zoom: 80%;"><p>我们也可以通过 Spring 的 Java Configuration 特性实现同样的效果</p><img src="/posts/70a6ebcd/image-20201207163935333.png" class alt="image-20201207163935333"><p>我们还可以使用 <code>@EnableConfigurationProperties</code> 注解让我们的类被 Spring Boot 所知道，在该注解中其实是用了<code>@Import(EnableConfigurationPropertiesImportSelector.class)</code> 实现，大家可以看一下</p><img src="/posts/70a6ebcd/image-20201207164021748.png" class alt="image-20201207164021748"><p>当我们为属性配置错误的值时，而又不希望 Spring Boot 应用启动失败，我们可以设置 <code>ignoreInvalidFields</code> 属性为 true (默认为 false)</p><img src="/posts/70a6ebcd/image-20201207164140935.png" class alt="image-20201207164140935"><p>然而，当配置文件中有一个属性实际上没有绑定到 <code>@ConfigurationProperties</code> 类时，我们可能希望启动失败。也许我们以前使用过这个配置属性，但是它已经被删除了，这种情况我们希望被触发告知手动从 application.properties 删除这个属性</p><img src="/posts/70a6ebcd/image-20201207164313894.png" class alt="image-20201207164313894"><h3 id="启动时校验-ConfigurationProperties"><a href="#启动时校验-ConfigurationProperties" class="headerlink" title="启动时校验 @ConfigurationProperties"></a>启动时校验 @ConfigurationProperties</h3><img src="/posts/70a6ebcd/image-20201207164342791.png" class alt="image-20201207164342791"><h3 id="Duration-类型"><a href="#Duration-类型" class="headerlink" title="Duration 类型"></a>Duration 类型</h3><p>Spring Boot 内置支持从配置参数中解析 durations (持续时间)，官网文档 给出了明确的说明</p><p>官网上已明确说明，配置 duration 不写单位，默认按照毫秒来指定，我们也可已通过 @DurationUnit 来指定单位:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;myapp.mail&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestProperties</span> &#123;<br><br>    <span class="hljs-meta">@DurationUnit(ChronoUnit.SECONDS)</span><br>    <span class="hljs-keyword">private</span> Duration duration;<br>&#125;<br></code></pre></td></tr></table></figure><p>常用单位如下:</p><ul><li><code>ns</code> for nanoseconds (纳秒)</li><li><code>us</code> for microseconds (微秒)</li><li><code>ms</code> for milliseconds (毫秒)</li><li><code>s</code> for seconds (秒)</li><li><code>m</code> for minutes (分)</li><li><code>h</code> for hours (时)</li><li><code>d</code> for days (天)</li></ul><h3 id="DataSize-类型"><a href="#DataSize-类型" class="headerlink" title="DataSize 类型"></a>DataSize 类型</h3><p>与 Duration 的用法一毛一样，默认单位是 byte (字节)，可以通过 @DataSizeUnit 单位指定:</p><img src="/posts/70a6ebcd/image-20201207164755330.png" class alt="image-20201207164755330"><p>但是，我测试的时候打印出来结果都是以 B (bytes) 来显示</p><p>常见单位如下:</p><ul><li><code>B</code> for bytes</li><li><code>KB</code> for kilobytes</li><li><code>MB</code> for megabytes</li><li><code>GB</code> for gigabytes</li><li><code>TB</code> for terabytes</li></ul><h3 id="自定义Converter类型"><a href="#自定义Converter类型" class="headerlink" title="自定义Converter类型"></a>自定义Converter类型</h3><img src="/posts/70a6ebcd/image-20201207165127027.png" class alt="image-20201207165127027"><p>我们可以模仿 DataSize 和 Duration 创造自己的 converter (转换器)</p><img src="/posts/70a6ebcd/image-20201207165143933.png" class alt="image-20201207165143933"><p>将其注册到 Spring Boot 上下文中</p><img src="/posts/70a6ebcd/image-20201207165208326.png" class alt="image-20201207165208326"><p><code>@ConfigurationPropertiesBinding</code> 注解是让 Spring Boot 知道使用该转换器做数据绑定</p><h3 id="标记配置属性为-Deprecated"><a href="#标记配置属性为-Deprecated" class="headerlink" title="标记配置属性为 Deprecated"></a>标记配置属性为 Deprecated</h3><img src="/posts/70a6ebcd/image-20201207165610734.png" class alt="image-20201207165610734"><p>我们可以通过添加 <code>@DeprecatedConfigurationProperty</code>注解到字段的 getter 方法上，来标示该字段为 deprecated</p><h3 id="ConfigurationProperties-和-Bean"><a href="#ConfigurationProperties-和-Bean" class="headerlink" title="@ConfigurationProperties 和 @Bean"></a>@ConfigurationProperties 和 @Bean</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Item</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size;<br>&#125;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BeanConfigProperties</span> &#123;<br>    <br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@ConfigurationProperties(prefix = &quot;item&quot;)</span><br>    <span class="hljs-keyword">public</span> Item <span class="hljs-title function_">item</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Item</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Spring之-Nullable、-NonNull注解"><a href="#Spring之-Nullable、-NonNull注解" class="headerlink" title="Spring之@Nullable、@NonNull注解"></a>Spring之<code>@Nullable</code>、<code>@NonNull</code>注解</h2><ul><li>@NonNull可以标注在方法、字段、参数之上，表示对应的值不可以为空</li><li>@Nullable注解可以标注在方法、字段、参数之上，表示对应的值可以为空</li></ul><h2 id="ComponentScan注释扫描多个包"><a href="#ComponentScan注释扫描多个包" class="headerlink" title="@ComponentScan注释扫描多个包"></a><code>@ComponentScan</code>注释扫描多个包</h2><p>当使用@ComponentScan来进行包扫描时<br>当只扫描一个包可写为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ComponentScan(&quot;包名&quot;)</span><br>例如：<span class="hljs-meta">@ComponentScan(&quot;com.example.service.rpc&quot;)</span><br></code></pre></td></tr></table></figure><p>当扫描的包是多个时，应当使用数组的形式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">例如:<span class="hljs-meta">@ComponentScan(&#123;&quot;com.example.service.rpc&quot;,&quot;com.example.web.controller&quot;&#125;</span><br></code></pre></td></tr></table></figure><p>还有另一个 <strong>type-safe</strong> 替代指定base-package位置为字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ComponentScan(basePackageClasses = &#123;ExampleController.class, ExampleModel.class, ExmapleView.class&#125;)</span><br></code></pre></td></tr></table></figure><h2 id="EnableWebMvc"><a href="#EnableWebMvc" class="headerlink" title="@EnableWebMvc"></a><code>@EnableWebMvc</code></h2><p>从下可见，<code>@EnableWebMvc</code>注解的主要作用是引入<code>DelegatingWebMvcConfiguration</code>配置类。而对<code>Spring MVC</code>配置的主要工作，由<code>WebMvcConfigurationSupport</code>和用户提供的<code>WebMvcConfigurer</code>配置器实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.springframework.web.servlet.config.annotation;<br><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-comment">// 使用注解@Import 引入代理配置类 DelegatingWebMvcConfiguration</span><br><span class="hljs-meta">@Import(DelegatingWebMvcConfiguration.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> EnableWebMvc &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Configuration-和-Component-区别"><a href="#Configuration-和-Component-区别" class="headerlink" title="@Configuration 和 @Component 区别"></a><code>@Configuration </code>和 <code>@Component</code> 区别</h2><p>虽然Component注解也会当做配置类，但是并不会为其生成CGLIB代理Class，所以在生成Driver对象时和生成Car对象时调用car()方法执行了两次new操作，所以是不同的对象。</p><p>当使用Configuration注解时，生成当前对象的子类Class，并对方法拦截，第二次调用car()方法时直接从BeanFactory之中获取对象，所以得到的是同一个对象。</p><h2 id="Accessors"><a href="#Accessors" class="headerlink" title="@Accessors"></a><code>@Accessors</code></h2><p><code>fluent = true</code></p><p>fluent为一个布尔值，如果为true生成的get&#x2F;set方法则没有set&#x2F;get前缀，默认为false</p><p><code>chain = true</code></p><p>chain为一个布尔值，如果为true生成的set方法返回this，为false生成的set方法是void类型。默认为false，除非当fluent为true时，chain默认则为true</p><p><code>prefix = &quot;前缀名_&quot;</code></p><p>prefix为一系列string类型，可以指定前缀，生成get&#x2F;set方法时会去掉指定的前缀</p><h2 id="实体转json忽略属性"><a href="#实体转json忽略属性" class="headerlink" title="实体转json忽略属性"></a>实体转json忽略属性</h2><p>1、fastjson过滤指定字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@JSONField(serialize=false)</span><br><span class="hljs-keyword">private</span> String value;<br></code></pre></td></tr></table></figure><p>2、在解析成json时，忽略子属性的addressId字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@JsonIgnoreProperties(value=&#123;&quot;addressId&quot;&#125;)</span><br></code></pre></td></tr></table></figure><p>3、直接在属性上添加<code>@JsonIgnore</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@JsonIgnore</span><br><span class="hljs-keyword">private</span> String img;<br></code></pre></td></tr></table></figure><h2 id="FastJson-过滤字段、排除字段"><a href="#FastJson-过滤字段、排除字段" class="headerlink" title="FastJson 过滤字段、排除字段"></a>FastJson 过滤字段、排除字段</h2><h3 id="1-通过注解指定不需要序列化的字段"><a href="#1-通过注解指定不需要序列化的字段" class="headerlink" title="1. 通过注解指定不需要序列化的字段"></a>1. 通过注解指定不需要序列化的字段</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@JSONField(serialize=false)</span><br><span class="hljs-keyword">private</span> String value;<br></code></pre></td></tr></table></figure><h3 id="2-声明为transient的变量不进行序列化"><a href="#2-声明为transient的变量不进行序列化" class="headerlink" title="2. 声明为transient的变量不进行序列化"></a>2. 声明为transient的变量不进行序列化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> String value;<br></code></pre></td></tr></table></figure><h3 id="3-使用属性过滤器排除不需要序列化的字段"><a href="#3-使用属性过滤器排除不需要序列化的字段" class="headerlink" title="3. 使用属性过滤器排除不需要序列化的字段"></a>3. 使用属性过滤器排除不需要序列化的字段</h3><h4 id="单实体类过滤"><a href="#单实体类过滤" class="headerlink" title="单实体类过滤"></a>单实体类过滤</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>user.setId(<span class="hljs-number">2L</span>);<br>user.setName(<span class="hljs-string">&quot;guest&quot;</span>);<br><br><span class="hljs-type">SimplePropertyPreFilter</span> <span class="hljs-variable">filter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimplePropertyPreFilter</span>();<br>filter.getExcludes().add(<span class="hljs-string">&quot;name&quot;</span>);<br><br>JSON.toJSONString(user, filter)<br></code></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">2</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="嵌套实体类多重过滤"><a href="#嵌套实体类多重过滤" class="headerlink" title="嵌套实体类多重过滤"></a>嵌套实体类多重过滤</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">Group</span> <span class="hljs-variable">group</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Group</span>();<br>group.setId(<span class="hljs-number">0L</span>);<br>group.setName(<span class="hljs-string">&quot;admin&quot;</span>);<br><br><span class="hljs-type">User</span> <span class="hljs-variable">guestUser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>guestUser.setId(<span class="hljs-number">2L</span>);<br>guestUser.setName(<span class="hljs-string">&quot;guest&quot;</span>);<br><br><span class="hljs-type">User</span> <span class="hljs-variable">rootUser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>rootUser.setId(<span class="hljs-number">3L</span>);<br>rootUser.setName(<span class="hljs-string">&quot;root&quot;</span>);<br><br>group.addUser(guestUser);<br>group.addUser(rootUser);<br><br><span class="hljs-type">SimplePropertyPreFilter</span> <span class="hljs-variable">filter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimplePropertyPreFilter</span>();<br>filter.getExcludes().add(<span class="hljs-string">&quot;name&quot;</span>);<br><br>System.out.println(JSON.toJSONString(group, filter));<br>&#125;<br></code></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;users&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">2</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">3</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="4-使用属性过滤器包含需要序列化的字段"><a href="#4-使用属性过滤器包含需要序列化的字段" class="headerlink" title="4. 使用属性过滤器包含需要序列化的字段"></a>4. 使用属性过滤器包含需要序列化的字段</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用属性过滤器包含需要序列化的字段.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">Group</span> <span class="hljs-variable">group</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Group</span>();<br>group.setId(<span class="hljs-number">0L</span>);<br>group.setName(<span class="hljs-string">&quot;admin&quot;</span>);<br><br><span class="hljs-type">User</span> <span class="hljs-variable">guestUser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>guestUser.setId(<span class="hljs-number">2L</span>);<br>guestUser.setName(<span class="hljs-string">&quot;guest&quot;</span>);<br><br><span class="hljs-type">User</span> <span class="hljs-variable">rootUser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>rootUser.setId(<span class="hljs-number">3L</span>);<br>rootUser.setName(<span class="hljs-string">&quot;root&quot;</span>);<br><br>group.addUser(guestUser);<br>group.addUser(rootUser);<br><br><span class="hljs-comment">// Group只序列化id和users</span><br><span class="hljs-type">SimplePropertyPreFilter</span> <span class="hljs-variable">filter1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimplePropertyPreFilter</span>(Group.class, <span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;users&quot;</span>);<br><span class="hljs-comment">// User只序列化name</span><br><span class="hljs-type">SimplePropertyPreFilter</span> <span class="hljs-variable">filter2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimplePropertyPreFilter</span>(User.class);<br>filter2.getIncludes().add(<span class="hljs-string">&quot;name&quot;</span>);<br><br>System.out.println(JSON.toJSONString(group, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimplePropertyPreFilter</span>[] &#123;filter1, filter2&#125;));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-自定义属性过滤规则"><a href="#5-自定义属性过滤规则" class="headerlink" title="5. 自定义属性过滤规则"></a>5. 自定义属性过滤规则</h3><p>实现PropertyFilter接口中的apply方法，返回true表示包含该字段，返回false表示过滤掉。</p><p>源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> wenshao[szujobs@hotmail.com]</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">PropertyFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SerializeFilter</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> object the owner of the property. 字段所属的对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name the name of the property. 字段名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value the value of the property. 字段值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true if the property will be included, false if to be filtered out</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">apply</span><span class="hljs-params">(Object object, String name, Object value)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">PropertyFilter</span> <span class="hljs-variable">filter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PropertyFilter</span>() &#123;<br>       <span class="hljs-meta">@Override</span><br>       <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">apply</span><span class="hljs-params">(Object object, String name, Object value)</span> &#123;<br>       <span class="hljs-comment">//System.out.println(object + &quot; &quot; + name + &quot; &quot; + value);</span><br>           <span class="hljs-keyword">if</span> (name.equals(<span class="hljs-string">&quot;name&quot;</span>)) &#123;<br>               <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// 排除名为name的字段</span><br>           &#125;<br>           <span class="hljs-keyword">if</span> (value.toString().equals(<span class="hljs-string">&quot;2&quot;</span>)) &#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// 排除值为2的字段</span><br>           &#125;<br>           <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">// 包含该字段或值</span><br>       &#125;<br></code></pre></td></tr></table></figure><h1 id="EnableTransactionManagement"><a href="#EnableTransactionManagement" class="headerlink" title="@EnableTransactionManagement"></a><strong>@EnableTransactionManagement</strong></h1><p><code>@EnableTransactionManagement</code>表示开启事务支持，在 springboot 项目中一般配置在启动类上，效果等同于xml配置的<code>&lt;tx:annotation-driven /&gt;</code>。开启事务支持后，然后在访问数据库的 Service 方法上添加注解 <code>@Transactional</code> 便可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;Retention&quot;&gt;&lt;a href=&quot;#Retention&quot; class=&quot;headerlink&quot; title=&quot;@Retent</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.yahyav2rayssr.top/categories/Java/"/>
    
    <category term="Spring" scheme="https://blog.yahyav2rayssr.top/categories/Java/Spring/"/>
    
    
    <category term="spring" scheme="https://blog.yahyav2rayssr.top/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring 基础</title>
    <link href="https://blog.yahyav2rayssr.top/posts/4e9ceea/"/>
    <id>https://blog.yahyav2rayssr.top/posts/4e9ceea/</id>
    <published>2023-04-16T20:47:44.986Z</published>
    <updated>2023-04-16T20:47:44.987Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AOP-详解"><a href="#AOP-详解" class="headerlink" title="AOP 详解"></a>AOP 详解</h1><h2 id="一、AOP-简介"><a href="#一、AOP-简介" class="headerlink" title="一、AOP 简介"></a>一、AOP 简介</h2><p>AOP（Aspect Oriented Programming），即面向切面编程，可以说是OOP（Object Oriented Programming，面向对象编程）的补充和完善。OOP引入封装、继承、多态等概念来建立一种对象层次结构，用于模拟公共行为的一个集合。不过OOP只允许开发者定义纵向的关系，但并不适合定义横向的关系，例如日志，事务，安全等。这些功能都是横向应用在业务处理中，而与它们对应的方法与其他代码基本没有联系，如异常处理和透明的持续性也都是如此，不仅增加了大量的代码量，还为程序后期的维护增生很多困难。</p><p>AOP技术恰恰相反，它利用一种称为”横切”的技术，剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其命名为”Aspect”，即切面。所谓”切面”，简单说就是那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，降低模块之间的耦合度，并有利于未来的可操作性和可维护性。使用”横切”技术，AOP把软件系统分为两个部分：核心关注点和横切关注点。业务处理的主要流程是核心关注点，与之关系不大的部分是横切关注点。横切关注点的一个特点是，他们经常发生在核心关注点的多处，而各处基本相似，比如权限认证、日志、事物。AOP的作用在于分离系统中的各种关注点，将核心关注点和横切关注点分离开来。</p><h2 id="二、AOP-基本了解和通知方法"><a href="#二、AOP-基本了解和通知方法" class="headerlink" title="二、AOP 基本了解和通知方法"></a>二、AOP 基本了解和通知方法</h2><ol><li><strong>切面（Aspect）：一个关注点的模块化，这个关注点可能会横切多个对象。</strong><br>事务管理是J2EE应用中一个关于横切关注点的很好的例子。在spring AOP中，切面可以使用基于模式）或者基于Aspect注解方式来实现。通俗点说就是我们加入的切面类（比如log类），可以这么理解。</li><li><strong>连接点（Joinpoint）：在程序执行过程中某个特定的点，比如某方法调用的时候或者处理异常的时候。</strong><br>在Spring AOP中，一个连接点总是表示一个方法的执行。通俗的说就是加入切点的那个点</li><li><strong>通知（Advice）：在切面的某个特定的连接点上执行的动作。</strong><br>其中包括了“around”、“before”和“after”等不同类型的通知（通知的类型将在后面部分进行讨论）。许多AOP框架（包括Spring）都是以拦截器做通知模型，并维护一个以连接点为中心的拦截器链。</li><li><strong>切入点（Pointcut）：匹配连接点的断言。</strong><br>通知和一个切入点表达式关联，并在满足这个切入点的连接点上运行（例如，当执行某个特定名称的方法时）。切入点表达式如何和连接点匹配是AOP的核心：Spring缺省使用AspectJ切入点语法。</li><li><strong>引入（Introduction）：用来给一个类型声明额外的方法或属性（也被称为连接类型声明（inter-type declaration））。</strong><br>Spring允许引入新的接口（以及一个对应的实现）到任何被代理的对象。例如，你可以使用引入来使一个bean实现IsModified接口，以便简化缓存机制。</li><li><strong>目标对象（Target Object）： 被一个或者多个切面所通知的对象。</strong><br>也被称做被通知（advised）对象。 既然Spring AOP是通过运行时代理实现的，这个对象永远是一个被代理（proxied）对象。</li><li><strong>AOP代理（AOP Proxy）：AOP框架创建的对象，用来实现切面契约（例如通知方法执行等等）。</strong><br>在Spring中，AOP代理可以是JDK动态代理或者CGLIB代理。</li><li><strong>织入（Weaving）：把切面连接到其它的应用程序类型或者对象上，并创建一个被通知的对象。</strong><br>这些可以在编译时（例如使用AspectJ编译器），类加载时和运行时完成。Spring和其他纯Java AOP框架一样，在运行时完成织入。</li></ol><h3 id="通知方法："><a href="#通知方法：" class="headerlink" title="通知方法："></a>通知方法：</h3><ol><li><p><strong>前置通知（Before advice）：</strong>在某连接点之前执行的通知，但这个通知不能阻止连接点之前的执行流程（除非它抛出一个异常）。</p></li><li><p><strong>后置通知（After returning advice）：</strong>在某连接点正常完成后执行的通知：例如，一个方法没有抛出任何异常，正常返回。</p></li><li><p><strong>异常通知（After throwing advice）：</strong>在方法抛出异常退出时执行的通知。</p></li><li><p><strong>最终通知（After (finally) advice）：</strong>当某连接点退出的时候执行的通知（不论是正常返回还是异常退出）。</p></li><li><p><strong>环绕通知（Around Advice）：</strong>包围一个连接点的通知，如方法调用。这是最强大的一种通知类型。环绕通知可以在方法调用前后完成自定义的行为。</p><p>它也会选择是否继续执行连接点或直接返回它自己的返回值或抛出异常来结束执行。</p></li></ol><h2 id="三、Spring对AOP的支持"><a href="#三、Spring对AOP的支持" class="headerlink" title="三、Spring对AOP的支持"></a>三、Spring对AOP的支持</h2><p>Spring中AOP代理由Spring的IOC容器负责生成，管理，它的依赖关系也有IOC容器负责。因此，AOP代理可以直接使用容器中的其他bean示例作为目标，这种关系可由IOC容器的依赖注入提供(不熟悉依赖注入的可以看看我之前的博文)。Spring创建代理规则为:</p><p>  1、默认使用JDK动态代理来创建AOP代理，这样可以为任何接口示例创建代理</p><p>  2、当需要代理的类不是代理接口时，Spring会切换为使用CGLIB代理，也可强制使用CGLIB代理。(强制方法：在XML配置中修改 AOP 属性spring.aop.proxy-target-class&#x3D;true或在注释中修改@EnableAspectJAutoProxy(proxyTargetClass &#x3D; true)进行AOP编程的关键就是定义切入点和定义增强处理，一旦定义了合适的切入点和增强处理，AOP框架将自动生成AOP代理，即：代理对象的方法&#x3D;增强处理+被代理对象的方法。</p><p>exposeProxy：AOP生成对象时，绑定到ThreadLocal, 可以通过AopContext获取</p><h1 id="IOC（依赖注入）的基本实现方式"><a href="#IOC（依赖注入）的基本实现方式" class="headerlink" title="IOC（依赖注入）的基本实现方式"></a>IOC（依赖注入）的基本实现方式</h1><p>Java中创建一个对象分两步： </p><ol><li>通过关键字<strong>new创建一个对象</strong> </li><li>通过<strong>构造函数或setter函数为对象添加初始化参数 （参数可以是基本数据类型 也可以是引用数据类型（比如依赖的类））</strong></li></ol><p>当 Spring 出现后，<strong>对象的创建、成员变量的初始化、对象的销毁均由Spring完成。</strong> </p><p>那么，要让Spring帮助我们创建对象，我们首先需要将<strong>要创建的对象的类型</strong>、<strong>初始化的值</strong>告诉Spring，然后Spring会在程序启动的时候根据我们的要求创建对象。我们通过配置文件来告诉Spring要创建哪些对象，并告诉Spring如何创建这些对象。</p><h2 id="Bean的作用域"><a href="#Bean的作用域" class="headerlink" title="Bean的作用域"></a>Bean的作用域</h2><p><strong>在Spring中，默认情况下bean都是单例。也就是说，当我们向Spring请求一个bean对象时，Spring总给我们返回同一个bean对象。</strong><br><strong>注意：</strong>Spring 中所说的“单例”与Java中的单例稍有不同。Spring中的单例是指：在同一个ApplicationContext中相同名字的bean对象是同一个；而Java中的单例是指：整个JVM中单例的对象只有一个。<br>当然，我们可以通过改变bean标签的scope参数来设置bean的作用域。常用的scope对应的值有： </p><ul><li><p>singleton：在同一个Spring Context中，一个bean只有一个实例对象。(默认) </p></li><li><p>prototype：每次向Spring请求一个bean对象，Spring都会创建一个新的实例。</p></li><li><p><strong>会话（Session）</strong>：在web应用中，为每个会话创建一个bean实例。</p></li><li><p><strong>请求（Request）</strong>：在Web应用中，为每个请求创建一个bean实例。</p></li></ul><p><strong>依赖注入的方式分三种</strong></p><ol><li>构造函数注入</li><li>属性注入</li><li>set方法注入</li></ol><h2 id="自动装配与自动扫描"><a href="#自动装配与自动扫描" class="headerlink" title="自动装配与自动扫描"></a>自动装配与自动扫描</h2><p>简化Spring的配置主要分为两类： </p><ol><li>自动装配 </li><li>自动扫描</li></ol><h3 id="自动装配的种类"><a href="#自动装配的种类" class="headerlink" title="自动装配的种类"></a>自动装配的种类</h3><ol><li><p><strong>byName：根据属性的名字自动装配</strong></p><p>在bean标签中添加属性autowire&#x3D;”byName”。当Spring启动时，会寻找<strong>与person中成员变量名字相同的bean</strong>，并将该bean注给person的成员变量。</p></li><li><p><strong>byType：根据属性的类型自动装配</strong><br>在bean标签中添加属性autowire&#x3D;”byType”。当Spring启动时，会寻找<strong>与person中成员变量类型相同的bean</strong>，并将该bean注给person的成员变量。<br><strong>byType的缺点：</strong>如果某一类型的bean有多个，那Spring在通过byType为属性寻找同类型的bean时就会抛出异常。 </p></li><li><p><strong>constructor：根据构造器的参数类型自动装配</strong></p></li><li><p><strong>autodetect：最佳自动装配。首先采用constructor自动装配，若没有发现与构造器相匹配的Bean时，采用byType进行自动装配。</strong></p></li></ol><p><strong>@Autowired本质上采用byType进行自动装配，因此也存在与byType一样的问题：若同一类型的bean有多个时，或找不到该类型的bean，Spring就会抛出异常。</strong></p><h4 id="在注解中使用SpEL表达式"><a href="#在注解中使用SpEL表达式" class="headerlink" title="在注解中使用SpEL表达式"></a>在注解中使用SpEL表达式</h4><p>将名为father的bean注入给构造函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Value(&quot;#&#123;father&#125;&quot;)</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(Father father)</span>&#123;<br>      <span class="hljs-built_in">this</span>.father = father;<br>  &#125;<br></code></pre></td></tr></table></figure><p>将father对象中的id注入给id：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Value(&quot;#&#123;father.id&#125;&quot;)</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(<span class="hljs-type">long</span> id)</span>&#123;<br>       <span class="hljs-built_in">this</span>.id = id;<br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="自动检测"><a href="#自动检测" class="headerlink" title="自动检测"></a>自动检测</h2><p><strong>自动装配能够减少bean标签下property标签和constructor-arg标签的数量，而自动检测能降低bean标签的数量。</strong></p><h1 id="classpath-和-classpath-区别："><a href="#classpath-和-classpath-区别：" class="headerlink" title="classpath 和 classpath* 区别："></a>classpath 和 classpath* 区别：</h1><p>classpath：只会到你的class路径中查找找文件;<br>classpath*：不仅包含class路径，还包括jar文件中(class路径)进行查找.</p><h1 id="Spring-注解-Resource-和-Autowired-区别对比"><a href="#Spring-注解-Resource-和-Autowired-区别对比" class="headerlink" title="Spring 注解 @Resource 和 @Autowired 区别对比"></a>Spring 注解 @Resource 和 @Autowired 区别对比</h1><h2 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@<strong>Autowired</strong></h2><p>​@Autowired注解是按照类型（byType）装配依赖对象，默认情况下它要求依赖对象必须存在，如果允许null值，可以设置它的required属性为false。如果我们想使用按照名称（byName）来装配，可以结合@Qualifier注解一起使用。(通过类型匹配找到多个candidate,在没有@Qualifier、@Primary注解的情况下，会使用对象名作为最后的fallback匹配)如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestServiceImpl</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-meta">@Qualifier(&quot;userDao&quot;)</span><br>    <span class="hljs-keyword">private</span> UserDao userDao; <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a><strong>@Resource</strong></h2><p>​@Resource默认按照ByName自动注入，由J2EE提供，需要导入包javax.annotation.Resource。@Resource有两个重要的属性：name和type，而Spring将@Resource注解的name属性解析为bean的名字，而type属性则解析为bean的类型。所以，如果使用name属性，则使用byName的自动注入策略，而使用type属性时则使用byType自动注入策略。如果既不制定name也不制定type属性，这时将通过反射机制使用byName自动注入策略。</p><p>​@Resourced标签是按照bean的名字来进行注入的，如果我们没有在使用@Resource时指定bean的名字，同时Spring容器中又没有该名字的bean,这时候@Resource就会退化为@Autowired即按照类型注入，这样就有可能违背了使用@Resource的初衷。所以建议在使用@Resource时都显示指定一下bean的名字@Resource(name&#x3D;”xxx”) </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestServiceImpl</span> &#123;<br>    <span class="hljs-comment">// 下面两种@Resource只要使用一种即可</span><br>    <span class="hljs-meta">@Resource(name=&quot;userDao&quot;)</span><br>    <span class="hljs-keyword">private</span> UserDao userDao; <span class="hljs-comment">// 用于字段上</span><br>    <br>    <span class="hljs-meta">@Resource(name=&quot;userDao&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserDao</span><span class="hljs-params">(UserDao userDao)</span> &#123; <span class="hljs-comment">// 用于属性的setter方法上</span><br>        <span class="hljs-built_in">this</span>.userDao = userDao;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>结论：</strong></p><ul><li>如果同时指定了name和type，则从Spring上下文中找到唯一匹配的bean进行装配，找不到则抛出异常。</li><li>如果指定了name，则从上下文中查找名称（id）匹配的bean进行装配，找不到则抛出异常。</li><li>如果指定了type，则从上下文中找到类似匹配的唯一bean进行装配，找不到或是找到多个，都会抛出异常。</li><li>如果既没有指定name，又没有指定type，则自动按照byName方式进行装配；如果没有匹配，则回退为一个原始类型进行匹配，如果匹配则自动装配。</li></ul><h1 id="Spring-中-Bean-的生命周期"><a href="#Spring-中-Bean-的生命周期" class="headerlink" title="Spring 中 Bean 的生命周期"></a>Spring 中 Bean 的生命周期</h1><p>对于普通的 Java 对象，当我们使用<code>new</code>关键字创建对象的时候，如果它没有任何引用，则其会被垃圾回收机制回收。而由 Spring IoC 容器托管的对象，它们的生命周期则是完全由容器控制。在 Spring 中，每个 Bean 的生命周期大致如下：</p><img src="/posts/4e9ceea/109.jpg" class><h2 id="实例化-Bean"><a href="#实例化-Bean" class="headerlink" title="实例化 Bean"></a>实例化 Bean</h2><p>对于BeanFactory容器来说，当用户向容器请求一个尚未初始化的 Bean 或初始化 Bean 的时候，如果需要注入另一个尚未初始化的依赖，容器就会调用createBean进行实例化；对于ApplicationContext容器来说，当容器启动结束后，便实例化所有的 Bean。</p><p>容器通过获取BeanDefinition对象中的信息进行实例化。并且这一步仅仅是简单的实例化，并未进行依赖注入。 实例化对象被包装在BeanWrapper对象中，BeanWrapper提供了设置对象属性的接口，从而避免了使用反射机制设置属性。</p><h2 id="设置对象属性（依赖注入）"><a href="#设置对象属性（依赖注入）" class="headerlink" title="设置对象属性（依赖注入）"></a>设置对象属性（依赖注入）</h2><p>实例化后的对象被封装在BeanWrapper对象中，并且此时对象仍然是一个原生的状态，并没有进行依赖注入。 紧接着，Spring 根据BeanDefinition中的信息进行依赖注入，并且通过BeanWrapper提供的设置属性的接口完成依赖注入。</p><h2 id="注入-Aware-接口"><a href="#注入-Aware-接口" class="headerlink" title="注入 Aware 接口"></a>注入 Aware 接口</h2><p>紧接着，Spring 会检测该对象是否实现了xxxAware接口，并将相关的xxxAware实例注入给 Bean：</p><p>如果 Bean 实现了BeanNameAware接口，Spring 将 Bean 的 ID 传递给setBeanName()方法。实现BeanNameAware主要是为了通过 Bean 的引用来获得 Bean 的 ID，一般业务中是很少有用到 Bean 的 ID 的。<br>如果 Bean 实现了BeanFactoryAware接口，Spring 将调用setBeanDactory(BeanFactory bf)方法并把BeanFactory容器实例作为参数传入。实现BeanFactoryAware主要目的是为了获取 Spring 容器，如 Bean 通过 Spring 容器发布事件等。<br>如果 Bean 实现了ApplicationContextAware接口，Spring 容器将调用setApplicationContext(ApplicationContext ctx)方法，把应用上下文作为参数传入，作用与BeanFactory类似都是为了获取 Spring 容器，不同的是 Spring 容器在调用setApplicationContext方法时会把它自己作为setApplicationContext的参数传入，而 Spring 容器在调用setBeanDactory前需要程序员自己指定（注入）setBeanDactory里的参数BeanFactory。</p><h2 id="BeanPostProcessor"><a href="#BeanPostProcessor" class="headerlink" title="BeanPostProcessor"></a>BeanPostProcessor</h2><p>当经过上述几个步骤后，Bean 对象已经被正确构造，但如果你想要对象被使用前再进行一些自定义的处理，就可以通过BeanPostProcessor接口实现。 该接口提供了两个函数：</p><p>postProcessBeforeInitialzation(Object bean, String beanName)当前正在初始化的 Bean 对象会被传递进来，我们就可以对这个 Bean 作任何处理。这个函数会先于InitialzationBean执行，因此称为前置处理。 所有Aware接口的注入就是在这一步完成的。<br>postProcessAfterInitialzation(Object bean, String beanName)当前正在初始化的 Bean 对象会被传递进来，我们就可以对这个 Bean 作任何处理。这个函数会在InitialzationBean完成后执行，因此称为后置处理。</p><h2 id="InitializingBean-与-init-method"><a href="#InitializingBean-与-init-method" class="headerlink" title="InitializingBean 与 init-method"></a>InitializingBean 与 init-method</h2><p>当BeanPostProcessor的前置处理完成后就会进入本阶段。 InitializingBean接口只有一个函数：</p><p>afterPropertiesSet()<br>这一阶段也可以在 Bean 正式构造完成前增加我们自定义的逻辑，但它与前置处理不同，由于该函数并不会把当前 Bean 对象传进来，因此在这一步没办法处理对象本身，只能增加一些额外的逻辑。 若要使用它，我们需要让 Bean 实现该接口，并把要增加的逻辑写在该函数中。然后，Spring 会在前置处理完成后检测当前 Bean 是否实现了该接口，并执行afterPropertiesSet函数。</p><p>当然，Spring 为了降低对客户代码的侵入性，给 Bean 的配置提供了init-method属性，该属性指定了在这一阶段需要执行的函数名。Spring 便会在初始化阶段执行我们设置的函数。init-method本质上仍然使用了InitializingBean接口。</p><h2 id="DisposableBean-和-destroy-method"><a href="#DisposableBean-和-destroy-method" class="headerlink" title="DisposableBean 和 destroy-method"></a>DisposableBean 和 destroy-method</h2><p>如果 Bean 实现了DispostbleBean接口，Spring 将调用它的destory方法，作用与在配置文件中对 Bean 使用destory-method属性的作用一样，都是在 Bean 实例销毁前执行的方法。</p><p>至此，Spring 中 Bean 的经历了从创建到消耗的整个生命周期的过程。</p><h1 id="Spring-事务传播行为"><a href="#Spring-事务传播行为" class="headerlink" title="Spring 事务传播行为"></a>Spring 事务传播行为</h1><h2 id="什么是事务传播行为？"><a href="#什么是事务传播行为？" class="headerlink" title="什么是事务传播行为？"></a>什么是事务传播行为？</h2><p>事务传播行为用来描述由某一个事务传播行为修饰的方法被嵌套进另一个方法的时事务如何传播。</p><h2 id="Spring中七种事务传播行为"><a href="#Spring中七种事务传播行为" class="headerlink" title="Spring中七种事务传播行为"></a>Spring中七种事务传播行为</h2><table><thead><tr><th><strong>事务传播行为类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>PROPAGATION_REQUIRED</td><td>如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。这是最常见的选择。</td></tr><tr><td>PROPAGATION_SUPPORTS</td><td>支持当前事务，如果当前没有事务，就以非事务方式执行。</td></tr><tr><td>PROPAGATION_MANDATORY</td><td>使用当前的事务，如果当前没有事务，就抛出异常。</td></tr><tr><td>PROPAGATION_REQUIRES_NEW</td><td>新建事务，如果当前存在事务，把当前事务挂起</td></tr><tr><td>PROPAGATION_NOT_SUPPORTED</td><td>以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</td></tr><tr><td>PROPAGATION_NEVER</td><td>以非事务方式执行，如果当前存在事务，则抛出异常。</td></tr><tr><td>PROPAGATION_NESTED</td><td>如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与PROPAGATION_REQUIRED类似的操作。</td></tr></tbody></table><h2 id="REQUIRED-REQUIRES-NEW-NESTED-异同"><a href="#REQUIRED-REQUIRES-NEW-NESTED-异同" class="headerlink" title="REQUIRED, REQUIRES_NEW, NESTED 异同"></a>REQUIRED, REQUIRES_NEW, NESTED 异同</h2><ul><li><p>NESTED和REQUIRED修饰的内部方法都属于外围方法事务，如果外围方法抛出异常，这两种方法的事务都会被回滚。</p><p>但是REQUIRED是加入外围方法事务，所以和外围事务同属于一个事务，一旦REQUIRED事务抛出异常被回滚，</p><p>外围方法事务也将被回滚。而NESTED是外围方法的子事务，有单独的保存点，所以NESTED方法抛出异常被回滚，不会影响到外围方法的事务。</p></li><li><p>NESTED和REQUIRES_NEW都可以做到内部方法事务回滚而不影响外围方法事务。</p><p>但是因为NESTED是嵌套事务，所以外围方法回滚之后，作为外围方法事务的子事务也会被回滚。</p><p>而REQUIRES_NEW是通过开启新的事务实现的，内部事务和外围事务是两个事务，外围事务回滚不会影响内部事务。</p></li></ul><h1 id="Bean-的生命周期"><a href="#Bean-的生命周期" class="headerlink" title="Bean 的生命周期"></a>Bean 的生命周期</h1><img src="/posts/4e9ceea/207.png" class alt="img"><ol><li>开始实例化 person </li><li>设置 name 属性</li><li>Person 实现了 BeanNameAware 接口，Spring 将 Person 的 ID&#x3D;person传递给 setBeanName 方法</li><li>Person 实现了 BeanFactoryAware 接口，Spring 调用 setBeanFactory()方法，将 BeanFactory 容器实例传入</li><li>Person 实现了 ApplicationContextAware 接口，Spring 调用 setApplicationContext()方法，将 person 所在的应用上下文的引用传入进来</li><li>初始化 Person 之前执行的方法（BeanPostProcessor 的 postProcessBeforeInitialization 方法）</li><li>@PostConstruct 调用自定义的初始化方法</li><li>Person 实现了 InitializingBean 接口，Spring 调用它的afterPropertiesSet()方法。类似地，如果 person 使用 init-method 声明了初始化方法，该方法也会被调用</li><li>xml 中声明的 init-method 方法</li><li>初始化 Person 完成之后执行的方法（BeanPostProcessor 的 postProcessAfterInitialization 方法）</li><li>实例化完成使用属性：Person name &#x3D; nasus（main结束方法）</li><li>@PreDestory 调用自定义销毁方法</li><li>Person 实现了 DisposableBean 接口，Spring 调用它的destroy() 接口方法。同样，如果 person 使用 destroy-method 声明了销毁方法，该方法也会被调用</li><li>xml 中声明的 destroy-method 方法</li></ol><h1 id="servlet-执行流程"><a href="#servlet-执行流程" class="headerlink" title="servlet 执行流程"></a>servlet 执行流程</h1><img src="/posts/4e9ceea/12546411-497191fff892d42b.jpg" class alt="img"><h1 id="Java-SPI-和-Spring-SPI"><a href="#Java-SPI-和-Spring-SPI" class="headerlink" title="Java SPI 和 Spring SPI"></a>Java SPI 和 Spring SPI</h1><p>service provider framework是一个系统， 实现了SPI， 在系统里多个服务提供者模块可以提供一个服务的实现， 系统让客户端可以使用这些实现， 从而实现解耦。</p><p>一个service provider framework有3个主要的组成部分:</p><ol><li>一个服务接口， 供服务提供者实现。</li><li>一个注册API， 系统使用这个API来注册服务接口的实现， 从而让客户端使用。</li><li>一个service access API， 客户端可以选择获取一个服务的实例。</li></ol><h2 id="Java-SPI"><a href="#Java-SPI" class="headerlink" title="Java SPI:"></a>Java SPI:</h2><p>Service Provider Interface(SPI)是一个可以被第三方扩展或实现的API， 它可以用来实现框架扩展和可替换的模块。</p><p>使用步骤：</p><ol><li>服务调用方通过 <code>ServiceLoader.load</code> 加载服务接口的实现类实例</li><li>服务提供方实现服务接口后， 在自己Jar包的META-INF&#x2F;services目录下新建一个接口名全名的文件， 并将具体实现类全名写入。</li></ol><h2 id="Spring-SPI"><a href="#Spring-SPI" class="headerlink" title="Spring SPI"></a>Spring SPI</h2><p>很多开源库中都直接或间接地使用了Java的SPI机制， 如Spring中就有类似的SPI机制， 通过SpringFactoriesLoader代替JDK中的ServiceLoader， 通过META-INF&#x2F;spring.factories文件代替META-INF&#x2F;service目录下的描述文件, 原理都是使用了Java的反射机制。</p><p>Spring提供的SPI只需要且只有一个文件， 就是META-INF&#x2F;spring.factories</p><p>Spring的SPI也更加灵活， 不必要key是接口， 值是实现类， 例如Spring boot使用这种方式来处理自动配置的bean: key是注解(如org.springframework.boot.autoconfig.EnableAutoConfiguration)， 值是被标记@Configuration的类。</p><p>另外Spring中还有converter spi和formatter spi。</p><p>converter可以用做任意两个类型之间的转换， formatter spi用做string类型和其他类型之间的转换。</p><p>Converter和Formatter接口即服务接口</p><p>ConersionService实现了ConverterRegistry接口， 提供服务实现的注册， 同时也提供可访问功能。</p><p>而<code>FormattingConversionService</code> 则实现了FormatterRegistry接口， 实现了formatter实现类的注册和调用。 同时FormattingConversionService也实现了ConversionService接口。</p><h1 id="为什么Spring4-x推荐构造函数注入"><a href="#为什么Spring4-x推荐构造函数注入" class="headerlink" title="为什么Spring4.x推荐构造函数注入"></a>为什么Spring4.x推荐构造函数注入</h1><p>在上面的分析看来，构造函数注入好像并没有显现出来它的优势，但问什么Spring4.x会推翻之前推荐的setter注入，采用构造函数注入呢？官方的理由汇总如下：</p><ul><li>依赖不可变：加入了final来约束修饰Field，这条是很显然的；</li><li>依赖不可为空：在实例化的时候会检查构造函数参数是否为空，如果为空（未找到改类型的实例对象）则会抛出异常。</li><li>单一职责：当使用构造函数注入时，如果参数过多，你会发现当前类的职责过大，需要进行拆分。而使用Field注入时，你并不会意识到此问题。</li><li>更利于单元测试：按照其他两种方式注入，当单元测试时需要初始化整个spring的环境，而采用构造方法注入时，只需要初始化需要的类即可，即可以直接实例化需要的类。</li><li>避免IOC容器以外环境调用时潜在的NPE（空指针异常）。</li><li>避免循环依赖。</li><li>保证返回客户端（调用）的代码的时候是完全初始化的状态。</li></ul><h1 id="静态资源拦截"><a href="#静态资源拦截" class="headerlink" title="静态资源拦截"></a>静态资源拦截</h1><p>说下默认映射的文件夹有：</p><ul><li><p>classpath:&#x2F;META-INF&#x2F;resources</p></li><li><p>classpath:&#x2F;resources</p></li><li><p>classpath:&#x2F;static</p></li><li><p>classpath:&#x2F;public</p></li></ul><p>优先级顺序为：META-INF&#x2F;resources &gt; resources &gt; static &gt; public</p><h1 id="PatchMapping-和-PutMapping-的区别"><a href="#PatchMapping-和-PutMapping-的区别" class="headerlink" title="@PatchMapping 和 @PutMapping 的区别"></a>@PatchMapping 和 @PutMapping 的区别</h1><blockquote><p>http协议明确规定，put、get与delete请求都是具有幂等性的，而post为非幂等性请求，就是说接口被定义为post请求可访问时，说明这个接口对数据库的影响是非幂等性的。</p><p>所以一般插入新数据时，用post方法，更新数据库时，用put方法，以此类推@PostMapping注解是标示接口为非幂等性接口，@PutMapping注解是标示接口为幂等性接口。</p></blockquote><p>Patch方式是对put方式的一种补充，put方式是可以更新，但是更新的是整体，patch是对局部更新。</p><h1 id="application-yml-和-bootStrap-yml-的加载顺序"><a href="#application-yml-和-bootStrap-yml-的加载顺序" class="headerlink" title="application.yml 和 bootStrap.yml 的加载顺序"></a>application.yml 和 bootStrap.yml 的加载顺序</h1><p>若application.yml 和bootStrap.yml 在同一目录下，则bootStrap.yml 的加载顺序要高于application.yml,即bootStrap.yml  会优先被加载。</p><p>原理：bootstrap.yml 用于应用程序上下文的引导阶段， bootstrap.yml 由父Spring ApplicationContext加载。</p><ul><li>bootstrap.yml 可以理解成系统级别的一些参数配置，这些参数一般是不会变动的。</li><li>application.yml 可以用来定义应用级别的，如果搭配 spring-cloud-config 使用 application.yml 里面定义的文件可以实现动态替换。</li></ul><p>脚本里指定了配置文件：spring.config.location&#x3D;.&#x2F;bootstrap.yml, 则配置文件的加载顺序将为：</p><ol><li>cloud-config 仓库里指定的yml 配置；</li><li>.&#x2F;bootstrap.yml</li><li>classpath:&#x2F;bootstrap.yml</li><li>外部 application.yml</li><li>内部 application.yml</li></ol><p>脚本里指定了配置文件：spring.config.location&#x3D;.&#x2F;application.yml, 则配置文件的加载顺序将为：</p><ol><li><p>cloud-config 仓库里指定的yml 配置；</p></li><li><p>.&#x2F;application.yml</p></li><li><p>classpath:&#x2F;application.yml</p></li><li><p>.&#x2F;bootstrap.yml</p></li><li><p>classpath:&#x2F;bootstrap.yml</p></li></ol><h1 id="初始化Bean执行顺序"><a href="#初始化Bean执行顺序" class="headerlink" title="初始化Bean执行顺序"></a>初始化Bean执行顺序</h1><img src="/posts/4e9ceea/f1d0bd023bd44134a7f5536d5789d57dtplv-k3u1fbpfcp-watermark.image" alt="img" style="zoom:50%;">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;AOP-详解&quot;&gt;&lt;a href=&quot;#AOP-详解&quot; class=&quot;headerlink&quot; title=&quot;AOP 详解&quot;&gt;&lt;/a&gt;AOP 详解&lt;/h1&gt;&lt;h2 id=&quot;一、AOP-简介&quot;&gt;&lt;a href=&quot;#一、AOP-简介&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="Java" scheme="https://blog.yahyav2rayssr.top/categories/Java/"/>
    
    <category term="Spring" scheme="https://blog.yahyav2rayssr.top/categories/Java/Spring/"/>
    
    
    <category term="spring" scheme="https://blog.yahyav2rayssr.top/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring 单元测试</title>
    <link href="https://blog.yahyav2rayssr.top/posts/fac11a47/"/>
    <id>https://blog.yahyav2rayssr.top/posts/fac11a47/</id>
    <published>2023-04-16T20:22:56.214Z</published>
    <updated>2023-04-16T20:22:56.214Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="Juni4"><a href="#Juni4" class="headerlink" title="Juni4"></a>Juni4</h2><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomerServiceTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> CustomerServiceI customerService;<br><br><br>    <span class="hljs-meta">@Before</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUp</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCustomerAddSuccess</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//1.prepare</span><br>        <span class="hljs-type">CustomerAddCmd</span> <span class="hljs-variable">customerAddCmd</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomerAddCmd</span>();<br>        <span class="hljs-type">CustomerDTO</span> <span class="hljs-variable">customerDTO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomerDTO</span>();<br>        customerDTO.setCompanyName(<span class="hljs-string">&quot;NormalName&quot;</span>);<br>        customerAddCmd.setCustomerDTO(customerDTO);<br><br>        <span class="hljs-comment">//2.execute</span><br>        <span class="hljs-type">Response</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> customerService.addCustomer(customerAddCmd);<br><br>        <span class="hljs-comment">//3.assert</span><br>        Assert.assertTrue(response.isSuccess());<br>    &#125;<br><br>    <span class="hljs-meta">@Test(expected = BizException.class)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCustomerAddCompanyNameConflict</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//1.prepare</span><br>        <span class="hljs-type">CustomerAddCmd</span> <span class="hljs-variable">customerAddCmd</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomerAddCmd</span>();<br>        <span class="hljs-type">CustomerDTO</span> <span class="hljs-variable">customerDTO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomerDTO</span>();<br>        customerDTO.setCompanyName(<span class="hljs-string">&quot;ConflictCompanyName&quot;</span>);<br>        customerAddCmd.setCustomerDTO(customerDTO);<br><br>        <span class="hljs-comment">//2.execute</span><br>        <span class="hljs-type">Response</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> customerService.addCustomer(customerAddCmd);<br><br>        <span class="hljs-comment">//3.Exception</span><br>        <span class="hljs-comment">//Assert.assertEquals(ErrorCode.B_CUSTOMER_companyNameConflict.getErrCode(), response.getErrCode());</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="JUnit5"><a href="#JUnit5" class="headerlink" title="JUnit5"></a>JUnit5</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;Juni4&quot;&gt;&lt;a href=&quot;#Juni4&quot; class=&quot;headerlink&quot; title=&quot;Juni4&quot;&gt;&lt;/a&gt;Juni</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.yahyav2rayssr.top/categories/Java/"/>
    
    <category term="Spring" scheme="https://blog.yahyav2rayssr.top/categories/Java/Spring/"/>
    
    
    <category term="spring" scheme="https://blog.yahyav2rayssr.top/tags/spring/"/>
    
    <category term="单元测试" scheme="https://blog.yahyav2rayssr.top/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Spring AOP 详解</title>
    <link href="https://blog.yahyav2rayssr.top/posts/2ed6c644/"/>
    <id>https://blog.yahyav2rayssr.top/posts/2ed6c644/</id>
    <published>2023-04-16T20:20:45.033Z</published>
    <updated>2023-04-16T20:20:45.033Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="ProceedingJoinPoint"><a href="#ProceedingJoinPoint" class="headerlink" title="ProceedingJoinPoint"></a>ProceedingJoinPoint</h2><h3 id="获取方法描述"><a href="#获取方法描述" class="headerlink" title="获取方法描述"></a>获取方法描述</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获得方法描述，目标类名.方法名</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> point 连接点</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 目标类名.执行方法名</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">protected</span> String <span class="hljs-title function_">getMethodDesc</span><span class="hljs-params">(ProceedingJoinPoint point)</span> &#123;<br>    <span class="hljs-comment">// 获得被代理的类</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> point.getTarget();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> target.getClass().getSimpleName();<br><br>    <span class="hljs-type">Signature</span> <span class="hljs-variable">signature</span> <span class="hljs-operator">=</span> point.getSignature();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> signature.getName();<br><br>    <span class="hljs-keyword">return</span> className + <span class="hljs-string">&quot;.&quot;</span> + methodName;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="获得被代理的方法"><a href="#获得被代理的方法" class="headerlink" title="获得被代理的方法"></a>获得被代理的方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获得被代理的方法</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> point 连接点</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 代理的方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">protected</span> Method <span class="hljs-title function_">getTargetMethod</span><span class="hljs-params">(ProceedingJoinPoint point)</span> &#123;<br>    <span class="hljs-comment">// 获得方法签名</span><br>    <span class="hljs-type">Signature</span> <span class="hljs-variable">signature</span> <span class="hljs-operator">=</span> point.getSignature();<br>    <span class="hljs-comment">// Spring AOP 只有方法连接点，所以 Signature 一定是 MethodSignature</span><br>    <span class="hljs-keyword">return</span> ((MethodSignature) signature).getMethod();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="获取注解"><a href="#获取注解" class="headerlink" title="获取注解"></a>获取注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">targetMethod.getAnnotation(注解名称.class);<br></code></pre></td></tr></table></figure><h3 id="打印请求基础路径信息"><a href="#打印请求基础路径信息" class="headerlink" title="打印请求基础路径信息"></a>打印请求基础路径信息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 打印请求基础路径信息</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> joinPoint</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 返回请求字符串</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> String <span class="hljs-title function_">printRequestInfo</span><span class="hljs-params">(ProceedingJoinPoint joinPoint)</span> &#123;<br>    <span class="hljs-type">ServletRequestAttributes</span> <span class="hljs-variable">requestAttributes</span> <span class="hljs-operator">=</span> (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">remoteAddr</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">if</span> (requestAttributes != <span class="hljs-literal">null</span>) &#123;<br>        url = requestAttributes.getRequest().getRequestURI();<br>        remoteAddr = requestAttributes.getRequest().getRemoteAddr();<br>    &#125;<br>    log.info(<span class="hljs-string">&quot;restapi into, remoteAddr: &#123;&#125;,  url: &#123;&#125;, args: &#123;&#125;&quot;</span>, remoteAddr, url, joinPoint.getArgs());<br>    <span class="hljs-keyword">return</span> url;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;ProceedingJoinPoint&quot;&gt;&lt;a href=&quot;#ProceedingJoinPoint&quot; class=&quot;header</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.yahyav2rayssr.top/categories/Java/"/>
    
    <category term="Spring" scheme="https://blog.yahyav2rayssr.top/categories/Java/Spring/"/>
    
    
    <category term="spring" scheme="https://blog.yahyav2rayssr.top/tags/spring/"/>
    
    <category term="aop" scheme="https://blog.yahyav2rayssr.top/tags/aop/"/>
    
  </entry>
  
  <entry>
    <title>Spring Validation 校验</title>
    <link href="https://blog.yahyav2rayssr.top/posts/698a4e8e/"/>
    <id>https://blog.yahyav2rayssr.top/posts/698a4e8e/</id>
    <published>2023-04-16T20:18:10.864Z</published>
    <updated>2023-04-16T20:18:10.864Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="NotNull-和-NotEmpty-和-NotBlank-区别"><a href="#NotNull-和-NotEmpty-和-NotBlank-区别" class="headerlink" title="@NotNull 和 @NotEmpty 和 @NotBlank 区别"></a><code>@NotNull</code> 和 <code>@NotEmpty</code> 和 <code>@NotBlank</code> 区别</h2><ul><li><p>@NotNull：不能为null，但可以为empty</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure">(<span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot; &quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;   &quot;</span>)<br></code></pre></td></tr></table></figure></li><li><p>@NotEmpty：不能为null，而且长度必须大于0</p><p>其本质是CharSequence, Collection, Map, or Array的size或者length不能为0</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure">(<span class="hljs-string">&quot; &quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;  &quot;</span>)<br></code></pre></td></tr></table></figure></li><li><p>@NotBlank：只能作用在String上，不能为null，而且调用trim()后，长度必须大于0</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">(<span class="hljs-string">&quot;test&quot;</span>)    即：必须有实际字符<br></code></pre></td></tr></table></figure></li><li><p>@NonNull</p><p>@NotNull 是 JSR303（Bean的校验框架）的注解，用于运行时检查一个属性是否为空，如果为空则不合法。<br>@NonNull 是JSR 305（缺陷检查框架）的注解，是告诉编译器这个域不可能为空，当代码检查有空值时会给出一个风险警告，目前这个注解只有IDEA支持。</p></li></ul><h2 id="Validated-和-Valid-的区别"><a href="#Validated-和-Valid-的区别" class="headerlink" title="@Validated 和 @Valid 的区别"></a><code>@Validated</code> 和 <code>@Valid</code> 的区别</h2><h3 id="1-分组"><a href="#1-分组" class="headerlink" title="1. 分组"></a><strong>1. 分组</strong></h3><p>@Validated：提供了一个分组功能，可以在入参验证时，根据不同的分组采用不同的验证机制，这个网上也有资料，不详述。</p><p>@Valid：作为标准JSR-303规范，还没有吸收分组的功能。</p><p><strong>分组校验支撑继承归类分组</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ValidationGroups</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Common</span> &#123;<br>        <br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Insert</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Common</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Update</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Common</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">List</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Common</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Export</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Common</span> &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-注解地方"><a href="#2-注解地方" class="headerlink" title="2. 注解地方"></a><strong>2. 注解地方</strong></h3><p>@Validated：可以用在类型、方法和方法参数上。但是不能用在成员属性（字段）上</p><p>@Valid：可以用在方法、构造函数、方法参数和成员属性（字段）上</p><p>两者是否能用于成员属性（字段）上直接影响能否提供嵌套验证的功能。</p><blockquote><p>嵌套验证必须用@Valid</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Item</span> &#123;<br><br>    <span class="hljs-meta">@NotNull(message = &quot;id不能为空&quot;)</span><br>    <span class="hljs-meta">@Min(value = 1, message = &quot;id必须为正整数&quot;)</span><br>    <span class="hljs-keyword">private</span> Long id;<br><br>    <span class="hljs-meta">@Valid</span> <span class="hljs-comment">// 嵌套验证必须用@Valid</span><br>    <span class="hljs-meta">@NotNull(message = &quot;props不能为空&quot;)</span><br>    <span class="hljs-meta">@Size(min = 1, message = &quot;props至少要有一个自定义属性&quot;)</span><br>    <span class="hljs-keyword">private</span> List&lt;Prop&gt; props;<br>&#125;<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@NotEmpty</span><br><span class="hljs-keyword">private</span> List&lt;<span class="hljs-meta">@NotNull</span> <span class="hljs-meta">@Valid</span> UserInfo&gt; parents;<br></code></pre></td></tr></table></figure><p><strong>总结一下 @Validated 和 @Valid 在嵌套验证功能上的区别：</strong></p><p><strong>@Validated：</strong> 用在方法入参上无法单独提供嵌套验证功能。不能用在成员属性（字段）上，也无法提示框架进行嵌套验证。能配合嵌套验证注解@Valid进行嵌套验证。</p><p><strong>@Valid：</strong> 用在方法入参上无法单独提供嵌套验证功能。能够用在成员属性（字段）上，提示验证框架进行嵌套验证。能配合嵌套验证注解@Valid进行嵌套验证。</p><table><thead><tr><th>注解</th><th>含义</th></tr></thead><tbody><tr><td>@AssertFalse</td><td>验证注解的元素值是false</td></tr><tr><td>@AssertTrue</td><td>验证注解的元素值是true</td></tr><tr><td>@DecimalMax(value)</td><td>不大于value的数值</td></tr><tr><td>@DecimalMin(value)</td><td>不小于value的数值</td></tr><tr><td>@Digits(integer,fraction)</td><td>整数部分不超过integer,小数部分不超过fraction</td></tr><tr><td>@Future</td><td>将来的日期</td></tr><tr><td>@Past</td><td>过去的日期</td></tr><tr><td>@Max(value)</td><td>不大于value的数值</td></tr><tr><td>@Min(value)</td><td>不小于value的数值</td></tr><tr><td>@Pattern(value)</td><td>满足指定正则表达式</td></tr><tr><td>@Size(max,min)</td><td>长度在min到max之间，用法同@Length，不过@Length是Hibernate的，推荐用@Size</td></tr></tbody></table><h2 id="BindingResult-校验模式"><a href="#BindingResult-校验模式" class="headerlink" title="BindingResult 校验模式"></a><code>BindingResult</code> 校验模式</h2><p>我们使用<code>BindingResult</code>验证不通过的结果集合，但是通常按顺序验证到第一个字段不符合验证要求时，就可以直接拒绝请求了。</p><p>这就涉及到两种<strong>校验模式</strong>的配置：</p><ol><li>普通模式（默认是这个模式）: 会校验完所有的属性，然后返回所有的验证失败信息</li><li>快速失败模式: 只要有一个验证失败，则返回<br>如果想要配置第二种模式，需要添加如下配置类：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.hibernate.validator.HibernateValidator;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> javax.validation.Validation;<br><span class="hljs-keyword">import</span> javax.validation.Validator;<br><span class="hljs-keyword">import</span> javax.validation.ValidatorFactory;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ValidatorConf</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Validator <span class="hljs-title function_">validator</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">ValidatorFactory</span> <span class="hljs-variable">validatorFactory</span> <span class="hljs-operator">=</span> Validation.byProvider( HibernateValidator.class )<br>                .configure()<br>                .failFast( <span class="hljs-literal">true</span> )<br>                .buildValidatorFactory();<br>        <span class="hljs-type">Validator</span> <span class="hljs-variable">validator</span> <span class="hljs-operator">=</span> validatorFactory.getValidator();<br><br>        <span class="hljs-keyword">return</span> validator;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="自定义校验注解"><a href="#自定义校验注解" class="headerlink" title="自定义校验注解"></a>自定义校验注解</h2><p>定义<code>@ListNotHasNull</code>注解， 用于校验 List 集合中是否有null 元素</p><blockquote><p>注意：message、groups、payload属性都需要定义在参数校验注解中不能缺省</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(&#123;ElementType.ANNOTATION_TYPE, ElementType.METHOD, ElementType.FIELD&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-comment">//此处指定了注解的实现类为ListNotHasNullValidatorImpl</span><br><span class="hljs-meta">@Constraint(validatedBy = ListNotHasNullValidatorImpl.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> ListNotHasNull &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加value属性，可以作为校验时的条件,若不需要，可去掉此处定义</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">value</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>;<br><br>    String <span class="hljs-title function_">message</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;List集合中不能含有null元素&quot;</span>;<br><br>    Class&lt;?&gt;[] groups() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>    Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Payload</span>&gt;[] payload() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 定义List，为了让Bean的一个属性上可以添加多套规则</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Target(&#123;ElementType.METHOD, ElementType.FIELD, ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR, ElementType.PARAMETER&#125;)</span><br>    <span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br>    <span class="hljs-meta">@Documented</span><br>    <span class="hljs-meta">@interface</span> List &#123;<br>        ListNotHasNull[] value();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="注解实现类"><a href="#注解实现类" class="headerlink" title="注解实现类"></a>注解实现类</h3><p>该类需要实现<code>ConstraintValidator</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> javax.validation.ConstraintValidator;<br><span class="hljs-keyword">import</span> javax.validation.ConstraintValidatorContext;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ListNotHasNullValidatorImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ConstraintValidator</span>&lt;ListNotHasNull, List&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> value;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initialize</span><span class="hljs-params">(ListNotHasNull constraintAnnotation)</span> &#123;<br>        <span class="hljs-comment">//传入value 值，可以在校验中使用</span><br>        <span class="hljs-built_in">this</span>.value = constraintAnnotation.value();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isValid</span><span class="hljs-params">(List list, ConstraintValidatorContext constraintValidatorContext)</span> &#123;<br>        <span class="hljs-keyword">for</span> (Object object : list) &#123;<br>            <span class="hljs-keyword">if</span> (object == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">//如果List集合中含有Null元素，校验失败</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后我们就能在之前的例子中使用该注解了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@NotEmpty</span><br><span class="hljs-meta">@ListNotHasNull</span><br><span class="hljs-keyword">private</span> List&lt;<span class="hljs-meta">@Valid</span> UserInfo&gt; parents;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;NotNull-和-NotEmpty-和-NotBlank-区别&quot;&gt;&lt;a href=&quot;#NotNull-和-NotEmpty-和-</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.yahyav2rayssr.top/categories/Java/"/>
    
    <category term="Spring" scheme="https://blog.yahyav2rayssr.top/categories/Java/Spring/"/>
    
    
    <category term="spring" scheme="https://blog.yahyav2rayssr.top/tags/spring/"/>
    
    <category term="validation" scheme="https://blog.yahyav2rayssr.top/tags/validation/"/>
    
  </entry>
  
  <entry>
    <title>Spring 常见错误</title>
    <link href="https://blog.yahyav2rayssr.top/posts/7be9f3eb/"/>
    <id>https://blog.yahyav2rayssr.top/posts/7be9f3eb/</id>
    <published>2023-04-16T20:07:32.116Z</published>
    <updated>2023-04-16T20:07:32.117Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="org-springframework-dao-InvalidDataAccessApiUsageException-Error-attempting-to-get-column-‘create-time’-from-result-set-Cause-java-sql-SQLFeatureNotSupportedException"><a href="#org-springframework-dao-InvalidDataAccessApiUsageException-Error-attempting-to-get-column-‘create-time’-from-result-set-Cause-java-sql-SQLFeatureNotSupportedException" class="headerlink" title="org.springframework.dao.InvalidDataAccessApiUsageException: Error attempting to get column ‘create_time’ from result set. Cause: java.sql.SQLFeatureNotSupportedException"></a>org.springframework.dao.InvalidDataAccessApiUsageException: Error attempting to get column ‘create_time’ from result set. Cause: java.sql.SQLFeatureNotSupportedException</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.21<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="解决-Spring-Boot-拦截器注入service为空的问题"><a href="#解决-Spring-Boot-拦截器注入service为空的问题" class="headerlink" title="解决 Spring Boot 拦截器注入service为空的问题"></a>解决 Spring Boot 拦截器注入service为空的问题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyWebAppConfigurer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebMvcConfigurerAdapter</span> &#123;<br><br>    <span class="hljs-comment">//关键，将拦截器作为bean写入配置中</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MyInterceptor <span class="hljs-title function_">myInterceptor</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyInterceptor</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>        <span class="hljs-comment">//多个拦截器组成一个拦截器链</span><br>        <span class="hljs-comment">// addPathPatterns用于添加拦截规则</span><br>        <span class="hljs-comment">// excludePathPatterns用户排除拦截</span><br>        registry.addInterceptor(myInterceptor()).addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>); <span class="hljs-comment">//对来自/** 全路径请求进行拦截</span><br>        <span class="hljs-built_in">super</span>.addInterceptors(registry);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="springboot整合websocket后打包报错"><a href="#springboot整合websocket后打包报错" class="headerlink" title="springboot整合websocket后打包报错"></a>springboot整合websocket后打包报错</h2><p><code>javax.websocket.server.ServerContainer not available</code></p><p>需要在test类中加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)</span><br></code></pre></td></tr></table></figure><h2 id="Method-annotated-with-Bean-is-called-directly-Use-dependency-injection-instead"><a href="#Method-annotated-with-Bean-is-called-directly-Use-dependency-injection-instead" class="headerlink" title="Method annotated with @Bean is called directly. Use dependency injection instead."></a>Method annotated with @Bean is called directly. Use dependency injection instead.</h2><p>未添加@Configuration注解，导致@Bean之间相互调用出错</p><p>因此把类名上面增加@Configuration注解即可解决。</p><h2 id="解决-org-yaml-snakeyaml-error-YAMLException-java-nio-charset-MalformedInputException-Input-length"><a href="#解决-org-yaml-snakeyaml-error-YAMLException-java-nio-charset-MalformedInputException-Input-length" class="headerlink" title="解决 org.yaml.snakeyaml.error.YAMLException: java.nio.charset.MalformedInputException: Input length"></a>解决 org.yaml.snakeyaml.error.YAMLException: java.nio.charset.MalformedInputException: Input length</h2><p>修改编码格式</p><img src="/posts/7be9f3eb/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xvbGVyMTU=,size_16,color_FFFFFF,t_70.png" class alt="解决方案"><p>将其改成UTF-8<br>复制yml里面的代码，删除yml再创个新的yml配置文件，将代码复制进去。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;org-springframework-dao-InvalidDataAccessApiUsageException-Error-</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.yahyav2rayssr.top/categories/Java/"/>
    
    <category term="Spring" scheme="https://blog.yahyav2rayssr.top/categories/Java/Spring/"/>
    
    
    <category term="spring" scheme="https://blog.yahyav2rayssr.top/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring 全局属性转换配置</title>
    <link href="https://blog.yahyav2rayssr.top/posts/940ce4f5/"/>
    <id>https://blog.yahyav2rayssr.top/posts/940ce4f5/</id>
    <published>2023-04-16T19:54:04.490Z</published>
    <updated>2023-04-16T19:54:04.490Z</updated>
    
    <content type="html"><![CDATA[<h1 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h1><h2 id="json空值统一返回处理："><a href="#json空值统一返回处理：" class="headerlink" title="json空值统一返回处理："></a>json空值统一返回处理：</h2><p>ObjectMapper 方式，配置代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JsonEmptyConvertorConfiguration</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@Primary</span><br>    <span class="hljs-meta">@ConditionalOnMissingBean(ObjectMapper.class)</span><br>    <span class="hljs-keyword">public</span> ObjectMapper <span class="hljs-title function_">objectMapper</span><span class="hljs-params">(Jackson2ObjectMapperBuilder builder)</span> &#123;<br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> builder.createXmlMapper(<span class="hljs-literal">false</span>).build();<br>        <span class="hljs-type">SerializerProvider</span> <span class="hljs-variable">serializerProvider</span> <span class="hljs-operator">=</span> objectMapper.getSerializerProvider();<br>        serializerProvider.setNullValueSerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">NullSerializer</span>());<br>        log.info(<span class="hljs-string">&quot;注入objectMapper&quot;</span>);<br>        <span class="hljs-keyword">return</span> objectMapper;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NullSerializer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JsonSerializer</span>&lt;Object&gt; &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object value, JsonGenerator jsonGenerator, SerializerProvider provider)</span><br>                <span class="hljs-keyword">throws</span> IOException &#123;<br>            jsonGenerator.writeString(<span class="hljs-string">&quot;&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Jackson-全局注册序列化-x2F-反序列化配置"><a href="#Jackson-全局注册序列化-x2F-反序列化配置" class="headerlink" title="Jackson 全局注册序列化&#x2F;反序列化配置"></a>Jackson 全局注册序列化&#x2F;反序列化配置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JacksonConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@Primary</span><br>    <span class="hljs-keyword">public</span> ObjectMapper <span class="hljs-title function_">stringObjectMapper</span><span class="hljs-params">(Jackson2ObjectMapperBuilder jackson2ObjectMapperBuilder)</span>&#123;<br>        ObjectMapper objectMapper= jackson2ObjectMapperBuilder.build();<br>        <span class="hljs-type">SimpleModule</span> <span class="hljs-variable">simpleModule</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleModule</span>();<br>        simpleModule.addDeserializer(String.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BlankStringToEmptyCharacterDeserializer</span>());<br>        objectMapper.registerModule(simpleModule);<br>        <span class="hljs-keyword">return</span> objectMapper;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="initBinder-全局配置"><a href="#initBinder-全局配置" class="headerlink" title="initBinder 全局配置"></a>initBinder 全局配置</h2><h3 id="CustomPropertyEditorConfiguration"><a href="#CustomPropertyEditorConfiguration" class="headerlink" title="CustomPropertyEditorConfiguration"></a>CustomPropertyEditorConfiguration</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomPropertyEditorConfiguration</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setWebBindingInitializer</span><span class="hljs-params">(RequestMappingHandlerAdapter requestMappingHandlerAdapter)</span> &#123;<br>        <span class="hljs-comment">//将自定义的CustomDateWebBindingInitializer属性编辑器绑定到RequestMappingHandlerAdapter里面.</span><br>        requestMappingHandlerAdapter.setWebBindingInitializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DataBindingInitializer</span>());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="DataBindingInitializer"><a href="#DataBindingInitializer" class="headerlink" title="DataBindingInitializer"></a>DataBindingInitializer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sf.ibu.base.convert.databinding.propertyeditor.NullStringToEmptyStringPropertyEditor;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.WebDataBinder;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.support.WebBindingInitializer;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DataBindingInitializer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebBindingInitializer</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initBinder</span><span class="hljs-params">(WebDataBinder binder)</span> &#123;<br>        <span class="hljs-comment">// 注册自定义编辑器</span><br>        binder.registerCustomEditor(String.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullStringToEmptyStringPropertyEditor</span>());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="NullStringToEmptyStringPropertyEditor"><a href="#NullStringToEmptyStringPropertyEditor" class="headerlink" title="NullStringToEmptyStringPropertyEditor"></a>NullStringToEmptyStringPropertyEditor</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.beans.PropertyEditorSupport;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NullStringToEmptyStringPropertyEditor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">PropertyEditorSupport</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAsText</span><span class="hljs-params">(String text)</span> <span class="hljs-keyword">throws</span> IllegalArgumentException &#123;<br>        <span class="hljs-keyword">if</span> (text == <span class="hljs-literal">null</span> || <span class="hljs-string">&quot;&quot;</span>.equals(text.trim())) &#123;<br>            text = <span class="hljs-string">&quot;&quot;</span>;<br>        &#125;<br>        setValue(text);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getAsText</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (getValue() != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> getValue().toString();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;全局配置&quot;&gt;&lt;a href=&quot;#全局配置&quot; class=&quot;headerlink&quot; title=&quot;全局配置&quot;&gt;&lt;/a&gt;全局配置&lt;/h1&gt;&lt;h2 id=&quot;json空值统一返回处理：&quot;&gt;&lt;a href=&quot;#json空值统一返回处理：&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.yahyav2rayssr.top/categories/Java/"/>
    
    <category term="Spring" scheme="https://blog.yahyav2rayssr.top/categories/Java/Spring/"/>
    
    
    <category term="spring" scheme="https://blog.yahyav2rayssr.top/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis-plus 基本配置</title>
    <link href="https://blog.yahyav2rayssr.top/posts/3080fe57/"/>
    <id>https://blog.yahyav2rayssr.top/posts/3080fe57/</id>
    <published>2023-04-16T19:48:23.718Z</published>
    <updated>2023-04-16T19:48:23.718Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="mybatis-plus配置控制台打印完整带参数SQL语句"><a href="#mybatis-plus配置控制台打印完整带参数SQL语句" class="headerlink" title="mybatis-plus配置控制台打印完整带参数SQL语句"></a>mybatis-plus配置控制台打印完整带参数SQL语句</h2><h3 id="解决方案（StdOutImpl）"><a href="#解决方案（StdOutImpl）" class="headerlink" title="解决方案（StdOutImpl）"></a>解决方案（StdOutImpl）</h3><p>请注意: 部分朋友反馈不生效，估计跟引入的包有一定关系，druid+<code>mybatis-plus-boot-starter</code> 就亲测有用。请检查是否有log4j相关实现类。</p><p>如果是<code>application.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># by zhengkai.blog.csdn.net</span><br><span class="hljs-comment"># mybatis-plus配置控制台打印完整带参数SQL语句</span><br><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-attr">configuration:</span><br>    <span class="hljs-attr">log-impl:</span> <span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span><br></code></pre></td></tr></table></figure><p>如果是application.properties，添加：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># mybatis-plus配置控制台打印完整带参数SQL语句</span><br><span class="hljs-string">mybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl</span><br></code></pre></td></tr></table></figure><p>Mybatis内置的日志工厂提供日志功能，具体的日志实现有以下几种方式：</p><ul><li>SLF4J</li><li>Apache Commons Logging</li><li>Log4j 2</li><li>Log4j</li><li>JDK logging</li><li>no logging</li></ul><p>具体选择哪个日志实现由MyBatis的LogFactory<code>内置日志工厂</code>确定。它会使用最先找到的（按上文列举的顺序查找）。 如果一个都未找到，日志功能就会被禁用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> &#123;<br>    tryImplementation(LogFactory::useSlf4jLogging);<br>    tryImplementation(LogFactory::useCommonsLogging);<br>    tryImplementation(LogFactory::useLog4J2Logging);<br>    tryImplementation(LogFactory::useLog4JLogging);<br>    tryImplementation(LogFactory::useJdkLogging);<br>    tryImplementation(LogFactory::useNoLogging);<br>&#125;<br></code></pre></td></tr></table></figure><p>不少应用服务器的classpath中已经包含Commons Logging，如Tomcat和WebShpere， 所以MyBatis会把它作为具体的日志实现。</p><p>记住这点非常重要。这意味着，在诸如 WebSphere的环境中——WebSphere提供了Commons Logging的私有实现，你的Log4J配置将被忽略。</p><p>这种做法不免让人悲摧，MyBatis怎么能忽略你的配置呢？事实上，因Commons Logging已经存 在，按优先级Log4J自然就被忽略了！</p><p><strong>控制台输出</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">--- [ XNIO-<span class="hljs-number">1</span> task-<span class="hljs-number">12</span>] c.s.cms.controller.IndexController       : username-admin-password-<span class="hljs-number">123456</span>-****<br>Creating a <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSession</span><br>SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@708e9ffd] was not registered <span class="hljs-keyword">for</span> synchronization because synchronization is not active<br>--- [ XNIO-<span class="hljs-number">1</span> task-<span class="hljs-number">12</span>] com.alibaba.druid.pool.DruidDataSource   : &#123;dataSource-<span class="hljs-number">1</span>&#125; inited<br>JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@62b13210] will not be managed by Spring<br>==&gt;  Preparing: select * from user t where t.user_code=<span class="hljs-string">&#x27;admin&#x27;</span> and t.password=<span class="hljs-string">&#x27;123456&#x27;</span> <br>==&gt; Parameters: <br>&lt;==    Columns: user_id, user_code, create_date, modify_date, user_name, password, status, role_id, department_id, major_id, classes_id, year<br>&lt;==        Row: <span class="hljs-number">1</span>, admin, <span class="hljs-number">2020</span>-<span class="hljs-number">02</span>-<span class="hljs-number">15</span> <span class="hljs-number">22</span>:<span class="hljs-number">14</span>:<span class="hljs-number">32</span>, <span class="hljs-number">2020</span>-<span class="hljs-number">02</span>-<span class="hljs-number">18</span> <span class="hljs-number">23</span>:<span class="hljs-number">38</span>:<span class="hljs-number">51</span>, Moshow K ZHENG, <span class="hljs-number">123456</span>, <span class="hljs-number">1</span>, <span class="hljs-number">9</span>, <span class="hljs-number">1</span>, <span class="hljs-number">13</span>, <span class="hljs-number">113</span>, <span class="hljs-number">2020</span><br>&lt;==      Total: <span class="hljs-number">1</span><br>Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@708e9ffd]<br><span class="hljs-number">1234567891011</span><br></code></pre></td></tr></table></figure><h3 id="解决方案（手写MybatisPlusOutImpl）"><a href="#解决方案（手写MybatisPlusOutImpl）" class="headerlink" title="解决方案（手写MybatisPlusOutImpl）"></a>解决方案（手写MybatisPlusOutImpl）</h3><p>配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-attr">configuration:</span><br><span class="hljs-comment">#    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl</span><br><span class="hljs-comment">#    改为自己写的</span><br>    <span class="hljs-attr">log-impl:</span> <span class="hljs-string">com.softdev.system.config.MybatisPlusOutImpl</span><br></code></pre></td></tr></table></figure><p>java类 <code>MybatisPlusOutImpl</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.softdev.system.config;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.logging.Log;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> MybatisPlusOutImpl，直接使用控制台输出日志</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> zhengkai.blog.csdn.net</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisPlusOutImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Log</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MybatisPlusOutImpl</span><span class="hljs-params">(String clazz)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;MybatisPlusOutImpl::&quot;</span>+clazz);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isDebugEnabled</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isTraceEnabled</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">error</span><span class="hljs-params">(String s, Throwable e)</span> &#123;<br>        System.err.println(s);<br>        e.printStackTrace(System.err);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">error</span><span class="hljs-params">(String s)</span> &#123;<br>        System.err.println(<span class="hljs-string">&quot;MybatisPlusOutImpl::&quot;</span>+s);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">debug</span><span class="hljs-params">(String s)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;MybatisPlusOutImpl::&quot;</span>+s);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">trace</span><span class="hljs-params">(String s)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;MybatisPlusOutImpl::&quot;</span>+s);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">warn</span><span class="hljs-params">(String s)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;MybatisPlusOutImpl::&quot;</span>+s);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="解决方案（LOG-DEBUG模式）"><a href="#解决方案（LOG-DEBUG模式）" class="headerlink" title="解决方案（LOG-DEBUG模式）"></a>解决方案（LOG-DEBUG模式）</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 在application.yml 中增加配置，指定 mapper 文件所在的包，进入DEBUG模式</span><br><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">level:</span><br>    <span class="hljs-attr">com.baomidou.example.mapper:</span> <span class="hljs-string">debug</span><br></code></pre></td></tr></table></figure><h2 id="mapper-location-多路径配置"><a href="#mapper-location-多路径配置" class="headerlink" title="mapper-location 多路径配置"></a>mapper-location 多路径配置</h2><blockquote><p>在classpath后面的 * 必不可少，缺少型号的话后面的通配符不起作用，**表示可以表示任意多级目录。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">mybatis.mapper-locations=classpath:mappers/push/*.xml,classpath*:/mappers/*.xml<br></code></pre></td></tr></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="Invalid-bound-statement-无效的绑定"><a href="#Invalid-bound-statement-无效的绑定" class="headerlink" title="Invalid bound statement 无效的绑定"></a>Invalid bound statement 无效的绑定</h3><p>pom.xml 中 build 标签添加 resources 标签，内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 防止破坏压缩包文件 --&gt;</span><br><span class="hljs-comment">&lt;!-- filtering为true的时候 表示扩大属性替换范围: 替换资源过滤最终留下来的文件中的$&#123;&#125;占位符属性  --&gt;</span><br><span class="hljs-comment">&lt;!-- filtering为true的时候，这时只会把过滤的文件打到classpath下，filtering为false的时候，会把不需要过滤的文件打到classpath下 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.yml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.yml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;mybatis-plus配置控制台打印完整带参数SQL语句&quot;&gt;&lt;a href=&quot;#mybatis-plus配置控制台打印完整带参数</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.yahyav2rayssr.top/categories/Java/"/>
    
    <category term="mybatis" scheme="https://blog.yahyav2rayssr.top/categories/Java/mybatis/"/>
    
    
    <category term="mybatis" scheme="https://blog.yahyav2rayssr.top/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis-plus 代码用法</title>
    <link href="https://blog.yahyav2rayssr.top/posts/f384c0b1/"/>
    <id>https://blog.yahyav2rayssr.top/posts/f384c0b1/</id>
    <published>2023-04-16T19:44:13.181Z</published>
    <updated>2023-04-16T19:44:13.182Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TableField说明"><a href="#TableField说明" class="headerlink" title="TableField说明"></a>TableField说明</h1><img src="/posts/f384c0b1/20190930151444851.png" class alt="tableField说明"><h2 id="忽略属性"><a href="#忽略属性" class="headerlink" title="忽略属性"></a>忽略属性</h2><blockquote><p>使用 <code>@TableField</code> 注解</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@TableField(exist = false)</span><br><span class="hljs-keyword">private</span> List&lt;Object&gt; jsonObjects = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br></code></pre></td></tr></table></figure><h2 id="更新-x2F-插入-二次处理"><a href="#更新-x2F-插入-二次处理" class="headerlink" title="更新&#x2F;插入 二次处理"></a>更新&#x2F;插入 二次处理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@TableField(.. , update = &quot;%s+1&quot;)</span> <span class="hljs-comment">// 其中 %s 会填充为字段</span><br><span class="hljs-keyword">private</span> Integer intValue;<br><br><span class="hljs-meta">@TableField(.. , update = &quot;now()&quot;)</span> /使用数据库时间<br><span class="hljs-keyword">private</span> Date dateValue;<br></code></pre></td></tr></table></figure><h2 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@TableField(condition = SqlCondition.LIKE)</span><br><span class="hljs-keyword">private</span> String name;<br></code></pre></td></tr></table></figure><h1 id="and-xxx-x3D-‘xxxx’-or-yyy-x3D-‘yyy’-写法"><a href="#and-xxx-x3D-‘xxxx’-or-yyy-x3D-‘yyy’-写法" class="headerlink" title="and (xxx &#x3D; ‘xxxx’ or yyy &#x3D; ‘yyy’) 写法"></a>and (xxx &#x3D; ‘xxxx’ or yyy &#x3D; ‘yyy’) 写法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>().and(e -&gt; e<br>              .eq(Person::getName, <span class="hljs-string">&quot;z&quot;</span>)<br>              .or()<br>              .eq(Person::getAge, <span class="hljs-number">18</span>));<br></code></pre></td></tr></table></figure><h1 id="mybatis-plus-update用法"><a href="#mybatis-plus-update用法" class="headerlink" title="mybatis-plus update用法"></a>mybatis-plus update用法</h1><h2 id="根据id更新"><a href="#根据id更新" class="headerlink" title="根据id更新"></a>根据id更新</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>user.setUserId(<span class="hljs-number">1</span>);<br>user.setAge(<span class="hljs-number">29</span>);<br><br>user.updateById();<br>    or<br><span class="hljs-type">Integer</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> userMapper.updateById(user);<br></code></pre></td></tr></table></figure><h2 id="条件构造器作为参数进行更新"><a href="#条件构造器作为参数进行更新" class="headerlink" title="条件构造器作为参数进行更新"></a>条件构造器作为参数进行更新</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">UpdateWrapper&lt;User&gt; updateWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">UpdateWrapper</span>&lt;&gt;();<br>updateWrapper.eq(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;shimin&quot;</span>);<br><br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>user.setAge(<span class="hljs-number">18</span>);<br><br><span class="hljs-type">Integer</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> userMapper.update(user, updateWrapper);<br></code></pre></td></tr></table></figure><h2 id="条件构造器Set方法"><a href="#条件构造器Set方法" class="headerlink" title="条件构造器Set方法"></a>条件构造器Set方法</h2><p>假设只更新一个字段在使用updateWrapper 的构造器中也需要构造一个实体对象,这样比较麻烦。可以使用updateWrapper的set方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">UpdateWrapper&lt;User&gt; updateWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">UpdateWrapper</span>&lt;&gt;();<br>updateWrapper.eq(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;shimin&quot;</span>).set(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">35</span>);<br><br><span class="hljs-type">Integer</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> userMapper.update(<span class="hljs-literal">null</span>, updateWrapper);<br></code></pre></td></tr></table></figure><h2 id="lambda构造器"><a href="#lambda构造器" class="headerlink" title="lambda构造器"></a>lambda构造器</h2><p>LambdaUpdateWrapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">LambdaUpdateWrapper&lt;User&gt; lambdaUpdateWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaUpdateWrapper</span>&lt;&gt;();<br>      lambdaUpdateWrapper.eq(User::getRealName, <span class="hljs-string">&quot;shimin&quot;</span>).set(User::getAge, <span class="hljs-number">34</span>);<br><br>      <span class="hljs-type">Integer</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> userMapper.update(<span class="hljs-literal">null</span>, lambdaUpdateWrapper);<br></code></pre></td></tr></table></figure><p>LambdaUpdateChainWrapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">LambdaUpdateChainWrapper&lt;User&gt; lambdaUpdateChainWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaUpdateChainWrapper</span>&lt;&gt;(userMapper);<br><br>       <span class="hljs-type">boolean</span> <span class="hljs-variable">update</span> <span class="hljs-operator">=</span> lambdaUpdateChainWrapper.eq(User::getRealName, <span class="hljs-string">&quot;shimin&quot;</span>).set(User::getAge, <span class="hljs-number">33</span>).update();<br>       <br>       <br>       <span class="hljs-comment">//分步写</span><br>       lambdaUpdateChainWrapper.eq(User::getRealName, <span class="hljs-string">&quot;shimin&quot;</span>);<br>       <span class="hljs-keyword">if</span> (user.getAge == <span class="hljs-number">33</span>) &#123;<br>           lambdaUpdateChainWrapper.set(User::getAge, <span class="hljs-number">33</span>);<br>       &#125;<br>   lambdaUpdateChainWrapper.update();<br></code></pre></td></tr></table></figure><h1 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisPlusConfig</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 乐观锁 插件</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> OptimisticLockerInterceptor <span class="hljs-title function_">optimisticLoker</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OptimisticLockerInterceptor</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>同时在需要使用到乐观锁的表里加上version字段，可以设置默认值为 1（方便一点）。</p><img src="/posts/f384c0b1/20180627165557863.jpg" class alt="img"><p>对应的实体里加上version属性，注意version 属性上一定要加上mybatis-plus的 @Version注解，否则的话不会生效.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Version</span><br><span class="hljs-keyword">private</span> Integer version;<br></code></pre></td></tr></table></figure><h1 id><a href="#" class="headerlink" title></a></h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;TableField说明&quot;&gt;&lt;a href=&quot;#TableField说明&quot; class=&quot;headerlink&quot; title=&quot;TableField说明&quot;&gt;&lt;/a&gt;TableField说明&lt;/h1&gt;&lt;img src=&quot;/posts/f384c0b1/2019093</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.yahyav2rayssr.top/categories/Java/"/>
    
    <category term="mybatis" scheme="https://blog.yahyav2rayssr.top/categories/Java/mybatis/"/>
    
    
    <category term="mybatis" scheme="https://blog.yahyav2rayssr.top/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis-plus XML 标签用法</title>
    <link href="https://blog.yahyav2rayssr.top/posts/2f2b0963/"/>
    <id>https://blog.yahyav2rayssr.top/posts/2f2b0963/</id>
    <published>2023-04-16T19:41:48.826Z</published>
    <updated>2023-04-16T19:41:48.826Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mybatis传入字符串分割成数组并且遍历-并判断是否包含逗号"><a href="#Mybatis传入字符串分割成数组并且遍历-并判断是否包含逗号" class="headerlink" title="Mybatis传入字符串分割成数组并且遍历(并判断是否包含逗号)"></a>Mybatis传入字符串分割成数组并且遍历(并判断是否包含逗号)</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;stringParam != null and stringParam != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;stringParam.indexOf(&#x27;,&#x27;) != -1&quot;</span>&gt;</span><br>    and  stringParam in<br><span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;item&quot;</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;index&quot;</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;stringParam.split(&#x27;,&#x27;)&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span>&gt;</span><br>#&#123;item&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;stringParam.indexOf(&#x27;,&#x27;) == -1&quot;</span>&gt;</span><br>and  stringParam=#&#123;stringParam&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="数组IN遍历"><a href="#数组IN遍历" class="headerlink" title="数组IN遍历"></a>数组IN遍历</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;labelIds != null and labelIds.size &gt; 0&quot;</span>&gt;</span><br>AND (<br>t3.type = 1<br>AND t2.filter_id IN<br><span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;labelIds&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;index&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span><br>#&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br>)<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="嵌套查询以及传参"><a href="#嵌套查询以及传参" class="headerlink" title="嵌套查询以及传参"></a>嵌套查询以及传参</h1><blockquote><p>可通过在主SQL上建立入参伪列来实现resultMap中<code>&lt;collection&gt;</code>标签的参数传递</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;doctorListMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;cn.stylefeng.guns.modular.system.vo.DoctorListVO&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;doctorId&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;doctorId&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;openServices&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;selectOpenSevice&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;&#123;docId=doctorId,serviceIds=openServiceIds&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectOpenSevice&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;java.util.Map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;java.lang.String&quot;</span>&gt;</span><br>    SELECT<br>      DISTINCT si.service_name<br>    FROM $&#123;spoon&#125;.service_info si<br>      LEFT JOIN $&#123;spoon&#125;.doctor_service ds<br>        ON (si.id = ds.service_info_id)<br>    WHERE ds.doctor_id = #&#123;docId&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;serviceIds != null and serviceIds != &#x27;&#x27;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;serviceIds.indexOf(&#x27;,&#x27;) != -1&quot;</span>&gt;</span><br>            AND si.id IN<br>            <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;serviceIds.split(&#x27;,&#x27;)&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;item&quot;</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span><br>                #&#123;item&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;serviceIds.indexOf(&#x27;,&#x27;) == -1&quot;</span>&gt;</span><br>            AND si.id = #&#123;serviceIds&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="set-标签"><a href="#set-标签" class="headerlink" title="set 标签"></a>set 标签</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateAuthorIfNecessary&quot;</span>&gt;</span><br>    update Author<br>    <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;username != null&quot;</span>&gt;</span>username=#&#123;username&#125;,<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;password != null&quot;</span>&gt;</span>password=#&#123;password&#125;,<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;email != null&quot;</span>&gt;</span>email=#&#123;email&#125;,<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;bio != null&quot;</span>&gt;</span>bio=#&#123;bio&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>    where id=#&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure><p>等价于</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;trim prefix=<span class="hljs-string">&quot;SET&quot;</span> suffixOverrides=<span class="hljs-string">&quot;,&quot;</span>&gt;<br>    ...<br>&lt;/trim&gt;<br></code></pre></td></tr></table></figure><h1 id="trim-标签"><a href="#trim-标签" class="headerlink" title="trim 标签"></a>trim 标签</h1><ul><li>prefix: 当 trim 元素包含有内容时， 增加 prefix 所指定的前缀</li><li>prefixOverrides: 当 trim 元素包含有内容时， 去除 prefixOverrides 指定的 前缀</li><li>suffix: 当 trim 元素包含有内容时， 增加 suffix 所指定的后缀</li><li>suffixOverrides： 当 trim 元素包含有内容时， 去除 suffixOverrides 指定的后缀</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml">AND (<br>    <span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefixOverrides</span>=<span class="hljs-string">&quot;AND | OR&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">choose</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;&gt;</span></span><br><span class="hljs-string"><span class="hljs-tag">                /**/</span></span><br><span class="hljs-string"><span class="hljs-tag">            &lt;/when&gt;</span></span><br><span class="hljs-string"><span class="hljs-tag">            &lt;when test=&quot;</span>&quot;&gt;</span><br>                /**/<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span><br>)<br></code></pre></td></tr></table></figure><h1 id="foreach-标签"><a href="#foreach-标签" class="headerlink" title="foreach 标签"></a>foreach 标签</h1><ul><li>collection: 必填， 集合&#x2F;数组&#x2F;Map的名称.</li><li>item: 变量名。 即从迭代的对象中取出的每一个值</li><li>index: 索引的属性名。 当迭代的对象为 Map 时， 该值为 Map 中的 Key.</li><li>open: 循环开头的字符串</li><li>close: 循环结束的字符串</li><li>separator: 每次循环的分隔符</li></ul><h2 id="1-只有一个数组参数或集合参数"><a href="#1-只有一个数组参数或集合参数" class="headerlink" title="1. 只有一个数组参数或集合参数"></a>1. 只有一个数组参数或集合参数</h2><p>默认情况： 集合collection&#x3D;list， 数组是collection&#x3D;array</p><p>推荐： 使用 @Param 来指定参数的名称， 如我们在参数前@Param(“ids”)， 则就填写 collection&#x3D;ids</p><h2 id="2-多参数"><a href="#2-多参数" class="headerlink" title="2. 多参数"></a>2. 多参数</h2><p>多参数请使用 @Param 来指定， 否则SQL中会很不方便</p><h2 id="3-参数是Map"><a href="#3-参数是Map" class="headerlink" title="3. 参数是Map"></a>3. 参数是Map</h2><p>指定为 Map 中的对应的 Key 即可。 其实上面的 @Param 最后也是转化为 Map 的。</p><h2 id="4-参数是对象"><a href="#4-参数是对象" class="headerlink" title="4. 参数是对象"></a>4. 参数是对象</h2><p>使用属性.属性即可。</p><p>举个例子：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectByStudentIdList&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;BaseResultMap&quot;</span>&gt;</span><br>    select<br>    <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;Base_Column_List&quot;</span> /&gt;</span><br>    from student<br>    where student_id in<br>    <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;i&quot;</span>&gt;</span><br>      #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="include标签"><a href="#include标签" class="headerlink" title="include标签"></a>include标签</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;all_column&quot;</span>&gt;</span><br>       $&#123;alias&#125;.id,$&#123;alias&#125;.username,$&#123;alias&#125;.pazzword,$&#123;alias&#125;.state,$&#123;alias&#125;.reg_date<br><span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUser&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;cn.jq.mybatis.model.User&quot;</span>&gt;</span><br>select <br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;all_column&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;alias&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;t1&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span> <br>from t_user t1 where t1.id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">ai.articleTitle like concat(&#x27;%&#x27;,#&#123;pageInfo.searchText&#125;,&#x27;%&#x27;)<br></code></pre></td></tr></table></figure><h1 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null and name !=&#x27;&#x27;&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">bind</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;nameLike&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&#x27;%&#x27;+name+&#x27;%&#x27;&quot;</span>/&gt;</span><br>     and name like #&#123;nameLike&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="替换符号"><a href="#替换符号" class="headerlink" title="替换符号"></a>替换符号</h1><h2 id="写法一"><a href="#写法一" class="headerlink" title="写法一"></a>写法一</h2><table><thead><tr><th>原字符</th><th>替换字符</th></tr></thead><tbody><tr><td>&lt;</td><td>&amp;lt;</td></tr><tr><td>&lt;&#x3D;</td><td>&amp;lt;&#x3D;</td></tr><tr><td>&gt;</td><td>&amp;gt;</td></tr><tr><td>&gt;&#x3D;</td><td>&amp;gt;&#x3D;</td></tr><tr><td>&amp;</td><td>&amp;amp;</td></tr><tr><td>‘</td><td>&amp;apos;</td></tr><tr><td>“</td><td>&amp;quot;</td></tr></tbody></table><h2 id="写法二"><a href="#写法二" class="headerlink" title="写法二"></a>写法二</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">&lt;![CDATA[ **************** ]]&gt; 进行包裹<br></code></pre></td></tr></table></figure><h1 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h1><p><strong>局部配置</strong></p><h2 id="不使用缓存"><a href="#不使用缓存" class="headerlink" title="不使用缓存"></a>不使用缓存</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;cn.itcast.mybatis.po.User&quot;</span> <span class="hljs-attr">flushCache</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>  <br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findOrderListResultMap&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;ordersUserMap&quot;</span> <span class="hljs-attr">useCache</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="使用缓存"><a href="#使用缓存" class="headerlink" title="使用缓存"></a>使用缓存</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 开启二级缓存 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">cache</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;org.mybatis.caches.ehcache.LoggingEhcache&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>对应的pojo实现序列化(implements Serializable)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.activerecord.Model;<br><br><span class="hljs-keyword">public</span> class ?????? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Model</span><br><span class="hljs-comment">// 或者</span><br><span class="hljs-keyword">public</span> class ?????? <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span><br></code></pre></td></tr></table></figure><h1 id="useGeneratedKeys"><a href="#useGeneratedKeys" class="headerlink" title="useGeneratedKeys"></a>useGeneratedKeys</h1><h2 id="在settings元素中设置useGeneratedKeys参数"><a href="#在settings元素中设置useGeneratedKeys参数" class="headerlink" title="在settings元素中设置useGeneratedKeys参数"></a>在settings元素中设置useGeneratedKeys参数</h2><p>在settings元素中设置useGeneratedKeys是一个全局参数，但是只会对接口映射器产生影响，对xml映射器不起效。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">允许JDBC支持自动生成主键，需要驱动兼容。 </span><br><span class="hljs-comment">如果设置为true则这个设置强制使用自动生成主键，尽管一些驱动不能兼容但仍可正常工作（比如 Derby）。 </span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;useGeneratedKeys&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="在接口映射器中设置useGeneratedKeys参数"><a href="#在接口映射器中设置useGeneratedKeys参数" class="headerlink" title="在接口映射器中设置useGeneratedKeys参数"></a>在接口映射器中设置useGeneratedKeys参数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 在接口映射器中设置的useGeneratedKeys参数值将会覆盖在settings元素中设置全局useGeneratedKeys参数值</span><br><span class="hljs-meta">@Options(useGeneratedKeys = false, keyProperty = &quot;id&quot;, keyColumn = &quot;id&quot;)</span><br><span class="hljs-meta">@Insert(&quot;insert into test(name,descr,url,create_time,update_time) values(#&#123;name&#125;,#&#123;descr&#125;,#&#123;url&#125;,now(),now())&quot;)</span><br>Integer <span class="hljs-title function_">insertOneTest</span><span class="hljs-params">(Test test)</span>;<br></code></pre></td></tr></table></figure><h2 id="在xml映射器中配置useGeneratedKeys参数"><a href="#在xml映射器中配置useGeneratedKeys参数" class="headerlink" title="在xml映射器中配置useGeneratedKeys参数"></a>在xml映射器中配置useGeneratedKeys参数</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 插入数据:返回记录的id值 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertOneTest&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;org.chench.test.mybatis.model.Test&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">keyColumn</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><br>    insert into test(name,descr,url,create_time,update_time) <br>    values(#&#123;name&#125;,#&#123;descr&#125;,#&#123;url&#125;,now(),now())<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="JDBCType和JavaType映射关系"><a href="#JDBCType和JavaType映射关系" class="headerlink" title="JDBCType和JavaType映射关系"></a>JDBCType和JavaType映射关系</h1><table><thead><tr><th>JDBCType</th><th>JavaType</th></tr></thead><tbody><tr><td>CHAR</td><td>String</td></tr><tr><td>VARCHAR</td><td>String</td></tr><tr><td>LONGVARCHAR</td><td>String</td></tr><tr><td>NUMERIC</td><td>java.math.BigDecimal</td></tr><tr><td>DECIMAL</td><td>java.math.BigDecimal</td></tr><tr><td>BIT</td><td>boolean</td></tr><tr><td>BOOLEAN</td><td>boolean</td></tr><tr><td>TINYINT</td><td>byte</td></tr><tr><td>SMALLINT</td><td>short</td></tr><tr><td>INTEGER</td><td>int</td></tr><tr><td>BIGINT</td><td>long</td></tr><tr><td>REAL</td><td>float</td></tr><tr><td>FLOAT</td><td>double</td></tr><tr><td>DOUBLE</td><td>double</td></tr><tr><td>BINARY</td><td>byte[]</td></tr><tr><td>VARBINARY</td><td>byte[]</td></tr><tr><td>LONGVARBINARY</td><td>byte[]</td></tr><tr><td>DATE</td><td>java.sql.Date</td></tr><tr><td>TIME</td><td>java.sql.Time</td></tr><tr><td>TIMESTAMP</td><td>java.sql.Timestamp</td></tr><tr><td>CLOB</td><td>Clob</td></tr><tr><td>BLOB</td><td>Blob</td></tr><tr><td>ARRAY</td><td>Array</td></tr><tr><td>DISTINCT</td><td>mapping of underlying type</td></tr><tr><td>STRUCT</td><td>Struct</td></tr><tr><td>REF</td><td>Ref</td></tr><tr><td>DATALINK</td><td>java.net.URL</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Mybatis传入字符串分割成数组并且遍历-并判断是否包含逗号&quot;&gt;&lt;a href=&quot;#Mybatis传入字符串分割成数组并且遍历-并判断是否包含逗号&quot; class=&quot;headerlink&quot; title=&quot;Mybatis传入字符串分割成数组并且遍历(并判断是否包含逗</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.yahyav2rayssr.top/categories/Java/"/>
    
    <category term="mybatis" scheme="https://blog.yahyav2rayssr.top/categories/Java/mybatis/"/>
    
    
    <category term="mybatis" scheme="https://blog.yahyav2rayssr.top/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>HTTP 状态码</title>
    <link href="https://blog.yahyav2rayssr.top/posts/e1434ae1/"/>
    <id>https://blog.yahyav2rayssr.top/posts/e1434ae1/</id>
    <published>2023-04-16T19:27:06.258Z</published>
    <updated>2023-04-16T19:27:06.259Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTTP-状态码一览"><a href="#HTTP-状态码一览" class="headerlink" title="HTTP 状态码一览"></a>HTTP 状态码一览</h1><h2 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h2><h3 id="信息：1xx"><a href="#信息：1xx" class="headerlink" title="信息：1xx"></a>信息：1xx</h3><p>代表请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束。</p><table><thead><tr><th>消息：</th><th align="center">描述：</th></tr></thead><tbody><tr><td>100 Continue</td><td align="center">服务器仅接收到部分请求，但是一旦服务器并没有拒绝该请求，客户端应该继续发送其余的请求</td></tr><tr><td>101 Switching Protocols</td><td align="center">服务器转换协议，服务器将遵从客户的请求转换到另外一种协议</td></tr><tr><td>102 Processing</td><td align="center">代表处理将被继续执行</td></tr></tbody></table><h3 id="成功：2xx"><a href="#成功：2xx" class="headerlink" title="成功：2xx"></a>成功：2xx</h3><p>代表请求已成功被服务器接收、理解、并接受。</p><table><thead><tr><th>消息：</th><th align="center">描述：</th></tr></thead><tbody><tr><td>200 OK</td><td align="center">请求成功，表示正常状态</td></tr><tr><td>201 Created</td><td align="center">请求被创建完成，同时新的资源被创建立</td></tr><tr><td>202 Accepted</td><td align="center">处理的请求已被接受，但处理未完成</td></tr><tr><td>203 Non-authoritative Information</td><td align="center">服务器已成功处理了请求，但一些应答头可能不正确，因为使用的是文档的拷贝</td></tr><tr><td>204 No Content</td><td align="center">服务器成功处理了请求，但不需要返回任何实体内容，并且希望返回更新了的元信息</td></tr><tr><td>205 Reset Content</td><td align="center">服务器成功处理了请求，且没有返回任何内容，返回此状态码的响应要求请求者重置文档视图</td></tr><tr><td>206 Partial Content</td><td align="center">服务器已经成功处理了部分 GET 请求</td></tr><tr><td>207 Multi-Status</td><td align="center">代表之后的消息体将是一个XML消息</td></tr></tbody></table><h3 id="重定向：3xx"><a href="#重定向：3xx" class="headerlink" title="重定向：3xx"></a>重定向：3xx</h3><p>代表需要客户端采取进一步的操作才能完成请求。</p><table><thead><tr><th>消息：</th><th align="center">描述：</th></tr></thead><tbody><tr><td>300 Multiple Choices</td><td align="center">被请求的资源有一系列可供选择的回馈信息，每个都有自己特定的地址和浏览器驱动的商议信息。用户或浏览器能够自行选择一个首选的地址进行重定向</td></tr><tr><td>301 Moved Permanently</td><td align="center">所请求的资源已经转移至新的url</td></tr><tr><td>302 Move temporarily</td><td align="center">请求的资源临时从不同的 URI响应请求</td></tr><tr><td>303 See Other</td><td align="center">所请求的页面可在别的url下被找到，客户端应当采用 GET 的方式访问那个资源</td></tr><tr><td>304 Not Modified</td><td align="center">服务器告诉客户，原来缓冲的文档还可以继续使用</td></tr><tr><td>305 Use Proxy</td><td align="center">被请求的资源必须通过指定的代理才能被访问</td></tr><tr><td>306 Switch Proxy</td><td align="center">目前已不再使用，但是代码依然被保留</td></tr><tr><td>307 Temporary Redirect</td><td align="center">请求的资源临时从不同的URI 响应请求</td></tr></tbody></table><h3 id="客户端错误：4xx"><a href="#客户端错误：4xx" class="headerlink" title="客户端错误：4xx"></a>客户端错误：4xx</h3><p>代表了客户端看起来可能发生了错误，妨碍了服务器的处理。</p><table><thead><tr><th>消息:</th><th align="center">描述:</th></tr></thead><tbody><tr><td>400 Bad Request</td><td align="center">语义有误，服务器未能理解请求。或请求参数有误</td></tr><tr><td>401 Unauthorized</td><td align="center">被请求的页面需要用户名和密码</td></tr><tr><td>402 Payment Required</td><td align="center">为了将来可能的需求而预留的</td></tr><tr><td>403 Forbidden</td><td align="center">对被请求资源的访问被禁止</td></tr><tr><td>404 Not Found</td><td align="center">服务器无法找到被请求的资源</td></tr><tr><td>405 Method Not Allowed</td><td align="center">请求中指定的方法不被允许</td></tr><tr><td>406 Not Acceptable</td><td align="center">服务器生成的响应无法被客户端所接受</td></tr><tr><td>407 Proxy Authentication Required</td><td align="center">用户必须首先使用代理服务器进行验证，这样请求才会被处理</td></tr><tr><td>408 Request Timeout</td><td align="center">请求超出了服务器的等待时间</td></tr><tr><td>409 Conflict</td><td align="center">和被请求的资源的当前状态之间存在冲突，请求无法完成</td></tr><tr><td>410 Gone</td><td align="center">被请求的资源在服务器上已经不再可用，而且没有任何已知的转发地址</td></tr><tr><td>411 Length Required</td><td align="center">“Content-Length” 未被定义。如果无此内容，服务器不会接受请求</td></tr><tr><td>412 Precondition Failed</td><td align="center">请求中的前提条件被服务器评估为失败</td></tr><tr><td>413 Request Entity Too Large</td><td align="center">由于所请求的实体数据太大，服务器不会接受请求</td></tr><tr><td>414 Request-url Too Long</td><td align="center">由于url太长，服务器不会接受请求。当post请求被转换为带有很长的查询信息的get请求时，就会发生这种情况</td></tr><tr><td>415 Unsupported Media Type</td><td align="center">由于请求中格式类型不被支持，服务器不会接受请求</td></tr><tr><td>416 Requested Range Not Satisfiable</td><td align="center">客户在请求中指定的Range头与当前资源的可用范围不重合</td></tr><tr><td>417 Expectation Failed</td><td align="center">在请求头 Expect 中指定的预期内容无法被服务器满足</td></tr><tr><td>421 too many connections</td><td align="center">当前客户端所在的IP地址到服务器的连接数超过了服务器许可的最大范围</td></tr><tr><td>422 Unprocessable Entity</td><td align="center">请求格式正确，但是由于含有语义错误，无法响应</td></tr><tr><td>423 Locked</td><td align="center">当前资源被锁定</td></tr><tr><td>424 Failed Dependency</td><td align="center">之前的某个请求发生的错误，导致当前请求失败</td></tr><tr><td>425 Unordered Collectiond</td><td align="center"></td></tr><tr><td>449 Retry With</td><td align="center">客户端应当切换到TLS&#x2F;1.0</td></tr><tr><td>425 Unordered Collectiond</td><td align="center">由微软扩展，代表请求应当在执行完适当的操作后进行重试</td></tr><tr><td>451 Unavailable For Legal Reasons</td><td align="center">该请求因法律原因不可用</td></tr></tbody></table><h3 id="服务器错误：5xx，-6xx"><a href="#服务器错误：5xx，-6xx" class="headerlink" title="服务器错误：5xx， 6xx"></a>服务器错误：5xx， 6xx</h3><p>代表了服务器在处理请求的过程中有错误或者异常状态发生，也有可能是服务器意识到以当前的软硬件资源无法完成对请求的处理</p><table><thead><tr><th>消息:</th><th align="center">描述:</th></tr></thead><tbody><tr><td>500 Internal Server Error</td><td align="center">请求未完成，服务器遇到不可预知的情况。一般为服务器源码出现问题</td></tr><tr><td>501 Not Implemented</td><td align="center">请求未完成，服务器不支持所请求的功能</td></tr><tr><td>502 Bad Gateway</td><td align="center">请求未完成，网关或者代理工作的服务器尝试执行请求，从上游服务器收到一个无效的响应</td></tr><tr><td>503 Service Unavailable</td><td align="center">请求未完成，服务器临时过载或维护</td></tr><tr><td>504 Gateway Timeout</td><td align="center">网关或者代理工作的服务器尝试执行请求超时</td></tr><tr><td>505 HTTP Version Not Supported</td><td align="center">服务器不支持或拒绝请求中指明的HTTP协议版本</td></tr><tr><td>506 Variant Also Negotiates</td><td align="center">服务器存在内部配置错误</td></tr><tr><td>507 Insufficient Storage</td><td align="center">服务器无法存储完成请求所必须的内容</td></tr><tr><td>509 Bandwidth Limit Exceeded</td><td align="center">服务器达到带宽限制</td></tr><tr><td>510 Not Extended</td><td align="center">获取资源所需要的策略并没有被满足</td></tr><tr><td>600 Unparseable Response Headers</td><td align="center">没有返回响应头部，只返回实体内容</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;HTTP-状态码一览&quot;&gt;&lt;a href=&quot;#HTTP-状态码一览&quot; class=&quot;headerlink&quot; title=&quot;HTTP 状态码一览&quot;&gt;&lt;/a&gt;HTTP 状态码一览&lt;/h1&gt;&lt;h2 id=&quot;状态&quot;&gt;&lt;a href=&quot;#状态&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="网络通讯" scheme="https://blog.yahyav2rayssr.top/categories/%E7%BD%91%E7%BB%9C%E9%80%9A%E8%AE%AF/"/>
    
    
    <category term="http" scheme="https://blog.yahyav2rayssr.top/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>HTTP 基础知识</title>
    <link href="https://blog.yahyav2rayssr.top/posts/e5fda0b2/"/>
    <id>https://blog.yahyav2rayssr.top/posts/e5fda0b2/</id>
    <published>2023-04-16T19:27:02.751Z</published>
    <updated>2023-04-16T19:27:02.752Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTTP-基础知识"><a href="#HTTP-基础知识" class="headerlink" title="HTTP 基础知识"></a>HTTP 基础知识</h1><h2 id="三次握手，四次挥手"><a href="#三次握手，四次挥手" class="headerlink" title="三次握手，四次挥手"></a>三次握手，四次挥手</h2><p><strong>TCP三次握手过程</strong></p><ol><li>主机A通过向主机B发送一个含有同步序列号的标志位的数据段给主机B ,向主机B 请求建立连接,通过这个数据段,</li></ol><p>主机A告诉主机B两件事:我想要和你通信;你可以用哪个序列号作为起始数据段来回应我.</p><ol start="2"><li>主机B收到主机A的请求后,用一个带有确认应答(ACK)和同步序列号(SYN)标志位的数据段响应主机A,也告诉主机A两件事:</li></ol><p>我已经收到你的请求了,你可以传输数据了;你要用哪佧序列号作为起始数据段来回应我</p><ol start="3"><li>主机A收到这个数据段后,再发送一个确认应答,确认已收到主机B的数据段:”我已收到回复,我现在要开始传输实际数据了</li></ol><p>这样3次握手就完成了,主机A和主机B就可以传输数据了.</p><p><strong>3次握手的特点</strong></p><ul><li>没有应用层的数据</li><li>SYN这个标志位只有在TCP建立连接时才会被置1</li><li>握手完成后SYN标志位被置0</li></ul><img src="http 基础/201.png" style="zoom:80%;"><p><strong>TCP建立连接要进行3次握手,而断开连接要进行4次</strong></p><ol><li><p>当主机A完成数据传输后,将控制位FIN置1,提出停止TCP连接的请求</p></li><li><p>主机B收到FIN后对其作出响应,确认这一方向上的TCP连接将关闭,将ACK置1</p></li><li><p>由B端再提出反方向的关闭请求,将FIN置1</p></li><li><p>主机A对主机B的请求进行确认,将ACK置1,双方向的关闭结束.</p></li></ol><p>由TCP的三次握手和四次断开可以看出,TCP使用面向连接的通信方式,大大提高了数据通信的可靠性,使发送数据端和接收端在数据正式传输前就有了交互,为数据正式传输打下了可靠的基础。</p><img src="http 基础/202.png" style="zoom:80%;"><p><strong>名词解释</strong></p><p>ACK：TCP报头的控制位之一,对数据进行确认.确认由目的端发出,用它来告诉发送端这个序列号之前的数据段</p><p>都收到了.比如,确认号为X,则表示前X-1个数据段都收到了,只有当ACK&#x3D;1时,确认号才有效,当ACK&#x3D;0时,确认号无效,这时会要求重传数据,保证数据的完整性.</p><p>SYN：同步序列号,TCP建立连接时将这个位置1</p><p>FIN：发送端完成发送任务位,当TCP完成数据传输需要断开时,提出断开连接的一方将这位置1</p><h2 id="TCP-与-UDP"><a href="#TCP-与-UDP" class="headerlink" title="TCP 与 UDP"></a>TCP 与 UDP</h2><ul><li><p><strong>TCP（Transmission Control Protocol，传输控制协议）</strong>是面向连接的协议，也就是说，在收发数据前，必须和对方建立可靠的连接。一个TCP连接必须要经过三次“对话”才能建立起来，其中的过程非常复杂，只简单的描述下这三次对话的简单过程：主机A向主机B发出连接请求数据包：“我想给你发数据，可以吗？”，这是第一次对话；主机B向主机A发送同意连接和要求同步（同步就是两台主机一个在发送，一个在接收，协调工作）的数据包：“可以，你什么时候发？”，这是第二次对话；主机A再发出一个数据包确认主机B的要求同步：“我现在就发，你接着吧！”，这是第三次对话。三次“对话”的目的是使数据包的发送和接收同步，经过三次“对话”之后，主机A才向主机B正式发送数据。</p></li><li><p><strong>UDP（User Data Protocol，用户数据报协议）</strong></p></li></ul><ol><li><p>UDP是一个非连接的协议，传输数据之前源端和终端不建立连接，当它想传送时就简单地去抓取来自应用程序的数据，并尽可能快地把它扔到网络上。在发送端，UDP传送数据的速度仅仅是受应用程序生成数据的速度、计算机的能力和传输带宽的限制；在接收端，UDP把每个消息段放在队列中，应用程序每次从队列中读一个消息段。</p></li><li><p>由于传输数据不建立连接，因此也就不需要维护连接状态，包括收发状态等，因此一台服务机可同时向多个客户机传输相同的消息。</p></li><li><p>UDP信息包的标题很短，只有8个字节，相对于TCP的20个字节信息包的额外开销很小。</p></li><li><p>吞吐量不受拥挤控制算法的调节，只受应用软件生成数据的速率、传输带宽、源端和终端主机性能的限制。</p></li><li><p>UDP使用<strong>尽最大努力交付，</strong>即不保证可靠交付，因此主机不需要维持复杂的链接状态表（这里面有许多参数）。</p></li><li><p>UDP是<strong>面向报文</strong>的。发送方的UDP对应用程序交下来的报文，在添加首部后就向下交付给IP层。既不拆分，也不合并，而是保留这些报文的边界，因此，应用程序需要选择合适的报文大小。</p></li></ol><p>我们经常使用“ping”命令来测试两台主机之间TCP&#x2F;IP通信是否正常，其实“ping”命令的原理就是向对方主机发送UDP数据包，然后对方主机确认收到数据包，如果数据包是否到达的消息及时反馈回来，那么网络就是通的。</p><p><strong>UDP的包头结构：</strong></p><p>源端口 16位</p><p>目的端口 16位</p><p>长度 16位</p><p>校验和 16位</p><p><strong>小结TCP与UDP的区别：</strong></p><p>1.基于连接与无连接；</p><p>2.对系统资源的要求（TCP较多，UDP少）；</p><p>3.UDP程序结构较简单；</p><p>4.流模式与数据报模式 ；</p><p>5.TCP保证数据正确性，UDP可能丢包，TCP保证数据顺序，UDP不保证。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;HTTP-基础知识&quot;&gt;&lt;a href=&quot;#HTTP-基础知识&quot; class=&quot;headerlink&quot; title=&quot;HTTP 基础知识&quot;&gt;&lt;/a&gt;HTTP 基础知识&lt;/h1&gt;&lt;h2 id=&quot;三次握手，四次挥手&quot;&gt;&lt;a href=&quot;#三次握手，四次挥手&quot; class</summary>
      
    
    
    
    <category term="网络通讯" scheme="https://blog.yahyav2rayssr.top/categories/%E7%BD%91%E7%BB%9C%E9%80%9A%E8%AE%AF/"/>
    
    
    <category term="http" scheme="https://blog.yahyav2rayssr.top/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>Maven mvnw 详解</title>
    <link href="https://blog.yahyav2rayssr.top/posts/25549297/"/>
    <id>https://blog.yahyav2rayssr.top/posts/25549297/</id>
    <published>2023-04-16T19:22:54.606Z</published>
    <updated>2023-04-16T19:22:54.606Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mvnw-详解"><a href="#mvnw-详解" class="headerlink" title="mvnw 详解"></a>mvnw 详解</h1><p>我们使用Maven时，基本上只会用到<code>mvn</code>这一个命令。有些童鞋可能听说过<code>mvnw</code>，这个是啥？</p><p><code>mvnw</code>是 Maven Wrapper 的缩写。因为我们安装 Maven 时，默认情况下，系统所有项目都会使用全局安装的这个 Maven 版本。但是，<strong>对于某些项目来说，它可能必须使用某个特定的Maven 版本</strong>，这个时候，就可以使用 Maven Wrapper，它可以负责给这个特定的<strong>项目安装指定版本的Maven</strong>，而其他项目不受影响。</p><p>简单地说，Maven Wrapper 就是给一个项目提供一个独立的，指定版本的 Maven 给它使用。</p><h2 id="安装Maven-Wrapper"><a href="#安装Maven-Wrapper" class="headerlink" title="安装Maven Wrapper"></a>安装Maven Wrapper</h2><p>安装Maven Wrapper最简单的方式是在项目的根目录（即<code>pom.xml</code>所在的目录）下运行安装命令：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">mvn -N io.takari:maven:<span class="hljs-number">0.7</span><span class="hljs-number">.6</span>:<span class="hljs-keyword">wrapper</span><br></code></pre></td></tr></table></figure><p>它会自动使用最新版本的Maven。注意<code>0.7.6</code>是 Maven Wrapper 的版本。最新的 Maven Wrapper 版本可以去<a href="https://github.com/takari/maven-wrapper">官方网站</a>查看。</p><p>如果要指定使用的Maven版本，使用下面的安装命令指定版本，例如<code>3.6.3</code>：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">mvn -N io.takari:maven:<span class="hljs-number">0.7</span><span class="hljs-number">.6</span>:<span class="hljs-keyword">wrapper</span> -Dmaven=<span class="hljs-number">3.6</span><span class="hljs-number">.3</span><br></code></pre></td></tr></table></figure><p>安装后，查看项目结构：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">my-project<br>├── .mvn<br>│   └── <span class="hljs-keyword">wrapper</span><br>│       ├── MavenWrapperDownloader.java<br>│       ├── maven-<span class="hljs-keyword">wrapper</span>.jar<br>│       └── maven-<span class="hljs-keyword">wrapper</span>.properties<br>├── mvnw<br>├── mvnw.cmd<br>├── pom.xml<br>└── src<br>    ├── main<br>    │   ├── java<br>    │   └── resources<br>    └── test<br>        ├── java<br>        └── resources<br></code></pre></td></tr></table></figure><p>发现多了<code>mvnw</code>、<code>mvnw.cmd</code>和<code>.mvn</code>目录，我们只需要把<code>mvn</code>命令改成<code>mvnw</code>就可以使用跟项目关联的Maven。例如：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">mvnw clean <span class="hljs-keyword">package</span><br></code></pre></td></tr></table></figure><p>在Linux或macOS下运行时需要加上<code>./</code>：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">./mvnw clean <span class="hljs-keyword">package</span><br></code></pre></td></tr></table></figure><p>Maven Wrapper的另一个作用是把项目的<code>mvnw</code>、<code>mvnw.cmd</code>和<code>.mvn</code>提交到版本库中，可以使所有开发人员使用统一的Maven版本。</p><p><strong>以下为官方参考信息：</strong></p><blockquote><p>这使您可以运行Maven项目，而<strong>无需安装Maven</strong>并将其显示在路径上。如果找不到正确的Maven版本（就我所知，默认情况下在你的用户主目录中），它会下载它。</p><p><strong>该<code>mvnw</code>文件适用于Linux（bash），<code>mvnw.cmd</code>适用于Windows环境。</strong></p><p>要创建或更新所有必需的Maven Wrapper文件，请执行以下命令：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">mvn -N io.takari:maven:<span class="hljs-keyword">wrapper</span><br></code></pre></td></tr></table></figure><p>要使用不同版本的maven，可以按如下方式指定版本：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">mvn -N io.takari:maven:<span class="hljs-keyword">wrapper</span> -Dmaven=<span class="hljs-number">3.6</span><span class="hljs-number">.3</span><br></code></pre></td></tr></table></figure><p><code>PATH</code>如果你的项目中已经有了mvnw，你可以使用这两个命令，<code>./mvnw</code>而不是<code>mvn</code>在命令中。</p><p>Command <code>mvnw</code>使用默认情况下<code>~/.m2/wrapper</code>在第一次使用时下载的Maven 。</p><p>Maven的URL在每个项目中指定<code>.mvn/wrapper/maven-wrapper.properties</code>：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">distributionUrl=https:<span class="hljs-regexp">//</span>repo1.maven.org<span class="hljs-regexp">/maven2/</span>org<span class="hljs-regexp">/apache/m</span>aven<span class="hljs-regexp">/apache-maven/</span><span class="hljs-number">3.6</span>.<span class="hljs-number">3</span>/apache-maven-<span class="hljs-number">3.6</span>.<span class="hljs-number">3</span>-bin.zip<br></code></pre></td></tr></table></figure><p>要更新或更改Maven版本，请调用以下内容（记住关于<code>--non-recursive</code>多模块项目）：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">./mvnw io.takari:maven:<span class="hljs-keyword">wrapper</span> -Dmaven=<span class="hljs-number">3.6</span><span class="hljs-number">.3</span> <br></code></pre></td></tr></table></figure><p>或者只是<code>.mvn/wrapper/maven-wrapper.properties</code>手动修改。</p><p>使用 Maven 从头开始生成包装器（您需要在<code>PATH</code>运行时使用它)：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">mvn io.takari:maven:<span class="hljs-keyword">wrapper</span> -Dmaven=<span class="hljs-number">3.6</span><span class="hljs-number">.3</span> <br></code></pre></td></tr></table></figure></blockquote><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.361shipin.com/blog/1532411293061873664">.mvn目录&amp;mvnw和mvnw.cmd文件说明</a></p><p></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;mvnw-详解&quot;&gt;&lt;a href=&quot;#mvnw-详解&quot; class=&quot;headerlink&quot; title=&quot;mvnw 详解&quot;&gt;&lt;/a&gt;mvnw 详解&lt;/h1&gt;&lt;p&gt;我们使用Maven时，基本上只会用到&lt;code&gt;mvn&lt;/code&gt;这一个命令。有些童鞋可能听说过&lt;</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.yahyav2rayssr.top/categories/Java/"/>
    
    <category term="maven" scheme="https://blog.yahyav2rayssr.top/categories/Java/maven/"/>
    
    
    <category term="maven" scheme="https://blog.yahyav2rayssr.top/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>Maven 基础概念</title>
    <link href="https://blog.yahyav2rayssr.top/posts/6ff6dc3c/"/>
    <id>https://blog.yahyav2rayssr.top/posts/6ff6dc3c/</id>
    <published>2023-04-16T19:22:45.480Z</published>
    <updated>2023-04-16T19:22:45.480Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h1><h2 id="scope-作用域"><a href="#scope-作用域" class="headerlink" title="scope 作用域"></a>scope 作用域</h2><p>一览图如下：</p><table><thead><tr><th>作用域</th><th>测试</th><th>编译</th><th>运行</th><th>打包</th></tr></thead><tbody><tr><td>test</td><td>√</td><td></td><td></td><td></td></tr><tr><td>compile</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>runtime</td><td>√</td><td></td><td>√</td><td></td></tr><tr><td>provided</td><td>√</td><td>√</td><td></td><td></td></tr><tr><td>system</td><td>√</td><td>√</td><td></td><td></td></tr></tbody></table><h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><p>test 范围指的是<a href="http://lib.csdn.net/base/softwaretest">测试</a>范围有效，在编译和打包时都不会使用这个依赖</p><h3 id="compile"><a href="#compile" class="headerlink" title="compile"></a>compile</h3><p>compile 范围指的是编译范围有效，在编译和打包时都会将依赖存储进去</p><h3 id="runtime"><a href="#runtime" class="headerlink" title="runtime"></a>runtime</h3><p>runtime 在运行的时候依赖，在编译的时候不依赖 </p><h3 id="provided"><a href="#provided" class="headerlink" title="provided"></a>provided</h3><p>provided 依赖：在编译和测试的过程有效，最后生成 war 包时不会加入，诸如：servlet-api，因为servlet-api，tomcat等web服务器已经存在了，如果再打包会冲突</p><h3 id="system（不推荐）"><a href="#system（不推荐）" class="headerlink" title="system（不推荐）"></a>system（不推荐）</h3><p>这种类型跟provided类似，唯一不同的就是这种类型的依赖我们要自己提供jar包，这需要与另一个元素systemPath来结合使用。systemPath将指向我们系统上的jar包的路径，而且必须是给定的绝对路径。</p><ul><li><strong>systemPath：</strong>上面已经说过了这个元素是在scope的值为system的时候用于指定依赖的jar包在系统上的位置的，而且是绝对路径。该元素必须在依赖的 jar包的scope为system时才能使用，否则Maven将报错。</li></ul><h2 id="optional-标签"><a href="#optional-标签" class="headerlink" title="optional 标签"></a>optional 标签</h2><blockquote><p>optional标签加在pom依赖上可以防止其依赖的dependency在打包的时候被加载进来</p></blockquote><p>对于我们公司内部开发的jar包,我们都加上<code>&lt;optional&gt;true&lt;/optional&gt;</code>，这样可以使引用这些jar的项目不会产生传递依赖。</p><h2 id="属性获取"><a href="#属性获取" class="headerlink" title="属性获取"></a>属性获取</h2><p><strong>在pom.xml文件中我们可以使用${propertyName}的形式引用属性。是值的占位符，类似EL，类似ant的属性，比如${X}，可用于pom文件任何赋值的位置。有以下分类：</strong></p><ul><li><p><strong>env.propertyName：</strong>这种形式表示引用的是环境变量，比如我们需要引用当前系统的环境变量PATH的时候，就可以使用${env.PATH}。</p></li><li><p><strong>project.propertyName：</strong>这种形式表示引用的是当前这个pom.xml中project根元素下面的子元素的值。比如我们需要引用当前project下面的version的时候，就可以使用${project.version}。</p></li><li><p><strong>settings.propertyName：</strong>这种形式引用的是Maven本地配置文件settings.xml或本地Maven安装目录下的settings.xml文件根元素settings下的元素。比如我们需要引用settings下的本地仓库localRepository元素的值时，我们可以用${settings.localRepository}</p></li><li><p><strong>Java System Properties：</strong>java的系统属性，所有在java中使用java.lang.System.getProperties()能够获取到的属性都可以在pom.xml中引用，比如${java.home}。</p></li><li><p><strong>自定义：</strong>pom.xml中properties元素下面的子元素作为属性。假如在pom.xml中有如下一段代码:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hello.world</span>&gt;</span>helloWorld<span class="hljs-tag">&lt;/<span class="hljs-name">hello.world</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure><p>那么我们就可以使用${hello.world}引用到对应的helloWorld。</p></li></ul><h2 id="maven-test-skip-和-skipTests-的区别"><a href="#maven-test-skip-和-skipTests-的区别" class="headerlink" title="-maven.test.skip 和 skipTests 的区别"></a>-maven.test.skip 和 skipTests 的区别</h2><ul><li><code>-DskipTests</code>：不执行测试用例，但编译测试用例类生成相应的class文件至target&#x2F;test-classes下。</li><li><code>-Dmaven.test.skip=true</code>：不执行测试用例，也不编译测试用例类。</li></ul><h2 id="modelVersion-标签"><a href="#modelVersion-标签" class="headerlink" title="modelVersion 标签"></a>modelVersion 标签</h2><p>modelVersion 这个标签必须存在，而且它的值必须是 4.0.0，这标志着使用的是 maven2。</p><h2 id="spring-boot-查找-main-文件的流程"><a href="#spring-boot-查找-main-文件的流程" class="headerlink" title="spring-boot 查找 main 文件的流程"></a>spring-boot 查找 main 文件的流程</h2><ol><li>首先查看<code>&lt;mainClass&gt;</code>是否有值，如果有，直接拿标签内的类名作为入口</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">start-class</span>&gt;</span>com.example.Application<span class="hljs-tag">&lt;/<span class="hljs-name">start-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li><p>如果没找到<code>&lt;start-class&gt;</code>标签，会遍历所有文件，找到注解了<code>@SpringBootApplication</code>并含有main方法的类，将其作为入口。</p><p>实践证明，如果没有定义<code>&lt;start-class&gt;</code>，查找入口类的方法也是非常快的。</p><p>在实际开发中，推荐手动定义<code>&lt;start-class&gt;</code>。这样在一个项目工程中可以有多个<code>@SpringBootApplication</code>注解的类，修改一下pom里的配置就能灵活切换入口了。</p></li></ol><h2 id="spring-boot-maven-plugin-和-maven-jar-plugin-的区别"><a href="#spring-boot-maven-plugin-和-maven-jar-plugin-的区别" class="headerlink" title="spring-boot-maven-plugin 和 maven-jar-plugin 的区别"></a>spring-boot-maven-plugin 和 maven-jar-plugin 的区别</h2><p> <strong>spring-boot-maven-plugin:</strong></p><blockquote><p>将应用程序及其依赖jar一起打包到一个独立的jar中,打出来的是fat jar,可以直接启动</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>                 <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>repackage<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>             <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>maven打成jar包插件:</strong></p><blockquote><p>只包括当前模块的jar,不包含依赖jar,无法直接启动</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-jar-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="仓库优先级"><a href="#仓库优先级" class="headerlink" title="仓库优先级"></a>仓库优先级</h2><blockquote><img src="/posts/6ff6dc3c/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3E0MjM2ODc3Mw==,size_16,color_FFFFFF,t_70.png" class alt="img"><p>根据官方描述，mirrorOf 相同的情况下，仅会选择靠前的镜像，当 jar 包下载失败后，是不会去第2个镜像下载的。</p></blockquote><p>本地仓库(localRepositories) &gt; profile 中的 repositories 仓库（私服） &gt; POM &gt; mirrors 全局仓库 &gt; 中央仓库 （central）</p><p>以上关系可以简化为：</p><p>本地仓库 &gt; 私服（profile）&gt; 远程仓库（repository）</p><h3 id="mirror-标签"><a href="#mirror-标签" class="headerlink" title="mirror 标签"></a>mirror 标签</h3><p>maven默认内置了如下一个仓库，这个默认仓库的 id 为 central，当我们把 mirrorOf 设置为 <code>&lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</code> 时，maven 就会查找有没有 id 为 central 的仓库，然后把 id为 central 的仓库地址换成我们 <code>&lt;mirror&gt;</code> 标签配置的那个 url，这样我们配置的 mirror 才会起作用。当然我们也可以把 mirrorOf 设置为 <code>&lt;mirrorOf&gt;*&lt;/mirrorOf&gt;</code>，表示所有仓库都使用我们配置的这个 mirror 作为 jar 包下载地址，即当 repository 中的 id 与 mirrorOf 一致时，mirrorOf 中的 url 就会覆盖 repository 中的 url 地址。</p><h2 id="maven-metadata-xml-文件"><a href="#maven-metadata-xml-文件" class="headerlink" title="maven-metadata.xml 文件"></a>maven-metadata.xml 文件</h2><p>举个栗子：</p><p><strong>maven-metadata-local.xml</strong> 文件内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">metadata</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.sf.saas<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>saas-sws-prophet<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">versioning</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">versions</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">versions</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">lastUpdated</span>&gt;</span>20220119074601<span class="hljs-tag">&lt;/<span class="hljs-name">lastUpdated</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">versioning</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">metadata</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其中 lastUpdated 是最中要的一个属性，Maven 更新工程的 jar包时，会比较 lastUpdated 时间戳值，哪个值更大，就以哪个文件为准。</p><p>接下来我们看下 Maven 为我们生成了那些文件，我们可以看到 maven-metadata.xml 一共有三个：</p><ol><li><strong>maven-metadata-local.xml</strong> 本地的元数据, Maven install 的时候就会生成。</li><li><strong>maven-metadata-snapshots.xml</strong> Maven deploy 时会生成</li><li><strong>maven-metadata-localhost.xml</strong> 远程仓库获取的时候生成 (repository 的 id &#x3D; localhost)</li></ol><p>以上的文件其实都是 Maven 的过渡文件而已</p><ol><li>例如 maven-metadata-snapshots 就是 Maven deploy 先从远程仓库对应包的 maven-metadata.xml 下载下来，然后修改快照信息后在上传到远程仓库上。</li><li>例如 maven-metadata-localhost 的作用是在 Maven 在拉取包的时候，会先跟本地 maven-metadata-local 比较下 lastUpdated 时间戳值，值大用哪个。如果是 Maven <strong>强制更新</strong> 的时候(没有强制更新是不会) 会下载远程的 maven-metadata.xml 比较<strong>远程，本地，和之前远程保存下来的 maven-metadata 文件</strong>。</li></ol><p>所以有时候 maven 库上的 jar 包已经更新，而我们总是拉取不到 maven 的包原因就是本地的 maven-metadata-local 的 lastUpdated 比较大导致的。</p><h1 id="参考连接"><a href="#参考连接" class="headerlink" title="参考连接"></a>参考连接</h1><p><a href="https://cloud.tencent.com/developer/article/1756145">Maven中optional和scope元素的使用，你弄明白了？</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基础概念&quot;&gt;&lt;a href=&quot;#基础概念&quot; class=&quot;headerlink&quot; title=&quot;基础概念&quot;&gt;&lt;/a&gt;基础概念&lt;/h1&gt;&lt;h2 id=&quot;scope-作用域&quot;&gt;&lt;a href=&quot;#scope-作用域&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.yahyav2rayssr.top/categories/Java/"/>
    
    <category term="maven" scheme="https://blog.yahyav2rayssr.top/categories/Java/maven/"/>
    
    
    <category term="maven" scheme="https://blog.yahyav2rayssr.top/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>Maven 基本安装（windows）</title>
    <link href="https://blog.yahyav2rayssr.top/posts/5c907e7a/"/>
    <id>https://blog.yahyav2rayssr.top/posts/5c907e7a/</id>
    <published>2023-04-16T19:22:38.696Z</published>
    <updated>2023-04-16T19:22:38.696Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Windows环境下maven-安装与环境变量配置"><a href="#Windows环境下maven-安装与环境变量配置" class="headerlink" title="Windows环境下maven 安装与环境变量配置"></a>Windows环境下maven 安装与环境变量配置</h1><p><strong>一、下载 Maven</strong></p><p>请访问Maven的下载页面：<a href="http://maven.apache.org/download.html%EF%BC%8C%E5%85%B6%E4%B8%AD%E5%8C%85%E5%90%AB%E9%92%88%E5%AF%B9%E4%B8%8D%E5%90%8C%E5%B9%B3%E5%8F%B0%E7%9A%84%E5%90%84%E7%A7%8D%E7%89%88%E6%9C%AC%E7%9A%84Maven%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%EF%BC%8C%E7%84%B6%E5%90%8E%E8%A7%A3%E5%8E%8B%E5%88%B0%E6%8C%87%E5%AE%9A%E7%9B%AE%E5%BD%95%E3%80%82">http://maven.apache.org/download.html，其中包含针对不同平台的各种版本的Maven下载文件，然后解压到指定目录。</a></p><p><strong>二、配置maven 的环境变量</strong></p><p>右键“计算机”，选择“属性”，之后点击“高级系统设置”，点击“环境变量”，来设置环境变量，有以下系统变量需要配置：</p><p>新建系统变量 MAVEN_HOME 变量值：C:\Apache\apache-maven-3.6.1</p><p>编辑系统变量 Path 添加变量值：;%MAVEN_HOME%\bin</p><img src="/posts/5c907e7a/image-20210710162339724.png" alt="image-20210710162339724" style="zoom:50%;"><img src="/posts/5c907e7a/image-20210710162459106.png" alt="image-20210710162459106" style="zoom:50%;"><p>注意：注意多个值之间需要有分号隔开，然后点击<strong>确定</strong>。</p><p><strong>三、检测是否安装成功。</strong></p><p>或是输入：<strong>echo %M2_HOME%</strong></p><p>查看版本：mvn -v</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Windows环境下maven-安装与环境变量配置&quot;&gt;&lt;a href=&quot;#Windows环境下maven-安装与环境变量配置&quot; class=&quot;headerlink&quot; title=&quot;Windows环境下maven 安装与环境变量配置&quot;&gt;&lt;/a&gt;Windows环境下m</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.yahyav2rayssr.top/categories/Java/"/>
    
    <category term="maven" scheme="https://blog.yahyav2rayssr.top/categories/Java/maven/"/>
    
    
    <category term="maven" scheme="https://blog.yahyav2rayssr.top/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>Maven 常用配置</title>
    <link href="https://blog.yahyav2rayssr.top/posts/615834e0/"/>
    <id>https://blog.yahyav2rayssr.top/posts/615834e0/</id>
    <published>2023-04-16T19:22:22.247Z</published>
    <updated>2023-04-16T19:22:22.247Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h1><h2 id="profile配置实现动态切换环境"><a href="#profile配置实现动态切换环境" class="headerlink" title="profile配置实现动态切换环境"></a>profile配置实现动态切换环境</h2><h3 id="1-更改-spring-profiles-active"><a href="#1-更改-spring-profiles-active" class="headerlink" title="1. 更改 spring.profiles.active"></a>1. 更改 spring.profiles.active</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.profiles.active</span>=<span class="hljs-string">@env@</span><br></code></pre></td></tr></table></figure><h3 id="2-pom-xml-配置"><a href="#2-pom-xml-配置" class="headerlink" title="2. pom.xml 配置"></a>2. pom.xml 配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span>&gt;</span><br>    ... 其他代码略 ...<br>    <span class="hljs-tag">&lt;<span class="hljs-name">profiles</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 开发环境 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>dev<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">env</span>&gt;</span>dev<span class="hljs-tag">&lt;/<span class="hljs-name">env</span>&gt;</span><span class="hljs-comment">&lt;!-- 之前写的@env@就是通过这里的配置切换环境 --&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">activation</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">activeByDefault</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">activeByDefault</span>&gt;</span><span class="hljs-comment">&lt;!-- 指定缺省环境 --&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">activation</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 测试环境 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">env</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">env</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 生产环境 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>prod<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">env</span>&gt;</span>prod<span class="hljs-tag">&lt;/<span class="hljs-name">env</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">profiles</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><img src="/posts/615834e0/20190425165911454.png" class alt="img"><h2 id="maven-assembly-plugin配置"><a href="#maven-assembly-plugin配置" class="headerlink" title="maven-assembly-plugin配置"></a>maven-assembly-plugin配置</h2><h3 id="1-pom-xml-配置"><a href="#1-pom-xml-配置" class="headerlink" title="1. pom.xml 配置"></a>1. pom.xml 配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs xml">    <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appendAssemblyId</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">appendAssemblyId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>make-assembly<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>package<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>single<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">skipAssembly</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">skipAssembly</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">descriptors</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">descriptor</span>&gt;</span>src/main/assembly/$&#123;env.devMode&#125;/assembly.xml<span class="hljs-tag">&lt;/<span class="hljs-name">descriptor</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">descriptors</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">finalName</span>&gt;</span>$&#123;artifactId&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">finalName</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>dev<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">activation</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">activeByDefault</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">activeByDefault</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">activation</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">env.devMode</span>&gt;</span>dev<span class="hljs-tag">&lt;/<span class="hljs-name">env.devMode</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">skipAssemblyDEV</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">skipAssemblyDEV</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">skipAssemblySIT</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">skipAssemblySIT</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">skipAssemblyPROD</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">skipAssemblyPROD</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>sit<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">activation</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">activeByDefault</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">activeByDefault</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">activation</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">env.devMode</span>&gt;</span>sit<span class="hljs-tag">&lt;/<span class="hljs-name">env.devMode</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">skipAssemblyDEV</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">skipAssemblyDEV</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">skipAssemblySIT</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">skipAssemblySIT</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">skipAssemblyPROD</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">skipAssemblyPROD</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>prod<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">activation</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">activeByDefault</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">activeByDefault</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">activation</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">env.devMode</span>&gt;</span>prod<span class="hljs-tag">&lt;/<span class="hljs-name">env.devMode</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">skipAssemblyDEV</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">skipAssemblyDEV</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">skipAssemblySIT</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">skipAssemblySIT</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">skipAssemblyPROD</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">skipAssemblyPROD</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-assembly-xml-配置"><a href="#2-assembly-xml-配置" class="headerlink" title="2. assembly.xml 配置"></a>2. assembly.xml 配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">assembly</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>assembly<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">formats</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">format</span>&gt;</span>tar.gz<span class="hljs-tag">&lt;/<span class="hljs-name">format</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">formats</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">includeBaseDirectory</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">includeBaseDirectory</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">fileSets</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">fileSet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/assembly/bin<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">outputDirectory</span>&gt;</span>bin<span class="hljs-tag">&lt;/<span class="hljs-name">outputDirectory</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">directoryMode</span>&gt;</span>0755<span class="hljs-tag">&lt;/<span class="hljs-name">directoryMode</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">fileMode</span>&gt;</span>0755<span class="hljs-tag">&lt;/<span class="hljs-name">fileMode</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">fileSet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">fileSet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/assembly/sit/conf<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">outputDirectory</span>&gt;</span>conf<span class="hljs-tag">&lt;/<span class="hljs-name">outputDirectory</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">directoryMode</span>&gt;</span>0744<span class="hljs-tag">&lt;/<span class="hljs-name">directoryMode</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">fileMode</span>&gt;</span>0644<span class="hljs-tag">&lt;/<span class="hljs-name">fileMode</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">fileSet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">fileSet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>target<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>*.jar<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">outputDirectory</span>&gt;</span>lib<span class="hljs-tag">&lt;/<span class="hljs-name">outputDirectory</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">directoryMode</span>&gt;</span>0744<span class="hljs-tag">&lt;/<span class="hljs-name">directoryMode</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">fileMode</span>&gt;</span>0644<span class="hljs-tag">&lt;/<span class="hljs-name">fileMode</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">fileSet</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">fileSets</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">assembly</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="maven-source-plugin配置"><a href="#maven-source-plugin配置" class="headerlink" title="maven-source-plugin配置"></a>maven-source-plugin配置</h2><p><code>maven-source-plugin</code>可以实现自动将源码打包并发布</p><blockquote><p>注意：在多项目构建中，将source-plugin置于顶层或parent的pom中并不会发挥作用，必须置于具体项目的pom中。</p><h3 id="jar-no-fork-和-jar-的区别"><a href="#jar-no-fork-和-jar-的区别" class="headerlink" title="jar-no-fork 和 jar 的区别"></a><strong>jar-no-fork 和 jar 的区别</strong></h3><p><code>jar</code>目标是从命令行（ <code>mvn source:jar</code> ）运行， <code>jar-no-fork</code>意味着绑定到生命周期</p><p>如果将POM配置为运行<code>source:jar</code>目标作为生命周期的一部分，Maven将<strong>重新运行</strong>绑定到<code>generate-sources</code>及其前身的所有目标。 如果你有很多插件目标绑定到验证或初始化阶段，那么所有这些目标都将运行两次，从而延长了构建时间。</p><p>相比之下， <code>jar-no-fork</code>是你附加到构建生命周期的东西，因为它期望在<code>generate-sources</code>之后的某个地方绑定到某个阶段，并且不会再次运行绑定目标。</p><p>可以通过<code>mvn source:jar -X</code> 进行验证查看，<code>-X</code> 为<code>debug</code>模式</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        ...<br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-source-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>attach-sources<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>package<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>jar-no-fork<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        ...<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p>执行 <code>mvn install</code>，maven会自动将source install到repository 。 </p><p>执行 <code>mvn deploy</code>，maven会自动将source deploy到remote-repository 。 </p><p>执行 <code>mvn source:jar</code>，单独打包源码。 </p><p>手动安装MAVEN安装source代码到本地库:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn install:install-file -Dfile=E:/common-base-0.0.1-sources.jar -DgroupId=net.spy \<br>-DartifactId=spymemcached -Dversion=2.10.3 -Dpackaging=jar -Dclassifier=sources<br></code></pre></td></tr></table></figure><h2 id="spring-boot-maven-plugin配置"><a href="#spring-boot-maven-plugin配置" class="headerlink" title="spring-boot-maven-plugin配置"></a>spring-boot-maven-plugin配置</h2><blockquote><p>这是非 assembly 打包的方式。</p></blockquote><p><code>spring-boot-maven-plugin</code>包含如下几个goal:</p><table><thead><tr><th>goal</th><th>解释</th></tr></thead><tbody><tr><td>repackage</td><td>build 一个可执行的 jar 或者 war 包</td></tr><tr><td>run</td><td>运行 springboot 应用</td></tr><tr><td>start ，stop</td><td>这两个配合在一起，绑定在 integration-test 这个 phase，可以运行测试前后启动停止 spring boot 应用</td></tr></tbody></table><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        ...<br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- 指定该Main Class为全局的唯一入口 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">mainClass</span>&gt;</span>com.demo.design.DesignPatternApplication<span class="hljs-tag">&lt;/<span class="hljs-name">mainClass</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- 原始包的后缀将变成.exec --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">classifier</span>&gt;</span>exec<span class="hljs-tag">&lt;/<span class="hljs-name">classifier</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>repackage<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        ...<br><br>        ...<br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-jar-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span>**/application.yml<span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span>**/logback-spring.yml<span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">excludes</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        ...<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>mvn spring-boot:run</code></p><p>在命令行运行<code>mvn spring-boot:run</code>可以启动spring boot应用，并且可以通过如下配置给启动的jvm传递参数</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>    ...<br>    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">jvmArguments</span>&gt;</span><br>                -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005<br>              <span class="hljs-tag">&lt;/<span class="hljs-name">jvmArguments</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>    ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure><p>spring-boot-devtools</p><p>spring boot 1.3之后引入了<code>dev-tools</code>可以让你方便开发应用，在spring boot应用启动后，它监听资源文件的改变，或者重新编译生成class，有变化之后自动刷新（repackage是不会把dev-tools打进包的，所以生产环境dev-tool是不会起作用的）。</p><p>可以通过设置<code>spring.devtools.remote.restart.enabled=false</code>这个java系统属性，是的dev-tools只在静态资源改变时才刷新。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>...<br> <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.5.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--指定optional为true可以避免被repackage打war时devtools也被打进war包--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>...<br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="引入lib下的第三方jar包并打包进去"><a href="#引入lib下的第三方jar包并打包进去" class="headerlink" title="引入lib下的第三方jar包并打包进去"></a>引入lib下的第三方jar包并打包进去</h2><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>如果需要引用的jar包在Maven中央仓库下没有，那么怎么在项目中引入。</p><p>首先在工程目录下新建libs目录</p><p>将需要引入的jar包放在此目录下</p> <img src="/posts/615834e0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JBREFPX0xJVU1BTkdfUUlaSEk=,size_16,color_FFFFFF,t_70.jpeg" alt="img" style="zoom:67%;"><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>在添加依赖的地方</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mobileimsdk4j_tcp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mobileimsdk4j_tcp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>system<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">systemPath</span>&gt;</span>$&#123;basedir&#125;/libs/mobileimsdk4j_tcp.jar<span class="hljs-tag">&lt;/<span class="hljs-name">systemPath</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意这里的坐标和版本号随意，但是 scope 要写 system，然后 systemPath 就是上面 jar 包的路径</p><p>然后这样用的话，在将项目进行打包时，需要将这些jar包也打包进去。</p><p>然后需要借助于打包插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.6.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">encoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">encoding</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">compilerArguments</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">extdirs</span>&gt;</span>$&#123;project.basedir&#125;/libs<span class="hljs-tag">&lt;/<span class="hljs-name">extdirs</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">compilerArguments</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意这里的extdirs的路径，这里是项目根目录下的libs目录</p><img src="/posts/615834e0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JBREFPX0xJVU1BTkdfUUlaSEk=,size_16,color_FFFFFF,t_70-16665409181285.jpeg" alt="img" style="zoom:67%;"><h2 id="实时拉取-SNAOSHOT-最新依赖"><a href="#实时拉取-SNAOSHOT-最新依赖" class="headerlink" title="实时拉取 SNAOSHOT 最新依赖"></a>实时拉取 SNAOSHOT 最新依赖</h2><p>打开 File -&gt; Settings -&gt; Build,Execution,Deployment -&gt; Build Tools -&gt; Maven，勾选 Always update snaphosts 即可。</p><img src="/posts/615834e0/image-20221124153611331.png" alt="image-20221124153611331" style="zoom:67%;">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;常用配置&quot;&gt;&lt;a href=&quot;#常用配置&quot; class=&quot;headerlink&quot; title=&quot;常用配置&quot;&gt;&lt;/a&gt;常用配置&lt;/h1&gt;&lt;h2 id=&quot;profile配置实现动态切换环境&quot;&gt;&lt;a href=&quot;#profile配置实现动态切换环境&quot; class=&quot;he</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.yahyav2rayssr.top/categories/Java/"/>
    
    <category term="maven" scheme="https://blog.yahyav2rayssr.top/categories/Java/maven/"/>
    
    
    <category term="maven" scheme="https://blog.yahyav2rayssr.top/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>Maven 常用命令</title>
    <link href="https://blog.yahyav2rayssr.top/posts/c718cdb9/"/>
    <id>https://blog.yahyav2rayssr.top/posts/c718cdb9/</id>
    <published>2023-04-16T19:22:14.960Z</published>
    <updated>2023-04-16T19:22:14.960Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="查看依赖树"><a href="#查看依赖树" class="headerlink" title="查看依赖树"></a>查看依赖树</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn dependency:tree<br></code></pre></td></tr></table></figure><p><strong>重定向到文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn dependency:tree &gt; tree.txt<br></code></pre></td></tr></table></figure><p><strong>使用verbose参数可以看冲突和重复的具体情况：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn dependency:tree -Dverbose &gt;tree.txt<br></code></pre></td></tr></table></figure><p>全是全了，但显示出来的东西太多，头晕目眩，有没有好法呢？当然有了，加上 <code>Dincludes</code> 或者 <code>Dexcludes</code> 说出你喜欢或讨厌，<code>dependency:tree</code> 就会帮你过滤出来，例如：</p><p><strong>方式一：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">语法</span><br>mvn dependency:tree -Dverbose -Dincludes=&lt;groudId&gt;:&lt;artifactId&gt;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">示例</span><br>mvn dependency:tree -Dverbose -Dincludes=com.alipay.common:tracer<br></code></pre></td></tr></table></figure><p><strong>方式二：</strong></p><p>也可以用这种方式来输入命令排查，会保留历史记录，下次排查直接使用历史命令即可</p><img src="/posts/c718cdb9/1cfb5b4398b45009351c383cdbca4693.png" alt="image.png" style="zoom:67%;"><h2 id="检测那些声明了但是没被使用的依赖"><a href="#检测那些声明了但是没被使用的依赖" class="headerlink" title="检测那些声明了但是没被使用的依赖"></a>检测那些声明了但是没被使用的依赖</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn dependency:analyze-only<br></code></pre></td></tr></table></figure><h2 id="分析重复定义的依赖"><a href="#分析重复定义的依赖" class="headerlink" title="分析重复定义的依赖"></a>分析重复定义的依赖</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn dependency:analyze-duplicate<br></code></pre></td></tr></table></figure><h2 id="下载指定依赖-jar-包"><a href="#下载指定依赖-jar-包" class="headerlink" title="下载指定依赖 jar 包"></a>下载指定依赖 jar 包</h2><p>命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn dependency:get -Dartifact=groupId:artifactId:version:jar:sources<br></code></pre></td></tr></table></figure><p>示例:</p><ul><li><p>下载jar包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn dependency:get -Dartifact=junit:junit:4.12:jar<br></code></pre></td></tr></table></figure></li><li><p>下载源码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn dependency:get -Dartifact=junit:junit:4.12:jar:sources<br></code></pre></td></tr></table></figure></li></ul><h2 id="指定配置文件"><a href="#指定配置文件" class="headerlink" title="指定配置文件"></a>指定配置文件</h2><p>命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn install --settings &lt;SETTINGS_FILE_LOCATION&gt;<br></code></pre></td></tr></table></figure><p>示例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shelll">mvn install --settings D:\Apache\apache-maven-3.6.3\conf\settings.xml<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;查看依赖树&quot;&gt;&lt;a href=&quot;#查看依赖树&quot; class=&quot;headerlink&quot; title=&quot;查看依赖树&quot;&gt;&lt;/a&gt;查看依赖</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.yahyav2rayssr.top/categories/Java/"/>
    
    <category term="maven" scheme="https://blog.yahyav2rayssr.top/categories/Java/maven/"/>
    
    
    <category term="maven" scheme="https://blog.yahyav2rayssr.top/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>Maven 常见问题</title>
    <link href="https://blog.yahyav2rayssr.top/posts/4f5fa1df/"/>
    <id>https://blog.yahyav2rayssr.top/posts/4f5fa1df/</id>
    <published>2023-04-16T19:22:05.926Z</published>
    <updated>2023-04-16T19:22:05.926Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="1、Maven-多模块打包时提示-找不到符号"><a href="#1、Maven-多模块打包时提示-找不到符号" class="headerlink" title="1、Maven 多模块打包时提示 找不到符号"></a>1、Maven 多模块打包时提示 找不到符号</h2><p>子模块使用 pom 打包方式即可解决</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果还未能解决，在公共模块或者当前模块下加入打包工具</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;build&gt;<br>    &lt;plugins&gt;<br>        &lt;plugin&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;<br>     &lt;!-- 加入此配置start --&gt;<br>            &lt;configuration&gt;<br>                &lt;classifier&gt;exec&lt;/classifier&gt;<br>            &lt;/configuration&gt;<br>     &lt;!-- 加入此配置end --&gt;<br>        &lt;/plugin&gt;<br>    &lt;/plugins&gt;<br>&lt;/build&gt;<br></code></pre></td></tr></table></figure><h2 id="2、Could-not-find-artifact-XXXX-in-aliyun-spring"><a href="#2、Could-not-find-artifact-XXXX-in-aliyun-spring" class="headerlink" title="2、Could not find artifact XXXX in aliyun-spring"></a>2、Could not find artifact XXXX in aliyun-spring</h2><p>Maven在下载依赖时会先在本地仓库查找，如若未找到，则会去内网私服查找，如若仍未找到，再去远程仓库查找。</p><p>所以只要把jar包打包到本地缓存仓库即可，如下图所示：</p><img src="/posts/4f5fa1df/image-20210710161747133.png" class alt="image-20210710161747133"><h2 id="3、Failed-to-execute-goal-org-apache-maven-plugins-maven-clean-plugin"><a href="#3、Failed-to-execute-goal-org-apache-maven-plugins-maven-clean-plugin" class="headerlink" title="3、Failed to execute goal org.apache.maven.plugins:maven-clean-plugin"></a>3、Failed to execute goal org.apache.maven.plugins:maven-clean-plugin</h2><p>解除提示对应的文件占用即可</p><h2 id="4、org-x2F-apache-x2F-maven-x2F-shared-x2F-artifact-x2F-filter-x2F-collection-x2F-ArtifactsFilter"><a href="#4、org-x2F-apache-x2F-maven-x2F-shared-x2F-artifact-x2F-filter-x2F-collection-x2F-ArtifactsFilter" class="headerlink" title="4、org&#x2F;apache&#x2F;maven&#x2F;shared&#x2F;artifact&#x2F;filter&#x2F;collection&#x2F;ArtifactsFilter"></a>4、org&#x2F;apache&#x2F;maven&#x2F;shared&#x2F;artifact&#x2F;filter&#x2F;collection&#x2F;ArtifactsFilter</h2><p>原来是没有在仓库中找到对应的插件，指定一个找得到的版本号即可解决</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.5.2.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="5、打包后丢失xml文件"><a href="#5、打包后丢失xml文件" class="headerlink" title="5、打包后丢失xml文件"></a>5、打包后丢失xml文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 是否替换资源中的属性 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="6、resolution-will-not-be-reattempted-until-the-update-interval-of-nexus-has-elapsed-or-updates-are-forced"><a href="#6、resolution-will-not-be-reattempted-until-the-update-interval-of-nexus-has-elapsed-or-updates-are-forced" class="headerlink" title="6、resolution will not be reattempted until the update interval of nexus has elapsed or updates are forced"></a>6、resolution will not be reattempted until the update interval of nexus has elapsed or updates are forced</h2><p>项目jar包是放在nexus上的，这是由于私服的更新策略导致的，nexus上的依赖库在更新库版本号打包时并没有更新，导致项目打包找不到依赖。</p><p>解决方法：</p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>修改nexus的依赖库更新策略，添加 <code>&lt;updatePolicy&gt;always&lt;/updatePolicy&gt;</code></p><p>updatePolicy 该元素指定更新发生的频率。Maven会比较本地 POM 和远程 POM 的时间戳。这里的选项是：</p><ul><li>always（一直）</li><li>daily（默认，每日）</li><li>interval:X（这里X是以分钟为单位的时间间隔）</li><li>never（从不）</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>zang-nexus<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">repositories</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>zang-nexus<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://10.253.40.2XX:6XXX/nexus/content/groups/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">releases</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><br>　　　　　　　　　 <span class="hljs-tag">&lt;<span class="hljs-name">updatePolicy</span>&gt;</span>always<span class="hljs-tag">&lt;/<span class="hljs-name">updatePolicy</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">releases</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">snapshots</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><br>　　　　　　　　　 <span class="hljs-tag">&lt;<span class="hljs-name">updatePolicy</span>&gt;</span>always<span class="hljs-tag">&lt;/<span class="hljs-name">updatePolicy</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">snapshots</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">repositories</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">pluginRepositories</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">pluginRepository</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>zang-nexus<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://10.253.40.2XX:6XXX/nexus/content/groups/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">releases</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><br>　　　　　　　　　 <span class="hljs-tag">&lt;<span class="hljs-name">updatePolicy</span>&gt;</span>always<span class="hljs-tag">&lt;/<span class="hljs-name">updatePolicy</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">releases</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">snapshots</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><br>　　　　　　　　　 <span class="hljs-tag">&lt;<span class="hljs-name">updatePolicy</span>&gt;</span>always<span class="hljs-tag">&lt;/<span class="hljs-name">updatePolicy</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">snapshots</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">pluginRepository</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">pluginRepositories</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>删除未下载成功的文件，重新编译</p><p>maven默认会使用本地缓存的库来编译工程，对于上次下载失败的库，maven会在 <code>Repository/&lt;group&gt;/&lt;artifact&gt;/&lt;version&gt;/</code> 目录下创建 xxx.lastUpdated 文件，一旦这个文件存在，那么在直到下一次nexus更新之前都不会更新这个依赖库，所以可以根据报错信息，删除 <code>Repository/&lt;group&gt;/&lt;artifact&gt;/&lt;version&gt;/</code> 目录下的 *.lastUpdated 文件，然后再次运行 mvn compile 编译工程。</p><h2 id="7、Maven传递依赖无法引入解决办法"><a href="#7、Maven传递依赖无法引入解决办法" class="headerlink" title="7、Maven传递依赖无法引入解决办法"></a>7、Maven传递依赖无法引入解决办法</h2><p>使用 <code>mvn install -X</code> 命令查看完整编译过程，发现有文件提示使用了<strong>未经检查或不安全的操作</strong>，在提示警告的文件类上增加以下注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br></code></pre></td></tr></table></figure><p>问题解决。</p><h2 id="8、-WARNING-File-encoding-has-not-been-set-using-platform-encoding-UTF-8-i-e-build-is-platform-dependent"><a href="#8、-WARNING-File-encoding-has-not-been-set-using-platform-encoding-UTF-8-i-e-build-is-platform-dependent" class="headerlink" title="8、[WARNING] File encoding has not been set, using platform encoding UTF-8, i.e. build is platform dependent"></a>8、[WARNING] File encoding has not been set, using platform encoding UTF-8, i.e. build is platform dependent</h2><p>在 pom.xml 文件中增加一个配置项：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;常见问题&quot;&gt;&lt;a href=&quot;#常见问题&quot; class=&quot;headerlink&quot; title=&quot;常见问题&quot;&gt;&lt;/a&gt;常见问题&lt;/h1&gt;&lt;h2 id=&quot;1、Maven-多模块打包时提示-找不到符号&quot;&gt;&lt;a href=&quot;#1、Maven-多模块打包时提示-找不到符号&quot;</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.yahyav2rayssr.top/categories/Java/"/>
    
    <category term="maven" scheme="https://blog.yahyav2rayssr.top/categories/Java/maven/"/>
    
    
    <category term="maven" scheme="https://blog.yahyav2rayssr.top/tags/maven/"/>
    
  </entry>
  
</feed>
