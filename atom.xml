<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yahya的博客</title>
  
  <subtitle>学习笔记</subtitle>
  <link href="https://blog.yahyav2rayssr.top/atom.xml" rel="self"/>
  
  <link href="https://blog.yahyav2rayssr.top/"/>
  <updated>2023-04-16T07:26:20.213Z</updated>
  <id>https://blog.yahyav2rayssr.top/</id>
  
  <author>
    <name>Yahya</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>研发文档规范</title>
    <link href="https://blog.yahyav2rayssr.top/posts/c375a1af/"/>
    <id>https://blog.yahyav2rayssr.top/posts/c375a1af/</id>
    <published>2023-04-16T07:26:20.212Z</published>
    <updated>2023-04-16T07:26:20.213Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文档类型"><a href="#文档类型" class="headerlink" title="文档类型"></a>文档类型</h2><p>在项目开发过程中，应该按要求编写好十三种文档，文档编写要求具有针对性、精确性、清晰性、完整性、灵活性、可追溯性。同时依照项目人员的角色划分，完成不同类型的文档。以下排序并未严格按照时间排序。</p><p><img src="/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/20180513172009144" alt="img"></p><h2 id="类型说明"><a href="#类型说明" class="headerlink" title="类型说明"></a>类型说明</h2><h3 id="可行性分析报告（产品人员）"><a href="#可行性分析报告（产品人员）" class="headerlink" title="可行性分析报告（产品人员）"></a>可行性分析报告（产品人员）</h3><p>可行性研究报告的编写目的是：说明该软件开发项目的实现在技术、经济和社会条件方面的可行性；评述为了合理达到开发目标而可能选择的各种方案；实施方案的利弊；说明并论证所选定的方案。</p><h3 id="项目开发计划（产品人员）"><a href="#项目开发计划（产品人员）" class="headerlink" title="项目开发计划（产品人员）"></a>项目开发计划（产品人员）</h3><p>软件项目开发计划即为软件项目实施方案制定出的具体计划。项目开发计划应提前给管理部门，并作为开发阶段评审的基础。编写项目开发计划的目的是用文件的形式，把对于在开发过程中各项工作的负责人员、开发进度、所需经费预算、所需的软硬条件等问题做出的安排记载下来，以便根据本计划开展和检查项目的开发工作。</p><h3 id="软件需求说明书（产品人员）"><a href="#软件需求说明书（产品人员）" class="headerlink" title="软件需求说明书（产品人员）"></a>软件需求说明书（产品人员）</h3><p>软件需求说明书也称为软件规格说明。该说明书对所开发软件的功能、性能、用户界面及运行环境等做出详细的说明。它是用户与开发人员双方对软件需求取得共同理解基础上达成的协议，也是实施开发工作的基础。软件需求说明书的编写目的就是为了使用户和软件开发者双方对该软件的初需求有一个共同的理解，并使之成为整个开发工作的基础。</p><h3 id="概要设计说明书-（开发人员）"><a href="#概要设计说明书-（开发人员）" class="headerlink" title="概要设计说明书 （开发人员）"></a>概要设计说明书 （开发人员）</h3><p>概要设计说明书又可称系统设计说明书，这里所说的系统是指程序系统。编写的目的是说明对程序系统的设计考虑，包括程序系统的基本处理。流程、程序系统的组织结构、模块划分、功能分配、接口设计。运行设计、数据结构设计和出错处理设计等，为程序的详细设计提供基础。</p><h3 id="详细设计规格说明书（开发人员）"><a href="#详细设计规格说明书（开发人员）" class="headerlink" title="详细设计规格说明书（开发人员）"></a>详细设计规格说明书（开发人员）</h3><p>详细设计说明书又可称程序设计说明书。编写目的是说明一个软件系统各个层次中的每一个程序（每人模块或子程序）的设计考虑。<strong>如果项目比较简单，层次较少，本文件可以不单独编写，有关内容合并入概要设计说明书。</strong></p><h3 id="用户操作手册（产品人员）"><a href="#用户操作手册（产品人员）" class="headerlink" title="用户操作手册（产品人员）"></a>用户操作手册（产品人员）</h3><p>用户操作手册的编写是要使用非专门术语的语言，充分地描述该软件系统所具有的功能及基本的使用方法，提供该软件每一个运行的具体过程和有关知识，包括操作方法的细节。使用户（或潜在用户）通过本手册能够了解该软件的用途，并且能够确定在什么情况下，如何使用它。</p><h3 id="测试计划（测试人员）"><a href="#测试计划（测试人员）" class="headerlink" title="测试计划（测试人员）"></a>测试计划（测试人员）</h3><p>测试计划是软件项目实施计划中的一项重要的内容，应当在软件开发初期、即需求分析阶段制订。测试计划应当定义被测试对象和测试目标，确定测试阶段和测试周期的划分；制订测试人员、软硬件资源和测试进度等方面的计划，规定软件测试方法，测试标准以及支持环境和测试工具。针对子系统在特定的测试阶段所要进行的测试工作制订详细计划，它详细说明规定了测试小组的各项测试任务，测试策略、任务分配和进度安排等。</p><h3 id="测试分析报告（测试人员）"><a href="#测试分析报告（测试人员）" class="headerlink" title="测试分析报告（测试人员）"></a>测试分析报告（测试人员）</h3><p>测试工作完成以后，应当提交测试计划情况说明书，对测试结果加以分析，并提出测试的结论性意见。</p><h3 id="开发进度月报（开发人员）"><a href="#开发进度月报（开发人员）" class="headerlink" title="开发进度月报（开发人员）"></a>开发进度月报（开发人员）</h3><p>开发进度月报的编写目的是及时向有关部门汇报项目开发的进度和情况，以便及时发现和处理开发过程中出现的问题，一般，开发进度月报是以项目组单位每月编写的。如果被开发的软件系统规模比较大，整个工程项目被划分给若干个分项目驵承担，开发进度月报将以分项目为单位每月编写。</p><h3 id="项目开发总结报告（产品人员）"><a href="#项目开发总结报告（产品人员）" class="headerlink" title="项目开发总结报告（产品人员）"></a>项目开发总结报告（产品人员）</h3><p>软件项目开发完成之后，应当与项目实施计划对照，总结实际执行的情况，如进度、成果、资源利用、成本和投入的人力。此外，还需对开发工作做出评价，总结经验和教训。项目开发总结报告的编写是为了总结本项目开发工作的经验，说明实际取得的开发结果以及对整个开发工作的各个方面的评价。</p><h3 id="软件维护手册（开发人员）"><a href="#软件维护手册（开发人员）" class="headerlink" title="软件维护手册（开发人员）"></a>软件维护手册（开发人员）</h3><p>主要包括软件系统说明、程序模块说明、操作环境、支持软件的说明、维护过程的说明，便于软件的维护。</p><h3 id="软件问题报告（测试人员）"><a href="#软件问题报告（测试人员）" class="headerlink" title="软件问题报告（测试人员）"></a>软件问题报告（测试人员）</h3><p>指出软件问题的登记情况，如日期、发现人、状态、问题所属模块等，为软件修改提供准备文档。</p><h3 id="软件修改报告（开发人员）"><a href="#软件修改报告（开发人员）" class="headerlink" title="软件修改报告（开发人员）"></a>软件修改报告（开发人员）</h3><p>软件产品投入运行以后，发现了需对其进行修正、更改等问题，应将存在的问题、修改的考虑以及修改的影响作出详细的描述，提交审批。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;文档类型&quot;&gt;&lt;a href=&quot;#文档类型&quot; class=&quot;headerlink&quot; title=&quot;文档类型&quot;&gt;&lt;/a&gt;文档类型&lt;/h2&gt;&lt;p&gt;在项目开发过程中，应该按要求编写好十三种文档，文档编写要求具有针对性、精确性、清晰性、完整性、灵活性、可追溯性。同时依照项目</summary>
      
    
    
    
    <category term="其他" scheme="https://blog.yahyav2rayssr.top/categories/%E5%85%B6%E4%BB%96/"/>
    
    
    <category term="其他" scheme="https://blog.yahyav2rayssr.top/tags/%E5%85%B6%E4%BB%96/"/>
    
    <category term="研发文档" scheme="https://blog.yahyav2rayssr.top/tags/%E7%A0%94%E5%8F%91%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>picgo</title>
    <link href="https://blog.yahyav2rayssr.top/posts/c4fe5b8b/"/>
    <id>https://blog.yahyav2rayssr.top/posts/c4fe5b8b/</id>
    <published>2023-04-16T07:26:15.510Z</published>
    <updated>2023-04-16T07:26:15.510Z</updated>
    
    <content type="html"><![CDATA[<p>picGo密钥</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">75db282dc87afa16cf26ceff14d51491ea494175<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;picGo密钥&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;</summary>
      
    
    
    
    <category term="其他" scheme="https://blog.yahyav2rayssr.top/categories/%E5%85%B6%E4%BB%96/"/>
    
    
    <category term="其他" scheme="https://blog.yahyav2rayssr.top/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>分布式事务的解决方案</title>
    <link href="https://blog.yahyav2rayssr.top/posts/d8e228f5/"/>
    <id>https://blog.yahyav2rayssr.top/posts/d8e228f5/</id>
    <published>2023-04-16T07:17:33.893Z</published>
    <updated>2023-04-16T07:17:33.893Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="事务的四大特性-ACID"><a href="#事务的四大特性-ACID" class="headerlink" title="事务的四大特性 ACID"></a>事务的四大特性 ACID</h2><p>说到事务，就不得不提一下事务著名的四大特性。</p><ul><li>原子性 原子性要求，事务是一个不可分割的执行单元，事务中的所有操作要么全都执行，要么全都不执行。</li><li>一致性 一致性要求，事务在开始前和结束后，数据库的完整性约束没有被破坏。</li><li>隔离性 事务的执行是相互独立的，它们不会相互干扰，一个事务不会看到另一个正在运行过程中的事务的数据。</li><li>持久性 持久性要求，一个事务完成之后，事务的执行结果必须是持久化保存的。即使数据库发生崩溃，在数据库恢复后事务提交的结果仍然不会丢失。</li></ul><h2 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h2><h3 id="事务并发执行会出现的问题"><a href="#事务并发执行会出现的问题" class="headerlink" title="事务并发执行会出现的问题"></a>事务并发执行会出现的问题</h3><ol><li>更新丢失 当有两个并发执行的事务，更新同一行数据，那么有可能一个事务会把另一个事务的更新覆盖掉。 当数据库没有加任何锁操作的情况下会发生。</li><li>脏读 一个事务读到另一个尚未提交的事务中的数据。 该数据可能会被回滚从而失效。 如果第一个事务拿着失效的数据去处理那就发生错误了。</li><li>不可重复读 不可重复度的含义：一个事务对同一行数据读了两次，却得到了不同的结果。它具体分为如下两种情况：</li></ol><ul><li>虚读：在事务1两次读取同一记录的过程中，事务2对该记录进行了修改，从而事务1第二次读到了不一样的记录。</li><li>幻读：事务1在两次查询的过程中，事务2对该表进行了插入、删除操作，从而事务1第二次查询的结果发生了变化。</li></ul><blockquote><p>不可重复读 与 脏读 的区别？ 脏读读到的是尚未提交的数据，而不可重复读读到的是已经提交的数据，只不过在两次读的过程中数据被另一个事务改过了。</p></blockquote><h3 id="数据库的四种隔离级别"><a href="#数据库的四种隔离级别" class="headerlink" title="数据库的四种隔离级别"></a>数据库的四种隔离级别</h3><ol><li>Read uncommitted 读未提交 在该级别下，一个事务对一行数据修改的过程中，不允许另一个事务对该行数据进行修改，但允许另一个事务对该行数据读。 因此本级别下，不会出现更新丢失，但会出现脏读、不可重复读。</li><li>Read committed 读提交 在该级别下，未提交的写事务不允许其他事务访问该行，因此不会出现脏读；但是读取数据的事务允许其他事务的访问该行数据，因此会出现不可重复读的情况。</li><li>Repeatable read 重复读 在该级别下，读事务禁止写事务，但允许读事务，因此不会出现同一事务两次读到不同的数据的情况（不可重复读），且写事务禁止其他一切事务。</li><li>Serializable 序列化 该级别要求所有事务都必须串行执行，因此能避免一切因并发引起的问题，但效率很低。</li></ol><blockquote><p>隔离级别越高，越能保证数据的完整性和一致性，但是对并发性能的影响也越大。对于多数应用程序，可以优先考虑把数据库系统的隔离级别设为Read Committed。它能够避免脏读取，而且具有较好的并发性能。尽管它会导致不可重复读、幻读和第二类丢失更新这些并发问题，在可能出现这类问题的个别场合，可以由应用程序采用悲观锁或乐观锁来控制。</p></blockquote><h2 id="CAP理论"><a href="#CAP理论" class="headerlink" title="CAP理论"></a>CAP理论</h2><p>CAP理论说的是：在一个分布式系统中，最多只能满足C、A、P中的两个需求。</p><p>CAP的含义：</p><ul><li>C：Consistency 一致性 同一数据的多个副本是否实时相同。</li><li>A：Availability 可用性 可用性：一定时间内系统返回一个明确的结果 则称为该系统可用。</li><li>P：Partition tolerance 分区容错性 将同一服务分布在多个系统中，从而保证某一个系统宕机，仍然有其他系统提供相同的服务。</li></ul><h2 id="BASE理论"><a href="#BASE理论" class="headerlink" title="BASE理论"></a>BASE理论</h2><p>CAP理论告诉我们一个悲惨但不得不接受的事实——我们只能在C、A、P中选择两个条件。而对于业务系统而言，我们往往选择牺牲一致性来换取系统的可用性和分区容错性。不过这里要指出的是，所谓的“牺牲一致性”并不是完全放弃数据一致性，而是牺牲<strong>强一致性</strong>换取<strong>弱一致性</strong>。下面来介绍下BASE理论。</p><ul><li>BA：Basic Available 基本可用<ul><li>整个系统在某些不可抗力的情况下，仍然能够保证“可用性”，即一定时间内仍然能够返回一个明确的结果。只不过“基本可用”和“高可用”的区别是：<ul><li>“一定时间”可以适当延长 当举行大促时，响应时间可以适当延长</li><li>给部分用户返回一个降级页面 给部分用户直接返回一个降级页面，从而缓解服务器压力。但要注意，返回降级页面仍然是返回明确结果。</li></ul></li></ul></li><li>S：Soft State：柔性状态 同一数据的不同副本的状态，可以不需要实时一致。</li><li>E：Eventual Consisstency：最终一致性 同一数据的不同副本的状态，可以不需要实时一致，但一定要保证经过一定时间后仍然是一致的。</li></ul><h2 id="酸碱平衡"><a href="#酸碱平衡" class="headerlink" title="酸碱平衡"></a>酸碱平衡</h2><p>ACID能够保证事务的强一致性，即数据是实时一致的。这在本地事务中是没有问题的，在分布式事务中，强一致性会极大影响分布式系统的性能，因此分布式系统中遵循BASE理论即可。但分布式系统的不同业务场景对一致性的要求也不同。如交易场景下，就要求强一致性，此时就需要遵循ACID理论，而在注册成功后发送短信验证码等场景下，并不需要实时一致，因此遵循BASE理论即可。因此要根据具体业务场景，在ACID和BASE之间寻求平衡。 </p><h2 id="Paxos一致性协议"><a href="#Paxos一致性协议" class="headerlink" title="Paxos一致性协议"></a>Paxos一致性协议</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>Paxos 可以分为两种：</p><ul><li><strong>Single-Decree Paxos</strong>：决策单个 Value</li><li><strong>Multi-Paxos</strong>：连续决策多个 Value，并且保证每个节点上的顺序完全一致，多 Paxos 往往是同事运行多个单 Paxos 协议共同执行的结果。</li></ul><h3 id="Paxos协议中的三种角色"><a href="#Paxos协议中的三种角色" class="headerlink" title="Paxos协议中的三种角色"></a>Paxos协议中的三种角色</h3><ul><li><strong>倡议者（Proposer）</strong>：倡议者可以提出提议（数值或者操作命令）以供投票表决</li><li><strong>接受者（Acceptor）</strong>：接受者可以对倡议者提出的提议进行投票表决，提议有超半数的接受者投票即被选中</li><li><strong>学习者（Learner）</strong>：学习者无投票权，只是从接受者那里获知哪个提议被选中</li></ul><h3 id="Paxos的特点"><a href="#Paxos的特点" class="headerlink" title="Paxos的特点"></a>Paxos的特点</h3><ul><li>一个或多个节点可以提出提议</li><li>系统必须针对所有提案中的某个提案达成一致（超过半数的接受者选中）</li><li>最多只能对一个确定的提议达成一致</li><li>只要超半数的节点存活且可互相通信，整个系统一定能达成一致状态，即选择一个确定的提议</li></ul><img src="/posts/d8e228f5/4.jpg" class><h2 id="分布式事务的解决方案"><a href="#分布式事务的解决方案" class="headerlink" title="分布式事务的解决方案"></a>分布式事务的解决方案</h2><h3 id="全局事务（DTP模型）"><a href="#全局事务（DTP模型）" class="headerlink" title="全局事务（DTP模型）"></a>全局事务（DTP模型）</h3><p>全局事务基于DTP模型实现。DTP是由X&#x2F;Open组织提出的一种分布式事务模型——X&#x2F;Open Distributed Transaction Processing Reference Model。它规定了要实现分布式事务，需要三种角色：</p><ul><li>AP：Application 应用系统 它就是我们开发的业务系统，在我们开发的过程中，可以使用资源管理器提供的事务接口来实现分布式事务。</li><li>TM：Transaction Manager 事务管理器<ul><li>分布式事务的实现由事务管理器来完成，它会提供分布式事务的操作接口供我们的业务系统调用。这些接口称为TX接口。</li><li>事务管理器还管理着所有的资源管理器，通过它们提供的XA接口来同一调度这些资源管理器，以实现分布式事务。</li><li>DTP只是一套实现分布式事务的规范，并没有定义具体如何实现分布式事务，TM可以采用2PC、3PC、Paxos等协议实现分布式事务。</li></ul></li><li>RM：Resource Manager 资源管理器<ul><li>能够提供数据服务的对象都可以是资源管理器，比如：数据库、消息中间件、缓存等。大部分场景下，数据库即为分布式事务中的资源管理器。</li><li>资源管理器能够提供单数据库的事务能力，它们通过XA接口，将本数据库的提交、回滚等能力提供给事务管理器调用，以帮助事务管理器实现分布式的事务管理。</li><li>XA是DTP模型定义的接口，用于向事务管理器提供该资源管理器(该数据库)的提交、回滚等能力。</li><li>DTP只是一套实现分布式事务的规范，RM具体的实现是由数据库厂商来完成的。</li></ul></li></ul><h3 id="基于可靠消息服务的分布式事务"><a href="#基于可靠消息服务的分布式事务" class="headerlink" title="基于可靠消息服务的分布式事务"></a>基于可靠消息服务的分布式事务</h3><p>这种实现分布式事务的方式需要通过消息中间件来实现。</p><img src="/posts/d8e228f5/1.jpg" class><p>上游系统和消息中间件之间采用异步通信是为了提高系统并发度。业务系统直接和用户打交道，用户体验尤为重要，因此这种异步通信方式能够极大程度地降低用户等待时间。此外，异步通信相对于同步通信而言，没有了长时间的阻塞等待，因此系统的并发性也大大增加。但异步通信可能会引起Commit&#x2F;Rollback指令丢失的问题，这就由消息中间件的超时询问机制来弥补。</p><p>那么，消息中间件和下游系统之间为什么要采用同步通信呢？</p><p>异步能提升系统性能，但随之会增加系统复杂度；而同步虽然降低系统并发度，但实现成本较低。因此，在对并发度要求不是很高的情况下，或者服务器资源较为充裕的情况下，我们可以选择同步来降低系统的复杂度。 我们知道，消息中间件是一个独立于业务系统的第三方中间件，它不和任何业务系统产生直接的耦合，它也不和用户产生直接的关联，它一般部署在独立的服务器集群上，具有良好的可扩展性，所以不必太过于担心它的性能，如果处理速度无法满足我们的要求，可以增加机器来解决。而且，即使消息中间件处理速度有一定的延迟那也是可以接受的，因为前面所介绍的BASE理论就告诉我们了，我们追求的是最终一致性，而非实时一致性，因此消息中间件产生的时延导致事务短暂的不一致是可以接受的</p><h3 id="最大努力通知（定期校对）"><a href="#最大努力通知（定期校对）" class="headerlink" title="最大努力通知（定期校对）"></a>最大努力通知（定期校对）</h3><img src="/posts/d8e228f5/3.jpg" class><ul><li>上游系统在完成任务后，向消息中间件同步地发送一条消息，确保消息中间件成功持久化这条消息，然后上游系统可以去做别的事情了；</li><li>消息中间件收到消息后负责将该消息同步投递给相应的下游系统，并触发下游系统的任务执行；</li><li>当下游系统处理成功后，向消息中间件反馈确认应答，消息中间件便可以将该条消息删除，从而该事务完成。</li></ul><p>上面是一个理想化的过程，但在实际场景中，往往会出现如下几种意外情况：</p><ol><li>消息中间件向下游系统投递消息失败</li><li>上游系统向消息中间件发送消息失败</li></ol><p>对于第一种情况，消息中间件具有重试机制，我们可以在消息中间件中设置消息的重试次数和重试时间间隔，对于网络不稳定导致的消息投递失败的情况，往往重试几次后消息便可以成功投递，如果超过了重试的上限仍然投递失败，那么消息中间件不再投递该消息，而是记录在失败消息表中，消息中间件需要提供失败消息的查询接口，下游系统会定期查询失败消息，并将其消费，这就是所谓的<strong>定期校对</strong>。</p><h3 id="TCC（两阶段型、补偿型）"><a href="#TCC（两阶段型、补偿型）" class="headerlink" title="TCC（两阶段型、补偿型）"></a>TCC（两阶段型、补偿型）</h3><p>TCC即为Try Confirm Cancel，它属于补偿型分布式事务。顾名思义，TCC实现分布式事务一共有三个步骤：</p><ul><li>Try：尝试待执行的业务<ul><li>这个过程并未执行业务，只是完成所有业务的一致性检查，并预留好执行所需的全部资源</li></ul></li><li>Confirm：执行业务<ul><li>这个过程真正开始执行业务，由于Try阶段已经完成了一致性检查，因此本过程直接执行，而不做任何检查。并且在执行的过程中，会使用到Try阶段预留的业务资源。</li></ul></li><li>Cancel：取消执行的业务<ul><li>若业务执行失败，则进入Cancel阶段，它会释放所有占用的业务资源，并回滚Confirm阶段执行的操作。</li></ul></li></ul><h4 id="TCC事务框架应该提供Confirm-x2F-Cancel服务的幂等性保障"><a href="#TCC事务框架应该提供Confirm-x2F-Cancel服务的幂等性保障" class="headerlink" title="TCC事务框架应该提供Confirm&#x2F;Cancel服务的幂等性保障"></a>TCC事务框架应该提供Confirm&#x2F;Cancel服务的幂等性保障</h4><blockquote><p><strong>幂等性</strong>原本是数学上的概念，即使公式：f(x)&#x3D;f(f(x)) 能够成立的数学性质。用在编程领域，则意为<code>对同一个系统，使用同样的条件，一次请求和重复的多次请求对系统资源的影响是一致的</code>。</p></blockquote><p></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;事务的四大特性-ACID&quot;&gt;&lt;a href=&quot;#事务的四大特性-ACID&quot; class=&quot;headerlink&quot; title=&quot;事</summary>
      
    
    
    
    <category term="八股文" scheme="https://blog.yahyav2rayssr.top/categories/%E5%85%AB%E8%82%A1%E6%96%87/"/>
    
    <category term="分布式事务" scheme="https://blog.yahyav2rayssr.top/categories/%E5%85%AB%E8%82%A1%E6%96%87/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    
    
    <category term="事务" scheme="https://blog.yahyav2rayssr.top/tags/%E4%BA%8B%E5%8A%A1/"/>
    
    <category term="分布式" scheme="https://blog.yahyav2rayssr.top/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>http 状态码</title>
    <link href="https://blog.yahyav2rayssr.top/posts/e1434ae1/"/>
    <id>https://blog.yahyav2rayssr.top/posts/e1434ae1/</id>
    <published>2023-04-16T07:12:06.176Z</published>
    <updated>2023-04-16T07:12:06.178Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTTP-状态码一览"><a href="#HTTP-状态码一览" class="headerlink" title="HTTP 状态码一览"></a>HTTP 状态码一览</h1><h2 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h2><h3 id="信息：1xx"><a href="#信息：1xx" class="headerlink" title="信息：1xx"></a>信息：1xx</h3><p>代表请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束。</p><table><thead><tr><th>消息：</th><th align="center">描述：</th></tr></thead><tbody><tr><td>100 Continue</td><td align="center">服务器仅接收到部分请求，但是一旦服务器并没有拒绝该请求，客户端应该继续发送其余的请求</td></tr><tr><td>101 Switching Protocols</td><td align="center">服务器转换协议，服务器将遵从客户的请求转换到另外一种协议</td></tr><tr><td>102 Processing</td><td align="center">代表处理将被继续执行</td></tr></tbody></table><h3 id="成功：2xx"><a href="#成功：2xx" class="headerlink" title="成功：2xx"></a>成功：2xx</h3><p>代表请求已成功被服务器接收、理解、并接受。</p><table><thead><tr><th>消息：</th><th align="center">描述：</th></tr></thead><tbody><tr><td>200 OK</td><td align="center">请求成功，表示正常状态</td></tr><tr><td>201 Created</td><td align="center">请求被创建完成，同时新的资源被创建立</td></tr><tr><td>202 Accepted</td><td align="center">处理的请求已被接受，但处理未完成</td></tr><tr><td>203 Non-authoritative Information</td><td align="center">服务器已成功处理了请求，但一些应答头可能不正确，因为使用的是文档的拷贝</td></tr><tr><td>204 No Content</td><td align="center">服务器成功处理了请求，但不需要返回任何实体内容，并且希望返回更新了的元信息</td></tr><tr><td>205 Reset Content</td><td align="center">服务器成功处理了请求，且没有返回任何内容，返回此状态码的响应要求请求者重置文档视图</td></tr><tr><td>206 Partial Content</td><td align="center">服务器已经成功处理了部分 GET 请求</td></tr><tr><td>207 Multi-Status</td><td align="center">代表之后的消息体将是一个XML消息</td></tr></tbody></table><h3 id="重定向：3xx"><a href="#重定向：3xx" class="headerlink" title="重定向：3xx"></a>重定向：3xx</h3><p>代表需要客户端采取进一步的操作才能完成请求。</p><table><thead><tr><th>消息：</th><th align="center">描述：</th></tr></thead><tbody><tr><td>300 Multiple Choices</td><td align="center">被请求的资源有一系列可供选择的回馈信息，每个都有自己特定的地址和浏览器驱动的商议信息。用户或浏览器能够自行选择一个首选的地址进行重定向</td></tr><tr><td>301 Moved Permanently</td><td align="center">所请求的资源已经转移至新的url</td></tr><tr><td>302 Move temporarily</td><td align="center">请求的资源临时从不同的 URI响应请求</td></tr><tr><td>303 See Other</td><td align="center">所请求的页面可在别的url下被找到，客户端应当采用 GET 的方式访问那个资源</td></tr><tr><td>304 Not Modified</td><td align="center">服务器告诉客户，原来缓冲的文档还可以继续使用</td></tr><tr><td>305 Use Proxy</td><td align="center">被请求的资源必须通过指定的代理才能被访问</td></tr><tr><td>306 Switch Proxy</td><td align="center">目前已不再使用，但是代码依然被保留</td></tr><tr><td>307 Temporary Redirect</td><td align="center">请求的资源临时从不同的URI 响应请求</td></tr></tbody></table><h3 id="客户端错误：4xx"><a href="#客户端错误：4xx" class="headerlink" title="客户端错误：4xx"></a>客户端错误：4xx</h3><p>代表了客户端看起来可能发生了错误，妨碍了服务器的处理。</p><table><thead><tr><th>消息:</th><th align="center">描述:</th></tr></thead><tbody><tr><td>400 Bad Request</td><td align="center">语义有误，服务器未能理解请求。或请求参数有误</td></tr><tr><td>401 Unauthorized</td><td align="center">被请求的页面需要用户名和密码</td></tr><tr><td>402 Payment Required</td><td align="center">为了将来可能的需求而预留的</td></tr><tr><td>403 Forbidden</td><td align="center">对被请求资源的访问被禁止</td></tr><tr><td>404 Not Found</td><td align="center">服务器无法找到被请求的资源</td></tr><tr><td>405 Method Not Allowed</td><td align="center">请求中指定的方法不被允许</td></tr><tr><td>406 Not Acceptable</td><td align="center">服务器生成的响应无法被客户端所接受</td></tr><tr><td>407 Proxy Authentication Required</td><td align="center">用户必须首先使用代理服务器进行验证，这样请求才会被处理</td></tr><tr><td>408 Request Timeout</td><td align="center">请求超出了服务器的等待时间</td></tr><tr><td>409 Conflict</td><td align="center">和被请求的资源的当前状态之间存在冲突，请求无法完成</td></tr><tr><td>410 Gone</td><td align="center">被请求的资源在服务器上已经不再可用，而且没有任何已知的转发地址</td></tr><tr><td>411 Length Required</td><td align="center">“Content-Length” 未被定义。如果无此内容，服务器不会接受请求</td></tr><tr><td>412 Precondition Failed</td><td align="center">请求中的前提条件被服务器评估为失败</td></tr><tr><td>413 Request Entity Too Large</td><td align="center">由于所请求的实体数据太大，服务器不会接受请求</td></tr><tr><td>414 Request-url Too Long</td><td align="center">由于url太长，服务器不会接受请求。当post请求被转换为带有很长的查询信息的get请求时，就会发生这种情况</td></tr><tr><td>415 Unsupported Media Type</td><td align="center">由于请求中格式类型不被支持，服务器不会接受请求</td></tr><tr><td>416 Requested Range Not Satisfiable</td><td align="center">客户在请求中指定的Range头与当前资源的可用范围不重合</td></tr><tr><td>417 Expectation Failed</td><td align="center">在请求头 Expect 中指定的预期内容无法被服务器满足</td></tr><tr><td>421 too many connections</td><td align="center">当前客户端所在的IP地址到服务器的连接数超过了服务器许可的最大范围</td></tr><tr><td>422 Unprocessable Entity</td><td align="center">请求格式正确，但是由于含有语义错误，无法响应</td></tr><tr><td>423 Locked</td><td align="center">当前资源被锁定</td></tr><tr><td>424 Failed Dependency</td><td align="center">之前的某个请求发生的错误，导致当前请求失败</td></tr><tr><td>425 Unordered Collectiond</td><td align="center"></td></tr><tr><td>449 Retry With</td><td align="center">客户端应当切换到TLS&#x2F;1.0</td></tr><tr><td>425 Unordered Collectiond</td><td align="center">由微软扩展，代表请求应当在执行完适当的操作后进行重试</td></tr><tr><td>451 Unavailable For Legal Reasons</td><td align="center">该请求因法律原因不可用</td></tr></tbody></table><h3 id="服务器错误：5xx，-6xx"><a href="#服务器错误：5xx，-6xx" class="headerlink" title="服务器错误：5xx， 6xx"></a>服务器错误：5xx， 6xx</h3><p>代表了服务器在处理请求的过程中有错误或者异常状态发生，也有可能是服务器意识到以当前的软硬件资源无法完成对请求的处理</p><table><thead><tr><th>消息:</th><th align="center">描述:</th></tr></thead><tbody><tr><td>500 Internal Server Error</td><td align="center">请求未完成，服务器遇到不可预知的情况。一般为服务器源码出现问题</td></tr><tr><td>501 Not Implemented</td><td align="center">请求未完成，服务器不支持所请求的功能</td></tr><tr><td>502 Bad Gateway</td><td align="center">请求未完成，网关或者代理工作的服务器尝试执行请求，从上游服务器收到一个无效的响应</td></tr><tr><td>503 Service Unavailable</td><td align="center">请求未完成，服务器临时过载或维护</td></tr><tr><td>504 Gateway Timeout</td><td align="center">网关或者代理工作的服务器尝试执行请求超时</td></tr><tr><td>505 HTTP Version Not Supported</td><td align="center">服务器不支持或拒绝请求中指明的HTTP协议版本</td></tr><tr><td>506 Variant Also Negotiates</td><td align="center">服务器存在内部配置错误</td></tr><tr><td>507 Insufficient Storage</td><td align="center">服务器无法存储完成请求所必须的内容</td></tr><tr><td>509 Bandwidth Limit Exceeded</td><td align="center">服务器达到带宽限制</td></tr><tr><td>510 Not Extended</td><td align="center">获取资源所需要的策略并没有被满足</td></tr><tr><td>600 Unparseable Response Headers</td><td align="center">没有返回响应头部，只返回实体内容</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;HTTP-状态码一览&quot;&gt;&lt;a href=&quot;#HTTP-状态码一览&quot; class=&quot;headerlink&quot; title=&quot;HTTP 状态码一览&quot;&gt;&lt;/a&gt;HTTP 状态码一览&lt;/h1&gt;&lt;h2 id=&quot;状态&quot;&gt;&lt;a href=&quot;#状态&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="网络" scheme="https://blog.yahyav2rayssr.top/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="http" scheme="https://blog.yahyav2rayssr.top/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>Charles 抓包教程</title>
    <link href="https://blog.yahyav2rayssr.top/posts/9ad99481/"/>
    <id>https://blog.yahyav2rayssr.top/posts/9ad99481/</id>
    <published>2023-04-16T07:10:44.592Z</published>
    <updated>2023-04-16T07:10:44.592Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="内容清单"><a href="#内容清单" class="headerlink" title="内容清单"></a>内容清单</h2><ul><li>Charles 的简介</li><li>安装 Charles</li><li>Charles 初始化设置</li><li>过滤网络请求</li><li>截取HTTP&#x2F;HTTPS数据</li><li>模拟弱网环境</li><li>修改网络请求</li><li>修改服务器返回内容</li><li>服务器压力测试</li><li>反向代理</li><li>解决与翻墙软件的冲突</li></ul><h2 id="Charles-的简介"><a href="#Charles-的简介" class="headerlink" title="Charles 的简介"></a>Charles 的简介</h2><p><strong>Charles</strong> 是目前最主流的网络调试工具（Charles、Fiddler、Wireshark…）之一，对于一个开发者来说与网络打交道是日常需求，因此很多时候我们需要调试参数、返回的数据结构、查看网络请求的各种头信息、协议、响应时间等等。所以了解  Charles 并使用它</p><p>Charles 通过将自己设置为系统的网络访问代理服务器，这样所有的网络请求都会通过它，从而实现了网路请求的截获和分析。</p><p>Chareles 不仅可以分析电脑本机的网络请求（HTTP 和 HTTPS），还可以分析移动端设备的网络请求。</p><p>Charles 是收费软件，作者开发出这样一个方便开发者使用的伟大工具，我们鼓励使用正版软件，但是对于一些囊中羞涩或者学生来说，有破解版的更好，别担心，这些我都准备好了，下一个 section 会讲解如何下载安装。</p><h2 id="安装-Charles"><a href="#安装-Charles" class="headerlink" title="安装 Charles"></a>安装 Charles</h2><ul><li>方式1：<a href="https://link.juejin.cn/?target=https://www.charlesproxy.com/download/"> Charles 官网地址</a>，根据你的电脑操作系统选择合适的下载方式。此时下载下来的是需要收费的，不差钱的同学当然可以直接购买。<a href="https://link.juejin.cn/?target=https://www.charlesproxy.com/buy/">购买链接</a></li><li>方式2:按照方式1的方式去官网下载，然后下载相应 **<a href="https://link.juejin.cn/?target=https://raw.githubusercontent.com/FantasticLBP/knowledge-kit/master/assets/charles.jar">JAR包</a>**。这里以 MAC 为例，打 <strong>Finder</strong>，选择应用程序，选中 Charles，右击并选择“显示包内容”，看到 <strong>Contents</strong> 目录，点击进去选择 <strong>Java</strong> 文件夹，将下载下来的 <strong>JAR包</strong> 拖进去替换。至此，完成了 Charles 的破解。</li></ul><h2 id="Charles-初始化设置"><a href="#Charles-初始化设置" class="headerlink" title="Charles 初始化设置"></a>Charles 初始化设置</h2><p>Charles 的工作原理是将自身设置为系统的代理服务器来捕获所有的网络请求。所以使用 Charles ，我们必须设置 Charles 为系统的代理服务器。</p><p>打开 Charles，当第一次启动的时候如果没有购买或者没有破解，会有倒计时，之后会看到软件的主界面，然后会请求你赋予它为系统代理的权限。点击授权会让你输入当前系统用户的密码。当然你也可以忽略或者拒绝该请求，然后等想要抓包的时候将它设置为系统的代理服务器。步骤：<strong>选择菜单中的“Proxy” -&gt; “Mac OS X Proxy”。</strong>如下图：</p><img src="/posts/9ad99481/170951a867075658tplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="Charles在MAC的初始化"><p>之后你的电脑上的任何网络请求都可以在 Charles 的请求面板中看到</p><p>看看 Charles 的主界面</p><img src="/posts/9ad99481/170951edabefc5eatplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="Structure模式查看网络请求"><img src="/posts/9ad99481/1709520a2b7e19c4tplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="Sequence模式查看网络请求"><ul><li>图上红色圈1:这里代表所有网络请求的展示方式。分别名为 “Structure” 和 “Sequence”。<ul><li>Structure 将所有的网络请求按照域名划分并展示</li><li>Sequence 将所有的网络请求按照时间排序并展示</li></ul></li><li>图上红色圈2：一些的网络请求设置比如 HTTPS 以及端口等信息都在这个菜单栏设置</li><li>图上红色圈3：证书设置都在这里进行</li></ul><h2 id="过滤网络请求"><a href="#过滤网络请求" class="headerlink" title="过滤网络请求"></a>过滤网络请求</h2><p>由于 Charles 可以将电脑或者设置过的手机的所有网络请求捕获到，而且我们分析网络传输应该是针对某个特定的网络下的抓包分析，为了清楚明显地看到我们感兴趣的网络请求通常会用到 Charles 的<strong>“过滤网络请求的功能”</strong>。</p><ul><li><p>方法1:在 Charles 主面板的左侧所有网络请求的下方可以看到看到一个 <strong>”Filter“</strong> 输入栏，在这里你可以输入关键词来筛选出自己感兴趣的网络请求。比如我想分析的网络请求来自于”<a href="http://www.baidu.com/">www.baidu.com</a>“ 下，你可以在下面输入”baidu”即可。</p><img src="/posts/9ad99481/170952012cbfb90etplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="Filter 过滤网络请求"></li><li><p>方法2:在 Charles 菜单栏的顶部会看到 “Proxy” 的选项，点击菜单栏选择 “Proxy” -&gt; “Recording Settings” 。选择 “include”。看到面板上面有一个 “Add” 按钮，点击后在弹出的面板里面设置好我们需要分析的网络请求的<strong>协议、主机名、端口、路径、参数</strong>，当然你也可以只设置一些主要的信息，比如协议和主机名的组合。</p><img src="/posts/9ad99481/170951a870141a7dtplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="Recording Settings 过滤网络请求"></li><li><p>方法3:一般打开 Charles 并设置好配置信息后（比如电脑本机或者设置过代理的手机）所有的网络请求都将在 Charles 的面板上显示，同时我们感兴趣的网络请求如果也在面板上显示的话，<strong>“Structure”模式下</strong>可以选中需要分析的网络请求，鼠标右击选择<strong>“Focus”</strong>。<strong>“Sequence”模式下</strong>可以在面板的网络请求显示面板的右下角看到一个<strong>Focus</strong>按钮，点击勾选后 Charles 只会显示你感兴趣的网络请求。</p><img src="/posts/9ad99481/2018-07-23%20%E4%B8%8A%E5%8D%889.22.39.png" class alt="Structure模式下Focus过滤网络请求"><img src="/posts/9ad99481/170951a86dda16bdtplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="Sequence模式下Focus过滤网络请求"><h2 id="截取HTTP-x2F-HTTPS数据"><a href="#截取HTTP-x2F-HTTPS数据" class="headerlink" title="截取HTTP&#x2F;HTTPS数据"></a>截取HTTP&#x2F;HTTPS数据</h2><h3 id="截取-HTTP-请求"><a href="#截取-HTTP-请求" class="headerlink" title="截取 HTTP 请求"></a>截取 HTTP 请求</h3><p>Charles 的主要目的是抓取捕获网络请求，这里以 iPhone 的抓包为例讲解。</p><h4 id="Charles-的设置"><a href="#Charles-的设置" class="headerlink" title="Charles 的设置"></a>Charles 的设置</h4><p>要截获 iPhone 的网络请求就需要为 Charles 开启代理功能。在菜单栏选择<strong>“Proxy” -&gt;”Proxy Settings”<strong>。填写代理的端口号并将</strong>“Enable transparent HTTP proxying”</strong>勾选上。</p><img src="/posts/9ad99481/170951aca8c70173tplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="抓取手机网络请求的电脑端设置"><h3 id="iPhone-上的设置"><a href="#iPhone-上的设置" class="headerlink" title="iPhone 上的设置"></a>iPhone 上的设置</h3><p>在电脑“系统偏好设置”中心打开网络查看本机 IP 地址，打开手机“设置”-&gt;“无线局域网”，进入当前使用的网络，点击进入当前 WIFI 的详情页（可以看到当前 WIFI 的基本信息，包括子网掩码、端口、IP地址、路由器），在最下角可以看到<strong>“DNS”和“HTTP代理”</strong>2个section。我们点击<strong>“配置代理”</strong>，设置 HTTP 代理选中“手动”。服务器处填写电脑ip地址，端口写8888。设置好后，我们打开 iPhone 上的任意需要网络请求的应用，就可以看到 Charles 弹出请求的确认菜单，单击”Allow”按钮，即可完成设置。</p><img src="/posts/9ad99481/1709520a2f20087etplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="抓取手机网络请求的手机端设置"><h3 id="截取-HTTPS-请求"><a href="#截取-HTTPS-请求" class="headerlink" title="截取 HTTPS 请求"></a>截取 HTTPS 请求</h3><p>如果你需要捕获 HTTPS 协议的网络请求，那么则需要安装 Charles 的 CA 证书。步骤如下；</p><ul><li><p>首先需要在 MAC 上安装证书。点击 Charles 顶部的菜单栏，选择 **“Help” -&gt; “SSL Proxying” -&gt; “Install Charles Root Certificate”**。</p><img src="/posts/9ad99481/170951ad3329fcfdtplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="HTTPS抓包电脑端证书安装"></li><li><p>在 keychain 处将新安装的证书设置为永久信任</p><img src="/posts/9ad99481/170951ae9ac46109tplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="HTTPS抓包电脑端证书信任"></li><li><p>即使安装了 CA 证书，Charles 默认是不捕获 HTTPS 协议的网络请求，所以我们需要对某个主机下的网络请求抓包分析的话，选中该网络请求右击选中 <strong>“SSL Proxying Enabled”</strong>。这样就可以看到我们感兴趣的HTTPS 网络请求了。</p><img src="/posts/9ad99481/2018-07-23%20%E4%B8%8A%E5%8D%889.47.09.png" class alt="Charles确认开启抓取HTTPS"></li></ul><p>如果你需要捕获移动设备的 HTTPS 网络请求，则需要在移动设备上安装证书并作简单的设置</p><ul><li><p>选择 Charles 顶部菜单栏选择 **“Help” -&gt;”Install Charles Root Certificate on a Mobile Device or Remote Browser”**。然后就可以看到 Charles 弹出的安装说明了。</p><img src="/posts/9ad99481/170951ad674e8dd4tplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="Charles提示手机端安装CA证书"></li><li><p>在手机设置好 Charles 代理的情况下，在手机浏览器输入 <strong>“chls.pro&#x2F;ssl”</strong>。安装提示下载好<strong>CA证书</strong>。</p></li><li><p>验证刚刚安装的 CA证书</p><img src="/posts/9ad99481/170951af8476267btplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="描述文件的验证"></li><li><p>iPhone 打开设置 -&gt; 通用 -&gt; 关于本机 -&gt; 证书信任设置 -&gt; 开启开关</p><img src="/posts/9ad99481/170951b1fbcae3a9tplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="手机端CA证书的信任"></li><li><p>在 Charles 菜单栏 Proxy -&gt; SSL Proxying Setting -&gt; 点击 Add 按钮 -&gt; 在弹出的对对话框设置需要监听的 HTTPS 域（*:代表通配符）</p><img src="/posts/9ad99481/170951b416c491f5tplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="HTTPS抓包端口和主机设置"></li><li><p>设置完毕，尽情抓取你想要的 HTTPS 网络请求吧。</p><img src="/posts/9ad99481/17095232b0307812tplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="抓取京东HTTPS数据"></li></ul></li></ul><h2 id="模拟弱网环境"><a href="#模拟弱网环境" class="headerlink" title="模拟弱网环境"></a>模拟弱网环境</h2><p>在平时开发的时候我们经常需要模拟弱网环境，并作弱网环境下的适配工作。Charles 为我们提供了这个服务。</p><p>在 Charles 菜单栏选择 **“Proxy” -&gt; “Throttle Settings”**。在弹出的面板上设置网络请求的参数（上行，下行带宽、利用率、可靠性等等信息）。如下图所示。</p><img src="/posts/9ad99481/2018-07-23%20%E4%B8%8A%E5%8D%8810.27.22.png" class alt="模拟弱网环境"><p>如果你想对<strong>指定主机</strong>进行弱网环境下的测试，可以点击上图的“Add”按钮，在弹出的面板上设置协议、主机、端口来对指定的主机进行弱网设置。</p><img src="/posts/9ad99481/170951b81597ac17tplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="设置指定网络请求的弱网模拟"><h2 id="修改网络请求"><a href="#修改网络请求" class="headerlink" title="修改网络请求"></a>修改网络请求</h2><p>对于捕获的网络请求，我们经常需要修改网络请求的cookie、Headers、Url等信息。Charles 提供了对网络请求的编辑和重发功能。只需要选中需要修改编辑的网络请求，在对应的右上角看到有一个“钢笔”的按钮，点击后就可以对选中的网络请求进行编辑了，编辑好后可以在右下角看到 <strong>Execute</strong> 按钮。这样我们编辑后的网络请求就可以被执行了。</p><img src="/posts/9ad99481/170951b4ad922261tplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="修改网络请求"><h2 id="修改服务器返回内容"><a href="#修改服务器返回内容" class="headerlink" title="修改服务器返回内容"></a>修改服务器返回内容</h2><p>很多时候为了方便调试代码，我们会有这种需求，修改接口返回的数据节点或者内容、甚至是状态码。比如数据为空、数据异常、请求失败、多页数据的情况。 Charles 为我们提供了超实用的功能，<strong>“Map（Map Local、Map Remote）功能”、Rewrite功能、Breakpoints功能</strong> ，都可以实现修改服务端返回数据的功能。但是有区别和适用场景：</p><ul><li>Map 功能适合长期地将某一请求重定向到另一个指定的网络地址或者本地 JSON 文件</li><li>Rewrite 功能适合对网络请求进行一些正则替换</li><li>Breakpoints 功能适合对网络请求进行一些临时性的修改（类似于我们开发的断点作用）</li></ul><h3 id="Map-功能"><a href="#Map-功能" class="headerlink" title="Map 功能"></a>Map 功能</h3><p>Map 功能分为 Map Local（将某个网络请求重定向到本地 JSON 文件） 和 Map Remote 功能（将网络请求重定向到另一个网络接口）。</p><p>在 Charles 菜单栏选择 <strong>“Tools” -&gt; “Map Remote” 或 “Map Local”</strong> 即可进入相应的功能模块。</p><h4 id="Map-Remote-功能"><a href="#Map-Remote-功能" class="headerlink" title="Map Remote 功能"></a>Map Remote 功能</h4><p>适合于切换线上到本地、测试服务到正式服务的场景。比如下图从正式服务切换到测试服务</p><img src="/posts/9ad99481/170951d4fa0df2cbtplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="Map Remote"><h4 id="Map-Local-功能"><a href="#Map-Local-功能" class="headerlink" title="Map Local 功能"></a>Map Local 功能</h4><p>我们需要填写重定向的原地址信息和本地目标文件。我们可以先将某个接口的响应内容保存下来（选择对应的网络请求，右击点击 <strong>Save Response</strong> ）成为 data.json 文件。然后我们编辑里面的 status 、message、data 等信息为我们想要的目标映射文件。</p><img src="/posts/9ad99481/2018-07-23%20%E4%B8%8A%E5%8D%8811.37.44.png" class alt="Save Response"><p>如下所示，我将一个网络请求的内容映射到我本地的一个 JSON 文件。之后这个请求的内容都从网络变为返回我本地的数据了。</p><img src="/posts/9ad99481/170951dccd4432e6tplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="Map Local"><p>Map Local 可能会存在一个小缺陷，其返回的 HTTP Response Header 与正常的网络请求不一样，如果程序设置了校验 Header 信息，此时 Map Local 就会失败，解决办法是同时使用 <strong>Rewrite功能</strong>将相关的HTTP 头部信息 rewrite 成我们需要的信息</p><h4 id="Rewrite-功能"><a href="#Rewrite-功能" class="headerlink" title="Rewrite 功能"></a>Rewrite 功能</h4><p>Rewrite 适合对某个网络请求进行正则替换，以达到修改结果的目的。</p><p>假如我的 App 的界面上的显示的功能模块及其点击事件是根据接口来完成的，我想实现替换功能模块的名称的目的。步骤：点击顶部菜单栏的**“Tools” -&gt; “Rewrite”**。在弹出的面板上勾选 <strong>“Enable Rewrite”</strong>。点击左下角的 <strong>Add按钮</strong>，在右上角的 <strong>Name：</strong>处写好本次配置的名称（如果有多个 Rewrite，为了后期容易区分）。</p><ul><li>可以针对特定的网络请求进行 Rewrite。可以点击右上角 <strong>Location</strong> 面板下面的 <strong>Add按钮</strong>。在弹出的面板上设置网络请求配置信息。注意此时需要同时设置 Protocol、Port、Host、Path信息（我测试加了 Protocol、Host、Port这3个是无效的）</li></ul><img src="/posts/9ad99481/170951b9a52b981ftplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="Rewrite 针对特定网络请求的设置"><ul><li><p>然后对指定的 <strong>Type</strong> 和 <strong>Action</strong> 进行 Rewrite。</p><p>Type 主要有 Add Header、Modify Header、Remove Header、Host、Path等等。</p><p>Where 可以选择 Request 和 Response。指的是下面的修改是针对 Request 还是 Response</p><img src="/posts/9ad99481/1709520146937450tplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="Rewrite 设置范围"></li><li><p>完成设置后点击 <strong>Apply</strong> 按钮，即可生效。下次继续请求该网络，返回的内容就是我们刚刚设置的内容。比如当前的“政策法规”要变成“哈哈哈，我是假的政策法规”。这时候就可以使用 Rewrite 功能</p><img src="/posts/9ad99481/170951bc3b09e889tplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="Rewrite 测试结果"></li></ul><h4 id="Breakpoints-功能"><a href="#Breakpoints-功能" class="headerlink" title="Breakpoints 功能"></a>Breakpoints 功能</h4><p>Breakpoints 相比于其他几个修改网络请求的特点是只是针对当前的网络请求，Breakpoints 只存在于设置过的当前的网络请求，Charles 关闭后下次打开 Breakpoints 消失了。想要修改网络请求 Breakpoints 步骤最简单，跟我们调试工具里面设置的断点一样方便。</p><p>对于我们设置了 Breakpoints 的网络请求， Charles 会在下次继续访问该请求的时候停止掉，就跟 debug 一样。此时我们可以 <strong>Edit Request</strong>，修改过 Request 之后点击右下角的 <strong>Execute</strong> 按钮。然后等到服务端返回的时候继续是断点状态，此时可以 <strong>Edit Response</strong>。步骤： <strong>选中某个网络请求 -&gt; 右击 -&gt; 点击“Breakpoints”。</strong></p><p>如下图：对该接口设置了 Breakpoints。请求网络后 Edit Response，点击 execute 后服务端返回的结果就是我们编辑的内容了。</p><img src="/posts/9ad99481/170951e80273c1actplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="对指定的网路请求设置断点"><img src="/posts/9ad99481/170951d5081e41bdtplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="在Reponse的时候修改返回的数据"><img src="/posts/9ad99481/170951dcd437f787tplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="再次请求该接口返回的数据为我们设置过的"><h2 id="服务器压力测试"><a href="#服务器压力测试" class="headerlink" title="服务器压力测试"></a>服务器压力测试</h2><p>我们可以使用 Charles 的 <strong>Repeat</strong> 功能地对服务器进行并发访问进行压力测试。步骤：<strong>选中某个网络请求 -&gt; 右击 -&gt; Repeat Advanced -&gt; 在弹出的面板里面设置总共的迭代次数（Iterations）、并发数（Concurrency） -&gt; 点击“OK” 。</strong>开始执行可以看到以设置的并发数的规模，进行总共达设置的总共迭代次数的访问。（专业的压力测试工具：<strong>Load Runner</strong>）</p><img src="/posts/9ad99481/170951bdd4bd43ddtplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="简单压力测试"><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><p>Charles 的反向代理功能允许我们将本地指定端口的请求映射到远程的另一个端口上。设置：<strong>点击顶部菜单栏 Proxy -&gt; 点击 Reverse Proxies</strong>。</p><p>如下所示，我将本地的 8080 端口映射到远程的 80 端口上，点击 OK 生效后，当我继续访问本地的 80 端口，实际返回的就是远程 80 端口的提供的内容了。</p><img src="/posts/9ad99481/170951d51285cacatplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp" class alt="反向代理设置"><h2 id="解决与翻墙软件的冲突"><a href="#解决与翻墙软件的冲突" class="headerlink" title="解决与翻墙软件的冲突"></a>解决与翻墙软件的冲突</h2><p>Charles 的工作原理是把自己设置为系统的代理服务器，但是我们开发者经常会利用 VPN 翻墙访问谷歌查找资料（这些翻墙软件的工作原理也是把自己设置成为系统的代理服务器），为了2者和平共处。我们可以在 Charles 的 External Proxy Settings 中将翻墙的代理端口等信息填写。同时我们需要关闭翻墙软件的自动设置，更改为<strong>“手动模式”</strong>。（使其不主动修改系统代理）</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Charles 功能强大、界面简洁，读完这篇文章并做出练习，相信你能很快掌握它，“工欲善其事，必先利其器” ，掌握了它，相信可以为你大大提高开发中调试网络的效率。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;内容清单&quot;&gt;&lt;a href=&quot;#内容清单&quot; class=&quot;headerlink&quot; title=&quot;内容清单&quot;&gt;&lt;/a&gt;内容清单&lt;/h</summary>
      
    
    
    
    <category term="研发工具" scheme="https://blog.yahyav2rayssr.top/categories/%E7%A0%94%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    <category term="抓包" scheme="https://blog.yahyav2rayssr.top/categories/%E7%A0%94%E5%8F%91%E5%B7%A5%E5%85%B7/%E6%8A%93%E5%8C%85/"/>
    
    
    <category term="抓包" scheme="https://blog.yahyav2rayssr.top/tags/%E6%8A%93%E5%8C%85/"/>
    
    <category term="charles" scheme="https://blog.yahyav2rayssr.top/tags/charles/"/>
    
  </entry>
  
  <entry>
    <title>Visual Studio Code 常用配置</title>
    <link href="https://blog.yahyav2rayssr.top/posts/6f59c50b/"/>
    <id>https://blog.yahyav2rayssr.top/posts/6f59c50b/</id>
    <published>2023-04-16T07:07:42.921Z</published>
    <updated>2023-04-16T07:07:42.923Z</updated>
    
    <content type="html"><![CDATA[<h1 id="显示当前文件完整路径信息"><a href="#显示当前文件完整路径信息" class="headerlink" title="显示当前文件完整路径信息"></a>显示当前文件完整路径信息</h1><ol><li>菜单栏：“文件”→“首选项”→“设置”，进入用户配置界面；</li><li>在软件默认的配置界面搜索关键字 “window.title”，将这一行配置复制到右边的用户配置界面中，并将 “activeEditorShort” 修改为 “activeEditorLong”；</li><li>保存后，再编辑文件时，软件窗口的标题栏上就可以看到当前文件的完整路径了。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;显示当前文件完整路径信息&quot;&gt;&lt;a href=&quot;#显示当前文件完整路径信息&quot; class=&quot;headerlink&quot; title=&quot;显示当前文件完整路径信息&quot;&gt;&lt;/a&gt;显示当前文件完整路径信息&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;菜单栏：“文件”→“首选项”→“设置”，进入用户</summary>
      
    
    
    
    <category term="研发工具" scheme="https://blog.yahyav2rayssr.top/categories/%E7%A0%94%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    <category term="Visual Studio Code" scheme="https://blog.yahyav2rayssr.top/categories/%E7%A0%94%E5%8F%91%E5%B7%A5%E5%85%B7/Visual-Studio-Code/"/>
    
    
    <category term="intellij idea" scheme="https://blog.yahyav2rayssr.top/tags/intellij-idea/"/>
    
    <category term="vscode" scheme="https://blog.yahyav2rayssr.top/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>Intellij IDEA maven 配置</title>
    <link href="https://blog.yahyav2rayssr.top/posts/a3c558a3/"/>
    <id>https://blog.yahyav2rayssr.top/posts/a3c558a3/</id>
    <published>2023-04-16T07:02:05.561Z</published>
    <updated>2023-04-16T07:02:05.562Z</updated>
    
    <content type="html"><![CDATA[<h1 id="idea配置maven依赖优先从指定本地仓库获取"><a href="#idea配置maven依赖优先从指定本地仓库获取" class="headerlink" title="idea配置maven依赖优先从指定本地仓库获取"></a>idea配置maven依赖优先从指定本地仓库获取</h1><p>在设置中搜索 Runner ,在VM Option中设置参数 <code>-DarchetypeCatalog=internal</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">-DarchetypeCatalog=internal<br></code></pre></td></tr></table></figure><img src="/posts/a3c558a3/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hlc2h1bmNoZW5n,size_16,color_FFFFFF,t_70.png" alt="在这里插入图片描述" style="zoom: 33%;"><h1 id="maven离线模式及设置"><a href="#maven离线模式及设置" class="headerlink" title="maven离线模式及设置"></a>maven离线模式及设置</h1><h2 id="下载maven依赖"><a href="#下载maven依赖" class="headerlink" title="下载maven依赖"></a>下载maven依赖</h2><p>通过idea创建maven项目，maven插件会自动将maven依赖下载到本地仓库。</p><h2 id="复制本地仓库"><a href="#复制本地仓库" class="headerlink" title="复制本地仓库"></a>复制本地仓库</h2><p>先要找到maven的本地仓库，可以通过 <code>file-&gt;settings-&gt;maven</code> 流程查看到maven本地仓库的位置，然后直接复制，粘贴到生产环境下。</p><h2 id="修改maven配置"><a href="#修改maven配置" class="headerlink" title="修改maven配置"></a>修改maven配置</h2><p>这里指修改生产环境（即不能联网）下的maven的settings.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">settings</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;</span><br> <br><span class="hljs-comment">&lt;!-- 这个就是第二步，maven本地仓库粘贴在生产环境下的位置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">localRepository</span>&gt;</span>D:\Apache\apache-maven-3.6.3<span class="hljs-tag">&lt;/<span class="hljs-name">localRepository</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mirrors</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 这个就是第二步，maven本地仓库粘贴在生产环境下的位置 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>file://D:\Apache\apache-maven-3.6.3<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">mirrors</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="步骤四，设置idea"><a href="#步骤四，设置idea" class="headerlink" title="步骤四，设置idea"></a>步骤四，设置idea</h2><p>通过 <code>file-&gt;settings-&gt;maven</code> 流程，勾选 work offline 选项，并填写上 maven 本地仓库和修改过的 settings.xml 的位置</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;idea配置maven依赖优先从指定本地仓库获取&quot;&gt;&lt;a href=&quot;#idea配置maven依赖优先从指定本地仓库获取&quot; class=&quot;headerlink&quot; title=&quot;idea配置maven依赖优先从指定本地仓库获取&quot;&gt;&lt;/a&gt;idea配置maven依赖优</summary>
      
    
    
    
    <category term="研发工具" scheme="https://blog.yahyav2rayssr.top/categories/%E7%A0%94%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    <category term="Intellij IDEA" scheme="https://blog.yahyav2rayssr.top/categories/%E7%A0%94%E5%8F%91%E5%B7%A5%E5%85%B7/Intellij-IDEA/"/>
    
    
    <category term="intellij idea" scheme="https://blog.yahyav2rayssr.top/tags/intellij-idea/"/>
    
    <category term="maven" scheme="https://blog.yahyav2rayssr.top/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>Intellij IDEA 常用配置</title>
    <link href="https://blog.yahyav2rayssr.top/posts/4a9b2d4f/"/>
    <id>https://blog.yahyav2rayssr.top/posts/4a9b2d4f/</id>
    <published>2023-04-16T07:02:02.208Z</published>
    <updated>2023-04-16T07:02:02.209Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="右键增加-Open-Folder-as-IntelliJ-IDEA-Project"><a href="#右键增加-Open-Folder-as-IntelliJ-IDEA-Project" class="headerlink" title="右键增加 Open Folder as IntelliJ IDEA Project"></a>右键增加 Open Folder as IntelliJ IDEA Project</h2><p>1、先<code>win+R</code>打开运行窗口，输入<code>regedit</code>，进入到<a href="https://so.csdn.net/so/search?q=%E6%B3%A8%E5%86%8C%E8%A1%A8&spm=1001.2101.3001.7020">注册表</a>编辑器中，然后进入到下面的目录 <code>计算机\HKEY_CLASSES_ROOT\Directory\Background\shell</code></p><p>新建项，取名为 Intellij IDEA，如下图所示：</p><ol><li><p>修改 Intellij IDEA 项下的默认的数值数据为 Open Folder as IntelliJ IDEA Project</p></li><li><p>新建一个字符串值，名字为 Icon，数值为 idea64.exe 所在目录的绝对路径</p></li></ol><img src="/posts/4a9b2d4f/image-20220529112715786.png" alt="image-20220529112715786" style="zoom:67%;"><p>然后在左边的 Intellij IDEA 的项上右击，选择新建 &gt; 项,项名为 command，修改默认的数值数据为 “idea64.exe所在目录的绝对路径” + “%V”，如下图所示：</p><img src="/posts/4a9b2d4f/image-20220529113557732.png" alt="image-20220529113557732" style="zoom:67%;"><p>然后重启电脑，就可以看到下面的效果了，如下图所示：</p><img src="/posts/4a9b2d4f/image-20220529113916555.png" alt="image-20220529113916555" style="zoom:67%;"><h2 id="关闭自动弹出-Documentation"><a href="#关闭自动弹出-Documentation" class="headerlink" title="关闭自动弹出 Documentation"></a>关闭自动弹出 Documentation</h2><p>取消勾选即可。</p><img src="/posts/4a9b2d4f/image-20220926003143123.png" alt="image-20220926003143123" style="zoom: 67%;"><h2 id="代码行宽度超出限制时不自动换行"><a href="#代码行宽度超出限制时不自动换行" class="headerlink" title="代码行宽度超出限制时不自动换行"></a><strong>代码行宽度超出限制时不自动换行</strong></h2><p>打开 Settings &gt; Editor &gt; Code Style &gt; Java</p><p>设置 <code>Hard Wrap at</code> 的值，默认为120，或者将 <code>Wrap on typing</code> 设置为 false，如下所示：</p><img src="/posts/4a9b2d4f/image-20221103094718687.png" alt="image-20221103094718687" style="zoom:67%;"><h2 id="IntelliJ-IDEA-修改配置文件位置"><a href="#IntelliJ-IDEA-修改配置文件位置" class="headerlink" title="IntelliJ IDEA 修改配置文件位置"></a>IntelliJ IDEA 修改配置文件位置</h2><p>找到 idea.properties 文件的位置，这里找下的位置如下：</p><p>C:\Program Files\JetBrains\IntelliJ IDEA 2021.1.3\bin\idea.properties</p><p><strong>修改配置文件位置：</strong></p><blockquote><p>注意：不要修改为Idea的安装目录，因为这样会导致自动更新失败。错误示例： </p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">idea.config.path</span>=<span class="hljs-string">C:\Program Files\JetBrains\IntelliJ IDEA 2021.1.3\config</span><br><span class="hljs-attr">idea.system.path</span>=<span class="hljs-string">C:\Program Files\JetBrains\IntelliJ IDEA 2021.1.3\system</span><br></code></pre></td></tr></table></figure></blockquote><p>修改前：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># idea.config.path=$&#123;user.home&#125;/.IntelliJIdea/config</span><br><span class="hljs-comment"># idea.system.path=$&#123;user.home&#125;/.IntelliJIdea/system</span><br></code></pre></td></tr></table></figure><p>修改后：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">idea.config.path</span>=<span class="hljs-string">D:\IntelliJIdea\config</span><br><span class="hljs-attr">idea.system.path</span>=<span class="hljs-string">D:\IntelliJIdea\system</span><br></code></pre></td></tr></table></figure><blockquote><p>注意：Idea启动时，依旧会从默认位置中的 idea64.exe.vmoptions 中读配置。其他配置会从上面修改后的指定的路径中去读。所以：默认的路径下要保留 idea64.exe.vmoptions，其他可以删除。</p></blockquote><p>最后重启 idea 即可生效。</p><h2 id="IntelliJ-IDEA-修改内存大小"><a href="#IntelliJ-IDEA-修改内存大小" class="headerlink" title="IntelliJ IDEA 修改内存大小"></a>IntelliJ IDEA 修改内存大小</h2><p>找到 <code>idea64.exe.vmoptions</code> 的位置，默认是位于 C:\Program Files\JetBrains\IntelliJ IDEA 2021.1.3\bin\ 目录下，如果修改配置文件的位置，则在 D:\IntelliJIdea\config 目录下会有一份额外的同名配置文件，配置文件主要调整前三个参数，整体参数配置参考如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">-Xms1024m # 最小内存<br>-Xmx4096m # 最大内存<br>-XX:ReservedCodeCacheSize=512m # 预留代码缓存的大小<br>-XX:+UseG1GC<br>-XX:SoftRefLRUPolicyMSPerMB=50<br>-XX:CICompilerCount=2<br>-XX:+HeapDumpOnOutOfMemoryError<br>-XX:-OmitStackTraceInFastThrow<br>-ea<br>-Dsun.io.useCanonCaches=false<br>-Djdk.http.auth.tunneling.disabledSchemes=&quot;&quot;<br>-Djdk.attach.allowAttachSelf=true<br>-Djdk.module.illegalAccess.silent=true<br>-Dkotlinx.coroutines.debug=off<br></code></pre></td></tr></table></figure><p>控制内存使用显示状态的打开方式参考下图：</p><img src="/posts/4a9b2d4f/image-20221110005020304.png" alt="image-20221110005020304" style="zoom:67%;"><p>最后在 idea 中打开 Edit Custom VM Options 配置：</p><img src="/posts/4a9b2d4f/image-20221110005150838.png" alt="image-20221110005150838" style="zoom:67%;"><p>配置内容和上面的 <code>idea64.exe.vmoptions</code> 保持一致，重启 idea 即可生效。</p><h2 id="编译-spring-configuration-metadata-json-文件"><a href="#编译-spring-configuration-metadata-json-文件" class="headerlink" title="编译 spring-configuration-metadata.json 文件"></a>编译 spring-configuration-metadata.json 文件</h2><p>在idea设置中搜索 Annotation Processors，接下来勾住 Enable annonation processing 就完成了。</p><p>我们可以在编译后的文件中看到自动生成的 spring-configuration-metadata.json，配置效果如下：</p><img src="/posts/4a9b2d4f/image-20221111152028395.png" alt="image-20221111152028395" style="zoom:67%;"><img src="/posts/4a9b2d4f/image-20221111152144742.png" alt="image-20221111152144742" style="zoom:67%;"><h2 id="IDEA-设置-SQL-格式化-关键字大写"><a href="#IDEA-设置-SQL-格式化-关键字大写" class="headerlink" title="IDEA 设置 SQL 格式化(关键字大写)"></a>IDEA 设置 SQL 格式化(关键字大写)</h2><p>设置 settsings(Ctrl+Alt+S) –&gt; Editor –&gt; Code Style –&gt; SQL 将 keywords 设置为大写(To upper)</p><p>如下图所示：</p><img src="/posts/4a9b2d4f/image-20221208113752621.png" alt="image-20221208113752621" style="zoom:67%;"><h2 id="设置作者注释"><a href="#设置作者注释" class="headerlink" title="设置作者注释"></a>设置作者注释</h2><p><strong>File and Code Templates 配置</strong></p><p>点击 File -&gt; Settings -&gt; Editor -&gt; File And Code Templates，在右侧的 File Header 中填入以下信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: $&#123;NAME&#125;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: yahya</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@email</span>: yahya@sf-express.com</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: $&#123;YEAR&#125;/$&#123;MONTH&#125;/$&#123;DAY&#125; $&#123;HOUR&#125;:$&#123;MINUTE&#125;</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><p><strong>Live Templates 配置</strong></p><p>点击 File -&gt; Settings -&gt; Editor -&gt; Live Templates，点击右侧的 + 号按钮新建一个 Template Group，命名为 Description。</p><p>然后在名为 Description 的 Template Group 上面在新建一个 Live Template，内容填充如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: $description$</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: $user$</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@email</span>: $email$</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: $date$ $time$</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><p>整体配置效果图如下所示：</p><img src="/posts/4a9b2d4f/image-20221222150438908.png" class alt="image-20221222150438908"><p>然后再点击 Edit Variables 按钮，为每个变量设置值，效果如下：</p><img src="/posts/4a9b2d4f/image-20221222150522109.png" alt="image-20221222150522109" style="zoom:67%;"><p>常用内置变量定义如下：</p><ul><li>${PACKAGE_NAME} - 将在其中创建新类或接口的目标包的名称</li><li>${PROJECT_NAME} - 当前项目的名称</li><li>${FILE_NAME} - 将要创建的文件的名称</li><li>${NAME} - 您在创建文件的过程中，在 “新建文件” 对话框中指定的新文件的名称</li><li>${USER} - 当前用户的登录名</li><li>${DATE} - 当前系统日期</li><li>${TIME} - 当前系统时间</li><li>${YEAR} - 本年度</li><li>${MONTH} - 本月</li><li>${DAY} - 当月的当前日期</li><li>${HOUR} - 当前时间</li><li>${MINUTE} - 当前分钟。</li><li>${PRODUCT_NAME} - 将在其中创建文件的 IDE 的名称。</li><li>${MONTH_NAME_SHORT} - 月份名称的前3个字母。示例：1月，2月等。</li><li>${MONTH_NAME_FULL} - 一个月的全名。示例：1月，2月等</li></ul><h2 id="去除-Usage-提示"><a href="#去除-Usage-提示" class="headerlink" title="去除 Usage 提示"></a>去除 Usage 提示</h2><p>点击 Settings -&gt; Editor -&gt; Inlay Hints，在 Code vision 栏取消 Usages 的勾选项，如下图所示：</p><img src="/posts/4a9b2d4f/image-20230131110248142.png" alt="image-20230131110248142" style="zoom:80%;"><h2 id="取消-indexing"><a href="#取消-indexing" class="headerlink" title="取消 indexing"></a>取消 indexing</h2><p>File -&gt; Settings 中直接搜索 index</p><img src="/posts/4a9b2d4f/image-20230228164823678.png" alt="image-20230228164823678" style="zoom:67%;"><p>然后旁边两个选项都选择 Ask before download</p><h2 id="关闭页面显示的浏览器图标"><a href="#关闭页面显示的浏览器图标" class="headerlink" title="关闭页面显示的浏览器图标"></a>关闭页面显示的浏览器图标</h2><p>依次点击 File -&gt; Settings -&gt; Tools -&gt; Web Browsers and Preview，将多余的勾选项全部取消勾选，最终效果如下：</p><img src="/posts/4a9b2d4f/image-20230404103115943.png" alt="image-20230404103115943" style="zoom:67%;">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;右键增加-Open-Folder-as-IntelliJ-IDEA-Project&quot;&gt;&lt;a href=&quot;#右键增加-Open-Fo</summary>
      
    
    
    
    <category term="研发工具" scheme="https://blog.yahyav2rayssr.top/categories/%E7%A0%94%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    <category term="Intellij IDEA" scheme="https://blog.yahyav2rayssr.top/categories/%E7%A0%94%E5%8F%91%E5%B7%A5%E5%85%B7/Intellij-IDEA/"/>
    
    
    <category term="intellij idea" scheme="https://blog.yahyav2rayssr.top/tags/intellij-idea/"/>
    
  </entry>
  
  <entry>
    <title>Intellij IDEA 常用插件</title>
    <link href="https://blog.yahyav2rayssr.top/posts/be77417b/"/>
    <id>https://blog.yahyav2rayssr.top/posts/be77417b/</id>
    <published>2023-04-16T07:01:59.687Z</published>
    <updated>2023-04-16T07:01:59.688Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="已使用"><a href="#已使用" class="headerlink" title="已使用"></a>已使用</h3><ul><li>Key Promoter X</li><li>Alibaba Java Coding GuideLines</li><li>CamelCase</li><li>Convert YAML and Properties File</li><li>GenerateAllSetter</li><li>GenerateSerialVersionUID</li><li>Git Commit Message Helper</li><li>Grep Console</li><li>GsonFormatPlus</li><li>Json Parser</li><li>HighlightBracketPair</li><li>Java Bean to Json</li><li>JRebel and XRebel</li><li>JRebel mybatisPlus extension</li><li>MybatisPlus</li><li>Kafkalytic</li><li>Maven Helper</li><li>RestfulToolkit-fix</li><li>SequenceDiagram</li><li>Translation</li><li>Convert YAML and Properties File</li></ul><h3 id="未使用"><a href="#未使用" class="headerlink" title="未使用"></a>未使用</h3><ul><li>String Manipulation</li><li>MapStruct support</li><li>arthas idea</li><li>Statistic</li><li>SonarLint</li><li>Jump To Line</li><li>Rainbow Brackets</li><li>jclasslib：字节码查看神器</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://juejin.cn/post/7140075471462465550#heading-8">看了我常用的IDEA插件，同事也开始悄悄安装了…</a></p><p><a href="https://juejin.cn/post/7083673873618567205">IDEA小技巧：Debug拖动跳转任意行</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;列表&quot;&gt;&lt;a href=&quot;#列表&quot; class=&quot;headerlink&quot; title=&quot;列表&quot;&gt;&lt;/a&gt;列表&lt;/h2&gt;&lt;h3 id</summary>
      
    
    
    
    <category term="研发工具" scheme="https://blog.yahyav2rayssr.top/categories/%E7%A0%94%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    <category term="Intellij IDEA" scheme="https://blog.yahyav2rayssr.top/categories/%E7%A0%94%E5%8F%91%E5%B7%A5%E5%85%B7/Intellij-IDEA/"/>
    
    
    <category term="intellij idea" scheme="https://blog.yahyav2rayssr.top/tags/intellij-idea/"/>
    
  </entry>
  
  <entry>
    <title>Intellij IDEA 常见错误</title>
    <link href="https://blog.yahyav2rayssr.top/posts/4211b3cd/"/>
    <id>https://blog.yahyav2rayssr.top/posts/4211b3cd/</id>
    <published>2023-04-16T07:01:54.668Z</published>
    <updated>2023-04-16T07:01:54.669Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="Command-line-is-too-long"><a href="#Command-line-is-too-long" class="headerlink" title="Command line is too long"></a>Command line is too long</h2><p>报错内容:</p><p>Error running ‘ServiceStarter’: Command line is too long. Shorten command line for ServiceStarter or also for Application default configuration.</p><p>解法:</p><p>修改项目下 <code>.idea\workspace.xml</code>，找到标签 <code>&lt;component name=&quot;PropertiesComponent&quot;&gt;</code> ， 在标签里加一行 <code>&lt;property name=&quot;dynamic.classpath&quot; value=&quot;true&quot; /&gt;</code></p><h2 id="中文乱码以及-SpringBoot-yml配置文件中文乱码"><a href="#中文乱码以及-SpringBoot-yml配置文件中文乱码" class="headerlink" title="中文乱码以及(SpringBoot)yml配置文件中文乱码"></a>中文乱码以及(SpringBoot)yml配置文件中文乱码</h2><p>打开设置并搜索File Encodings,全部改成UTF-8，示图如下：</p><img src="/posts/4211b3cd/20200524104000676.png" class alt="img"><h2 id="maven-控制台中文乱码"><a href="#maven-控制台中文乱码" class="headerlink" title="maven 控制台中文乱码"></a>maven 控制台中文乱码</h2><p>打开 File -&gt; Settings -&gt; Build, Execution, Deployment -&gt; Build Tools -&gt; Maven -&gt; Runner 菜单，在 VM Options 选项框里添加以下参数（无需重启）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">-Dfile.encoding=GB2312<br></code></pre></td></tr></table></figure><p>如图所示：</p><img src="/posts/4211b3cd/image-20230215175452549.png" alt="image-20230215175452549" style="zoom:80%;">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;Command-line-is-too-long&quot;&gt;&lt;a href=&quot;#Command-line-is-too-long&quot; cla</summary>
      
    
    
    
    <category term="研发工具" scheme="https://blog.yahyav2rayssr.top/categories/%E7%A0%94%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    <category term="Intellij IDEA" scheme="https://blog.yahyav2rayssr.top/categories/%E7%A0%94%E5%8F%91%E5%B7%A5%E5%85%B7/Intellij-IDEA/"/>
    
    
    <category term="intell" scheme="https://blog.yahyav2rayssr.top/tags/intell/"/>
    
  </entry>
  
  <entry>
    <title>hexo 安装</title>
    <link href="https://blog.yahyav2rayssr.top/posts/9d95a809/"/>
    <id>https://blog.yahyav2rayssr.top/posts/9d95a809/</id>
    <published>2023-04-16T06:54:07.155Z</published>
    <updated>2023-04-16T06:54:07.156Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="yum-源配置"><a href="#yum-源配置" class="headerlink" title="yum 源配置"></a>yum 源配置</h2><p>将 yun 源设置成阿里云的，可以大大提高安装速度，推荐使用，所需命令如下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">rm -rf /etc/yum.repos.d/*  # 删除本地repo文件<br><br>curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo  ## 下载阿里云centos7镜像源<br><br>yum clean all; yum makecache # 清理缓存、建立缓存<br></code></pre></td></tr></table></figure><p>如果担心中途出其他问题先考虑先把原有 <code>/etc/yum.repos.d</code> 目录下的文件做一次备份方便还原。</p><h2 id="git-安装"><a href="#git-安装" class="headerlink" title="git 安装"></a>git 安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y git<br></code></pre></td></tr></table></figure><h2 id="nodejs-安装"><a href="#nodejs-安装" class="headerlink" title="nodejs 安装"></a>nodejs 安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://nodejs.org/dist/v16.14.2/node-v16.14.2-linux-x64.tar.xz<br><br>tar -vxf node-v16.14.2-linux-x64.tar.xz   # 解压node.js软件压缩软件包<br>mv node-v16.14.2-linux-x64 /usr/local/bin # 移动node到/usr/local/bin目录下<br><br>cd /usr/local/bin/ # 进入/usr/local/bin<br><br>mv node-v16.14.2-linux-x64/ node # 修改node-v16.14.2-linux-x64 名称为 node<br></code></pre></td></tr></table></figure><p>然后修改 <code>/etc/profile</code> 文件，增加以下配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">export N_PREFIX=/usr/local/bin/node  # 设置node软件家目录的环境变量<br>export PATH=$PATH:$N_PREFIX/bin  # 设置node软件到bin目录下环境变量  实现bin目录下命令的全局使用<br></code></pre></td></tr></table></figure><p>最后执行 <code>source /etc/profile</code> 使配置生效，用以下命令验证确认 nodejs 已经安装成功。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">node -v<br><br>npm -v<br></code></pre></td></tr></table></figure><h3 id="n-安装"><a href="#n-安装" class="headerlink" title="n 安装"></a>n 安装</h3><p>使用 n 可以对 nodejs 进行多版本管理，推荐使用 n 来切换管理 nodejs 版本，安装命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g n<br></code></pre></td></tr></table></figure><p>常用命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">n stable # 安装最新的稳定版<br><br>n lts # 安装最新的 LTS 版<br><br>n &lt;version&gt; # 安装指定的 node 版本<br></code></pre></td></tr></table></figure><h2 id="hexo-安装"><a href="#hexo-安装" class="headerlink" title="hexo 安装"></a>hexo 安装</h2><p>hexo 的安装比较简单，直接按照<a href="https://hexo.io/zh-cn/">官网</a>的说明步骤安装即可。首先是基础软件 nodejs 以及 git，这两个都是常用基础软件所以就不介绍细节了，官网直接安装即可。 按照使用了 npm 这个 nodejs 库管理软件，由于默认源在国外经常连接超时，所以首先需要修改成国内的镜像源，这里是改成了淘宝的镜像源。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm config set registry https://registry.npm.taobao.org<br></code></pre></td></tr></table></figure><p>接下来就是使用 <code>npm</code> 命令安装 hexo，推荐使用 cnpm</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g cnpm --registry=https://registry.npm.taobao.org<br><br>cnpm install -g hexo-cli<br></code></pre></td></tr></table></figure><h2 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl stop firewalld; systemctl disable firewalld<br></code></pre></td></tr></table></figure><h2 id="关闭-selinux"><a href="#关闭-selinux" class="headerlink" title="关闭 selinux"></a>关闭 selinux</h2><h3 id="临时关闭"><a href="#临时关闭" class="headerlink" title="临时关闭"></a>临时关闭</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">0: Permissive</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">1: Enforcing</span><br><br>setenforce 0<br></code></pre></td></tr></table></figure><h3 id="永久关闭"><a href="#永久关闭" class="headerlink" title="永久关闭"></a>永久关闭</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">vim /etc/selinux/config</span><br><br>SELINUX=disabled<br></code></pre></td></tr></table></figure><h2 id="hexo-初始化"><a href="#hexo-初始化" class="headerlink" title="hexo 初始化"></a>hexo 初始化</h2><blockquote><ul><li>站点配置文件：站点目录下的<code>_config.yml</code>，路径为<code>&lt;folder&gt;\_config.yml</code></li><li>主题配置文件：站点目录下的<code>themes</code>文件夹下的，主题文件夹下的<code>_config.yml</code>，路径为<code>&lt;folder&gt;\themes\&lt;主题文件夹&gt;\_config.yml</code></li></ul></blockquote><p>新建一个目录，作为统一存放 markdown 文件的目录，然后进入到该目录下执行以下命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo init<br></code></pre></td></tr></table></figure><h2 id="markdown-菜单目录生成"><a href="#markdown-菜单目录生成" class="headerlink" title="markdown 菜单目录生成"></a>markdown 菜单目录生成</h2><p>hexo 文件首部加上 <code>toc: true</code>，就可以在文章左侧生成目录，且可以正常跳转。因此你只用简单的加上<code>toc: true</code>即可，任何其他的操作都是不必要的。</p><p><strong>如果你装了hexo的toc插件，请你删除它，它会影响你目录的跳转！使用下面的语句删除toc插件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm remove hexo-toc --save<br></code></pre></td></tr></table></figure><h2 id="图片相对路径配置"><a href="#图片相对路径配置" class="headerlink" title="图片相对路径配置"></a>图片相对路径配置</h2><blockquote><p><a href="https://github.com/hexojs/hexo-renderer-marked">hexo-renderer-marked</a> 3.1.0 引入了一个新的选项，其允许你无需使用 <code>asset_img</code> 标签插件就可以在 markdown 中嵌入图片，如需启用，编辑 _config.yml，添加以下配置：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">post_asset_folder: true<br>marked:<br>  prependRoot: true<br>  postAsset: true<br></code></pre></td></tr></table></figure><p>安装以下依赖：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install https://github.com/7ym0n/hexo-asset-image --save # 解决 &lt;img /&gt; 图片标签相对路径问题<br><br>npm install hexo-simple-image --save # 解决 ![]() 图片标签相对路径问题<br></code></pre></td></tr></table></figure><p>最终效果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">├── hexo-asset-image@0.0.3 (git+ssh://git@github.com/7ym0n/hexo-asset-image.git#6c88c98214765112d148850a646ddca379fcdcfe)<br>├── hexo-simple-image@1.0.4<br></code></pre></td></tr></table></figure><p>这样子以 <code>&lt;img /&gt;</code> 和 <code>![]()</code> 包裹的相对路径图片都可以正常显示了。</p><h2 id="创建自定义-about-页"><a href="#创建自定义-about-页" class="headerlink" title="创建自定义 about 页"></a>创建自定义 about 页</h2><p>博客是用的<code>hexo</code>，打算增加一个<code>about</code>页。</p><p>根据文档，当然非常简单，只需要：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo new page &quot;about&quot;<br></code></pre></td></tr></table></figure><p>然后修改所用主题目录下的<code>_config.yml</code>文件，将<code>menu</code>中<code>about</code>前的注释去掉。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">menu</span>:<br>  <span class="hljs-attr">home</span>:  / || home<br>  <span class="hljs-attr">about</span>:  <span class="hljs-regexp">/about/</span> || user<br>  <span class="hljs-attr">tags</span>:  <span class="hljs-regexp">/tags/</span> || tags<br>  ...<br></code></pre></td></tr></table></figure><p>然后修改<code>source/about/</code>目录中的<code>index.md</code>文件即可。</p><p>但是，我想要在页面中显示表格，而且不用<code>markdown</code>格式的表格。</p><p>经谷歌，可以直接在<code>index.md</code>中写<code>html</code>代码，这太好了。</p><p>可是，写好代码，<code>hexo g</code>之后，怪异的现象出现了，<code>about</code>页面中，页顶标题下是许多空白行，表格要下拉到页面最底部才可见。</p><p>又搜索之后，找到了答案，将 <code>index.md</code> 改名为 <code>index.html</code>，修改之后，马上显示正常了。</p><h2 id="主题方案"><a href="#主题方案" class="headerlink" title="主题方案"></a>主题方案</h2><h3 id="fluid"><a href="#fluid" class="headerlink" title="fluid"></a>fluid</h3><p>代码高亮主题选择方案：<a href="https://highlightjs.org/static/demo/">https://highlightjs.org/static/demo/</a></p><p>使用手册：<a href="https://hexo.fluid-dev.com/docs/start/#%E4%B8%BB%E9%A2%98%E7%AE%80%E4%BB%8B">https://hexo.fluid-dev.com/docs/start/#%E4%B8%BB%E9%A2%98%E7%AE%80%E4%BB%8B</a></p><h4 id="隐藏文章"><a href="#隐藏文章" class="headerlink" title="隐藏文章"></a>隐藏文章</h4><blockquote><p>TIP</p><p>隐藏会使文章在分类和标签类里都不显示</p><p>隐藏后依然可以通过文章链接访问</p></blockquote><p>如果想把某些文章隐藏起来，不在首页和其他分类里展示，可以在文章开头 <a href="https://hexo.io/zh-cn/docs/front-matter">Front-matter (opens new window)</a> 中配置 <code>hide: true</code> 属性。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">文章标题</span><br><span class="hljs-attr">index_img:</span> <span class="hljs-string">/example.jpg</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2019-10-10 10:00:00</span><br><span class="hljs-attr">hide:</span> <span class="hljs-literal">true</span><br><span class="hljs-meta">---</span><br><span class="hljs-string">以下是文章内容</span><br></code></pre></td></tr></table></figure><h3 id="next"><a href="#next" class="headerlink" title="next"></a>next</h3><blockquote><p>参考配置：<a href="https://blog.csdn.net/as480133937/article/details/100138838">https://blog.csdn.net/as480133937/article/details/100138838</a></p></blockquote><h4 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h4><p>NexT 主题自带了一个搜索功能 <a href="https://github.com/next-theme/hexo-generator-searchdb">Local Search</a>，即在编译文件时本地生成一个数据库，放在网站根目录下，用户借助此数据库进行搜索查询。 安装：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-generator-searchdb <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>在 NexT 的配置文件中打开：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">local_search:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h4 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Vanilla JavaScript plugin for lazyloading images.</span><br><span class="hljs-comment"># For more information: https://github.com/ApoorvSaxena/lozad.js</span><br><span class="hljs-attr">lazyload:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h3 id="yilia-plus"><a href="#yilia-plus" class="headerlink" title="yilia-plus"></a>yilia-plus</h3><blockquote><p>参考配置：<a href="https://gitee.com/nate-lin/yilia-plus">https://gitee.com/nate-lin/yilia-plus</a></p></blockquote><h2 id="远程发布"><a href="#远程发布" class="headerlink" title="远程发布"></a>远程发布</h2><h3 id="github"><a href="#github" class="headerlink" title="github"></a>github</h3><h4 id="免密关联"><a href="#免密关联" class="headerlink" title="免密关联"></a>免密关联</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh-keygen<br></code></pre></td></tr></table></figure><p>然后将生成的 <code>id_rsa.pub</code> 文件内容关联到 github 的 SSH and GPG Keys 菜单的下的 ssh key 列表</p><img src="/posts/9d95a809/image-20230408234337544.png" class alt="image-20230408234337544"><h4 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h4><p>仓库名称格式 <strong>&lt;你的 GitHub 用户名&gt;.github.io</strong> ，站点会通过这个名称实现域名访问</p><blockquote><p>注意：仓库的访问权限需要设置为 public，否则无法通过 .github.io 域名的形式进行访问。</p></blockquote><img src="/posts/9d95a809/image-20230408235308117.png" alt="image-20230408235308117" style="zoom: 67%;"><h4 id="github-page-暴露"><a href="#github-page-暴露" class="headerlink" title="github page 暴露"></a>github page 暴露</h4><blockquote><p>参考链接：<a href="https://docs.github.com/en/pages/quickstart">https://docs.github.com/en/pages/quickstart</a></p></blockquote><p>默认情况下新建的仓库在 github page 是不关联任何分支的，即为 None，所以需要调整 Pages 配置为以下图示效果：</p><img src="/posts/9d95a809/image-20230409000036606.png" alt="image-20230409000036606"><h4 id="cloudflare-加速"><a href="#cloudflare-加速" class="headerlink" title="cloudflare 加速"></a>cloudflare 加速</h4><p>经实测 githubpage 在国内很容易被墙，所以决定在现有的 cloudflare 网站上做一层 CNAME 域名重定向访问到 github page 上，解决国内无法直接访问 github page 的问题，操作步骤如下：</p><p>创建 CNAME DNS 解析记录，最终访问域名为 <a href="https://blog.yahyav2rayssr.top,cloudflare/">https://blog.yahyav2rayssr.top，cloudflare</a> 配置如下：</p><img src="/posts/9d95a809/image-20230409003317201.png" class alt="image-20230409003317201"><p>另外还需要在 github 上面设置自定义域名，填写位置如下：</p><img src="/posts/9d95a809/image-20230409003825608.png" alt="image-20230409003825608"><h4 id="hexo-远程仓库配置"><a href="#hexo-远程仓库配置" class="headerlink" title="hexo 远程仓库配置"></a>hexo 远程仓库配置</h4><h5 id="安装发布插件"><a href="#安装发布插件" class="headerlink" title="安装发布插件"></a>安装发布插件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cnpm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><h5 id="修改-hexo-配置"><a href="#修改-hexo-配置" class="headerlink" title="修改 hexo 配置"></a>修改 hexo 配置</h5><p>增加 github 相关配置，内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">Deployment</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># Docs: https://hexo.io/docs/one-command-deployment</span></span><br>deploy:<br>  type: git<br>  repo: git@github.com:yaoyuming/yaoyuming.github.io.git<br>  branch: master<br></code></pre></td></tr></table></figure><h2 id="文件压缩"><a href="#文件压缩" class="headerlink" title="文件压缩"></a>文件压缩</h2><h3 id="hexo-neat"><a href="#hexo-neat" class="headerlink" title="hexo-neat"></a>hexo-neat</h3><blockquote><p>hexo-neat 主要用来压缩 html，css 以及 js 文件。</p></blockquote><h4 id="安装-hexo-neat"><a href="#安装-hexo-neat" class="headerlink" title="安装 hexo-neat"></a>安装 hexo-neat</h4><p>在站点根目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-neat --save<br></code></pre></td></tr></table></figure><h4 id="添加相关配置"><a href="#添加相关配置" class="headerlink" title="添加相关配置"></a>添加相关配置</h4><p>在站点配置文件 <code>_config.yml</code> 添加相关配置，直接添加到站点配置文件的末尾就可以。可以安装自己的需求去自定义配置，配置内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># hexo-neat</span><br><span class="hljs-comment"># 博文压缩</span><br><span class="hljs-attr">neat_enable:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment"># 压缩html</span><br><span class="hljs-attr">neat_html:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">exclude:</span><br><span class="hljs-comment"># 压缩css  </span><br><span class="hljs-attr">neat_css:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">exclude:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;**/*.min.css&#x27;</span><br><span class="hljs-comment"># 压缩js</span><br><span class="hljs-attr">neat_js:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">mangle:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">output:</span><br>  <span class="hljs-attr">compress:</span><br>  <span class="hljs-attr">exclude:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;**/*.min.js&#x27;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;**/jquery.fancybox.pack.js&#x27;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;**/index.js&#x27;</span>  <br></code></pre></td></tr></table></figure><h4 id="hexo-neat-插件注意事项"><a href="#hexo-neat-插件注意事项" class="headerlink" title="hexo-neat 插件注意事项"></a>hexo-neat 插件注意事项</h4><p>在使用hexo-neat插件时，可以在命令窗口中看到各个文件的压缩率，于是可以通过跳过一些文件让效率更高。</p><p><strong>跳过压缩文件的正确配置方式</strong></p><blockquote><p>压缩 html 时不要跳过 .md 文件和 .swig 文件</p><p>.md 文件就是 markdown 文件，如果跳过压缩 .md 文件，而又刚好在文章中使用到了 tab 标签，那么当 hexo 在生成静态页面时就会发生解析错误。这会导致使用到了 tab 标签的页面生成失败而无法访问。</p><p>.swig 文件是模板引擎文件，也就是 hexo 可以通过这些文件来生成对应的页面。如果跳过这些文件，所有页面完全没有起到压缩的效果，页面源代码里依然存在着一大堆空白。</p></blockquote><p>如果按照官方插件的文档说明来配置exclude，会发现完全不起作用。这是因为配置的文件路径不对，压缩时找不到你配置的文件，自然也就无法跳过了。于是需要给这些文件指定正确的路径，万能的配置方式如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">neat_css:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">exclude:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;**/*.min.css&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="gulp"><a href="#gulp" class="headerlink" title="gulp"></a>gulp</h3><blockquote><p>gulp 主要用来压缩图片。</p></blockquote><h4 id="安装-gulp"><a href="#安装-gulp" class="headerlink" title="安装 gulp"></a>安装 gulp</h4><p>gulp 全局安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install --global gulp-cli<br></code></pre></td></tr></table></figure><p>gulp 局部安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install gulp --save<br><br>npm install gulp-babel babel-preset-env babel-preset-mobx --save<br>npm install -D @babel/core @babel/preset-react @babel/preset-env --save<br></code></pre></td></tr></table></figure><p>图片压缩安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install gulp-imagemin --save<br></code></pre></td></tr></table></figure><p>最终生成的 package.json 新增内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;compile&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;hexo clean &amp;&amp; hexo generate &amp;&amp; gulp minify-images&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;dependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;babel-preset-env&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^1.7.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;babel-preset-mobx&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^2.0.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;gulp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^4.0.2&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;gulp-babel&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^8.0.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;gulp-imagemin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^7.1.0&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;devDependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;@babel/core&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^7.8.4&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;@babel/preset-env&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^7.8.4&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;@babel/preset-react&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^7.8.3&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="gulpfile-js-配置"><a href="#gulpfile-js-配置" class="headerlink" title="gulpfile.js 配置"></a>gulpfile.js 配置</h4><p>新增 gulpfile.js，内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 引入需要的模块</span><br><span class="hljs-keyword">var</span> gulp = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp&#x27;</span>);<br><span class="hljs-keyword">var</span> imagemin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-imagemin&#x27;</span>);<br><br><span class="hljs-comment">// 压缩图片</span><br>gulp.<span class="hljs-title function_">task</span>(<span class="hljs-string">&#x27;minify-images&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> gulp.<span class="hljs-title function_">src</span>([<span class="hljs-string">&#x27;./public/**/*.png&#x27;</span>, <span class="hljs-string">&#x27;./public/**/*.jpg&#x27;</span>, <span class="hljs-string">&#x27;./public/**/*.gif&#x27;</span>])<br>        .<span class="hljs-title function_">pipe</span>(<span class="hljs-title function_">imagemin</span>(<br>            [imagemin.<span class="hljs-title function_">gifsicle</span>(&#123; <span class="hljs-string">&#x27;optimizationLevel&#x27;</span>: <span class="hljs-number">3</span> &#125;),<br>            imagemin.<span class="hljs-title function_">mozjpeg</span>(&#123; <span class="hljs-string">&#x27;progressive&#x27;</span>: <span class="hljs-literal">true</span> &#125;),<br>            imagemin.<span class="hljs-title function_">optipng</span>(&#123; <span class="hljs-string">&#x27;optimizationLevel&#x27;</span>: <span class="hljs-number">5</span> &#125;),<br>            imagemin.<span class="hljs-title function_">svgo</span>()],<br>            &#123; <span class="hljs-string">&#x27;verbose&#x27;</span>: <span class="hljs-literal">true</span> &#125;))<br>        .<span class="hljs-title function_">pipe</span>(gulp.<span class="hljs-title function_">dest</span>(<span class="hljs-string">&#x27;./public&#x27;</span>))<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="制作永久链接"><a href="#制作永久链接" class="headerlink" title="制作永久链接"></a>制作永久链接</h2><p>hexo 预设永久连结是依照日期，但是这个很容易改动，又不希望永久连结内使用文章标题（因为是中文也有可能改动），所以有必要对链接路径做自定义配置。</p><h3 id="安装-abbrlink"><a href="#安装-abbrlink" class="headerlink" title="安装 abbrlink"></a>安装 abbrlink</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-abbrlink --save<br></code></pre></td></tr></table></figure><h3 id="设定"><a href="#设定" class="headerlink" title="设定"></a>设定</h3><h4 id="预设设定"><a href="#预设设定" class="headerlink" title="预设设定"></a>预设设定</h4><p>hexo的站点配置文件(_config.yml)中</p><p>使用 <code>permalink: :year/:month/:day/:title/</code> 当作永久连结的设定</p><p>也就是说文章的永久连接最后会是 <code>年/月/日/标题</code> 这样的格式，详情可以看 <a href="https://hexo.io/zh-cn/docs/permalinks.html">hexo永久连结文档</a></p><p>而稍微底下一点有</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">permalink_defaults:</span><br></code></pre></td></tr></table></figure><p>这个是可以设定自己的参数的。</p><h4 id="自定义设定"><a href="#自定义设定" class="headerlink" title="自定义设定"></a>自定义设定</h4><p>我使用 <a href="https://github.com/Rozbo/hexo-abbrlink">hexo-abbrlink</a> 对每篇文章生出一个编号</p><p>设定 hexo-abbrlink<br>在主题配置文件加上</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">abbrlink:</span><br>  <span class="hljs-attr">alg:</span> <span class="hljs-string">crc32</span>  <span class="hljs-comment"># support crc16(default) and crc32  </span><br>  <span class="hljs-attr">rep:</span> <span class="hljs-string">hex</span>    <span class="hljs-comment"># support dec(default) and hex</span><br><br>  <span class="hljs-comment"># crc16/crc32: 差别在于编号个数的极限，crc16可以生出65535个</span><br>  <span class="hljs-comment"># dec/hex:     差别在于编号生出来是十进制还是十六进制</span><br></code></pre></td></tr></table></figure><h4 id="自定义永久连结格式"><a href="#自定义永久连结格式" class="headerlink" title="自定义永久连结格式"></a>自定义永久连结格式</h4><p>我想要以作者名字为主，再加上编号来形成永久连结</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">permalink_defaults:</span><br>  <span class="hljs-attr">author_name:</span> <span class="hljs-string">yahya</span>   <span class="hljs-comment"># 新增一个作者名字的参数</span><br><br><span class="hljs-attr">permalink:</span> <span class="hljs-string">:author_name/:abbrlink/</span>    <span class="hljs-comment"># 结果是：网域/作者名字/abbrlink生成编号</span><br></code></pre></td></tr></table></figure><h2 id="私人文章隐藏"><a href="#私人文章隐藏" class="headerlink" title="私人文章隐藏"></a>私人文章隐藏</h2><p>当一篇文章被设置为「隐藏」时，它不会出现在任何列表中（包括首页、存档、分类页面、标签页面、Feed、站点地图等），也不会被搜索引擎索引（前提是搜索引擎遵守 noindex 标签）。</p><p>只有知道文章链接的人才可以访问被隐藏的文章。</p><p>Github 地址：<a href="https://github.com/printempw/hexo-hide-posts">https://github.com/printempw/hexo-hide-posts</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>在站点根目录下执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-hide-posts --save<br></code></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>在站点目录下的<code>_config.yml</code>中如下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># hexo-hide-posts</span><br><span class="hljs-attr">hide_posts:</span><br>  <span class="hljs-comment"># 可以改成其他你喜欢的名字</span><br>  <span class="hljs-attr">filter:</span> <span class="hljs-string">hidden</span><br>  <span class="hljs-comment"># 指定你想要传递隐藏文章的位置，比如让所有隐藏文章在存档页面可见</span><br>  <span class="hljs-comment"># 常见的位置有：index, tag, category, archive, sitemap, feed, etc.</span><br>  <span class="hljs-comment"># 留空则默认全部隐藏</span><br>  <span class="hljs-attr">public_generators:</span> []<br>  <span class="hljs-comment"># 为隐藏的文章添加 noindex meta 标签，阻止搜索引擎收录</span><br>  <span class="hljs-attr">noindex:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>举个栗子：设置 <code>filter: secret</code> 之后，你就可以在 front-matter 中使用 <code>secret: true</code> 来隐藏文章了。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>在文章的属性中定义 <code>hidden: true</code> 即可隐藏文章。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">&#x27;Hidden Post&#x27;</span><br><span class="hljs-attr">date:</span> <span class="hljs-string">&#x27;2021/03/05 21:45:14&#x27;</span><br><span class="hljs-attr">hidden:</span> <span class="hljs-literal">true</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>虽然首页上被隐藏了，但你仍然可以通过 <code>https://hexo.test/lorem-ipsum/</code> 链接访问它。</p><p>你可以在命令行运行 <code>hexo hidden:list</code> 来获取当前所有的已隐藏文章列表。</p><p>插件也在 <a href="https://hexo.io/api/locals">Local Variables</a> 中添加了 <code>all_posts</code> 和 <code>hidden_posts</code> 变量，供自定义主题使用。</p><h2 id="推荐主题"><a href="#推荐主题" class="headerlink" title="推荐主题"></a>推荐主题</h2><p><a href="https://github.com/fluid-dev/hexo-theme-fluid">hexo-theme-fluid</a></p><p><a href="https://github.com/theme-next/hexo-theme-next">hexo-theme-next</a></p><p><a href="https://github.com/cofess/hexo-theme-pure">hexo-theme-pure</a></p><p><a href="https://github.com/JoeyBling/hexo-theme-yilia-plus">hexo-theme-yilia-plus</a></p><p><a href="https://github.com/yelog/hexo-theme-3-hexo">hexo-theme-3-hexo</a></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://home.ustc.edu.cn/~liujunyan/blog/hexo-next-theme-config/#hexo-%E5%AE%89%E8%A3%85">Hexo 博客 NexT 主题的安装使用</a></p><p><a href="https://bbs.huaweicloud.com/blogs/348180">centos7系统部署hexo博客新手入门</a></p><p><a href="https://monkeywie.cn/2020/08/20/fast-github-page-with-cloudflare/">使用cloudflare免费加速github page</a></p><p><a href="https://www.voidking.com/dev-hexo-gulp/">Hexo使用Gulp压缩静态资源</a></p><p><a href="https://blog.csdn.net/GerZhouGengCheng/article/details/106074545">使用Gulp压缩Hexo博客静态资源</a></p><p><a href="https://www.jb51.net/article/98153.htm">node.js版本管理工具n无效的原理和解决方法</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;yum-源配置&quot;&gt;&lt;a href=&quot;#yum-源配置&quot; class=&quot;headerlink&quot; title=&quot;yum 源配置&quot;&gt;&lt;/</summary>
      
    
    
    
    <category term="运维" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/"/>
    
    <category term="常用安装" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/%E5%B8%B8%E7%94%A8%E5%AE%89%E8%A3%85/"/>
    
    
    <category term="hexo" scheme="https://blog.yahyav2rayssr.top/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7 网络篇</title>
    <link href="https://blog.yahyav2rayssr.top/posts/2004b1f1/"/>
    <id>https://blog.yahyav2rayssr.top/posts/2004b1f1/</id>
    <published>2023-04-16T06:49:53.311Z</published>
    <updated>2023-04-16T06:49:53.312Z</updated>
    
    <content type="html"><![CDATA[<h1 id="查看网关-x2F-路由"><a href="#查看网关-x2F-路由" class="headerlink" title="查看网关&#x2F;路由"></a>查看网关&#x2F;路由</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">route -n<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;查看网关-x2F-路由&quot;&gt;&lt;a href=&quot;#查看网关-x2F-路由&quot; class=&quot;headerlink&quot; title=&quot;查看网关&amp;#x2F;路由&quot;&gt;&lt;/a&gt;查看网关&amp;#x2F;路由&lt;/h1&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;ta</summary>
      
    
    
    
    <category term="运维" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/"/>
    
    <category term="CentOS7" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/CentOS7/"/>
    
    
    <category term="centos7" scheme="https://blog.yahyav2rayssr.top/tags/centos7/"/>
    
  </entry>
  
  <entry>
    <title>Yum 常用命令</title>
    <link href="https://blog.yahyav2rayssr.top/posts/500bccb4/"/>
    <id>https://blog.yahyav2rayssr.top/posts/500bccb4/</id>
    <published>2023-04-16T06:48:39.575Z</published>
    <updated>2023-04-16T06:48:39.575Z</updated>
    
    <content type="html"><![CDATA[<h1 id="yum-生成缓存"><a href="#yum-生成缓存" class="headerlink" title="yum 生成缓存"></a>yum 生成缓存</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum makecache fast<br></code></pre></td></tr></table></figure><h1 id="yum-清除缓存"><a href="#yum-清除缓存" class="headerlink" title="yum 清除缓存"></a>yum 清除缓存</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum clean all<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;yum-生成缓存&quot;&gt;&lt;a href=&quot;#yum-生成缓存&quot; class=&quot;headerlink&quot; title=&quot;yum 生成缓存&quot;&gt;&lt;/a&gt;yum 生成缓存&lt;/h1&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl</summary>
      
    
    
    
    <category term="运维" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/"/>
    
    <category term="CentOS7" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/CentOS7/"/>
    
    
    <category term="yum" scheme="https://blog.yahyav2rayssr.top/tags/yum/"/>
    
  </entry>
  
  <entry>
    <title>RPM 常用命令</title>
    <link href="https://blog.yahyav2rayssr.top/posts/7cf61fc4/"/>
    <id>https://blog.yahyav2rayssr.top/posts/7cf61fc4/</id>
    <published>2023-04-16T06:48:21.026Z</published>
    <updated>2023-04-16T06:48:21.026Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a><strong>安装</strong></h2><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rpm -i &lt;需要安装的包文件名&gt;<br></code></pre></td></tr></table></figure><p>举个栗子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">安装 example.rpm 包</span><br>rpm -i example.rpm<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装 example.rpm 包并在安装过程中显示正在安装的文件信息</span><br>rpm -iv example.rpm<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装 example.rpm 包并在安装过程中显示正在安装的文件信息及安装进度</span><br>rpm -ivh example.rpm<br></code></pre></td></tr></table></figure><h2 id="查看安装完成的软件"><a href="#查看安装完成的软件" class="headerlink" title="查看安装完成的软件"></a><strong>查看安装完成的软件</strong></h2><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rpm -qa<br></code></pre></td></tr></table></figure><p>举个栗子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@jacky zookeeper]# rpm -qa | grep jdk<br>java-1.6.0-openjdk-1.6.0.0-1.66.1.13.0.el6.i686<br>java-1.7.0-openjdk-1.7.0.45-2.4.3.3.el6.i686<br></code></pre></td></tr></table></figure><h2 id="卸载软件"><a href="#卸载软件" class="headerlink" title="卸载软件"></a><strong>卸载软件</strong></h2><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rpm -e --nodeps &lt;要卸载的软件包&gt;<br></code></pre></td></tr></table></figure><p>举个栗子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@jacky zookeeper]# rpm -e --nodeps java-1.6.0-openjdk-1.6.0.0-1.66.1.13.0.el6.i686<br></code></pre></td></tr></table></figure><p></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;&lt;strong&gt;安装&lt;/s</summary>
      
    
    
    
    <category term="运维" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="rpm" scheme="https://blog.yahyav2rayssr.top/tags/rpm/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7 修改 root 密码</title>
    <link href="https://blog.yahyav2rayssr.top/posts/1f71be40/"/>
    <id>https://blog.yahyav2rayssr.top/posts/1f71be40/</id>
    <published>2023-04-16T06:47:31.463Z</published>
    <updated>2023-04-16T06:47:31.463Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h2><p>在启动引导主页上按e进入内核编辑</p><img src="/posts/1f71be40/20190808185726128.png" class alt="在这里插入图片描述"><img src="/posts/1f71be40/20190808185752580.png" class alt="在这里插入图片描述"><p>找到 Linux16 这一段，在末尾处添加 rd.break，按下组合键 CTRL+X 运行内核程序进入紧急救援模式</p><img src="/posts/1f71be40/2019080818581670.png" class alt="在这里插入图片描述"><p>在这个模式下依次输入以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">mount -o remount,rw /sysroot<br>chroot /sysroot<br>passwd # 注意：到这里的时候会提示输入两次需要重置的密码，输入完成之后回车即可<br>touch /.autorelabel # 如果已经开启了SElinux，则需要输入此命令<br>reboot<br></code></pre></td></tr></table></figure><img src="/posts/1f71be40/20190808185904739.png" class alt="在这里插入图片描述"><p>重新进入系统输入刚刚重置的密码即可登陆root账户</p><h2 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h2><p>前面操作和方式一样</p><p>在linux16 这一段的最后添加上 <code>init=/bin/sh</code></p><img src="/posts/1f71be40/20190808190135395.png" class alt="在这里插入图片描述"><img src="/posts/1f71be40/2019080819042667.png" class alt="在这里插入图片描述"><p>进来上图界面后输入以命令<br>1、挂载根目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mount -o remount, rw /<br></code></pre></td></tr></table></figure><p>2、选择要修改密码的用户名，这里选择root用户进行修改，可以更换为你要修改的用户<br>passwd<br>3、输入2次一样的新密码，注意输入密码的时候屏幕上不会有字符出现。<br>如果输入的密码太简单，会提示警告（BAD PASSWORD：The password fails the dictionary check - it is too simplistic&#x2F;systematic），可以无视它，继续输入密码，不过建议还是设置比较复杂一些的密码，以保证安全性<br>4、如果已经开启了SElinux，则需要输入以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">touch /.autorelabel<br></code></pre></td></tr></table></figure><p>5、最后输入以下命令重启系统即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">exec /sbin/init<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">或</span><br>exec /sbin/reboot<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;方式一&quot;&gt;&lt;a href=&quot;#方式一&quot; class=&quot;headerlink&quot; title=&quot;方式一&quot;&gt;&lt;/a&gt;方式一&lt;/h2&gt;&lt;p</summary>
      
    
    
    
    <category term="运维" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/"/>
    
    <category term="CentOS7" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/CentOS7/"/>
    
    
    <category term="centos7" scheme="https://blog.yahyav2rayssr.top/tags/centos7/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7 基础知识</title>
    <link href="https://blog.yahyav2rayssr.top/posts/70711607/"/>
    <id>https://blog.yahyav2rayssr.top/posts/70711607/</id>
    <published>2023-04-16T06:47:08.340Z</published>
    <updated>2023-04-16T06:47:08.340Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux系统的7个运行级别-runlevel"><a href="#Linux系统的7个运行级别-runlevel" class="headerlink" title="Linux系统的7个运行级别(runlevel)"></a>Linux系统的7个运行级别(runlevel)</h1><p><strong>运行级别分为以下6种：</strong></p><p>0：系统停机状态，系统默认运行级别不能设为0，否则不能正常启动</p><p>1：单用户工作状态，root权限，用于系统维护，禁止远程登陆</p><p>2：多用户状态(没有NFS)</p><p>3：完全的多用户状态(有NFS)，登陆后进入控制台命令行模式</p><p>4：系统未使用，保留</p><p>5：X11控制台，登陆后进入图形GUI模式</p><p>6：系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动</p><blockquote><p><strong>运行级别的原理：</strong></p><ol><li>在目录&#x2F;etc&#x2F;rc.d&#x2F;init.d下有许多服务器脚本程序，一般称为服务(service)</li><li>在&#x2F;etc&#x2F;rc.d下有7个名为rcN.d的<strong>目录</strong>，对应系统的7个运行级别</li><li>rcN.d目录下都是一些符号链接文件，这些链接文件都指向init.d目录下的service脚本文件，命名规则为K+nn+服务名或S+nn+服务名，其中nn为两位数字。</li><li>系统会根据指定的运行级别进入对应的rcN.d目录，并按照文件名顺序检索目录下的链接文件<br>   对于以K开头的文件，系统将终止对应的服务<br>   对于以S开头的文件，系统将启动对应的服务</li><li>另外 init 0 为关机，init 6 为重启系统</li></ol></blockquote><h2 id="查看当前运行级别"><a href="#查看当前运行级别" class="headerlink" title="查看当前运行级别"></a>查看当前运行级别</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">runlevel<br></code></pre></td></tr></table></figure><h2 id="进入其它运行级别"><a href="#进入其它运行级别" class="headerlink" title="进入其它运行级别"></a>进入其它运行级别</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">init [级别]<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Linux系统的7个运行级别-runlevel&quot;&gt;&lt;a href=&quot;#Linux系统的7个运行级别-runlevel&quot; class=&quot;headerlink&quot; title=&quot;Linux系统的7个运行级别(runlevel)&quot;&gt;&lt;/a&gt;Linux系统的7个运行级别(r</summary>
      
    
    
    
    <category term="运维" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/"/>
    
    <category term="CentOS7" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/CentOS7/"/>
    
    
    <category term="centos7" scheme="https://blog.yahyav2rayssr.top/tags/centos7/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7 常用命令</title>
    <link href="https://blog.yahyav2rayssr.top/posts/7fdd7943/"/>
    <id>https://blog.yahyav2rayssr.top/posts/7fdd7943/</id>
    <published>2023-04-16T06:47:01.323Z</published>
    <updated>2023-04-16T06:47:01.323Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="修改时区"><a href="#修改时区" class="headerlink" title="修改时区"></a>修改时区</h2><p><strong>查看时间各种状态</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">timedatectl<br></code></pre></td></tr></table></figure><p>结果输出如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">      Local time: 六 2023-01-07 04:41:46 UTC<br>  Universal time: 六 2023-01-07 04:41:46 UTC<br>        RTC time: n/a<br>       Time zone: UTC (UTC, +0000)<br>     NTP enabled: n/a<br>NTP synchronized: yes<br> RTC in local TZ: no<br>      DST active: n/a<br></code></pre></td></tr></table></figure><p><strong>列出所有时区</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">timedatectl list-timezones<br></code></pre></td></tr></table></figure><p><strong>将硬件时钟调整为与本地时钟一致, 0 为设置为 UTC 时间</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">timedatectl set-local-rtc 1<br></code></pre></td></tr></table></figure><p><strong>设置系统时区为上海</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">timedatectl set-timezone Asia/Shanghai<br></code></pre></td></tr></table></figure><h2 id="校准时间"><a href="#校准时间" class="headerlink" title="校准时间"></a>校准时间</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum -y install ntp<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">通过阿里云时间服务器校准时间</span><br>ntpdate ntp1.aliyun.com<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;修改时区&quot;&gt;&lt;a href=&quot;#修改时区&quot; class=&quot;headerlink&quot; title=&quot;修改时区&quot;&gt;&lt;/a&gt;修改时区&lt;/h</summary>
      
    
    
    
    <category term="运维" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/"/>
    
    <category term="CentOS7" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/CentOS7/"/>
    
    
    <category term="centos7" scheme="https://blog.yahyav2rayssr.top/tags/centos7/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7 安装</title>
    <link href="https://blog.yahyav2rayssr.top/posts/b23a554b/"/>
    <id>https://blog.yahyav2rayssr.top/posts/b23a554b/</id>
    <published>2023-04-16T06:46:53.469Z</published>
    <updated>2023-04-16T06:46:53.469Z</updated>
    
    <content type="html"><![CDATA[<h1 id="运行模式"><a href="#运行模式" class="headerlink" title="运行模式"></a>运行模式</h1><h2 id="查看当前模式"><a href="#查看当前模式" class="headerlink" title="查看当前模式"></a>查看当前模式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shel">systemctl get-default<br></code></pre></td></tr></table></figure><h2 id="修改为图形界面"><a href="#修改为图形界面" class="headerlink" title="修改为图形界面"></a>修改为图形界面</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl set-default graphical.target<br></code></pre></td></tr></table></figure><h2 id="修改为命令行"><a href="#修改为命令行" class="headerlink" title="修改为命令行"></a>修改为命令行</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl set-default multi-user.target<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;运行模式&quot;&gt;&lt;a href=&quot;#运行模式&quot; class=&quot;headerlink&quot; title=&quot;运行模式&quot;&gt;&lt;/a&gt;运行模式&lt;/h1&gt;&lt;h2 id=&quot;查看当前模式&quot;&gt;&lt;a href=&quot;#查看当前模式&quot; class=&quot;headerlink&quot; title=&quot;查看当前模</summary>
      
    
    
    
    <category term="运维" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/"/>
    
    <category term="CentOS7" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/CentOS7/"/>
    
    
    <category term="centos7" scheme="https://blog.yahyav2rayssr.top/tags/centos7/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7 中文乱码</title>
    <link href="https://blog.yahyav2rayssr.top/posts/d91b8c97/"/>
    <id>https://blog.yahyav2rayssr.top/posts/d91b8c97/</id>
    <published>2023-04-16T06:46:37.909Z</published>
    <updated>2023-04-16T06:46:37.909Z</updated>
    
    <content type="html"><![CDATA[<h1 id="解决centos7中文乱码"><a href="#解决centos7中文乱码" class="headerlink" title="解决centos7中文乱码"></a>解决centos7中文乱码</h1><h2 id="查看本地的中文语言包"><a href="#查看本地的中文语言包" class="headerlink" title="查看本地的中文语言包"></a>查看本地的中文语言包</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@61c1a2f92913 ~]# locale  -a<br>C<br>POSIX<br>en_US.utf8<br><br>[root@61c1a2f92913 ~]# locale <br>LANG=<br>LC_CTYPE=&quot;POSIX&quot;<br>LC_NUMERIC=&quot;POSIX&quot;<br>LC_TIME=&quot;POSIX&quot;<br>LC_COLLATE=&quot;POSIX&quot;<br>LC_MONETARY=&quot;POSIX&quot;`在这里插入代码片`<br>LC_MESSAGES=&quot;POSIX&quot;<br>LC_PAPER=&quot;POSIX&quot;<br>LC_NAME=&quot;POSIX&quot;<br>LC_ADDRESS=&quot;POSIX&quot;<br>LC_TELEPHONE=&quot;POSIX&quot;<br>LC_MEASUREMENT=&quot;POSIX&quot;<br>LC_IDENTIFICATION=&quot;POSIX&quot;<br>LC_ALL=<br></code></pre></td></tr></table></figure><h2 id="安装中文环境包"><a href="#安装中文环境包" class="headerlink" title="安装中文环境包"></a>安装中文环境包</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum -y install kde-l10n-Chinese<br></code></pre></td></tr></table></figure><h2 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim  /etc/profile<br>export LC_ALL=&quot;zh_CN.UTF-8&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">更新环境变量</span><br>source /etc/profile<br></code></pre></td></tr></table></figure><p>此时已经支持中文了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">locale<br>LANG=<br>LC_CTYPE=&quot;zh_CN.UTF-8&quot;<br>LC_NUMERIC=&quot;zh_CN.UTF-8&quot;<br>LC_TIME=&quot;zh_CN.UTF-8&quot;<br>LC_COLLATE=&quot;zh_CN.UTF-8&quot;<br>LC_MONETARY=&quot;zh_CN.UTF-8&quot;<br>LC_MESSAGES=&quot;zh_CN.UTF-8&quot;<br>LC_PAPER=&quot;zh_CN.UTF-8&quot;<br>LC_NAME=&quot;zh_CN.UTF-8&quot;<br>LC_ADDRESS=&quot;zh_CN.UTF-8&quot;<br>LC_TELEPHONE=&quot;zh_CN.UTF-8&quot;<br>LC_MEASUREMENT=&quot;zh_CN.UTF-8&quot;<br>LC_IDENTIFICATION=&quot;zh_CN.UTF-8&quot;<br></code></pre></td></tr></table></figure><h2 id="设置locale-conf"><a href="#设置locale-conf" class="headerlink" title="设置locale.conf"></a>设置locale.conf</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/locale.conf <br>LANG=&quot;zh_CN.UTF-8&quot;<br><br>source /etc/locale.conf <br></code></pre></td></tr></table></figure><h2 id="设置系统语言"><a href="#设置系统语言" class="headerlink" title="设置系统语言"></a>设置系统语言</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">localedef -c -f UTF-8 -i zh_CN zh_CN.utf8<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;解决centos7中文乱码&quot;&gt;&lt;a href=&quot;#解决centos7中文乱码&quot; class=&quot;headerlink&quot; title=&quot;解决centos7中文乱码&quot;&gt;&lt;/a&gt;解决centos7中文乱码&lt;/h1&gt;&lt;h2 id=&quot;查看本地的中文语言包&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="运维" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/"/>
    
    <category term="CentOS7" scheme="https://blog.yahyav2rayssr.top/categories/%E8%BF%90%E7%BB%B4/CentOS7/"/>
    
    
    <category term="centos7" scheme="https://blog.yahyav2rayssr.top/tags/centos7/"/>
    
  </entry>
  
  <entry>
    <title>nodejs 常用命令</title>
    <link href="https://blog.yahyav2rayssr.top/posts/63e97dc8/"/>
    <id>https://blog.yahyav2rayssr.top/posts/63e97dc8/</id>
    <published>2023-04-16T06:34:33.047Z</published>
    <updated>2023-04-16T06:34:33.047Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><h3 id="npm-查看缓存目录"><a href="#npm-查看缓存目录" class="headerlink" title="npm 查看缓存目录"></a>npm 查看缓存目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm config get cache<br></code></pre></td></tr></table></figure><h3 id="npm-清理缓存"><a href="#npm-清理缓存" class="headerlink" title="npm 清理缓存"></a>npm 清理缓存</h3><blockquote><p>参考链接：<a href="http://claude-ray.com/2019/12/06/npm-install-without-cache/">http://claude-ray.com/2019/12/06/npm-install-without-cache/</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm cache clean -f<br></code></pre></td></tr></table></figure><h2 id="npm-设置代理"><a href="#npm-设置代理" class="headerlink" title="npm 设置代理"></a>npm 设置代理</h2><h3 id="http-代理"><a href="#http-代理" class="headerlink" title="http 代理"></a>http 代理</h3><p>npm 原生支持 http 代理，直接设置即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">假设本地代理端口为 8080</span><br>npm config set proxy &quot;http://localhost:8080&quot;<br>npm config set https-proxy &quot;http://localhost:8080&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">有用户密码的代理</span><br>npm config set proxy &quot;http://username:password@localhost:8080&quot;<br>npm confit set https-proxy &quot;http://username:password@localhost:8080&quot;<br></code></pre></td></tr></table></figure><h3 id="socks5-代理"><a href="#socks5-代理" class="headerlink" title="socks5 代理"></a>socks5 代理</h3><p>npm 不支持 socks 代理，但是我们可以用一个工具将 socks 代理转成 http 代理，然后将 npm 代理地址设置到这个工具的地址。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">假设本地 socks5 代理端口为 1080</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">首先安装转换工具</span><br>npm install -g http-proxy-to-socks<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">然后使用这个工具监听 8081 端口,支持 http 代理，然后所有 1080 的 socks 代理数据都将转换成 http 的代理数据发送到 8081 上</span><br>hpts -s localhost:8081 -p 1080<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">最后设置 npm 代理为 8081</span><br>npm config set proxy &quot;http://localhost:8081&quot;<br>npm config set https-proxy &quot;http://localhost:8081&quot;<br></code></pre></td></tr></table></figure><p>相当于又加了一个中间层，将 socks 转成 http。</p><h3 id="删除代理"><a href="#删除代理" class="headerlink" title="删除代理"></a>删除代理</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm config delete proxy<br>npm config delete https-proxy<br></code></pre></td></tr></table></figure><p></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;缓存&quot;&gt;&lt;a href=&quot;#缓存&quot; class=&quot;headerlink&quot; title=&quot;缓存&quot;&gt;&lt;/a&gt;缓存&lt;/h2&gt;&lt;h3 id</summary>
      
    
    
    
    <category term="前端" scheme="https://blog.yahyav2rayssr.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="nodejs" scheme="https://blog.yahyav2rayssr.top/categories/%E5%89%8D%E7%AB%AF/nodejs/"/>
    
    
    <category term="nodejs" scheme="https://blog.yahyav2rayssr.top/tags/nodejs/"/>
    
  </entry>
  
</feed>
