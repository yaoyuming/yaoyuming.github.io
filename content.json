[{"title":"Gitlab 安装","date":"2023-04-09T10:17:59.438Z","path":"2023/04/09/运维/gitlab 安装/","text":"目录安装 gitlab 运行需要较大内存，建议将虚拟机内存设置为 4GB 以上，并保证相关端口不被其他进行占用。 安装相关依赖1yum -y install policycoreutils openssh-server openssh-clients postfix 设置 postfix 设置 postfix 为开机自启动，目的：支持 gitlab 邮件发送。 1systemctl enable postfix &amp;&amp; systemctl start postfix rpm 包安装官方参考链接：https://packages.gitlab.com/gitlab/gitlab-ce/install#bash-rpm 使用以下命令进行快速安装： 1curl -s https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash EL 是 Red Hat Enterprise Linux 的简写 EL6 软件包用于在 Red Hat 6.x, CentOS 6.x, and CloudLinux 6.x 的安装。 EL5 软件包用于在 Red Hat 5.x, CentOS 5.x, CloudLinux 5.x 的安装。 EL7 软件包用于在 Red Hat 7.x, CentOS 7.x, and CloudLinux 7.x 的安装。 所以这里我们采用安装 EL7 的模式，安装命令如下： 官方参考链接：https://packages.gitlab.com/gitlab/gitlab-ce/packages/el/7/gitlab-ce-15.8.5-ce.0.el7.x86_64.rpm 1sudo yum -y install gitlab-ce-15.8.5-ce.0.el7.x86_64 安装完毕后的主体文件都在 /opt/gitlab/ 目录下，可自行翻阅按需修改。 修改 root 密码官方修改密码：(http://docs.gitlab.com/ce/security/reset_root_password.html) 在root用户下，执行 12345# 老版命令gitlab-rails console production# 新版命令gitlab-rails console -e production 获得用户数据，修改用户密码 12345678910111213141516[root@svr34 bin]# gitlab-rails console productionLoading production environment (Rails 4.2.5.2)irb(main):001:0&gt; user = User.where(id: 1).first=&gt; #&lt;User id:1 @root&gt;irb(main):002:0&gt; user.password=&quot;7613302589&quot;=&gt; &quot;12345678&quot;irb(main):003:0&gt; user.password_confirmation=&quot;7613302589&quot;=&gt; &quot;12345678&quot;irb(main):004:0&gt; user.save!=&gt; trueirb(main):005:0&gt; quit 修改访问 URL编辑 gitlab.rb 文件。 123# vim /etc/gitlab/gitlab.rbexternal_url &#x27;http://192.168.50.245:8138&#x27; 此处注意别使用已被占用的端口！（如8080） 重置并启动 Gitlab重置： 注：第一次预计需要几分钟 1gitlab-ctl reconfigure 启动： 1gitlab-ctl restart 端口用途一览 端口号 归类 用途 8060 Nginx 用途不明 8138 Nginx 第二个 nginx 的端口，就是 gitlab 实例的主端口，所有外部访问的 http 均通过 gitlab 内置的 nginx 服务器处理，并使用该端口，当然暴露地址为外网0.0.0.0 9121 Redis redis_exporter 的 9121，是 gitlab 内置 redis 数据库，只向本机暴露 9090 Prometheus 向本机暴露，用途应该是创建和管理时间序列事件的触发，如通知那些功能 9187 PostgreSQL postgres_expoter 的9187，是 gitlab 内置的 postegres 数据库，向本机暴露 9093 Ruby config.ru 的 9093，gitlab 使用 ruby 的 unicorn 作为 app server 运行，管理 worker 等功能，比较重要，默认为 8080，由于 8080 比较受欢迎，这个端口基本上都得改，暴露可自行设定； 9168 Ruby 用途不明 9100 NodeJS node_exporter 的 9100，一个 nodejs 进程，用于实现测量所在的机器的资源状态比如cpu、内存、硬盘等数据的功能 9229 Go gitlab-workhors 的 9229，一个是用 go 语言写的组件，是 gitlab 发展途中添加进来的用于优化 git over http 的组件，具体历史可以查看这里了解gitlab-workhors的由来 8082 其他 sidekiq 的 8082，是一种多线程后台处理系统，用于实现 gitlab 异步运行任务 9236 其他 gitaly 的9236，是一个能够提供访问 git 仓库的 RPC 远程调用功能的服务，属于 gitlab 的一个托管组件gitlab 的配置文件位于/etc/gitlab/gitlab/gitlab.rb，使用vim等工具可以直接修改，各种参数配置修改可以参考官方文档 nginx 代理关闭 selinux 什么是selinux ？ SELinux：即安全增强型 Linux（Security-Enhanced Linux） 它是一个 Linux 内核模块，也是 Linux 的一个安全子系统 它主要由美国国家安全局开发，主要作用是最大限度地减小系统中服务进程可访问的资源（最小权限原则） 为什么要关闭 selinux ？ 有的软件对于 selinux 的安全规则支持不够好，就会建议在安装前把 selinux 先关闭，例如 k8s，本次在启动 nginx 的过程中发现 gitlab 会报 502 的错误，经由使用 journalctl -xe 命令发现有 selinux 的相关错误信息，所以需要把 selinux 做一次人工的手动禁用。 selinux 常用命令： 12345678# 查看审计日志cat /var/log/audit/audit.log# 分析一个文件sealert -a /var/log/audit/audit.log# 查询系统中的布尔型规则及其状态getsebool -a selinux的三种运行模式: enforcing: 强制模式，SELinux 正在运行中，已经在限制 domain&#x2F;type permissive: 宽容模式：SELinux 正在运行中，但仅发出警告信息,并不会实际限制 domain&#x2F;type 的存取（permissive模式可以用在测试环境中供调试规则时使用） disabled: 关闭，SELinux 没有实际运行。 12sestatus -v # 查看当前信息getenforce # 查看当前运行模式 临时关闭1234# 0: Permissive# 1: Enforcingsetenforce 0 永久关闭123# vim /etc/selinux/configSELINUX=disabled 外部 nginx 安装添加 Nginx 到 YUM 源 1sudo rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm 安装 nginx 1sudo yum install -y nginx 启用 nginx 1sudo systemctl enable nginx.service &amp;&amp; sudo systemctl start nginx.service Nginx 常用配置目录如下： 12345678910111213141516# 资源文件目录/usr/share/nginx/html/├── 50x.html└── index.html# 配置文件主目录/etc/nginx/├── conf.d│ ├── default.conf│ └── gitlab.conf # gitlab 配置文件├── fastcgi_params├── mime.types├── modules├── nginx.conf # nginx 根目录配置文件├── scgi_params└── uwsgi_params 代理 gitlab 内部 nginxgitlab 服务器主体框架如下： nginx 配置文件gitlab.conf 配置文件内容如下： 123456789101112131415161718# 主访问入口server &#123; listen 80; server_name gitlab.yahya.top; # 入口反向代理 location / &#123; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_redirect off; # 配置反向代理地址 proxy_pass http://192.168.50.245:8138; proxy_http_version 1.1; # 一定记得要配置 body_size client_max_body_size 1024m; &#125;&#125; 修改 gitlab.rb 文件 external_url 的配置直接影响到 gitlab 系统中所有 http 入口的地址，比如 git 仓库的 http 地址，gitlab 访问页面的地址，注册回调的地址，邮件验证的地址等。 编辑 gitlab.rb 文件 1vim /etc/gitlab/gitlab.rb 配置域名1external_url &#x27;http://gitlab.yahya.top&#x27; 修改对外主端口1nginx[&#x27;listen_port&#x27;] = 8138 max_body_size 配置gitlab 是可以使用 http 和 ssh 两种方式来进行git操作的，当使用 http 时，是通过post请求发送内容，若 nginx 在代理时没有设置 body_size 时将会收到：413 Request Entity Too Large 的错误，push 不了代码，内外部的 nginx 都需要配置，在 gitlab.rb 中添加： 1nginx[&#x27;client_max_body_size&#x27;] = &#x27;1024m&#x27; 认证普通用户 默认情况下注册的用户是需要进行审批，否则在没有审批的情况下登录会报以下的错误： Your account is pending approval from your GitLab administrator and hence bl 登录 root 用户，点击头像这里 点击 Overview -&gt; Users -&gt; Pending approval，审批需要注册的用户即可。 临时关闭分支保护 git push 报错 pre-receive hook declined，原因为 master 为受保护分支，无法强推代码到 master 分支上。使用 Owner 以及 Admin 角色账号推送都无法成功。 Settings -&gt; Repository -&gt; Protected Branches 临时 Unprotect master 分支(强推成功后一定要重新添加为受保护的分支) 关于 GitLab 访问权限 访问权限 - Visibility Level： 这个是在建立项目时就需要选定的，主要用于决定哪些人可以访问此项目，包含 3 种： Private - 私有，只有属于该项目成员才有看到 Internal - 内部，用 GitLab 账号的人都看到 Public - 公开，任何人可以看到 开源项目和组设置的是 Internal。 行为权限： 在满足行为权限之前，必须具备访问权限（如果没有访问权限，那就无所谓行为权限了），行为权限是指对该项目进行某些操作，比如提交、创建问题、创建新分支、删除分支、创建标签、删除标签等角色。 官方权限解释文档：https://docs.gitlab.com/ee/user/permissions.html#project-members-permissions Guest - 访客 可以创建 issue、发表评论，不能读写版本库。 Reporter - 报告者 可以理解为测试员、产品经理等，一般负责提交 issue 等 可以克隆代码，不能提交，QA、PM 可以赋予这个权限。 Developer - 开发者 可以克隆代码、开发、提交、push，RD 可以赋予这个权限。 Master - 主人 可以创建项目、添加 tag、保护分支、添加项目成员、编辑项目，核心 RD 负责人可以赋予这个权限。 Owner - 拥有者 可以设置项目访问权限 - Visibility Level、删除项目、迁移项目、管理组成员，开发组 Leader 可以赋予这个权限。 Maintainer - 维护者 权限与 Owner 差不多，但无删除项目等权限。 参见错误502 错误： 首先保证Gitlab可用运行内存大于 4G，端口未被占用 再赋予权限： 1chmod -R 755 /var/log/gitlab 再重置重启，访问后仍然可能遇到502，不过我刷新2次就一切ok了。 参考文章使用Nginx搭建并代理GitLab服务器 Centos7 搭建Gitlab服务器并配置项目全过程 gitlab配置域名并https访问 linux(centos8):禁用selinux(临时关闭&#x2F;永久关闭)","content":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><blockquote>\n<p>gitlab 运行需要较大内存，建议将虚拟机内存设置为 4GB 以上，并保证相关端口不被其他进行占用。</p>\n</blockquote>\n<h3 id=\"安装相关依赖\"><a href=\"#安装相关依赖\" class=\"headerlink\" title=\"安装相关依赖\"></a>安装相关依赖</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">yum -y install policycoreutils openssh-server openssh-clients postfix<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"设置-postfix\"><a href=\"#设置-postfix\" class=\"headerlink\" title=\"设置 postfix\"></a>设置 postfix</h3><blockquote>\n<p>设置 postfix 为开机自启动，目的：支持 gitlab 邮件发送。</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">systemctl enable postfix &amp;&amp; systemctl start postfix<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"rpm-包安装\"><a href=\"#rpm-包安装\" class=\"headerlink\" title=\"rpm 包安装\"></a>rpm 包安装</h3><p>官方参考链接：<a href=\"https://packages.gitlab.com/gitlab/gitlab-ce/install#bash-rpm\">https://packages.gitlab.com/gitlab/gitlab-ce/install#bash-rpm</a></p>\n<p>使用以下命令进行快速安装：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">curl -s https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>EL 是 Red Hat Enterprise Linux 的简写 </p>\n<ul>\n<li>EL6 软件包用于在 Red Hat 6.x, CentOS 6.x, and CloudLinux 6.x 的安装。</li>\n<li>EL5 软件包用于在 Red Hat 5.x, CentOS 5.x, CloudLinux 5.x 的安装。</li>\n<li>EL7 软件包用于在 Red Hat 7.x, CentOS 7.x, and CloudLinux 7.x 的安装。</li>\n</ul>\n</blockquote>\n<p>所以这里我们采用安装 EL7 的模式，安装命令如下：</p>\n<p>官方参考链接：<a href=\"https://packages.gitlab.com/gitlab/gitlab-ce/packages/el/7/gitlab-ce-15.8.5-ce.0.el7.x86_64.rpm\">https://packages.gitlab.com/gitlab/gitlab-ce/packages/el/7/gitlab-ce-15.8.5-ce.0.el7.x86_64.rpm</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo yum -y install gitlab-ce-15.8.5-ce.0.el7.x86_64<br></code></pre></td></tr></table></figure>\n\n<p>安装完毕后的主体文件都在 <code>/opt/gitlab/</code> 目录下，可自行翻阅按需修改。</p>\n<h2 id=\"修改-root-密码\"><a href=\"#修改-root-密码\" class=\"headerlink\" title=\"修改 root 密码\"></a>修改 root 密码</h2><p>官方修改密码：(<a href=\"https://link.jianshu.com/?t=http://docs.gitlab.com/ce/security/reset_root_password.html\">http://docs.gitlab.com/ce/security/reset_root_password.html</a>)</p>\n<p>在root用户下，执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">老版命令</span><br>gitlab-rails console production<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">新版命令</span><br>gitlab-rails console -e production<br></code></pre></td></tr></table></figure>\n\n<p>获得用户数据，修改用户密码</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ruby\">[root<span class=\"hljs-variable\">@svr34</span> bin]<span class=\"hljs-comment\"># gitlab-rails console production</span><br><span class=\"hljs-title class_\">Loading</span> production environment (<span class=\"hljs-title class_\">Rails</span> <span class=\"hljs-number\">4.2</span>.<span class=\"hljs-number\">5.2</span>)<br><br><span class=\"hljs-meta prompt_\">irb(main):001:0&gt;</span> user = <span class=\"hljs-title class_\">User</span>.where(<span class=\"hljs-symbol\">id:</span> <span class=\"hljs-number\">1</span>).first<br>=&gt; #&lt;User id:1 @root&gt;<br><br><span class=\"hljs-meta prompt_\">irb(main):002:0&gt;</span> user.password=<span class=\"hljs-string\">&quot;7613302589&quot;</span><br>=&gt; <span class=\"hljs-string\">&quot;12345678&quot;</span><br><br><span class=\"hljs-meta prompt_\">irb(main):003:0&gt;</span> user.password_confirmation=<span class=\"hljs-string\">&quot;7613302589&quot;</span><br>=&gt; <span class=\"hljs-string\">&quot;12345678&quot;</span><br><br><span class=\"hljs-meta prompt_\">irb(main):004:0&gt;</span> user.save!<br>=&gt; <span class=\"hljs-literal\">true</span><br><br><span class=\"hljs-meta prompt_\">irb(main):005:0&gt;</span> quit<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"修改访问-URL\"><a href=\"#修改访问-URL\" class=\"headerlink\" title=\"修改访问 URL\"></a>修改访问 URL</h2><p>编辑 gitlab.rb 文件。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">vim /etc/gitlab/gitlab.rb</span><br><br>external_url &#x27;http://192.168.50.245:8138&#x27;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>此处注意别使用已被占用的端口！（如8080）</p>\n</blockquote>\n<img src=\"/2023/04/09/%E8%BF%90%E7%BB%B4/gitlab%20%E5%AE%89%E8%A3%85/image-20230402104707147.png\" alt=\"image-20230402104707147\" style=\"zoom:50%;\">\n\n<h2 id=\"重置并启动-Gitlab\"><a href=\"#重置并启动-Gitlab\" class=\"headerlink\" title=\"重置并启动 Gitlab\"></a>重置并启动 Gitlab</h2><p>重置：</p>\n<blockquote>\n<p><em>注：第一次预计需要几分钟</em></p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">gitlab-ctl reconfigure<br></code></pre></td></tr></table></figure>\n\n<p>启动：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">gitlab-ctl restart<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"端口用途一览\"><a href=\"#端口用途一览\" class=\"headerlink\" title=\"端口用途一览\"></a>端口用途一览</h2><img src=\"/2023/04/09/%E8%BF%90%E7%BB%B4/gitlab%20%E5%AE%89%E8%A3%85/image-20230402124422358.png\" alt=\"image-20230402124422358\" style=\"zoom: 67%;\">\n\n<table>\n<thead>\n<tr>\n<th>端口号</th>\n<th>归类</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>8060</td>\n<td>Nginx</td>\n<td>用途不明</td>\n</tr>\n<tr>\n<td>8138</td>\n<td>Nginx</td>\n<td>第二个 nginx 的端口，就是 gitlab 实例的主端口，所有外部访问的 http 均通过 gitlab 内置的 nginx 服务器处理，并使用该端口，当然暴露地址为外网0.0.0.0</td>\n</tr>\n<tr>\n<td>9121</td>\n<td>Redis</td>\n<td>redis_exporter 的 9121，是 gitlab 内置 redis 数据库，只向本机暴露</td>\n</tr>\n<tr>\n<td>9090</td>\n<td>Prometheus</td>\n<td>向本机暴露，用途应该是创建和管理时间序列事件的触发，如通知那些功能</td>\n</tr>\n<tr>\n<td>9187</td>\n<td>PostgreSQL</td>\n<td>postgres_expoter 的9187，是 gitlab 内置的 postegres 数据库，向本机暴露</td>\n</tr>\n<tr>\n<td>9093</td>\n<td>Ruby</td>\n<td>config.ru 的 9093，gitlab 使用 ruby 的 unicorn 作为 app server 运行，管理 worker 等功能，比较重要，默认为 8080，由于 8080 比较受欢迎，这个端口基本上都得改，暴露可自行设定；</td>\n</tr>\n<tr>\n<td>9168</td>\n<td>Ruby</td>\n<td>用途不明</td>\n</tr>\n<tr>\n<td>9100</td>\n<td>NodeJS</td>\n<td>node_exporter 的 9100，一个 nodejs 进程，用于实现测量所在的机器的资源状态比如cpu、内存、硬盘等数据的功能</td>\n</tr>\n<tr>\n<td>9229</td>\n<td>Go</td>\n<td>gitlab-workhors 的 9229，一个是用 go 语言写的组件，是 gitlab 发展途中添加进来的用于优化 git over http 的组件，具体历史可以查看<a href=\"https://www.oschina.net/translate/a-brief-history-of-gitlab-workhorse\">这里</a>了解gitlab-workhors的由来</td>\n</tr>\n<tr>\n<td>8082</td>\n<td>其他</td>\n<td>sidekiq 的 8082，是一种多线程后台处理系统，用于实现 gitlab 异步运行任务</td>\n</tr>\n<tr>\n<td>9236</td>\n<td>其他</td>\n<td>gitaly 的9236，是一个能够提供访问 git 仓库的 RPC 远程调用功能的服务，属于 gitlab 的一个托管组件<br>gitlab 的配置文件位于<code>/etc/gitlab/gitlab/gitlab.rb</code>，使用vim等工具可以直接修改，各种参数配置修改可以参考<a href=\"https://docs.gitlab.com/\">官方文档</a></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"nginx-代理\"><a href=\"#nginx-代理\" class=\"headerlink\" title=\"nginx 代理\"></a>nginx 代理</h2><h3 id=\"关闭-selinux\"><a href=\"#关闭-selinux\" class=\"headerlink\" title=\"关闭 selinux\"></a>关闭 selinux</h3><blockquote>\n<p><strong>什么是selinux ？</strong></p>\n<p>SELinux：即安全增强型 Linux（Security-Enhanced Linux）</p>\n<p>它是一个 Linux 内核模块，也是 Linux 的一个安全子系统</p>\n<p>它主要由美国国家安全局开发，主要作用是最大限度地减小系统中服务进程可访问的资源（最小权限原则）</p>\n<p><strong>为什么要关闭 selinux ？</strong></p>\n<p>有的软件对于 selinux 的安全规则支持不够好，就会建议在安装前把 selinux 先关闭，例如 k8s，本次在启动 nginx 的过程中发现 gitlab 会报 502 的错误，经由使用 <code>journalctl -xe</code>  命令发现有 selinux 的相关错误信息，所以需要把 selinux 做一次人工的手动禁用。</p>\n<p>selinux 常用命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">查看审计日志</span><br>cat /var/log/audit/audit.log<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">分析一个文件</span><br>sealert -a /var/log/audit/audit.log<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">查询系统中的布尔型规则及其状态</span><br>getsebool -a<br></code></pre></td></tr></table></figure>\n</blockquote>\n<p>selinux的三种运行模式:</p>\n<ul>\n<li>enforcing: 强制模式，SELinux 正在运行中，已经在限制 domain&#x2F;type</li>\n<li>permissive: 宽容模式：SELinux 正在运行中，但仅发出警告信息,并不会实际限制 domain&#x2F;type 的存取（permissive模式可以用在测试环境中供调试规则时使用）</li>\n<li>disabled: 关闭，SELinux 没有实际运行。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sestatus -v # 查看当前信息<br>getenforce # 查看当前运行模式<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"临时关闭\"><a href=\"#临时关闭\" class=\"headerlink\" title=\"临时关闭\"></a>临时关闭</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">0: Permissive</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">1: Enforcing</span><br><br>setenforce 0<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"永久关闭\"><a href=\"#永久关闭\" class=\"headerlink\" title=\"永久关闭\"></a>永久关闭</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">vim /etc/selinux/config</span><br><br>SELINUX=disabled<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"外部-nginx-安装\"><a href=\"#外部-nginx-安装\" class=\"headerlink\" title=\"外部 nginx 安装\"></a>外部 nginx 安装</h3><p>添加 Nginx 到 YUM 源</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm<br></code></pre></td></tr></table></figure>\n\n<p>安装 nginx</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo yum install -y nginx<br></code></pre></td></tr></table></figure>\n\n<p>启用 nginx</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo systemctl enable nginx.service &amp;&amp; sudo systemctl start nginx.service<br></code></pre></td></tr></table></figure>\n\n<p>Nginx 常用配置目录如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">资源文件目录</span><br>/usr/share/nginx/html/<br>├── 50x.html<br>└── index.html<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">配置文件主目录</span><br>/etc/nginx/<br>├── conf.d<br>│   ├── default.conf<br>│   └── gitlab.conf # gitlab 配置文件<br>├── fastcgi_params<br>├── mime.types<br>├── modules<br>├── nginx.conf # nginx 根目录配置文件<br>├── scgi_params<br>└── uwsgi_params<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"代理-gitlab-内部-nginx\"><a href=\"#代理-gitlab-内部-nginx\" class=\"headerlink\" title=\"代理 gitlab 内部 nginx\"></a>代理 gitlab 内部 nginx</h3><p>gitlab 服务器主体框架如下：</p>\n<img src=\"/2023/04/09/%E8%BF%90%E7%BB%B4/gitlab%20%E5%AE%89%E8%A3%85/gitlab-frame.png\" class alt=\"gitlab服务器框架\">\n\n<h4 id=\"nginx-配置文件\"><a href=\"#nginx-配置文件\" class=\"headerlink\" title=\"nginx 配置文件\"></a>nginx 配置文件</h4><p>gitlab.conf 配置文件内容如下：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-comment\"># 主访问入口</span><br><span class=\"hljs-section\">server</span> &#123;<br>  <span class=\"hljs-attribute\">listen</span> <span class=\"hljs-number\">80</span>;<br>  <span class=\"hljs-attribute\">server_name</span> gitlab.yahya.top;<br><br>  <span class=\"hljs-comment\"># 入口反向代理</span><br>  <span class=\"hljs-section\">location</span> / &#123;<br>    <span class=\"hljs-attribute\">proxy_set_header</span> Host <span class=\"hljs-variable\">$host</span>;<br>    <span class=\"hljs-attribute\">proxy_set_header</span> X-Real-IP <span class=\"hljs-variable\">$remote_addr</span>;<br>    <span class=\"hljs-attribute\">proxy_set_header</span> X-Forwarded-For <span class=\"hljs-variable\">$proxy_add_x_forwarded_for</span>;<br>    <span class=\"hljs-attribute\">proxy_redirect</span> <span class=\"hljs-literal\">off</span>;<br>    <span class=\"hljs-comment\"># 配置反向代理地址</span><br>    <span class=\"hljs-attribute\">proxy_pass</span> http://192.168.50.245:8138;<br>    <span class=\"hljs-attribute\">proxy_http_version</span> <span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-comment\"># 一定记得要配置 body_size</span><br>    <span class=\"hljs-attribute\">client_max_body_size</span> <span class=\"hljs-number\">1024m</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>修改 gitlab.rb 文件</p>\n<blockquote>\n<p>external_url 的配置直接影响到 gitlab 系统中所有 http 入口的地址，比如 git 仓库的 http 地址，gitlab 访问页面的地址，注册回调的地址，邮件验证的地址等。</p>\n</blockquote>\n<p>编辑 gitlab.rb 文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">vim /etc/gitlab/gitlab.rb<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"配置域名\"><a href=\"#配置域名\" class=\"headerlink\" title=\"配置域名\"></a>配置域名</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">external_url &#x27;http://gitlab.yahya.top&#x27;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"修改对外主端口\"><a href=\"#修改对外主端口\" class=\"headerlink\" title=\"修改对外主端口\"></a>修改对外主端口</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">nginx[&#x27;listen_port&#x27;] = 8138<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"max-body-size-配置\"><a href=\"#max-body-size-配置\" class=\"headerlink\" title=\"max_body_size 配置\"></a>max_body_size 配置</h4><p>gitlab 是可以使用 http 和 ssh 两种方式来进行git操作的，当使用 http 时，是通过post请求发送内容，若 nginx 在代理时没有设置 body_size 时将会收到：413 Request Entity Too Large 的错误，push 不了代码，内外部的 nginx 都需要配置，在 gitlab.rb 中添加：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">nginx[&#x27;client_max_body_size&#x27;] = &#x27;1024m&#x27;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"认证普通用户\"><a href=\"#认证普通用户\" class=\"headerlink\" title=\"认证普通用户\"></a>认证普通用户</h2><blockquote>\n<p>默认情况下注册的用户是需要进行审批，否则在没有审批的情况下登录会报以下的错误：</p>\n<p>Your account is pending approval from your GitLab administrator and hence bl</p>\n</blockquote>\n<p>登录 root 用户，点击头像这里</p>\n<img src=\"/2023/04/09/%E8%BF%90%E7%BB%B4/gitlab%20%E5%AE%89%E8%A3%85/image-20230402122006519.png\" class alt=\"image-20230402122006519\">\n\n<p>点击 Overview -&gt; Users -&gt; Pending approval，审批需要注册的用户即可。</p>\n<img src=\"/2023/04/09/%E8%BF%90%E7%BB%B4/gitlab%20%E5%AE%89%E8%A3%85/image-20230402122531351.png\" class alt=\"image-20230402122531351\">\n\n<h2 id=\"临时关闭分支保护\"><a href=\"#临时关闭分支保护\" class=\"headerlink\" title=\"临时关闭分支保护\"></a>临时关闭分支保护</h2><blockquote>\n<p>git push 报错 pre-receive hook declined，原因为 master 为受保护分支，无法强推代码到 master 分支上。使用 Owner 以及 Admin 角色账号推送都无法成功。</p>\n</blockquote>\n<p>Settings -&gt; Repository -&gt; Protected Branches 临时 Unprotect master 分支(强推成功后一定要重新添加为受保护的分支)</p>\n<img src=\"/2023/04/09/%E8%BF%90%E7%BB%B4/gitlab%20%E5%AE%89%E8%A3%85/image-20230402131743121.png\" alt=\"image-20230402131743121\" style=\"zoom:67%;\">\n\n<p><strong>关于 GitLab 访问权限</strong></p>\n<p>访问权限 - Visibility Level：</p>\n<p>这个是在建立项目时就需要选定的，主要用于决定哪些人可以访问此项目，包含 3 种：</p>\n<ul>\n<li><strong>Private - 私有</strong>，只有属于该项目成员才有看到</li>\n<li><strong>Internal - 内部</strong>，用 GitLab 账号的人都看到</li>\n<li><strong>Public - 公开</strong>，任何人可以看到</li>\n</ul>\n<p>开源项目和组设置的是 Internal。</p>\n<p>行为权限：</p>\n<p>在满足行为权限之前，必须具备访问权限（如果没有访问权限，那就无所谓行为权限了），行为权限是指对该项目进行某些操作，比如提交、创建问题、创建新分支、删除分支、创建标签、删除标签等角色。</p>\n<blockquote>\n<p>官方权限解释文档：<a href=\"https://docs.gitlab.com/ee/user/permissions.html#project-members-permissions\">https://docs.gitlab.com/ee/user/permissions.html#project-members-permissions</a></p>\n</blockquote>\n<ul>\n<li><p><strong>Guest - 访客</strong></p>\n<p>可以创建 issue、发表评论，不能读写版本库。</p>\n</li>\n<li><p><strong>Reporter  - 报告者</strong></p>\n<p>可以理解为测试员、产品经理等，一般负责提交 issue 等<br> 可以克隆代码，不能提交，QA、PM 可以赋予这个权限。</p>\n</li>\n<li><p><strong>Developer - 开发者</strong></p>\n<p>可以克隆代码、开发、提交、push，RD 可以赋予这个权限。</p>\n</li>\n<li><p><strong>Master - 主人</strong></p>\n<p>可以创建项目、添加 tag、保护分支、添加项目成员、编辑项目，核心 RD 负责人可以赋予这个权限。</p>\n</li>\n<li><p><strong>Owner - 拥有者</strong></p>\n<p>可以设置项目访问权限 - Visibility Level、删除项目、迁移项目、管理组成员，开发组 Leader 可以赋予这个权限。</p>\n</li>\n<li><p><strong>Maintainer - 维护者</strong></p>\n<p>权限与 Owner 差不多，但无删除项目等权限。</p>\n</li>\n</ul>\n<h2 id=\"参见错误\"><a href=\"#参见错误\" class=\"headerlink\" title=\"参见错误\"></a>参见错误</h2><p>502 错误：</p>\n<p>首先保证Gitlab可用运行内存大于 <strong>4G</strong>，端口未被占用</p>\n<p>再赋予<strong>权限</strong>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">chmod -R 755 /var/log/gitlab<br></code></pre></td></tr></table></figure>\n\n<p>再重置重启，访问后仍然可能遇到502，不过我刷新2次就一切ok了。</p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p><a href=\"https://blog.hobairiku.site/2018/02/26/gitlab-setup/#1-%E5%87%86%E5%A4%87\">使用Nginx搭建并代理GitLab服务器</a></p>\n<p><a href=\"https://blog.csdn.net/Abysscarry/article/details/79402695\">Centos7 搭建Gitlab服务器并配置项目全过程</a></p>\n<p><a href=\"https://cloud.tencent.com/developer/article/1918458?from=15425&areaSource=102001.1&traceId=ENuxuOXF_A89HJy85bkR3\">gitlab配置域名并https访问</a></p>\n<p><a href=\"https://www.cnblogs.com/architectforest/p/12987499.html\">linux(centos8):禁用selinux(临时关闭&#x2F;永久关闭)</a></p>\n","tags":[{"name":"gitlab1","slug":"gitlab1","permalink":"https://blog.yahyav2rayssr.top/tags/gitlab1/"}]}]